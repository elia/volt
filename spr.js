(function(undefined) {
  if (typeof(this.Opal) !== 'undefined') {
    console.warn('Opal already loaded. Loading twice can cause troubles, please fix your setup.');
    return this.Opal;
  }

  // The Opal object that is exposed globally
  var Opal = this.Opal = {};

  // All bridged classes - keep track to donate methods from Object
  var bridged_classes = Opal.bridged_classes = [];

  // TopScope is used for inheriting constants from the top scope
  var TopScope = function(){};

  // Opal just acts as the top scope
  TopScope.prototype = Opal;

  // To inherit scopes
  Opal.constructor = TopScope;

  // List top scope constants
  Opal.constants = [];

  // This is a useful reference to global object inside ruby files
  Opal.global = this;

  // Minify common function calls
  var $hasOwn = Opal.hasOwnProperty;
  var $slice  = Opal.slice = Array.prototype.slice;

  // Generates unique id for every ruby object
  var unique_id = 0;

  // Return next unique id
  Opal.uid = function() {
    return unique_id++;
  };

  // Table holds all class variables
  Opal.cvars = {};

  // Globals table
  Opal.gvars = {};

  /**
    Get a constant on the given scope. Every class and module in Opal has a
    scope used to store, and inherit, constants. For example, the top level
    `Object` in ruby has a scope accessible as `Opal.Object.$$scope`.

    To get the `Array` class using this scope, you could use:

        Opal.Object.$$scope.get("Array")

    If a constant with the given name cannot be found, then a dispatch to the
    class/module's `#const_method` is called, which by default will raise an
    error.

    @param [String] name the name of the constant to lookup
    @returns [RubyObject]
  */
  Opal.get = function(name) {
    var constant = this[name];

    if (constant == null) {
      return this.base.$const_missing(name);
    }

    return constant;
  };

  /*
   * Create a new constants scope for the given class with the given
   * base. Constants are looked up through their parents, so the base
   * scope will be the outer scope of the new klass.
   */
  function create_scope(base, klass, id) {
    var const_alloc = function() {};
    var const_scope = const_alloc.prototype = new base.constructor();

    klass.$$scope       = const_scope;
    klass.$$base_module = base.base;

    const_scope.base        = klass;
    const_scope.constructor = const_alloc;
    const_scope.constants   = [];

    if (id) {
      klass.$$orig_scope = base;
      base[id] = base.constructor[id] = klass;
      base.constants.push(id);
    }
  }

  Opal.create_scope = create_scope;

  /*
   * A `class Foo; end` expression in ruby is compiled to call this runtime
   * method which either returns an existing class of the given name, or creates
   * a new class in the given `base` scope.
   *
   * If a constant with the given name exists, then we check to make sure that
   * it is a class and also that the superclasses match. If either of these
   * fail, then we raise a `TypeError`. Note, superklass may be null if one was
   * not specified in the ruby code.
   *
   * We pass a constructor to this method of the form `function ClassName() {}`
   * simply so that classes show up with nicely formatted names inside debuggers
   * in the web browser (or node/sprockets).
   *
   * The `base` is the current `self` value where the class is being created
   * from. We use this to get the scope for where the class should be created.
   * If `base` is an object (not a class/module), we simple get its class and
   * use that as the base instead.
   *
   * @param [Object] base where the class is being created
   * @param [Class] superklass superclass of the new class (may be null)
   * @param [String] id the name of the class to be created
   * @param [Function] constructor function to use as constructor
   * @return [Class] new or existing ruby class
   */
  Opal.klass = function(base, superklass, id, constructor) {
    // If base is an object, use its class
    if (!base.$$is_class) {
      base = base.$$class;
    }

    // Not specifying a superclass means we can assume it to be Object
    if (superklass === null) {
      superklass = ObjectClass;
    }

    var klass = base.$$scope[id];

    // If a constant exists in the scope, then we must use that
    if ($hasOwn.call(base.$$scope, id) && klass.$$orig_scope === base.$$scope) {
      // Make sure the existing constant is a class, or raise error
      if (!klass.$$is_class) {
        throw Opal.TypeError.$new(id + " is not a class");
      }

      // Make sure existing class has same superclass
      if (superklass !== klass.$$super && superklass !== ObjectClass) {
        throw Opal.TypeError.$new("superclass mismatch for class " + id);
      }
    }
    else if (typeof(superklass) === 'function') {
      // passed native constructor as superklass, so bridge it as ruby class
      return bridge_class(id, superklass);
    }
    else {
      // if class doesnt exist, create a new one with given superclass
      klass = boot_class(superklass, constructor);

      // name class using base (e.g. Foo or Foo::Baz)
      klass.$$name = id;

      // every class gets its own constant scope, inherited from current scope
      create_scope(base.$$scope, klass, id);

      // Name new class directly onto current scope (Opal.Foo.Baz = klass)
      base[id] = base.$$scope[id] = klass;

      // Copy all parent constants to child, unless parent is Object
      if (superklass !== ObjectClass && superklass !== BasicObjectClass) {
        donate_constants(superklass, klass);
      }

      // call .inherited() hook with new class on the superclass
      if (superklass.$inherited) {
        superklass.$inherited(klass);
      }
    }

    return klass;
  };

  // Create generic class with given superclass.
  function boot_class(superklass, constructor) {
    var alloc = boot_class_alloc(null, constructor, superklass)

    return boot_class_object(superklass, alloc);
  }

  // Make `boot_class` available to the JS-API
  Opal.boot = boot_class;

  /*
   * The class object itself (as in `Class.new`)
   *
   * @param [(Opal) Class] superklass Another class object (as in `Class.new`)
   * @param [constructor]  alloc      The constructor that holds the prototype
   *                                  that will be used for instances of the
   *                                  newly constructed class.
   */
  function boot_class_object(superklass, alloc) {
    var singleton_class = function() {};
    singleton_class.prototype = superklass.constructor.prototype;

    function OpalClass() {}
    OpalClass.prototype = new singleton_class();

    var klass = new OpalClass();

    setup_module_or_class_object(klass, OpalClass, superklass, alloc.prototype);

    // @property $$alloc This is the constructor of instances of the current
    //                   class. Its prototype will be used for method lookup
    klass.$$alloc = alloc;

    // @property $$proto.$$class Make available to instances a reference to the
    //                           class they belong to.
    klass.$$proto.$$class = klass;

    return klass;
  }

  /*
   * Adds common/required properties to a module or class object
   * (as in `Module.new` / `Class.new`)
   *
   * @param module      The module or class that needs to be prepared
   *
   * @param constructor The constructor of the module or class itself,
   *                    usually it's already assigned by using `new`. Some
   *                    ipothesis on why it's needed can be found below.
   *
   * @param superklass  The superclass of the class/module object, for modules
   *                    is `Module` (of `ModuleClass` in JS context)
   *
   * @param prototype   The prototype on which the class/module methods will
   *                    be stored.
   */
  function setup_module_or_class_object(module, constructor, superklass, prototype) {
    // @property $$id Each class is assigned a unique `id` that helps
    //                comparation and implementation of `#object_id`
    module.$$id = unique_id++;

    // @property $$proto This is the prototype on which methods will be defined
    module.$$proto = prototype;

    // @property constructor keeps a ref to the constructor, but apparently the
    //                       constructor is already set on:
    //
    //                          `var module = new constructor` is called.
    //
    //                       Maybe there are some browsers not abiding (IE6?)
    module.constructor = constructor;

    // @property $$is_class Clearly mark this as a class-like
    module.$$is_class = true;

    // @property $$super the superclass, doesn't get changed by module inclusions
    module.$$super = superklass;

    // @property $$parent direct parent class or module
    //                    starts with the superclass, after module inclusion is
    //                    the last included module
    module.$$parent = superklass;

    // @property $$methods keeps track of methods defined on the class
    //                     but seems to be used just by `define_basic_object_method`
    //                     and for donating (Ruby) Object methods to bridged classes
    //                     TODO: check if it can be removed
    module.$$methods = [];

    // @property $$inc included modules
    module.$$inc = [];
  }

  /**
    Define new module (or return existing module). The given `base` is basically
    the current `self` value the `module` statement was defined in. If this is
    a ruby module or class, then it is used, otherwise if the base is a ruby
    object then that objects real ruby class is used (e.g. if the base is the
    main object, then the top level `Object` class is used as the base).

    If a module of the given name is already defined in the base, then that
    instance is just returned.

    If there is a class of the given name in the base, then an error is
    generated instead (cannot have a class and module of same name in same base).

    Otherwise, a new module is created in the base with the given name, and that
    new instance is returned back (to be referenced at runtime).

    @param [RubyModule or Class] base class or module this definition is inside
    @param [String] id the name of the new (or existing) module
    @returns [RubyModule]
  */
  Opal.module = function(base, id) {
    var module;

    if (!base.$$is_class) {
      base = base.$$class;
    }

    if ($hasOwn.call(base.$$scope, id)) {
      module = base.$$scope[id];

      if (!module.$$is_mod && module !== ObjectClass) {
        throw Opal.TypeError.$new(id + " is not a module");
      }
    }
    else {
      module = boot_module_object();
      module.$$name = id;

      create_scope(base.$$scope, module, id);

      // Name new module directly onto current scope (Opal.Foo.Baz = module)
      base[id] = base.$$scope[id] = module;
    }

    return module;
  };

  /*
   * Internal function to create a new module instance. This simply sets up
   * the prototype hierarchy and method tables.
   */
  function boot_module_object() {
    var mtor = function() {};
    mtor.prototype = ModuleClass.constructor.prototype;

    function module_constructor() {}
    module_constructor.prototype = new mtor();

    var module = new module_constructor();
    var module_prototype = {};

    setup_module_or_class_object(module, module_constructor, ModuleClass, module_prototype);

    module.$$is_mod = true;
    module.$$dep    = [];

    return module;
  }

  /**
    Return the singleton class for the passed object.

    If the given object alredy has a singleton class, then it will be stored on
    the object as the `$$meta` property. If this exists, then it is simply
    returned back.

    Otherwise, a new singleton object for the class or object is created, set on
    the object at `$$meta` for future use, and then returned.

    @param [RubyObject] object the ruby object
    @returns [RubyClass] the singleton class for object
  */
  Opal.get_singleton_class = function(object) {
    if (object.$$meta) {
      return object.$$meta;
    }

    if (object.$$is_class) {
      return build_class_singleton_class(object);
    }

    return build_object_singleton_class(object);
  };

  /**
    Build the singleton class for an existing class.

    NOTE: Actually in MRI a class' singleton class inherits from its
    superclass' singleton class which in turn inherits from Class.

    @param [RubyClass] klass
    @returns [RubyClass]
   */
  function build_class_singleton_class(klass) {
    var meta = new Opal.Class.$$alloc;

    meta.$$class = Opal.Class;
    meta.$$proto = klass.constructor.prototype;

    meta.$$is_singleton = true;
    meta.$$inc          = [];
    meta.$$methods      = [];
    meta.$$scope        = klass.$$scope;

    return klass.$$meta = meta;
  }

  /**
    Build the singleton class for a Ruby (non class) Object.

    @param [RubyObject] object
    @returns [RubyClass]
   */
  function build_object_singleton_class(object) {
    var orig_class = object.$$class,
        class_id   = "#<Class:#<" + orig_class.$$name + ":" + orig_class.$$id + ">>";

    var Singleton = function () {};
    var meta = Opal.boot(orig_class, Singleton);
    meta.$$name   = class_id;

    meta.$$proto  = object;
    meta.$$class  = orig_class.$$class;
    meta.$$scope  = orig_class.$$scope;
    meta.$$parent = orig_class;
    return object.$$meta = meta;
  }

  /**
    The actual inclusion of a module into a class.

    ## Class `$$parent` and `iclass`

    To handle `super` calls, every class has a `$$parent`. This parent is
    used to resolve the next class for a super call. A normal class would
    have this point to its superclass. However, if a class includes a module
    then this would need to take into account the module. The module would
    also have to then point its `$$parent` to the actual superclass. We
    cannot modify modules like this, because it might be included in more
    then one class. To fix this, we actually insert an `iclass` as the class'
    `$$parent` which can then point to the superclass. The `iclass` acts as
    a proxy to the actual module, so the `super` chain can then search it for
    the required method.

    @param [RubyModule] module the module to include
    @param [RubyClass] klass the target class to include module into
    @returns [null]
  */
  Opal.append_features = function(module, klass) {
    var included = klass.$$inc;

    // check if this module is already included in the klass
    for (var j = 0, jj = included.length; j < jj; j++) {
      if (included[j] === module) {
        return;
      }
    }

    included.push(module);
    module.$$dep.push(klass);

    // iclass
    var iclass = {
      $$name:   module.$$name,
      $$proto:  module.$$proto,
      $$parent: klass.$$parent,
      $$module: module,
      $$iclass: true
    };

    klass.$$parent = iclass;

    var donator   = module.$$proto,
        prototype = klass.$$proto,
        methods   = module.$$methods;

    for (var i = 0, length = methods.length; i < length; i++) {
      var method = methods[i], current;


      if ( prototype.hasOwnProperty(method) &&
          !(current = prototype[method]).$$donated && !current.$$stub ) {
        // if the target class already has a method of the same name defined
        // and that method was NOT donated, then it must be a method defined
        // by the class so we do not want to override it
      }
      else {
        prototype[method] = donator[method];
        prototype[method].$$donated = true;
      }
    }

    if (klass.$$dep) {
      donate_methods(klass, methods.slice(), true);
    }

    donate_constants(module, klass);
  };

  // Boot a base class (makes instances).
  function boot_class_alloc(id, constructor, superklass) {
    if (superklass) {
      var ctor = function() {};
          ctor.prototype   = superklass.$$proto || superklass.prototype;

      if (id) {
        ctor.displayName = id;
      }

      constructor.prototype = new ctor();
    }

    constructor.prototype.constructor = constructor;

    return constructor;
  }

  /*
   * Builds the class object for core classes:
   * - make the class object have a singleton class
   * - make the singleton class inherit from its parent singleton class
   *
   * @param id         [String]      the name of the class
   * @param alloc      [Function]    the constructor for the core class instances
   * @param superclass [Class alloc] the constructor of the superclass
   */
  function boot_core_class_object(id, alloc, superclass) {
    var superclass_constructor = function() {};
        superclass_constructor.prototype = superclass.prototype;

    var singleton_class = function() {};
        singleton_class.prototype = new superclass_constructor();

    singleton_class.displayName = "#<Class:"+id+">";

    // the singleton_class acts as the class object constructor
    var klass = new singleton_class();

    setup_module_or_class_object(klass, singleton_class, superclass, alloc.prototype);

    klass.$$alloc = alloc;
    klass.$$name  = id;

    // Give all instances a ref to their class
    alloc.prototype.$$class = klass;

    Opal[id] = klass;
    Opal.constants.push(id);

    return klass;
  }

  /*
   * For performance, some core ruby classes are toll-free bridged to their
   * native javascript counterparts (e.g. a ruby Array is a javascript Array).
   *
   * This method is used to setup a native constructor (e.g. Array), to have
   * its prototype act like a normal ruby class. Firstly, a new ruby class is
   * created using the native constructor so that its prototype is set as the
   * target for th new class. Note: all bridged classes are set to inherit
   * from Object.
   *
   * Bridged classes are tracked in `bridged_classes` array so that methods
   * defined on Object can be "donated" to all bridged classes. This allows
   * us to fake the inheritance of a native prototype from our Object
   * prototype.
   *
   * Example:
   *
   *    bridge_class("Proc", Function);
   *
   * @param [String] name the name of the ruby class to create
   * @param [Function] constructor native javascript constructor to use
   * @return [Class] returns new ruby class
   */
  function bridge_class(name, constructor) {
    var klass = boot_class_object(ObjectClass, constructor);

    klass.$$name = name;

    create_scope(Opal, klass, name);
    bridged_classes.push(klass);

    var object_methods = BasicObjectClass.$$methods.concat(ObjectClass.$$methods);

    for (var i = 0, len = object_methods.length; i < len; i++) {
      var meth = object_methods[i];
      constructor.prototype[meth] = ObjectClass.$$proto[meth];
    }

    add_stubs_subscriber(constructor.prototype);

    return klass;
  }

  /*
   * constant assign
   */
  Opal.casgn = function(base_module, name, value) {
    var scope = base_module.$$scope;

    if (value.$$is_class && value.$$name === nil) {
      value.$$name = name;
    }

    if (value.$$is_class) {
      value.$$base_module = base_module;
    }

    scope.constants.push(name);
    return scope[name] = value;
  };

  /*
   * constant decl
   */
  Opal.cdecl = function(base_scope, name, value) {
    base_scope.constants.push(name);
    return base_scope[name] = value;
  };

  /*
   * When a source module is included into the target module, we must also copy
   * its constants to the target.
   */
  function donate_constants(source_mod, target_mod) {
    var source_constants = source_mod.$$scope.constants,
        target_scope     = target_mod.$$scope,
        target_constants = target_scope.constants;

    for (var i = 0, length = source_constants.length; i < length; i++) {
      target_constants.push(source_constants[i]);
      target_scope[source_constants[i]] = source_mod.$$scope[source_constants[i]];
    }
  };

  /*
   * Methods stubs are used to facilitate method_missing in opal. A stub is a
   * placeholder function which just calls `method_missing` on the receiver.
   * If no method with the given name is actually defined on an object, then it
   * is obvious to say that the stub will be called instead, and then in turn
   * method_missing will be called.
   *
   * When a file in ruby gets compiled to javascript, it includes a call to
   * this function which adds stubs for every method name in the compiled file.
   * It should then be safe to assume that method_missing will work for any
   * method call detected.
   *
   * Method stubs are added to the BasicObject prototype, which every other
   * ruby object inherits, so all objects should handle method missing. A stub
   * is only added if the given property name (method name) is not already
   * defined.
   *
   * Note: all ruby methods have a `$` prefix in javascript, so all stubs will
   * have this prefix as well (to make this method more performant).
   *
   *    Opal.add_stubs(["$foo", "$bar", "$baz="]);
   *
   * All stub functions will have a private `$$stub` property set to true so
   * that other internal methods can detect if a method is just a stub or not.
   * `Kernel#respond_to?` uses this property to detect a methods presence.
   *
   * @param [Array] stubs an array of method stubs to add
   */
  Opal.add_stubs = function(stubs) {
    var subscribers = Opal.stub_subscribers;
    var subscriber;

    for (var i = 0, length = stubs.length; i < length; i++) {
      var method_name = stubs[i], stub = stub_for(method_name);

      for (var j = 0; j < subscribers.length; j++) {
        subscriber = subscribers[j];
        if (!(method_name in subscriber)) {
          subscriber[method_name] = stub;
        }
      }
    }
  };

  /*
   * Add a prototype to the subscribers list, and (TODO) add previously stubbed
   * methods.
   *
   * @param [Prototype]
   */
  function add_stubs_subscriber(prototype) {
    // TODO: Add previously stubbed methods too.
    Opal.stub_subscribers.push(prototype);
  }

  /*
   * Keep a list of prototypes that want method_missing stubs to be added.
   *
   * @default [Prototype List] BasicObject.prototype
   */
  Opal.stub_subscribers = [BasicObject.prototype];

  /*
   * Add a method_missing stub function to the given prototype for the
   * given name.
   *
   * @param [Prototype] prototype the target prototype
   * @param [String] stub stub name to add (e.g. "$foo")
   */
  function add_stub_for(prototype, stub) {
    var method_missing_stub = stub_for(stub);
    prototype[stub] = method_missing_stub;
  }

  /*
   * Generate the method_missing stub for a given method name.
   *
   * @param [String] method_name The js-name of the method to stub (e.g. "$foo")
   */
  function stub_for(method_name) {
    function method_missing_stub() {
      // Copy any given block onto the method_missing dispatcher
      this.$method_missing.$$p = method_missing_stub.$$p;

      // Set block property to null ready for the next call (stop false-positives)
      method_missing_stub.$$p = null;

      // call method missing with correct args (remove '$' prefix on method name)
      return this.$method_missing.apply(this, [method_name.slice(1)].concat($slice.call(arguments)));
    }

    method_missing_stub.$$stub = true;

    return method_missing_stub;
  }

  // Expose for other parts of Opal to use
  Opal.add_stub_for = add_stub_for;

  // Arity count error dispatcher
  Opal.ac = function(actual, expected, object, meth) {
    var inspect = (object.$$is_class ? object.$$name + '.' : object.$$class.$$name + '#') + meth;
    var msg = '[' + inspect + '] wrong number of arguments(' + actual + ' for ' + expected + ')';
    throw Opal.ArgumentError.$new(msg);
  };

  // Super dispatcher
  Opal.find_super_dispatcher = function(obj, jsid, current_func, iter, defs) {
    var dispatcher;

    if (defs) {
      dispatcher = obj.$$is_class ? defs.$$super : obj.$$class.$$proto;
    }
    else {
      if (obj.$$is_class) {
        dispatcher = obj.$$super;
      }
      else {
        dispatcher = find_obj_super_dispatcher(obj, jsid, current_func);
      }
    }

    dispatcher = dispatcher['$' + jsid];
    dispatcher.$$p = iter;

    return dispatcher;
  };

  // Iter dispatcher for super in a block
  Opal.find_iter_super_dispatcher = function(obj, jsid, current_func, iter, defs) {
    if (current_func.$$def) {
      return Opal.find_super_dispatcher(obj, current_func.$$jsid, current_func, iter, defs);
    }
    else {
      return Opal.find_super_dispatcher(obj, jsid, current_func, iter, defs);
    }
  };

  function find_obj_super_dispatcher(obj, jsid, current_func) {
    var klass = obj.$$meta || obj.$$class;
    jsid = '$' + jsid;

    while (klass) {
      if (klass.$$proto[jsid] === current_func) {
        // ok
        break;
      }

      klass = klass.$$parent;
    }

    // if we arent in a class, we couldnt find current?
    if (!klass) {
      throw new Error("could not find current class for super()");
    }

    klass = klass.$$parent;

    // else, let's find the next one
    while (klass) {
      var working = klass.$$proto[jsid];

      if (working && working !== current_func) {
        // ok
        break;
      }

      klass = klass.$$parent;
    }

    return klass.$$proto;
  };

  /*
   * Used to return as an expression. Sometimes, we can't simply return from
   * a javascript function as if we were a method, as the return is used as
   * an expression, or even inside a block which must "return" to the outer
   * method. This helper simply throws an error which is then caught by the
   * method. This approach is expensive, so it is only used when absolutely
   * needed.
   */
  Opal.ret = function(val) {
    Opal.returner.$v = val;
    throw Opal.returner;
  };

  // handles yield calls for 1 yielded arg
  Opal.yield1 = function(block, arg) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    if (block.length > 1 && arg.$$is_array) {
      return block.apply(null, arg);
    }
    else {
      return block(arg);
    }
  };

  // handles yield for > 1 yielded arg
  Opal.yieldX = function(block, args) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    if (block.length > 1 && args.length == 1) {
      if (args[0].$$is_array) {
        return block.apply(null, args[0]);
      }
    }

    if (!args.$$is_array) {
      args = $slice.call(args);
    }

    return block.apply(null, args);
  };

  // Finds the corresponding exception match in candidates.  Each candidate can
  // be a value, or an array of values.  Returns null if not found.
  Opal.rescue = function(exception, candidates) {
    for (var i = 0; i < candidates.length; i++) {
      var candidate = candidates[i];

      if (candidate.$$is_array) {
        var result = Opal.rescue(exception, candidate);

        if (result) {
          return result;
        }
      }
      else if (candidate['$==='](exception)) {
        return candidate;
      }
    }

    return null;
  };

  Opal.is_a = function(object, klass) {
    if (object.$$meta === klass) {
      return true;
    }

    var search = object.$$class;

    while (search) {
      if (search === klass) {
        return true;
      }

      for (var i = 0, length = search.$$inc.length; i < length; i++) {
        if (search.$$inc[i] == klass) {
          return true;
        }
      }

      search = search.$$super;
    }

    return false;
  };

  // Helper to convert the given object to an array
  Opal.to_ary = function(value) {
    if (value.$$is_array) {
      return value;
    }
    else if (value.$to_ary && !value.$to_ary.$$stub) {
      return value.$to_ary();
    }

    return [value];
  };

  /**
    Used to get a list of rest keyword arguments. Method takes the given
    keyword args, i.e. the hash literal passed to the method containing all
    keyword arguemnts passed to method, as well as the used args which are
    the names of required and optional arguments defined. This method then
    just returns all key/value pairs which have not been used, in a new
    hash literal.

    @param given_args [Hash] all kwargs given to method
    @param used_args [Object<String: true>] all keys used as named kwargs
    @return [Hash]
   */
  Opal.kwrestargs = function(given_args, used_args) {
    var keys      = [],
        map       = {},
        key       = null,
        given_map = given_args.smap;

    for (key in given_map) {
      if (!used_args[key]) {
        keys.push(key);
        map[key] = given_map[key];
      }
    }

    return Opal.hash2(keys, map);
  };

  /*
   * Call a ruby method on a ruby object with some arguments:
   *
   *   var my_array = [1, 2, 3, 4]
   *   Opal.send(my_array, 'length')     # => 4
   *   Opal.send(my_array, 'reverse!')   # => [4, 3, 2, 1]
   *
   * A missing method will be forwarded to the object via
   * method_missing.
   *
   * The result of either call with be returned.
   *
   * @param [Object] recv the ruby object
   * @param [String] mid ruby method to call
   */
  Opal.send = function(recv, mid) {
    var args = $slice.call(arguments, 2),
        func = recv['$' + mid];

    if (func) {
      return func.apply(recv, args);
    }

    return recv.$method_missing.apply(recv, [mid].concat(args));
  };

  Opal.block_send = function(recv, mid, block) {
    var args = $slice.call(arguments, 3),
        func = recv['$' + mid];

    if (func) {
      func.$$p = block;
      return func.apply(recv, args);
    }

    return recv.$method_missing.apply(recv, [mid].concat(args));
  };

  /*
   * Donate methods for a class/module
   */
  function donate_methods(klass, defined, indirect) {
    var methods = klass.$$methods, included_in = klass.$$dep;

    // if (!indirect) {
      klass.$$methods = methods.concat(defined);
    // }

    if (included_in) {
      for (var i = 0, length = included_in.length; i < length; i++) {
        var includee = included_in[i];
        var dest     = includee.$$proto;

        for (var j = 0, jj = defined.length; j < jj; j++) {
          var method = defined[j];

          dest[method] = klass.$$proto[method];
          dest[method].$$donated = true;
        }

        if (includee.$$dep) {
          donate_methods(includee, defined, true);
        }
      }
    }
  };

  /**
    Define the given method on the module.

    This also handles donating methods to all classes that include this
    module. Method conflicts are also handled here, where a class might already
    have defined a method of the same name, or another included module defined
    the same method.

    @param [RubyModule] module the module method defined on
    @param [String] jsid javascript friendly method name (e.g. "$foo")
    @param [Function] body method body of actual function
  */
  function define_module_method(module, jsid, body) {
    module.$$proto[jsid] = body;
    body.$$owner = module;

    module.$$methods.push(jsid);

    if (module.$$module_function) {
      module[jsid] = body;
    }

    var included_in = module.$$dep;

    if (included_in) {
      for (var i = 0, length = included_in.length; i < length; i++) {
        var includee = included_in[i];
        var dest = includee.$$proto;
        var current = dest[jsid];


        if (dest.hasOwnProperty(jsid) && !current.$$donated && !current.$$stub) {
          // target class has already defined the same method name - do nothing
        }
        else if (dest.hasOwnProperty(jsid) && !current.$$stub) {
          // target class includes another module that has defined this method
          var klass_includees = includee.$$inc;

          for (var j = 0, jj = klass_includees.length; j < jj; j++) {
            if (klass_includees[j] === current.$$owner) {
              var current_owner_index = j;
            }
            if (klass_includees[j] === module) {
              var module_index = j;
            }
          }

          // only redefine method on class if the module was included AFTER
          // the module which defined the current method body. Also make sure
          // a module can overwrite a method it defined before
          if (current_owner_index <= module_index) {
            dest[jsid] = body;
            dest[jsid].$$donated = true;
          }
        }
        else {
          // neither a class, or module included by class, has defined method
          dest[jsid] = body;
          dest[jsid].$$donated = true;
        }

        if (includee.$$dep) {
          donate_methods(includee, [jsid], true);
        }
      }
    }
  }

  /**
    Used to define methods on an object. This is a helper method, used by the
    compiled source to define methods on special case objects when the compiler
    can not determine the destination object, or the object is a Module
    instance. This can get called by `Module#define_method` as well.

    ## Modules

    Any method defined on a module will come through this runtime helper.
    The method is added to the module body, and the owner of the method is
    set to be the module itself. This is used later when choosing which
    method should show on a class if more than 1 included modules define
    the same method. Finally, if the module is in `module_function` mode,
    then the method is also defined onto the module itself.

    ## Classes

    This helper will only be called for classes when a method is being
    defined indirectly; either through `Module#define_method`, or by a
    literal `def` method inside an `instance_eval` or `class_eval` body. In
    either case, the method is simply added to the class' prototype. A special
    exception exists for `BasicObject` and `Object`. These two classes are
    special because they are used in toll-free bridged classes. In each of
    these two cases, extra work is required to define the methods on toll-free
    bridged class' prototypes as well.

    ## Objects

    If a simple ruby object is the object, then the method is simply just
    defined on the object as a singleton method. This would be the case when
    a method is defined inside an `instance_eval` block.

    @param [RubyObject or Class] obj the actual obj to define method for
    @param [String] jsid the javascript friendly method name (e.g. '$foo')
    @param [Function] body the literal javascript function used as method
    @returns [null]
  */
  Opal.defn = function(obj, jsid, body) {
    if (obj.$$is_mod) {
      define_module_method(obj, jsid, body);
    }
    else if (obj.$$is_class) {
      obj.$$proto[jsid] = body;

      if (obj === BasicObjectClass) {
        define_basic_object_method(jsid, body);
      }
      else if (obj === ObjectClass) {
        donate_methods(obj, [jsid]);
      }
    }
    else {
      obj[jsid] = body;
    }

    return nil;
  };

  /*
   * Define a singleton method on the given object.
   */
  Opal.defs = function(obj, jsid, body) {
    if (obj.$$is_class || obj.$$is_mod) {
      obj.constructor.prototype[jsid] = body;
    }
    else {
      obj[jsid] = body;
    }
  };

  function define_basic_object_method(jsid, body) {
    BasicObjectClass.$$methods.push(jsid);
    for (var i = 0, len = bridged_classes.length; i < len; i++) {
      bridged_classes[i].$$proto[jsid] = body;
    }
  }

  Opal.hash = function() {
    if (arguments.length == 1 && arguments[0].$$class == Opal.Hash) {
      return arguments[0];
    }

    var hash = new Opal.Hash.$$alloc(),
        keys = [],
        _map = {},
        smap = {},
        key, obj, length, khash;

    hash.map   = _map;
    hash.smap  = smap;
    hash.keys  = keys;

    if (arguments.length == 1) {
      if (arguments[0].$$is_array) {
        var args = arguments[0];

        for (var i = 0, ii = args.length; i < ii; i++) {
          var pair = args[i];

          if (pair.length !== 2) {
            throw Opal.ArgumentError.$new("value not of length 2: " + pair.$inspect());
          }

          key = pair[0];
          obj = pair[1];

          if (key.$$is_string) {
            khash = key;
            map = smap;
          } else {
            khash = key.$hash();
            map = _map;
          }

          if (map[khash] == null) {
            keys.push(key);
          }

          map[khash] = obj;
        }
      }
      else {
        obj = arguments[0];
        for (key in obj) {
          khash = key.$hash();
          map[khash] = obj[khash];
          keys.push(key);
        }
      }
    }
    else {
      length = arguments.length;
      if (length % 2 !== 0) {
        throw Opal.ArgumentError.$new("odd number of arguments for Hash");
      }

      for (var j = 0; j < length; j++) {
        key = arguments[j];
        obj = arguments[++j];

        if (key.$$is_string) {
          khash = key;
          map = smap;
        } else {
          khash = key.$hash();
          map = _map;
        }

        if (map[khash] == null) {
          keys.push(key);
        }

        map[khash] = obj;
      }
    }

    return hash;
  };

  /*
   * hash2 is a faster creator for hashes that just use symbols and
   * strings as keys. The map and keys array can be constructed at
   * compile time, so they are just added here by the constructor
   * function
   */
  Opal.hash2 = function(keys, map) {
    var hash = new Opal.Hash.$$alloc();

    hash.keys = keys;
    hash.map  = {};
    hash.smap = map;

    return hash;
  };

  /*
   * Create a new range instance with first and last values, and whether the
   * range excludes the last value.
   */
  Opal.range = function(first, last, exc) {
    var range         = new Opal.Range.$$alloc();
        range.begin   = first;
        range.end     = last;
        range.exclude = exc;

    return range;
  };

  // Require system
  // --------------
  (function(Opal) {
    var loaded_features = ['corelib/runtime.js'],
        require_table   = {'corelib/runtime.js': true},
        modules         = {};

    var current_dir  = '.';

    function mark_as_loaded(filename) {
      if (require_table[filename]) {
        return false;
      }

      loaded_features.push(filename);
      require_table[filename] = true;

      return true;
    }

    function normalize_loadable_path(path) {
      var parts, part, new_parts = [], SEPARATOR = '/';

      if (current_dir !== '.') {
        path = current_dir.replace(/\/*$/, '/') + path;
      }

      parts = path.split(SEPARATOR);

      for (var i = 0, ii = parts.length; i < ii; i++) {
        part = parts[i];
        if (part == '') continue;
        (part === '..') ? new_parts.pop() : new_parts.push(part)
      }

      return new_parts.join(SEPARATOR);
    }

    function load(path) {
      mark_as_loaded(path);

      var module = modules[path];

      if (module) {
        module(Opal);
      }
      else {
        var severity = Opal.dynamic_require_severity || 'warning';
        var message  = 'cannot load such file -- ' + path;

        if (severity === "error") {
          Opal.LoadError ? Opal.LoadError.$new(message) : function(){throw message}();
        }
        else if (severity === "warning") {
          console.warn('WARNING: LoadError: ' + message);
        }
      }

      return true;
    }

    function require(path) {
      if (require_table[path]) {
        return false;
      }

      return load(path);
    }

    Opal.modules         = modules;
    Opal.loaded_features = loaded_features;

    Opal.normalize_loadable_path = normalize_loadable_path;
    Opal.mark_as_loaded          = mark_as_loaded;

    Opal.load    = load;
    Opal.require = require;
  })(Opal);

  // Initialization
  // --------------

  // The actual class for BasicObject
  var BasicObjectClass;

  // The actual Object class
  var ObjectClass;

  // The actual Module class
  var ModuleClass;

  // The actual Class class
  var ClassClass;

  // Constructor for instances of BasicObject
  function BasicObject(){}

  // Constructor for instances of Object
  function Object(){}

  // Constructor for instances of Class
  function Class(){}

  // Constructor for instances of Module
  function Module(){}

  // Constructor for instances of NilClass (nil)
  function NilClass(){}

  // Constructors for *instances* of core objects
  boot_class_alloc('BasicObject', BasicObject);
  boot_class_alloc('Object',      Object,       BasicObject);
  boot_class_alloc('Module',      Module,       Object);
  boot_class_alloc('Class',       Class,        Module);

  // Constructors for *classes* of core objects
  BasicObjectClass = boot_core_class_object('BasicObject', BasicObject, Class);
  ObjectClass      = boot_core_class_object('Object',      Object,      BasicObjectClass.constructor);
  ModuleClass      = boot_core_class_object('Module',      Module,      ObjectClass.constructor);
  ClassClass       = boot_core_class_object('Class',       Class,       ModuleClass.constructor);

  // Fix booted classes to use their metaclass
  BasicObjectClass.$$class = ClassClass;
  ObjectClass.$$class      = ClassClass;
  ModuleClass.$$class      = ClassClass;
  ClassClass.$$class       = ClassClass;

  // Fix superclasses of booted classes
  BasicObjectClass.$$super = null;
  ObjectClass.$$super      = BasicObjectClass;
  ModuleClass.$$super      = ObjectClass;
  ClassClass.$$super       = ModuleClass;

  BasicObjectClass.$$parent = null;
  ObjectClass.$$parent      = BasicObjectClass;
  ModuleClass.$$parent      = ObjectClass;
  ClassClass.$$parent       = ModuleClass;

  // Internally, Object acts like a module as it is "included" into bridged
  // classes. In other words, we donate methods from Object into our bridged
  // classes as their prototypes don't inherit from our root Object, so they
  // act like module includes.
  ObjectClass.$$dep = bridged_classes;

  Opal.base                     = ObjectClass;
  BasicObjectClass.$$scope      = ObjectClass.$$scope = Opal;
  BasicObjectClass.$$orig_scope = ObjectClass.$$orig_scope = Opal;
  Opal.Kernel                   = ObjectClass;

  ModuleClass.$$scope      = ObjectClass.$$scope;
  ModuleClass.$$orig_scope = ObjectClass.$$orig_scope;
  ClassClass.$$scope       = ObjectClass.$$scope;
  ClassClass.$$orig_scope  = ObjectClass.$$orig_scope;

  ObjectClass.$$proto.toString = function() {
    return this.$to_s();
  };

  ObjectClass.$$proto.$require = Opal.require;

  Opal.top = new ObjectClass.$$alloc();

  // Nil
  var nil_id = Opal.uid(); // nil id is traditionally 4
  Opal.klass(ObjectClass, ObjectClass, 'NilClass', NilClass);
  var nil = Opal.nil = new NilClass();
  nil.$$id = nil_id;
  nil.call = nil.apply = function() { throw Opal.LocalJumpError.$new('no block given'); };

  Opal.breaker  = new Error('unexpected break');
  Opal.returner = new Error('unexpected return');

  bridge_class('Array',     Array);
  bridge_class('Boolean',   Boolean);
  bridge_class('Numeric',   Number);
  bridge_class('String',    String);
  bridge_class('Proc',      Function);
  bridge_class('Exception', Error);
  bridge_class('Regexp',    RegExp);
  bridge_class('Time',      Date);

  TypeError.$$super = Error;
}).call(this);

if (typeof(global) !== 'undefined') {
  global.Opal = this.Opal;
  Opal.global = global;
}
if (typeof(window) !== 'undefined') {
  window.Opal = this.Opal;
  Opal.global = window;
}
Opal.mark_as_loaded(Opal.normalize_loadable_path("corelib/runtime"));
/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/helpers"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$new', '$class', '$===', '$respond_to?', '$raise', '$type_error', '$__send__', '$coerce_to', '$nil?', '$<=>', '$inspect']);
  return (function($base) {
    var self = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defs(self, '$type_error', function(object, type, method, coerced) {
      var $a, $b, self = this;

      if (method == null) {
        method = nil
      }
      if (coerced == null) {
        coerced = nil
      }
      if ((($a = (($b = method !== false && method !== nil) ? coerced : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('TypeError').$new("can't convert " + (object.$class()) + " into " + (type) + " (" + (object.$class()) + "#" + (method) + " gives " + (coerced.$class()))
        } else {
        return $scope.get('TypeError').$new("no implicit conversion of " + (object.$class()) + " into " + (type))
      };
    });

    Opal.defs(self, '$coerce_to', function(object, type, method) {
      var $a, self = this;

      if ((($a = type['$==='](object)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return object};
      if ((($a = object['$respond_to?'](method)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise(self.$type_error(object, type))
      };
      return object.$__send__(method);
    });

    Opal.defs(self, '$coerce_to!', function(object, type, method) {
      var $a, self = this, coerced = nil;

      coerced = self.$coerce_to(object, type, method);
      if ((($a = type['$==='](coerced)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise(self.$type_error(object, type, method, coerced))
      };
      return coerced;
    });

    Opal.defs(self, '$coerce_to?', function(object, type, method) {
      var $a, self = this, coerced = nil;

      if ((($a = object['$respond_to?'](method)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      coerced = self.$coerce_to(object, type, method);
      if ((($a = coerced['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil};
      if ((($a = type['$==='](coerced)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise(self.$type_error(object, type, method, coerced))
      };
      return coerced;
    });

    Opal.defs(self, '$try_convert', function(object, type, method) {
      var $a, self = this;

      if ((($a = type['$==='](object)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return object};
      if ((($a = object['$respond_to?'](method)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return object.$__send__(method)
        } else {
        return nil
      };
    });

    Opal.defs(self, '$compare', function(a, b) {
      var $a, self = this, compare = nil;

      compare = a['$<=>'](b);
      if ((($a = compare === nil) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (a.$class()) + " with " + (b.$class()) + " failed")};
      return compare;
    });

    Opal.defs(self, '$destructure', function(args) {
      var self = this;

      
      if (args.length == 1) {
        return args[0];
      }
      else if (args.$$is_array) {
        return args;
      }
      else {
        return $slice.call(args);
      }
    
    });

    Opal.defs(self, '$respond_to?', function(obj, method) {
      var self = this;

      
      if (obj == null || !obj.$$class) {
        return false;
      }
    
      return obj['$respond_to?'](method);
    });

    Opal.defs(self, '$inspect', function(obj) {
      var self = this;

      
      if (obj === undefined) {
        return "undefined";
      }
      else if (obj === null) {
        return "null";
      }
      else if (!obj.$$class) {
        return obj.toString();
      }
      else {
        return obj.$inspect();
      }
    
    });
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/module"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$attr_writer', '$coerce_to!', '$raise', '$=~', '$const_missing', '$const_get', '$to_str', '$to_proc', '$append_features', '$included', '$name', '$new', '$to_s', '$__id__']);
  return (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

    Opal.defs(self, '$new', TMP_1 = function() {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      
      function AnonModule(){}
      var klass      = Opal.boot(Opal.Module, AnonModule);
      klass.$$name   = nil;
      klass.$$class  = Opal.Module;
      klass.$$dep    = []
      klass.$$is_mod = true;
      klass.$$proto  = {};

      // inherit scope from parent
      Opal.create_scope(Opal.Module.$$scope, klass);

      if (block !== nil) {
        var block_self = block.$$s;
        block.$$s = null;
        block.call(klass);
        block.$$s = block_self;
      }

      return klass;
    
    });

    def['$==='] = function(object) {
      var $a, self = this;

      if ((($a = object == null) !== nil && (!$a.$$is_boolean || $a == true))) {
        return false};
      return Opal.is_a(object, self);
    };

    def['$<'] = function(other) {
      var self = this;

      
      var working = self;

      while (working) {
        if (working === other) {
          return true;
        }

        working = working.$$parent;
      }

      return false;
    
    };

    def.$alias_method = function(newname, oldname) {
      var self = this;

      
      Opal.defn(self, '$' + newname, self.$$proto['$' + oldname]);
    
      return self;
    };

    def.$alias_native = function(mid, jsid) {
      var self = this;

      if (jsid == null) {
        jsid = mid
      }
      return self.$$proto['$' + mid] = self.$$proto[jsid];
    };

    def.$ancestors = function() {
      var self = this;

      
      var parent = self,
          result = [];

      while (parent) {
        result.push(parent);
        result = result.concat(parent.$$inc);

        parent = parent.$$super;
      }

      return result;
    
    };

    def.$append_features = function(klass) {
      var self = this;

      Opal.append_features(self, klass);
      return self;
    };

    def.$attr_accessor = function(names) {
      var $a, $b, self = this;

      names = $slice.call(arguments, 0);
      ($a = self).$attr_reader.apply($a, [].concat(names));
      return ($b = self).$attr_writer.apply($b, [].concat(names));
    };

    def.$attr_reader = function(names) {
      var self = this;

      names = $slice.call(arguments, 0);
      
      for (var i = 0, length = names.length; i < length; i++) {
        (function(name) {
          self.$$proto[name] = nil;
          var func = function() { return this[name] };

          if (self.$$is_singleton) {
            self.$$proto.constructor.prototype['$' + name] = func;
          }
          else {
            Opal.defn(self, '$' + name, func);
          }
        })(names[i]);
      }
    
      return nil;
    };

    def.$attr_writer = function(names) {
      var self = this;

      names = $slice.call(arguments, 0);
      
      for (var i = 0, length = names.length; i < length; i++) {
        (function(name) {
          self.$$proto[name] = nil;
          var func = function(value) { return this[name] = value; };

          if (self.$$is_singleton) {
            self.$$proto.constructor.prototype['$' + name + '='] = func;
          }
          else {
            Opal.defn(self, '$' + name + '=', func);
          }
        })(names[i]);
      }
    
      return nil;
    };

    Opal.defn(self, '$attr', def.$attr_accessor);

    def.$autoload = function(const$, path) {
      var self = this;

      
      var autoloaders;

      if (!(autoloaders = self.$$autoload)) {
        autoloaders = self.$$autoload = {};
      }

      autoloaders[const$] = path;
      return nil;
    ;
    };

    def.$class_variable_get = function(name) {
      var $a, self = this;

      name = $scope.get('Opal')['$coerce_to!'](name, $scope.get('String'), "to_str");
      if ((($a = name.length < 3 || name.slice(0,2) !== '@@') !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('NameError'), "class vars should start with @@")};
      
      var value = Opal.cvars[name.slice(2)];
      (function() {if ((($a = value == null) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('NameError'), "uninitialized class variable @@a in")
        } else {
        return nil
      }; return nil; })()
      return value;
    
    };

    def.$class_variable_set = function(name, value) {
      var $a, self = this;

      name = $scope.get('Opal')['$coerce_to!'](name, $scope.get('String'), "to_str");
      if ((($a = name.length < 3 || name.slice(0,2) !== '@@') !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('NameError'))};
      
      Opal.cvars[name.slice(2)] = value;
      return value;
    
    };

    def.$constants = function() {
      var self = this;

      return self.$$scope.constants;
    };

    def['$const_defined?'] = function(name, inherit) {
      var $a, self = this;

      if (inherit == null) {
        inherit = true
      }
      if ((($a = name['$=~'](/^[A-Z]\w*$/)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('NameError'), "wrong constant name " + (name))
      };
      
      scopes = [self.$$scope];
      if (inherit || self === Opal.Object) {
        var parent = self.$$super;
        while (parent !== Opal.BasicObject) {
          scopes.push(parent.$$scope);
          parent = parent.$$super;
        }
      }

      for (var i = 0, len = scopes.length; i < len; i++) {
        if (scopes[i].hasOwnProperty(name)) {
          return true;
        }
      }

      return false;
    
    };

    def.$const_get = function(name, inherit) {
      var $a, self = this;

      if (inherit == null) {
        inherit = true
      }
      if ((($a = name['$=~'](/^[A-Z]\w*$/)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('NameError'), "wrong constant name " + (name))
      };
      
      var scopes = [self.$$scope];
      if (inherit || self == Opal.Object) {
        var parent = self.$$super;
        while (parent !== Opal.BasicObject) {
          scopes.push(parent.$$scope);
          parent = parent.$$super;
        }
      }

      for (var i = 0, len = scopes.length; i < len; i++) {
        if (scopes[i].hasOwnProperty(name)) {
          return scopes[i][name];
        }
      }

      return self.$const_missing(name);
    
    };

    def.$const_missing = function(const$) {
      var self = this;

      
      if (self.$$autoload) {
        var file = self.$$autoload[const$];

        if (file) {
          self.$require(file);

          return self.$const_get(const$);
        }
      }
    ;
      return self.$raise($scope.get('NameError'), "uninitialized constant " + (self) + "::" + (const$));
    };

    def.$const_set = function(name, value) {
      var $a, self = this;

      if ((($a = name['$=~'](/^[A-Z]\w*$/)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('NameError'), "wrong constant name " + (name))
      };
      try {
      name = name.$to_str()
      } catch ($err) {if (true) {
        self.$raise($scope.get('TypeError'), "conversion with #to_str failed")
        }else { throw $err; }
      };
      Opal.casgn(self, name, value);
      return value;
    };

    def.$define_method = TMP_2 = function(name, method) {
      var self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      
      if (method) {
        block = method.$to_proc();
      }

      if (block === nil) {
        throw new Error("no block given");
      }

      var jsid    = '$' + name;
      block.$$jsid = name;
      block.$$s    = null;
      block.$$def  = block;

      if (self.$$is_singleton) {
        self.$$proto[jsid] = block;
      }
      else {
        Opal.defn(self, jsid, block);
      }

      return name;
    ;
    };

    def.$remove_method = function(name) {
      var self = this;

      
      var jsid    = '$' + name;
      var current = self.$$proto[jsid];
      delete self.$$proto[jsid];

      // Check if we need to reverse Opal.donate
      // Opal.retire(self, [jsid]);
      return self;
    
    };

    def.$include = function(mods) {
      var self = this;

      mods = $slice.call(arguments, 0);
      
      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (mod === self) {
          continue;
        }

        (mod).$append_features(self);
        (mod).$included(self);
      }
    
      return self;
    };

    def['$include?'] = function(mod) {
      var self = this;

      
      for (var cls = self; cls; cls = cls.parent) {
        for (var i = 0; i != cls.$$inc.length; i++) {
          var mod2 = cls.$$inc[i];
          if (mod === mod2) {
            return true;
          }
        }
      }
      return false;
    
    };

    def.$instance_method = function(name) {
      var self = this;

      
      var meth = self.$$proto['$' + name];

      if (!meth || meth.$$stub) {
        self.$raise($scope.get('NameError'), "undefined method `" + (name) + "' for class `" + (self.$name()) + "'");
      }

      return $scope.get('UnboundMethod').$new(self, meth, name);
    
    };

    def.$instance_methods = function(include_super) {
      var self = this;

      if (include_super == null) {
        include_super = false
      }
      
      var methods = [],
          proto   = self.$$proto;

      for (var prop in proto) {
        if (!prop.charAt(0) === '$') {
          continue;
        }

        if (typeof(proto[prop]) !== "function") {
          continue;
        }

        if (proto[prop].$$stub) {
          continue;
        }

        if (!self.$$is_mod) {
          if (self !== Opal.BasicObject && proto[prop] === Opal.BasicObject.$$proto[prop]) {
            continue;
          }

          if (!include_super && !proto.hasOwnProperty(prop)) {
            continue;
          }

          if (!include_super && proto[prop].$$donated) {
            continue;
          }
        }

        methods.push(prop.substr(1));
      }

      return methods;
    
    };

    def.$included = function(mod) {
      var self = this;

      return nil;
    };

    def.$extended = function(mod) {
      var self = this;

      return nil;
    };

    def.$module_eval = TMP_3 = function() {
      var self = this, $iter = TMP_3.$$p, block = $iter || nil;

      TMP_3.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        self.$raise($scope.get('ArgumentError'), "no block given")
      };
      
      var old = block.$$s,
          result;

      block.$$s = null;
      result = block.call(self);
      block.$$s = old;

      return result;
    
    };

    Opal.defn(self, '$class_eval', def.$module_eval);

    def.$module_exec = TMP_4 = function() {
      var self = this, $iter = TMP_4.$$p, block = $iter || nil;

      TMP_4.$$p = null;
      
      if (block === nil) {
        throw new Error("no block given");
      }

      var block_self = block.$$s, result;

      block.$$s = null;
      result = block.apply(self, $slice.call(arguments));
      block.$$s = block_self;

      return result;
    
    };

    Opal.defn(self, '$class_exec', def.$module_exec);

    def['$method_defined?'] = function(method) {
      var self = this;

      
      var body = self.$$proto['$' + method];
      return (!!body) && !body.$$stub;
    
    };

    def.$module_function = function(methods) {
      var self = this;

      methods = $slice.call(arguments, 0);
      
      if (methods.length === 0) {
        self.$$module_function = true;
      }
      else {
        for (var i = 0, length = methods.length; i < length; i++) {
          var meth = methods[i], func = self.$$proto['$' + meth];

          self.constructor.prototype['$' + meth] = func;
        }
      }

      return self;
    
    };

    def.$name = function() {
      var self = this;

      
      if (self.$$full_name) {
        return self.$$full_name;
      }

      var result = [], base = self;

      while (base) {
        if (base.$$name === nil) {
          return result.length === 0 ? nil : result.join('::');
        }

        result.unshift(base.$$name);

        base = base.$$base_module;

        if (base === Opal.Object) {
          break;
        }
      }

      if (result.length === 0) {
        return nil;
      }

      return self.$$full_name = result.join('::');
    
    };

    def.$public = function(methods) {
      var self = this;

      methods = $slice.call(arguments, 0);
      
      if (methods.length === 0) {
        self.$$module_function = false;
      }

      return nil;
    
    };

    Opal.defn(self, '$private', def.$public);

    Opal.defn(self, '$protected', def.$public);

    Opal.defn(self, '$nesting', def.$public);

    def.$private_class_method = function(name) {
      var self = this;

      return self['$' + name] || nil;
    };

    Opal.defn(self, '$public_class_method', def.$private_class_method);

    def['$private_method_defined?'] = function(obj) {
      var self = this;

      return false;
    };

    def.$private_constant = function() {
      var self = this;

      return nil;
    };

    Opal.defn(self, '$protected_method_defined?', def['$private_method_defined?']);

    Opal.defn(self, '$public_instance_methods', def.$instance_methods);

    Opal.defn(self, '$public_method_defined?', def['$method_defined?']);

    def.$remove_class_variable = function() {
      var self = this;

      return nil;
    };

    def.$remove_const = function(name) {
      var self = this;

      
      var old = self.$$scope[name];
      delete self.$$scope[name];
      return old;
    
    };

    def.$to_s = function() {
      var $a, self = this;

      return ((($a = self.$name()) !== false && $a !== nil) ? $a : "#<" + (self.$$is_mod ? 'Module' : 'Class') + ":0x" + (self.$__id__().$to_s(16)) + ">");
    };

    return (def.$undef_method = function(symbol) {
      var self = this;

      Opal.add_stub_for(self.$$proto, "$" + symbol);
      return self;
    }, nil) && 'undef_method';
  })(self, null)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/class"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$raise', '$allocate']);
  self.$require("corelib/module");
  return (function($base, $super) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    Opal.defs(self, '$new', TMP_1 = function(sup) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      if (sup == null) {
        sup = $scope.get('Object')
      }
      TMP_1.$$p = null;
      
      if (!sup.$$is_class || sup.$$is_mod) {
        self.$raise($scope.get('TypeError'), "superclass must be a Class");
      }

      function AnonClass(){};
      var klass      = Opal.boot(sup, AnonClass)
      klass.$$name   = nil;
      klass.$$parent = sup;

      // inherit scope from parent
      Opal.create_scope(sup.$$scope, klass);

      sup.$inherited(klass);

      if (block !== nil) {
        var block_self = block.$$s;
        block.$$s = null;
        block.call(klass);
        block.$$s = block_self;
      }

      return klass;
    ;
    });

    def.$allocate = function() {
      var self = this;

      
      var obj = new self.$$alloc;
      obj.$$id = Opal.uid();
      return obj;
    
    };

    def.$inherited = function(cls) {
      var self = this;

      return nil;
    };

    def.$new = TMP_2 = function(args) {
      var self = this, $iter = TMP_2.$$p, block = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_2.$$p = null;
      
      var obj = self.$allocate();

      obj.$initialize.$$p = block;
      obj.$initialize.apply(obj, args);
      return obj;
    ;
    };

    return (def.$superclass = function() {
      var self = this;

      return self.$$super || nil;
    }, nil) && 'superclass';
  })(self, null);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/basic_object"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$inspect']);
  return (function($base, $super) {
    function $BasicObject(){};
    var self = $BasicObject = $klass($base, $super, 'BasicObject', $BasicObject);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

    Opal.defn(self, '$initialize', function() {
      var self = this;

      return nil;
    });

    Opal.defn(self, '$==', function(other) {
      var self = this;

      return self === other;
    });

    Opal.defn(self, '$__id__', function() {
      var self = this;

      return self.$$id || (self.$$id = Opal.uid());
    });

    Opal.defn(self, '$__send__', TMP_1 = function(symbol, args) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      TMP_1.$$p = null;
      
      var func = self['$' + symbol]

      if (func) {
        if (block !== nil) {
          func.$$p = block;
        }

        return func.apply(self, args);
      }

      if (block !== nil) {
        self.$method_missing.$$p = block;
      }

      return self.$method_missing.apply(self, [symbol].concat(args));
    
    });

    Opal.defn(self, '$!', function() {
      var self = this;

      return false;
    });

    Opal.defn(self, '$eql?', def['$==']);

    Opal.defn(self, '$equal?', def['$==']);

    Opal.defn(self, '$instance_eval', TMP_2 = function() {
      var self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "no block given")
      };
      
      var old = block.$$s,
          result;

      block.$$s = null;
      result = block.call(self, self);
      block.$$s = old;

      return result;
    
    });

    Opal.defn(self, '$instance_exec', TMP_3 = function(args) {
      var self = this, $iter = TMP_3.$$p, block = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_3.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "no block given")
      };
      
      var block_self = block.$$s,
          result;

      block.$$s = null;
      result = block.apply(self, args);
      block.$$s = block_self;

      return result;
    
    });

    return (Opal.defn(self, '$method_missing', TMP_4 = function(symbol, args) {
      var $a, self = this, $iter = TMP_4.$$p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      TMP_4.$$p = null;
      return $scope.get('Kernel').$raise($scope.get('NoMethodError'), (function() {if ((($a = self.$inspect && !self.$inspect.$$stub) !== nil && (!$a.$$is_boolean || $a == true))) {
        return "undefined method `" + (symbol) + "' for " + (self.$inspect()) + ":" + (self.$$class)
        } else {
        return "undefined method `" + (symbol) + "' for " + (self.$$class)
      }; return nil; })());
    }), nil) && 'method_missing';
  })(self, null)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/kernel"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars;

  Opal.add_stubs(['$raise', '$inspect', '$==', '$class', '$new', '$respond_to?', '$to_ary', '$to_a', '$<<', '$allocate', '$copy_instance_variables', '$initialize_clone', '$initialize_copy', '$singleton_class', '$initialize_dup', '$for', '$to_proc', '$append_features', '$extended', '$to_i', '$to_s', '$to_f', '$*', '$__id__', '$===', '$empty?', '$ArgumentError', '$nan?', '$infinite?', '$to_int', '$>', '$length', '$print', '$format', '$puts', '$each', '$<=', '$[]', '$nil?', '$is_a?', '$rand', '$coerce_to', '$respond_to_missing?', '$expand_path', '$join', '$start_with?']);
  return (function($base) {
    var self = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_10;

    Opal.defn(self, '$method_missing', TMP_1 = function(symbol, args) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      TMP_1.$$p = null;
      return self.$raise($scope.get('NoMethodError'), "undefined method `" + (symbol) + "' for " + (self.$inspect()));
    });

    Opal.defn(self, '$=~', function(obj) {
      var self = this;

      return false;
    });

    Opal.defn(self, '$===', function(other) {
      var self = this;

      return self['$=='](other);
    });

    Opal.defn(self, '$<=>', function(other) {
      var self = this;

      
      if (self['$=='](other)) {
        return 0;
      }

      return nil;
    ;
    });

    Opal.defn(self, '$method', function(name) {
      var self = this;

      
      var meth = self['$' + name];

      if (!meth || meth.$$stub) {
        self.$raise($scope.get('NameError'), "undefined method `" + (name) + "' for class `" + (self.$class()) + "'");
      }

      return $scope.get('Method').$new(self, meth, name);
    
    });

    Opal.defn(self, '$methods', function(all) {
      var self = this;

      if (all == null) {
        all = true
      }
      
      var methods = [];

      for (var key in self) {
        if (key[0] == "$" && typeof(self[key]) === "function") {
          if (all == false || all === nil) {
            if (!Opal.hasOwnProperty.call(self, key)) {
              continue;
            }
          }
          if (self[key].$$stub === undefined) {
            methods.push(key.substr(1));
          }
        }
      }

      return methods;
    
    });

    Opal.defn(self, '$Array', TMP_2 = function(object, args) {
      var self = this, $iter = TMP_2.$$p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      TMP_2.$$p = null;
      
      if (object == null || object === nil) {
        return [];
      }
      else if (object['$respond_to?']("to_ary")) {
        return object.$to_ary();
      }
      else if (object['$respond_to?']("to_a")) {
        return object.$to_a();
      }
      else {
        return [object];
      }
    ;
    });

    Opal.defn(self, '$at_exit', TMP_3 = function() {
      var $a, self = this, $iter = TMP_3.$$p, block = $iter || nil;
      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;

      TMP_3.$$p = null;
      ((($a = $gvars.__at_exit__) !== false && $a !== nil) ? $a : $gvars.__at_exit__ = []);
      return $gvars.__at_exit__['$<<'](block);
    });

    Opal.defn(self, '$caller', function() {
      var self = this;

      return [];
    });

    Opal.defn(self, '$class', function() {
      var self = this;

      return self.$$class;
    });

    Opal.defn(self, '$copy_instance_variables', function(other) {
      var self = this;

      
      for (var name in other) {
        if (name.charAt(0) !== '$') {
          self[name] = other[name];
        }
      }
    
    });

    Opal.defn(self, '$clone', function() {
      var self = this, copy = nil;

      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$initialize_clone(self);
      return copy;
    });

    Opal.defn(self, '$initialize_clone', function(other) {
      var self = this;

      return self.$initialize_copy(other);
    });

    Opal.defn(self, '$define_singleton_method', TMP_4 = function(name) {
      var self = this, $iter = TMP_4.$$p, body = $iter || nil;

      TMP_4.$$p = null;
      if (body !== false && body !== nil) {
        } else {
        self.$raise($scope.get('ArgumentError'), "tried to create Proc object without a block")
      };
      
      var jsid   = '$' + name;
      body.$$jsid = name;
      body.$$s    = null;
      body.$$def  = body;

      self.$singleton_class().$$proto[jsid] = body;

      return self;
    
    });

    Opal.defn(self, '$dup', function() {
      var self = this, copy = nil;

      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$initialize_dup(self);
      return copy;
    });

    Opal.defn(self, '$initialize_dup', function(other) {
      var self = this;

      return self.$initialize_copy(other);
    });

    Opal.defn(self, '$enum_for', TMP_5 = function(method, args) {
      var $a, $b, self = this, $iter = TMP_5.$$p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      if (method == null) {
        method = "each"
      }
      TMP_5.$$p = null;
      return ($a = ($b = $scope.get('Enumerator')).$for, $a.$$p = block.$to_proc(), $a).apply($b, [self, method].concat(args));
    });

    Opal.defn(self, '$to_enum', def.$enum_for);

    Opal.defn(self, '$equal?', function(other) {
      var self = this;

      return self === other;
    });

    Opal.defn(self, '$extend', function(mods) {
      var self = this;

      mods = $slice.call(arguments, 0);
      
      var singleton = self.$singleton_class();

      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        (mod).$append_features(singleton);
        (mod).$extended(self);
      }
    ;
      return self;
    });

    Opal.defn(self, '$format', function(format, args) {
      var self = this;

      args = $slice.call(arguments, 1);
      
      var idx = 0;
      return format.replace(/%(\d+\$)?([-+ 0]*)(\d*|\*(\d+\$)?)(?:\.(\d*|\*(\d+\$)?))?([cspdiubBoxXfgeEG])|(%%)/g, function(str, idx_str, flags, width_str, w_idx_str, prec_str, p_idx_str, spec, escaped) {
        if (escaped) {
          return '%';
        }

        var width,
        prec,
        is_integer_spec = ("diubBoxX".indexOf(spec) != -1),
        is_float_spec = ("eEfgG".indexOf(spec) != -1),
        prefix = '',
        obj;

        if (width_str === undefined) {
          width = undefined;
        } else if (width_str.charAt(0) == '*') {
          var w_idx = idx++;
          if (w_idx_str) {
            w_idx = parseInt(w_idx_str, 10) - 1;
          }
          width = (args[w_idx]).$to_i();
        } else {
          width = parseInt(width_str, 10);
        }
        if (!prec_str) {
          prec = is_float_spec ? 6 : undefined;
        } else if (prec_str.charAt(0) == '*') {
          var p_idx = idx++;
          if (p_idx_str) {
            p_idx = parseInt(p_idx_str, 10) - 1;
          }
          prec = (args[p_idx]).$to_i();
        } else {
          prec = parseInt(prec_str, 10);
        }
        if (idx_str) {
          idx = parseInt(idx_str, 10) - 1;
        }
        switch (spec) {
        case 'c':
          obj = args[idx];
          if (obj.$$is_string) {
            str = obj.charAt(0);
          } else {
            str = String.fromCharCode((obj).$to_i());
          }
          break;
        case 's':
          str = (args[idx]).$to_s();
          if (prec !== undefined) {
            str = str.substr(0, prec);
          }
          break;
        case 'p':
          str = (args[idx]).$inspect();
          if (prec !== undefined) {
            str = str.substr(0, prec);
          }
          break;
        case 'd':
        case 'i':
        case 'u':
          str = (args[idx]).$to_i().toString();
          break;
        case 'b':
        case 'B':
          str = (args[idx]).$to_i().toString(2);
          break;
        case 'o':
          str = (args[idx]).$to_i().toString(8);
          break;
        case 'x':
        case 'X':
          str = (args[idx]).$to_i().toString(16);
          break;
        case 'e':
        case 'E':
          str = (args[idx]).$to_f().toExponential(prec);
          break;
        case 'f':
          str = (args[idx]).$to_f().toFixed(prec);
          break;
        case 'g':
        case 'G':
          str = (args[idx]).$to_f().toPrecision(prec);
          break;
        }
        idx++;
        if (is_integer_spec || is_float_spec) {
          if (str.charAt(0) == '-') {
            prefix = '-';
            str = str.substr(1);
          } else {
            if (flags.indexOf('+') != -1) {
              prefix = '+';
            } else if (flags.indexOf(' ') != -1) {
              prefix = ' ';
            }
          }
        }
        if (is_integer_spec && prec !== undefined) {
          if (str.length < prec) {
            str = "0"['$*'](prec - str.length) + str;
          }
        }
        var total_len = prefix.length + str.length;
        if (width !== undefined && total_len < width) {
          if (flags.indexOf('-') != -1) {
            str = str + " "['$*'](width - total_len);
          } else {
            var pad_char = ' ';
            if (flags.indexOf('0') != -1) {
              str = "0"['$*'](width - total_len) + str;
            } else {
              prefix = " "['$*'](width - total_len) + prefix;
            }
          }
        }
        var result = prefix + str;
        if ('XEG'.indexOf(spec) != -1) {
          result = result.toUpperCase();
        }
        return result;
      });
    
    });

    Opal.defn(self, '$freeze', function() {
      var self = this;

      self.___frozen___ = true;
      return self;
    });

    Opal.defn(self, '$frozen?', function() {
      var $a, self = this;
      if (self.___frozen___ == null) self.___frozen___ = nil;

      return ((($a = self.___frozen___) !== false && $a !== nil) ? $a : false);
    });

    Opal.defn(self, '$hash', function() {
      var self = this;

      return [self.$$class.$$name,(self.$$class).$__id__(),self.$__id__()].join(':');
    });

    Opal.defn(self, '$initialize_copy', function(other) {
      var self = this;

      return nil;
    });

    Opal.defn(self, '$inspect', function() {
      var self = this;

      return self.$to_s();
    });

    Opal.defn(self, '$instance_of?', function(klass) {
      var self = this;

      return self.$$class === klass;
    });

    Opal.defn(self, '$instance_variable_defined?', function(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self, name.substr(1));
    });

    Opal.defn(self, '$instance_variable_get', function(name) {
      var self = this;

      
      var ivar = self[name.substr(1)];

      return ivar == null ? nil : ivar;
    
    });

    Opal.defn(self, '$instance_variable_set', function(name, value) {
      var self = this;

      return self[name.substr(1)] = value;
    });

    Opal.defn(self, '$instance_variables', function() {
      var self = this;

      
      var result = [];

      for (var name in self) {
        if (name.charAt(0) !== '$') {
          if (name !== '$$class' && name !== '$$id') {
            result.push('@' + name);
          }
        }
      }

      return result;
    
    });

    Opal.defn(self, '$Integer', function(value, base) {
      var $a, $b, self = this, $case = nil;

      if (base == null) {
        base = nil
      }
      if ((($a = $scope.get('String')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = value['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError'), "invalid value for Integer: (empty string)")};
        return parseInt(value, ((($a = base) !== false && $a !== nil) ? $a : undefined));};
      if (base !== false && base !== nil) {
        self.$raise(self.$ArgumentError("base is only valid for String values"))};
      return (function() {$case = value;if ($scope.get('Integer')['$===']($case)) {return value}else if ($scope.get('Float')['$===']($case)) {if ((($a = ((($b = value['$nan?']()) !== false && $b !== nil) ? $b : value['$infinite?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('FloatDomainError'), "unable to coerce " + (value) + " to Integer")};
      return value.$to_int();}else if ($scope.get('NilClass')['$===']($case)) {return self.$raise($scope.get('TypeError'), "can't convert nil into Integer")}else {if ((($a = value['$respond_to?']("to_int")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return value.$to_int()
      } else if ((($a = value['$respond_to?']("to_i")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return value.$to_i()
        } else {
        return self.$raise($scope.get('TypeError'), "can't convert " + (value.$class()) + " into Integer")
      }}})();
    });

    Opal.defn(self, '$Float', function(value) {
      var $a, self = this;

      if ((($a = $scope.get('String')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return parseFloat(value);
      } else if ((($a = value['$respond_to?']("to_f")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return value.$to_f()
        } else {
        return self.$raise($scope.get('TypeError'), "can't convert " + (value.$class()) + " into Float")
      };
    });

    Opal.defn(self, '$is_a?', function(klass) {
      var self = this;

      return Opal.is_a(self, klass);
    });

    Opal.defn(self, '$kind_of?', def['$is_a?']);

    Opal.defn(self, '$lambda', TMP_6 = function() {
      var self = this, $iter = TMP_6.$$p, block = $iter || nil;

      TMP_6.$$p = null;
      block.$$is_lambda = true;
      return block;
    });

    Opal.defn(self, '$load', function(file) {
      var self = this;

      return Opal.load(Opal.normalize_loadable_path(file));
    });

    Opal.defn(self, '$loop', TMP_7 = function() {
      var self = this, $iter = TMP_7.$$p, block = $iter || nil;

      TMP_7.$$p = null;
      
      while (true) {
        if (block() === $breaker) {
          return $breaker.$v;
        }
      }
    
      return self;
    });

    Opal.defn(self, '$nil?', function() {
      var self = this;

      return false;
    });

    Opal.defn(self, '$object_id', def.$__id__);

    Opal.defn(self, '$printf', function(args) {
      var $a, self = this;

      args = $slice.call(arguments, 0);
      if (args.$length()['$>'](0)) {
        self.$print(($a = self).$format.apply($a, [].concat(args)))};
      return nil;
    });

    Opal.defn(self, '$private_methods', function() {
      var self = this;

      return [];
    });

    Opal.defn(self, '$private_instance_methods', def.$private_methods);

    Opal.defn(self, '$proc', TMP_8 = function() {
      var self = this, $iter = TMP_8.$$p, block = $iter || nil;

      TMP_8.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        self.$raise($scope.get('ArgumentError'), "tried to create Proc object without a block")
      };
      block.$$is_lambda = false;
      return block;
    });

    Opal.defn(self, '$puts', function(strs) {
      var $a, self = this;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      strs = $slice.call(arguments, 0);
      return ($a = $gvars.stdout).$puts.apply($a, [].concat(strs));
    });

    Opal.defn(self, '$p', function(args) {
      var $a, $b, TMP_9, self = this;

      args = $slice.call(arguments, 0);
      ($a = ($b = args).$each, $a.$$p = (TMP_9 = function(obj){var self = TMP_9.$$s || this;
        if ($gvars.stdout == null) $gvars.stdout = nil;
if (obj == null) obj = nil;
      return $gvars.stdout.$puts(obj.$inspect())}, TMP_9.$$s = self, TMP_9), $a).call($b);
      if (args.$length()['$<='](1)) {
        return args['$[]'](0)
        } else {
        return args
      };
    });

    Opal.defn(self, '$print', function(strs) {
      var $a, self = this;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      strs = $slice.call(arguments, 0);
      return ($a = $gvars.stdout).$print.apply($a, [].concat(strs));
    });

    Opal.defn(self, '$warn', function(strs) {
      var $a, $b, self = this;
      if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;
      if ($gvars.stderr == null) $gvars.stderr = nil;

      strs = $slice.call(arguments, 0);
      if ((($a = ((($b = $gvars.VERBOSE['$nil?']()) !== false && $b !== nil) ? $b : strs['$empty?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        return ($a = $gvars.stderr).$puts.apply($a, [].concat(strs))
      };
    });

    Opal.defn(self, '$raise', function(exception, string) {
      var self = this;
      if ($gvars["!"] == null) $gvars["!"] = nil;

      
      if (exception == null && $gvars["!"]) {
        exception = $gvars["!"];
      }
      else if (exception.$$is_string) {
        exception = $scope.get('RuntimeError').$new(exception);
      }
      else if (!exception['$is_a?']($scope.get('Exception'))) {
        exception = exception.$new(string);
      }

      $gvars["!"] = exception;
      throw exception;
    ;
    });

    Opal.defn(self, '$fail', def.$raise);

    Opal.defn(self, '$rand', function(max) {
      var self = this;

      
      if (max === undefined) {
        return Math.random();
      }
      else if (max.$$is_range) {
        var arr = max.$to_a();

        return arr[self.$rand(arr.length)];
      }
      else {
        return Math.floor(Math.random() *
          Math.abs($scope.get('Opal').$coerce_to(max, $scope.get('Integer'), "to_int")));
      }
    
    });

    Opal.defn(self, '$respond_to?', function(name, include_all) {
      var $a, self = this;

      if (include_all == null) {
        include_all = false
      }
      if ((($a = self['$respond_to_missing?'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return true};
      
      var body = self['$' + name];

      if (typeof(body) === "function" && !body.$$stub) {
        return true;
      }
    
      return false;
    });

    Opal.defn(self, '$respond_to_missing?', function(method_name) {
      var self = this;

      return false;
    });

    Opal.defn(self, '$require', function(file) {
      var self = this;

      return Opal.require(Opal.normalize_loadable_path(file));
    });

    Opal.defn(self, '$require_relative', function(file) {
      var self = this;

      file = $scope.get('File').$expand_path($scope.get('File').$join(Opal.current_file, "..", file));
      return Opal.require(Opal.normalize_loadable_path(file));
    });

    Opal.defn(self, '$require_tree', function(path) {
      var self = this;

      path = $scope.get('File').$expand_path(path);
      
      for (var name in Opal.modules) {
        if ((name)['$start_with?'](path)) {
          Opal.require(name);
        }
      }
    ;
      return nil;
    });

    Opal.defn(self, '$send', def.$__send__);

    Opal.defn(self, '$public_send', def.$__send__);

    Opal.defn(self, '$singleton_class', function() {
      var self = this;

      return Opal.get_singleton_class(self);
    });

    Opal.defn(self, '$sprintf', def.$format);

    Opal.defn(self, '$srand', def.$rand);

    Opal.defn(self, '$String', function(str) {
      var self = this;

      return String(str);
    });

    Opal.defn(self, '$taint', function() {
      var self = this;

      return self;
    });

    Opal.defn(self, '$tainted?', function() {
      var self = this;

      return false;
    });

    Opal.defn(self, '$tap', TMP_10 = function() {
      var self = this, $iter = TMP_10.$$p, block = $iter || nil;

      TMP_10.$$p = null;
      if (Opal.yield1(block, self) === $breaker) return $breaker.$v;
      return self;
    });

    Opal.defn(self, '$to_proc', function() {
      var self = this;

      return self;
    });

    Opal.defn(self, '$to_s', function() {
      var self = this;

      return "#<" + (self.$class()) + ":0x" + (self.$__id__().$to_s(16)) + ">";
    });

    Opal.defn(self, '$untaint', def.$taint);
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/nil_class"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$raise']);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope;

    def['$!'] = function() {
      var self = this;

      return true;
    };

    def['$&'] = function(other) {
      var self = this;

      return false;
    };

    def['$|'] = function(other) {
      var self = this;

      return other !== false && other !== nil;
    };

    def['$^'] = function(other) {
      var self = this;

      return other !== false && other !== nil;
    };

    def['$=='] = function(other) {
      var self = this;

      return other === nil;
    };

    def.$dup = function() {
      var self = this;

      return self.$raise($scope.get('TypeError'));
    };

    def.$inspect = function() {
      var self = this;

      return "nil";
    };

    def['$nil?'] = function() {
      var self = this;

      return true;
    };

    def.$singleton_class = function() {
      var self = this;

      return $scope.get('NilClass');
    };

    def.$to_a = function() {
      var self = this;

      return [];
    };

    def.$to_h = function() {
      var self = this;

      return Opal.hash();
    };

    def.$to_i = function() {
      var self = this;

      return 0;
    };

    Opal.defn(self, '$to_f', def.$to_i);

    return (def.$to_s = function() {
      var self = this;

      return "";
    }, nil) && 'to_s';
  })(self, null);
  return Opal.cdecl($scope, 'NIL', nil);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/boolean"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$undef_method']);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope;

    def.$$is_boolean = true;

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return self.$undef_method("new")
    })(self.$singleton_class());

    def['$!'] = function() {
      var self = this;

      return self != true;
    };

    def['$&'] = function(other) {
      var self = this;

      return (self == true) ? (other !== false && other !== nil) : false;
    };

    def['$|'] = function(other) {
      var self = this;

      return (self == true) ? true : (other !== false && other !== nil);
    };

    def['$^'] = function(other) {
      var self = this;

      return (self == true) ? (other === false || other === nil) : (other !== false && other !== nil);
    };

    def['$=='] = function(other) {
      var self = this;

      return (self == true) === other.valueOf();
    };

    Opal.defn(self, '$equal?', def['$==']);

    Opal.defn(self, '$singleton_class', def.$class);

    return (def.$to_s = function() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    }, nil) && 'to_s';
  })(self, null);
  Opal.cdecl($scope, 'TrueClass', $scope.get('Boolean'));
  Opal.cdecl($scope, 'FalseClass', $scope.get('Boolean'));
  Opal.cdecl($scope, 'TRUE', true);
  return Opal.cdecl($scope, 'FALSE', false);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/error"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$attr_reader', '$class']);
  (function($base, $super) {
    function $Exception(){};
    var self = $Exception = $klass($base, $super, 'Exception', $Exception);

    var def = self.$$proto, $scope = self.$$scope;

    def.message = nil;
    self.$attr_reader("message");

    Opal.defs(self, '$new', function(message) {
      var self = this;

      if (message == null) {
        message = "Exception"
      }
      
      var err = new self.$$alloc(message);

      if (Error.captureStackTrace) {
        Error.captureStackTrace(err);
      }

      err.name = self.$$name;
      err.$initialize(message);
      return err;
    
    });

    def.$initialize = function(message) {
      var self = this;

      return self.message = message;
    };

    def.$backtrace = function() {
      var self = this;

      
      var backtrace = self.stack;

      if (typeof(backtrace) === 'string') {
        return backtrace.split("\n").slice(0, 15);
      }
      else if (backtrace) {
        return backtrace.slice(0, 15);
      }

      return [];
    
    };

    def.$inspect = function() {
      var self = this;

      return "#<" + (self.$class()) + ": '" + (self.message) + "'>";
    };

    return Opal.defn(self, '$to_s', def.$message);
  })(self, null);
  (function($base, $super) {
    function $ScriptError(){};
    var self = $ScriptError = $klass($base, $super, 'ScriptError', $ScriptError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('Exception'));
  (function($base, $super) {
    function $SyntaxError(){};
    var self = $SyntaxError = $klass($base, $super, 'SyntaxError', $SyntaxError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('ScriptError'));
  (function($base, $super) {
    function $LoadError(){};
    var self = $LoadError = $klass($base, $super, 'LoadError', $LoadError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('ScriptError'));
  (function($base, $super) {
    function $NotImplementedError(){};
    var self = $NotImplementedError = $klass($base, $super, 'NotImplementedError', $NotImplementedError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('ScriptError'));
  (function($base, $super) {
    function $SystemExit(){};
    var self = $SystemExit = $klass($base, $super, 'SystemExit', $SystemExit);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('Exception'));
  (function($base, $super) {
    function $NoMemoryError(){};
    var self = $NoMemoryError = $klass($base, $super, 'NoMemoryError', $NoMemoryError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('Exception'));
  (function($base, $super) {
    function $SignalException(){};
    var self = $SignalException = $klass($base, $super, 'SignalException', $SignalException);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('Exception'));
  (function($base, $super) {
    function $Interrupt(){};
    var self = $Interrupt = $klass($base, $super, 'Interrupt', $Interrupt);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('Exception'));
  (function($base, $super) {
    function $StandardError(){};
    var self = $StandardError = $klass($base, $super, 'StandardError', $StandardError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('Exception'));
  (function($base, $super) {
    function $NameError(){};
    var self = $NameError = $klass($base, $super, 'NameError', $NameError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('StandardError'));
  (function($base, $super) {
    function $NoMethodError(){};
    var self = $NoMethodError = $klass($base, $super, 'NoMethodError', $NoMethodError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('NameError'));
  (function($base, $super) {
    function $RuntimeError(){};
    var self = $RuntimeError = $klass($base, $super, 'RuntimeError', $RuntimeError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('StandardError'));
  (function($base, $super) {
    function $LocalJumpError(){};
    var self = $LocalJumpError = $klass($base, $super, 'LocalJumpError', $LocalJumpError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('StandardError'));
  (function($base, $super) {
    function $TypeError(){};
    var self = $TypeError = $klass($base, $super, 'TypeError', $TypeError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('StandardError'));
  (function($base, $super) {
    function $ArgumentError(){};
    var self = $ArgumentError = $klass($base, $super, 'ArgumentError', $ArgumentError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('StandardError'));
  (function($base, $super) {
    function $IndexError(){};
    var self = $IndexError = $klass($base, $super, 'IndexError', $IndexError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('StandardError'));
  (function($base, $super) {
    function $StopIteration(){};
    var self = $StopIteration = $klass($base, $super, 'StopIteration', $StopIteration);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('IndexError'));
  (function($base, $super) {
    function $KeyError(){};
    var self = $KeyError = $klass($base, $super, 'KeyError', $KeyError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('IndexError'));
  (function($base, $super) {
    function $RangeError(){};
    var self = $RangeError = $klass($base, $super, 'RangeError', $RangeError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('StandardError'));
  (function($base, $super) {
    function $FloatDomainError(){};
    var self = $FloatDomainError = $klass($base, $super, 'FloatDomainError', $FloatDomainError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('RangeError'));
  (function($base, $super) {
    function $IOError(){};
    var self = $IOError = $klass($base, $super, 'IOError', $IOError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('StandardError'));
  (function($base, $super) {
    function $SystemCallError(){};
    var self = $SystemCallError = $klass($base, $super, 'SystemCallError', $SystemCallError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('StandardError'));
  return (function($base) {
    var self = $module($base, 'Errno');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $EINVAL(){};
      var self = $EINVAL = $klass($base, $super, 'EINVAL', $EINVAL);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      return (Opal.defs(self, '$new', TMP_1 = function() {
        var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        TMP_1.$$p = null;
        return Opal.find_super_dispatcher(self, 'new', TMP_1, null, $EINVAL).apply(self, ["Invalid argument"]);
      }), nil) && 'new'
    })(self, $scope.get('SystemCallError'))
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/regexp"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$nil?', '$[]', '$respond_to?', '$to_str', '$to_s', '$coerce_to', '$new', '$raise', '$class', '$call']);
  return (function($base, $super) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    def.$$is_regexp = true;

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      self.$$proto.$escape = function(string) {
        var self = this;

        
        return string.replace(/([-[\]\/{}()*+?.^$\\| ])/g, '\\$1')
                     .replace(/[\n]/g, '\\n')
                     .replace(/[\r]/g, '\\r')
                     .replace(/[\f]/g, '\\f')
                     .replace(/[\t]/g, '\\t');
      
      };
      self.$$proto.$last_match = function(n) {
        var $a, self = this;
        if ($gvars["~"] == null) $gvars["~"] = nil;

        if (n == null) {
          n = nil
        }
        if ((($a = n['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return $gvars["~"]
          } else {
          return $gvars["~"]['$[]'](n)
        };
      };
      self.$$proto.$quote = self.$$proto.$escape;
      self.$$proto.$union = function(parts) {
        var self = this;

        parts = $slice.call(arguments, 0);
        return new RegExp(parts.join(''));
      };
      return (self.$$proto.$new = function(regexp, options) {
        var self = this;

        return new RegExp(regexp, options);
      }, nil) && 'new';
    })(self.$singleton_class());

    def['$=='] = function(other) {
      var self = this;

      return other.constructor == RegExp && self.toString() === other.toString();
    };

    def['$==='] = function(str) {
      var self = this;

      
      if (!str.$$is_string && str['$respond_to?']("to_str")) {
        str = str.$to_str();
      }

      if (!str.$$is_string) {
        return false;
      }

      return self.test(str);
    ;
    };

    def['$=~'] = function(string) {
      var $a, self = this;

      if ((($a = string === nil) !== nil && (!$a.$$is_boolean || $a == true))) {
        $gvars["~"] = nil;
        return nil;};
      string = $scope.get('Opal').$coerce_to(string, $scope.get('String'), "to_str").$to_s();
      
      var re = self;

      if (re.global) {
        // should we clear it afterwards too?
        re.lastIndex = 0;
      }
      else {
        // rewrite regular expression to add the global flag to capture pre/post match
        re = new RegExp(re.source, 'g' + (re.multiline ? 'm' : '') + (re.ignoreCase ? 'i' : ''));
      }

      var result = re.exec(string);

      if (result) {
        $gvars["~"] = $scope.get('MatchData').$new(re, result);

        return result.index;
      }
      else {
        $gvars["~"] = nil;
        return nil;
      }
    
    };

    Opal.defn(self, '$eql?', def['$==']);

    def.$inspect = function() {
      var self = this;

      return self.toString();
    };

    def.$match = TMP_1 = function(string, pos) {
      var $a, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      if ((($a = string === nil) !== nil && (!$a.$$is_boolean || $a == true))) {
        $gvars["~"] = nil;
        return nil;};
      if ((($a = string.$$is_string == null) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = string['$respond_to?']("to_str")) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise($scope.get('TypeError'), "no implicit conversion of " + (string.$class()) + " into String")
        };
        string = string.$to_str();};
      
      var re = self;

      if (re.global) {
        // should we clear it afterwards too?
        re.lastIndex = 0;
      }
      else {
        re = new RegExp(re.source, 'g' + (re.multiline ? 'm' : '') + (re.ignoreCase ? 'i' : ''));
      }

      var result = re.exec(string);

      if (result) {
        result = $gvars["~"] = $scope.get('MatchData').$new(re, result);

        if (block === nil) {
          return result;
        }
        else {
          return block.$call(result);
        }
      }
      else {
        return $gvars["~"] = nil;
      }
    
    };

    def.$source = function() {
      var self = this;

      return self.source;
    };

    return Opal.defn(self, '$to_s', def.$source);
  })(self, null)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/comparable"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$===', '$>', '$<', '$equal?', '$<=>', '$normalize', '$raise', '$class']);
  return (function($base) {
    var self = $module($base, 'Comparable');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defs(self, '$normalize', function(what) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](what)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return what};
      if (what['$>'](0)) {
        return 1};
      if (what['$<'](0)) {
        return -1};
      return 0;
    });

    Opal.defn(self, '$==', function(other) {
      var $a, self = this, cmp = nil;

      try {
      if ((($a = self['$equal?'](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return true};
        if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          return false
        };
        return $scope.get('Comparable').$normalize(cmp) == 0;
      } catch ($err) {if (Opal.rescue($err, [$scope.get('StandardError')])) {
        return false
        }else { throw $err; }
      };
    });

    Opal.defn(self, '$>', function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) > 0;
    });

    Opal.defn(self, '$>=', function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) >= 0;
    });

    Opal.defn(self, '$<', function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) < 0;
    });

    Opal.defn(self, '$<=', function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) <= 0;
    });

    Opal.defn(self, '$between?', function(min, max) {
      var self = this;

      if (self['$<'](min)) {
        return false};
      if (self['$>'](max)) {
        return false};
      return true;
    });
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/enumerable"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$raise', '$enum_for', '$flatten', '$map', '$==', '$destructure', '$nil?', '$coerce_to!', '$coerce_to', '$===', '$new', '$<<', '$[]', '$[]=', '$inspect', '$__send__', '$yield', '$enumerator_size', '$respond_to?', '$size', '$private', '$compare', '$<=>', '$dup', '$to_a', '$lambda', '$sort', '$call', '$first', '$zip']);
  return (function($base) {
    var self = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_35, TMP_37, TMP_41, TMP_42;

    Opal.defn(self, '$all?', TMP_1 = function() {
      var $a, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      
      var result = true;

      if (block !== nil) {
        self.$each.$$p = function() {
          var value = Opal.yieldX(block, arguments);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) === nil || ($a.$$is_boolean && $a == false))) {
            result = false;
            return $breaker;
          }
        };
      }
      else {
        self.$each.$$p = function(obj) {
          if (arguments.length == 1 && (($a = obj) === nil || ($a.$$is_boolean && $a == false))) {
            result = false;
            return $breaker;
          }
        };
      }

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$any?', TMP_2 = function() {
      var $a, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      
      var result = false;

      if (block !== nil) {
        self.$each.$$p = function() {
          var value = Opal.yieldX(block, arguments);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
            result = true;
            return $breaker;
          }
        };
      }
      else {
        self.$each.$$p = function(obj) {
          if (arguments.length != 1 || (($a = obj) !== nil && (!$a.$$is_boolean || $a == true))) {
            result = true;
            return $breaker;
          }
        }
      }

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$chunk', TMP_3 = function(state) {
      var self = this, $iter = TMP_3.$$p, block = $iter || nil;

      TMP_3.$$p = null;
      return self.$raise($scope.get('NotImplementedError'));
    });

    Opal.defn(self, '$collect', TMP_4 = function() {
      var self = this, $iter = TMP_4.$$p, block = $iter || nil;

      TMP_4.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect")
      };
      
      var result = [];

      self.$each.$$p = function() {
        var value = Opal.yieldX(block, arguments);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        result.push(value);
      };

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$collect_concat', TMP_5 = function() {
      var $a, $b, TMP_6, self = this, $iter = TMP_5.$$p, block = $iter || nil;

      TMP_5.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect_concat")
      };
      return ($a = ($b = self).$map, $a.$$p = (TMP_6 = function(item){var self = TMP_6.$$s || this, $a;
if (item == null) item = nil;
      return $a = Opal.yield1(block, item), $a === $breaker ? $a : $a}, TMP_6.$$s = self, TMP_6), $a).call($b).$flatten(1);
    });

    Opal.defn(self, '$count', TMP_7 = function(object) {
      var $a, self = this, $iter = TMP_7.$$p, block = $iter || nil;

      TMP_7.$$p = null;
      
      var result = 0;

      if (object != null) {
        block = function() {
          return $scope.get('Opal').$destructure(arguments)['$=='](object);
        };
      }
      else if (block === nil) {
        block = function() { return true; };
      }

      self.$each.$$p = function() {
        var value = Opal.yieldX(block, arguments);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
          result++;
        }
      }

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$cycle', TMP_8 = function(n) {
      var $a, self = this, $iter = TMP_8.$$p, block = $iter || nil;

      if (n == null) {
        n = nil
      }
      TMP_8.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("cycle", n)
      };
      if ((($a = n['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        n = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
        if ((($a = n <= 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil};
      };
      
      var result,
          all  = [];

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        all.push(param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }

      if (all.length === 0) {
        return nil;
      }
    
      if ((($a = n['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        
        while (true) {
          for (var i = 0, length = all.length; i < length; i++) {
            var value = Opal.yield1(block, all[i]);

            if (value === $breaker) {
              return $breaker.$v;
            }
          }
        }
      
        } else {
        
        while (n > 1) {
          for (var i = 0, length = all.length; i < length; i++) {
            var value = Opal.yield1(block, all[i]);

            if (value === $breaker) {
              return $breaker.$v;
            }
          }

          n--;
        }
      
      };
    });

    Opal.defn(self, '$detect', TMP_9 = function(ifnone) {
      var $a, self = this, $iter = TMP_9.$$p, block = $iter || nil;

      TMP_9.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("detect", ifnone)
      };
      
      var result = undefined;

      self.$each.$$p = function() {
        var params = $scope.get('Opal').$destructure(arguments),
            value  = Opal.yield1(block, params);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
          result = params;
          return $breaker;
        }
      };

      self.$each();

      if (result === undefined && ifnone !== undefined) {
        if (typeof(ifnone) === 'function') {
          result = ifnone();
        }
        else {
          result = ifnone;
        }
      }

      return result === undefined ? nil : result;
    
    });

    Opal.defn(self, '$drop', function(number) {
      var $a, self = this;

      number = $scope.get('Opal').$coerce_to(number, $scope.get('Integer'), "to_int");
      if ((($a = number < 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "attempt to drop negative size")};
      
      var result  = [],
          current = 0;

      self.$each.$$p = function() {
        if (number <= current) {
          result.push($scope.get('Opal').$destructure(arguments));
        }

        current++;
      };

      self.$each()

      return result;
    
    });

    Opal.defn(self, '$drop_while', TMP_10 = function() {
      var $a, self = this, $iter = TMP_10.$$p, block = $iter || nil;

      TMP_10.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("drop_while")
      };
      
      var result   = [],
          dropping = true;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments);

        if (dropping) {
          var value = Opal.yield1(block, param);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) === nil || ($a.$$is_boolean && $a == false))) {
            dropping = false;
            result.push(param);
          }
        }
        else {
          result.push(param);
        }
      };

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$each_cons', TMP_11 = function(n) {
      var self = this, $iter = TMP_11.$$p, block = $iter || nil;

      TMP_11.$$p = null;
      return self.$raise($scope.get('NotImplementedError'));
    });

    Opal.defn(self, '$each_entry', TMP_12 = function() {
      var self = this, $iter = TMP_12.$$p, block = $iter || nil;

      TMP_12.$$p = null;
      return self.$raise($scope.get('NotImplementedError'));
    });

    Opal.defn(self, '$each_slice', TMP_13 = function(n) {
      var $a, self = this, $iter = TMP_13.$$p, block = $iter || nil;

      TMP_13.$$p = null;
      n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");
      if ((($a = n <= 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "invalid slice size")};
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_slice", n)
      };
      
      var result,
          slice = []

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments);

        slice.push(param);

        if (slice.length === n) {
          if (Opal.yield1(block, slice) === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          slice = [];
        }
      };

      self.$each();

      if (result !== undefined) {
        return result;
      }

      // our "last" group, if smaller than n then won't have been yielded
      if (slice.length > 0) {
        if (Opal.yield1(block, slice) === $breaker) {
          return $breaker.$v;
        }
      }
    ;
      return nil;
    });

    Opal.defn(self, '$each_with_index', TMP_14 = function(args) {
      var $a, self = this, $iter = TMP_14.$$p, block = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_14.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = self).$enum_for.apply($a, ["each_with_index"].concat(args))
      };
      
      var result,
          index = 0;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = block(param, index);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        index++;
      };

      self.$each.apply(self, args);

      if (result !== undefined) {
        return result;
      }
    
      return self;
    });

    Opal.defn(self, '$each_with_object', TMP_15 = function(object) {
      var self = this, $iter = TMP_15.$$p, block = $iter || nil;

      TMP_15.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_with_object", object)
      };
      
      var result;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = block(param, object);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }
      };

      self.$each();

      if (result !== undefined) {
        return result;
      }
    
      return object;
    });

    Opal.defn(self, '$entries', function(args) {
      var self = this;

      args = $slice.call(arguments, 0);
      
      var result = [];

      self.$each.$$p = function() {
        result.push($scope.get('Opal').$destructure(arguments));
      };

      self.$each.apply(self, args);

      return result;
    
    });

    Opal.defn(self, '$find', def.$detect);

    Opal.defn(self, '$find_all', TMP_16 = function() {
      var $a, self = this, $iter = TMP_16.$$p, block = $iter || nil;

      TMP_16.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("find_all")
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$find_index', TMP_17 = function(object) {
      var $a, self = this, $iter = TMP_17.$$p, block = $iter || nil;

      TMP_17.$$p = null;
      if ((($a = object === undefined && block === nil) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$enum_for("find_index")};
      
      var result = nil,
          index  = 0;

      if (object != null) {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments);

          if ((param)['$=='](object)) {
            result = index;
            return $breaker;
          }

          index += 1;
        };
      }
      else if (block !== nil) {
        self.$each.$$p = function() {
          var value = Opal.yieldX(block, arguments);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
            result = index;
            return $breaker;
          }

          index += 1;
        };
      }

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$first', function(number) {
      var $a, self = this, result = nil;

      if ((($a = number === undefined) !== nil && (!$a.$$is_boolean || $a == true))) {
        result = nil;
        
        self.$each.$$p = function() {
          result = $scope.get('Opal').$destructure(arguments);

          return $breaker;
        };

        self.$each();
      ;
        } else {
        result = [];
        number = $scope.get('Opal').$coerce_to(number, $scope.get('Integer'), "to_int");
        if ((($a = number < 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError'), "attempt to take negative size")};
        if ((($a = number == 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          return []};
        
        var current = 0,
            number  = $scope.get('Opal').$coerce_to(number, $scope.get('Integer'), "to_int");

        self.$each.$$p = function() {
          result.push($scope.get('Opal').$destructure(arguments));

          if (number <= ++current) {
            return $breaker;
          }
        };

        self.$each();
      ;
      };
      return result;
    });

    Opal.defn(self, '$flat_map', def.$collect_concat);

    Opal.defn(self, '$grep', TMP_18 = function(pattern) {
      var $a, self = this, $iter = TMP_18.$$p, block = $iter || nil;

      TMP_18.$$p = null;
      
      var result = [];

      if (block !== nil) {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments),
              value = pattern['$==='](param);

          if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
            value = Opal.yield1(block, param);

            if (value === $breaker) {
              result = $breaker.$v;
              return $breaker;
            }

            result.push(value);
          }
        };
      }
      else {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments),
              value = pattern['$==='](param);

          if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
            result.push(param);
          }
        };
      }

      self.$each();

      return result;
    ;
    });

    Opal.defn(self, '$group_by', TMP_19 = function() {
      var $a, $b, $c, self = this, $iter = TMP_19.$$p, block = $iter || nil, hash = nil;

      TMP_19.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("group_by")
      };
      hash = $scope.get('Hash').$new();
      
      var result;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        (($a = value, $b = hash, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, []))))['$<<'](param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }
    
      return hash;
    });

    Opal.defn(self, '$include?', function(obj) {
      var self = this;

      
      var result = false;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments);

        if ((param)['$=='](obj)) {
          result = true;
          return $breaker;
        }
      }

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$inject', TMP_20 = function(object, sym) {
      var self = this, $iter = TMP_20.$$p, block = $iter || nil;

      TMP_20.$$p = null;
      
      var result = object;

      if (block !== nil && sym === undefined) {
        self.$each.$$p = function() {
          var value = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          value = Opal.yieldX(block, [result, value]);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          result = value;
        };
      }
      else {
        if (sym === undefined) {
          if (!$scope.get('Symbol')['$==='](object)) {
            self.$raise($scope.get('TypeError'), "" + (object.$inspect()) + " is not a Symbol");
          }

          sym    = object;
          result = undefined;
        }

        self.$each.$$p = function() {
          var value = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          result = (result).$__send__(sym, value);
        };
      }

      self.$each();

      return result == undefined ? nil : result;
    ;
    });

    Opal.defn(self, '$lazy', function() {
      var $a, $b, TMP_21, self = this;

      return ($a = ($b = (($scope.get('Enumerator')).$$scope.get('Lazy'))).$new, $a.$$p = (TMP_21 = function(enum$, args){var self = TMP_21.$$s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
      return ($a = enum$).$yield.apply($a, [].concat(args))}, TMP_21.$$s = self, TMP_21), $a).call($b, self, self.$enumerator_size());
    });

    Opal.defn(self, '$enumerator_size', function() {
      var $a, self = this;

      if ((($a = self['$respond_to?']("size")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$size()
        } else {
        return nil
      };
    });

    self.$private("enumerator_size");

    Opal.defn(self, '$map', def.$collect);

    Opal.defn(self, '$max', TMP_22 = function() {
      var self = this, $iter = TMP_22.$$p, block = $iter || nil;

      TMP_22.$$p = null;
      
      var result;

      if (block !== nil) {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          var value = block(param, result);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if (value === nil) {
            self.$raise($scope.get('ArgumentError'), "comparison failed");
          }

          if (value > 0) {
            result = param;
          }
        };
      }
      else {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          if ($scope.get('Opal').$compare(param, result) > 0) {
            result = param;
          }
        };
      }

      self.$each();

      return result === undefined ? nil : result;
    
    });

    Opal.defn(self, '$max_by', TMP_23 = function() {
      var self = this, $iter = TMP_23.$$p, block = $iter || nil;

      TMP_23.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("max_by")
      };
      
      var result,
          by;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((value)['$<=>'](by) > 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    
    });

    Opal.defn(self, '$member?', def['$include?']);

    Opal.defn(self, '$min', TMP_24 = function() {
      var self = this, $iter = TMP_24.$$p, block = $iter || nil;

      TMP_24.$$p = null;
      
      var result;

      if (block !== nil) {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          var value = block(param, result);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if (value === nil) {
            self.$raise($scope.get('ArgumentError'), "comparison failed");
          }

          if (value < 0) {
            result = param;
          }
        };
      }
      else {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          if ($scope.get('Opal').$compare(param, result) < 0) {
            result = param;
          }
        };
      }

      self.$each();

      return result === undefined ? nil : result;
    
    });

    Opal.defn(self, '$min_by', TMP_25 = function() {
      var self = this, $iter = TMP_25.$$p, block = $iter || nil;

      TMP_25.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("min_by")
      };
      
      var result,
          by;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((value)['$<=>'](by) < 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    
    });

    Opal.defn(self, '$minmax', TMP_26 = function() {
      var self = this, $iter = TMP_26.$$p, block = $iter || nil;

      TMP_26.$$p = null;
      return self.$raise($scope.get('NotImplementedError'));
    });

    Opal.defn(self, '$minmax_by', TMP_27 = function() {
      var self = this, $iter = TMP_27.$$p, block = $iter || nil;

      TMP_27.$$p = null;
      return self.$raise($scope.get('NotImplementedError'));
    });

    Opal.defn(self, '$none?', TMP_28 = function() {
      var $a, self = this, $iter = TMP_28.$$p, block = $iter || nil;

      TMP_28.$$p = null;
      
      var result = true;

      if (block !== nil) {
        self.$each.$$p = function() {
          var value = Opal.yieldX(block, arguments);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
            result = false;
            return $breaker;
          }
        }
      }
      else {
        self.$each.$$p = function() {
          var value = $scope.get('Opal').$destructure(arguments);

          if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
            result = false;
            return $breaker;
          }
        };
      }

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$one?', TMP_29 = function() {
      var $a, self = this, $iter = TMP_29.$$p, block = $iter || nil;

      TMP_29.$$p = null;
      
      var result = false;

      if (block !== nil) {
        self.$each.$$p = function() {
          var value = Opal.yieldX(block, arguments);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
            if (result === true) {
              result = false;
              return $breaker;
            }

            result = true;
          }
        }
      }
      else {
        self.$each.$$p = function() {
          var value = $scope.get('Opal').$destructure(arguments);

          if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
            if (result === true) {
              result = false;
              return $breaker;
            }

            result = true;
          }
        }
      }

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$partition', TMP_30 = function() {
      var $a, self = this, $iter = TMP_30.$$p, block = $iter || nil;

      TMP_30.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("partition")
      };
      
      var truthy = [], falsy = [];

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
          truthy.push(param);
        }
        else {
          falsy.push(param);
        }
      };

      self.$each();

      return [truthy, falsy];
    
    });

    Opal.defn(self, '$reduce', def.$inject);

    Opal.defn(self, '$reject', TMP_31 = function() {
      var $a, self = this, $iter = TMP_31.$$p, block = $iter || nil;

      TMP_31.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("reject")
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) === nil || ($a.$$is_boolean && $a == false))) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$reverse_each', TMP_32 = function() {
      var self = this, $iter = TMP_32.$$p, block = $iter || nil;

      TMP_32.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("reverse_each")
      };
      
      var result = [];

      self.$each.$$p = function() {
        result.push(arguments);
      };

      self.$each();

      for (var i = result.length - 1; i >= 0; i--) {
        Opal.yieldX(block, result[i]);
      }

      return result;
    
    });

    Opal.defn(self, '$select', def.$find_all);

    Opal.defn(self, '$slice_before', TMP_33 = function(pattern) {
      var $a, $b, TMP_34, self = this, $iter = TMP_33.$$p, block = $iter || nil;

      TMP_33.$$p = null;
      if ((($a = pattern === undefined && block === nil || arguments.length > 1) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 1)")};
      return ($a = ($b = $scope.get('Enumerator')).$new, $a.$$p = (TMP_34 = function(e){var self = TMP_34.$$s || this, $a;
if (e == null) e = nil;
      
        var slice = [];

        if (block !== nil) {
          if (pattern === undefined) {
            self.$each.$$p = function() {
              var param = $scope.get('Opal').$destructure(arguments),
                  value = Opal.yield1(block, param);

              if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true)) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
          else {
            self.$each.$$p = function() {
              var param = $scope.get('Opal').$destructure(arguments),
                  value = block(param, pattern.$dup());

              if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true)) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
        }
        else {
          self.$each.$$p = function() {
            var param = $scope.get('Opal').$destructure(arguments),
                value = pattern['$==='](param);

            if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true)) && slice.length > 0) {
              e['$<<'](slice);
              slice = [];
            }

            slice.push(param);
          };
        }

        self.$each();

        if (slice.length > 0) {
          e['$<<'](slice);
        }
      ;}, TMP_34.$$s = self, TMP_34), $a).call($b);
    });

    Opal.defn(self, '$sort', TMP_35 = function() {
      var $a, $b, TMP_36, self = this, $iter = TMP_35.$$p, block = $iter || nil, ary = nil;

      TMP_35.$$p = null;
      ary = self.$to_a();
      if ((block !== nil)) {
        } else {
        block = ($a = ($b = self).$lambda, $a.$$p = (TMP_36 = function(a, b){var self = TMP_36.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
        return a['$<=>'](b)}, TMP_36.$$s = self, TMP_36), $a).call($b)
      };
      return ary.sort(block);
    });

    Opal.defn(self, '$sort_by', TMP_37 = function() {
      var $a, $b, TMP_38, $c, $d, TMP_39, $e, $f, TMP_40, self = this, $iter = TMP_37.$$p, block = $iter || nil;

      TMP_37.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("sort_by")
      };
      return ($a = ($b = ($c = ($d = ($e = ($f = self).$map, $e.$$p = (TMP_40 = function(){var self = TMP_40.$$s || this;

      arg = $scope.get('Opal').$destructure(arguments);
        return [block.$call(arg), arg];}, TMP_40.$$s = self, TMP_40), $e).call($f)).$sort, $c.$$p = (TMP_39 = function(a, b){var self = TMP_39.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
      return a['$[]'](0)['$<=>'](b['$[]'](0))}, TMP_39.$$s = self, TMP_39), $c).call($d)).$map, $a.$$p = (TMP_38 = function(arg){var self = TMP_38.$$s || this;
if (arg == null) arg = nil;
      return arg[1];}, TMP_38.$$s = self, TMP_38), $a).call($b);
    });

    Opal.defn(self, '$take', function(num) {
      var self = this;

      return self.$first(num);
    });

    Opal.defn(self, '$take_while', TMP_41 = function() {
      var $a, self = this, $iter = TMP_41.$$p, block = $iter || nil;

      TMP_41.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("take_while")
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) === nil || ($a.$$is_boolean && $a == false))) {
          return $breaker;
        }

        result.push(param);
      };

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$to_a', def.$entries);

    Opal.defn(self, '$zip', TMP_42 = function(others) {
      var $a, self = this, $iter = TMP_42.$$p, block = $iter || nil;

      others = $slice.call(arguments, 0);
      TMP_42.$$p = null;
      return ($a = self.$to_a()).$zip.apply($a, [].concat(others));
    });
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/enumerator"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$allocate', '$new', '$to_proc', '$coerce_to', '$nil?', '$empty?', '$+', '$class', '$__send__', '$===', '$call', '$enum_for', '$destructure', '$inspect', '$[]', '$raise', '$yield', '$each', '$enumerator_size', '$respond_to?', '$try_convert', '$<', '$for']);
  self.$require("corelib/enumerable");
  return (function($base, $super) {
    function $Enumerator(){};
    var self = $Enumerator = $klass($base, $super, 'Enumerator', $Enumerator);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

    def.size = def.args = def.object = def.method = nil;
    self.$include($scope.get('Enumerable'));

    Opal.defs(self, '$for', TMP_1 = function(object, method, args) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      args = $slice.call(arguments, 2);
      if (method == null) {
        method = "each"
      }
      TMP_1.$$p = null;
      
      var obj = self.$allocate();

      obj.object = object;
      obj.size   = block;
      obj.method = method;
      obj.args   = args;

      return obj;
    ;
    });

    def.$initialize = TMP_2 = function() {
      var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      if (block !== false && block !== nil) {
        self.object = ($a = ($b = $scope.get('Generator')).$new, $a.$$p = block.$to_proc(), $a).call($b);
        self.method = "each";
        self.args = [];
        self.size = arguments[0] || nil;
        if ((($a = self.size) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.size = $scope.get('Opal').$coerce_to(self.size, $scope.get('Integer'), "to_int")
          } else {
          return nil
        };
        } else {
        self.object = arguments[0];
        self.method = arguments[1] || "each";
        self.args = $slice.call(arguments, 2);
        return self.size = nil;
      };
    };

    def.$each = TMP_3 = function(args) {
      var $a, $b, $c, self = this, $iter = TMP_3.$$p, block = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_3.$$p = null;
      if ((($a = ($b = block['$nil?'](), $b !== false && $b !== nil ?args['$empty?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self};
      args = self.args['$+'](args);
      if ((($a = block['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = self.$class()).$new.apply($a, [self.object, self.method].concat(args))};
      return ($b = ($c = self.object).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, [self.method].concat(args));
    };

    def.$size = function() {
      var $a, self = this;

      if ((($a = $scope.get('Proc')['$==='](self.size)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = self.size).$call.apply($a, [].concat(self.args))
        } else {
        return self.size
      };
    };

    def.$with_index = TMP_4 = function(offset) {
      var self = this, $iter = TMP_4.$$p, block = $iter || nil;

      if (offset == null) {
        offset = 0
      }
      TMP_4.$$p = null;
      if (offset !== false && offset !== nil) {
        offset = $scope.get('Opal').$coerce_to(offset, $scope.get('Integer'), "to_int")
        } else {
        offset = 0
      };
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("with_index", offset)
      };
      
      var result, index = 0;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = block(param, index);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        index++;
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }

      return nil;
    
    };

    Opal.defn(self, '$with_object', def.$each_with_object);

    def.$inspect = function() {
      var $a, self = this, result = nil;

      result = "#<" + (self.$class()) + ": " + (self.object.$inspect()) + ":" + (self.method);
      if ((($a = self.args['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        result = result['$+']("(" + (self.args.$inspect()['$[]']($scope.get('Range').$new(1, -2))) + ")")
      };
      return result['$+'](">");
    };

    (function($base, $super) {
      function $Generator(){};
      var self = $Generator = $klass($base, $super, 'Generator', $Generator);

      var def = self.$$proto, $scope = self.$$scope, TMP_5, TMP_6;

      def.block = nil;
      self.$include($scope.get('Enumerable'));

      def.$initialize = TMP_5 = function() {
        var self = this, $iter = TMP_5.$$p, block = $iter || nil;

        TMP_5.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.get('LocalJumpError'), "no block given")
        };
        return self.block = block;
      };

      return (def.$each = TMP_6 = function(args) {
        var $a, $b, self = this, $iter = TMP_6.$$p, block = $iter || nil, yielder = nil;

        args = $slice.call(arguments, 0);
        TMP_6.$$p = null;
        yielder = ($a = ($b = $scope.get('Yielder')).$new, $a.$$p = block.$to_proc(), $a).call($b);
        
        try {
          args.unshift(yielder);

          if (Opal.yieldX(self.block, args) === $breaker) {
            return $breaker.$v;
          }
        }
        catch (e) {
          if (e === $breaker) {
            return $breaker.$v;
          }
          else {
            throw e;
          }
        }
      ;
        return self;
      }, nil) && 'each';
    })(self, null);

    (function($base, $super) {
      function $Yielder(){};
      var self = $Yielder = $klass($base, $super, 'Yielder', $Yielder);

      var def = self.$$proto, $scope = self.$$scope, TMP_7;

      def.block = nil;
      def.$initialize = TMP_7 = function() {
        var self = this, $iter = TMP_7.$$p, block = $iter || nil;

        TMP_7.$$p = null;
        return self.block = block;
      };

      def.$yield = function(values) {
        var self = this;

        values = $slice.call(arguments, 0);
        
        var value = Opal.yieldX(self.block, values);

        if (value === $breaker) {
          throw $breaker;
        }

        return value;
      ;
      };

      return (def['$<<'] = function(values) {
        var $a, self = this;

        values = $slice.call(arguments, 0);
        ($a = self).$yield.apply($a, [].concat(values));
        return self;
      }, nil) && '<<';
    })(self, null);

    return (function($base, $super) {
      function $Lazy(){};
      var self = $Lazy = $klass($base, $super, 'Lazy', $Lazy);

      var def = self.$$proto, $scope = self.$$scope, TMP_8, TMP_11, TMP_13, TMP_18, TMP_20, TMP_21, TMP_23, TMP_26, TMP_29;

      def.enumerator = nil;
      (function($base, $super) {
        function $StopLazyError(){};
        var self = $StopLazyError = $klass($base, $super, 'StopLazyError', $StopLazyError);

        var def = self.$$proto, $scope = self.$$scope;

        return nil;
      })(self, $scope.get('Exception'));

      def.$initialize = TMP_8 = function(object, size) {
        var TMP_9, self = this, $iter = TMP_8.$$p, block = $iter || nil;

        if (size == null) {
          size = nil
        }
        TMP_8.$$p = null;
        if ((block !== nil)) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy new without a block")
        };
        self.enumerator = object;
        return Opal.find_super_dispatcher(self, 'initialize', TMP_8, (TMP_9 = function(yielder, each_args){var self = TMP_9.$$s || this, $a, $b, TMP_10;
if (yielder == null) yielder = nil;each_args = $slice.call(arguments, 1);
        try {
          return ($a = ($b = object).$each, $a.$$p = (TMP_10 = function(args){var self = TMP_10.$$s || this;
args = $slice.call(arguments, 0);
            
              args.unshift(yielder);

              if (Opal.yieldX(block, args) === $breaker) {
                return $breaker;
              }
            ;}, TMP_10.$$s = self, TMP_10), $a).apply($b, [].concat(each_args))
          } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {
            return nil
            }else { throw $err; }
          }}, TMP_9.$$s = self, TMP_9)).apply(self, [size]);
      };

      Opal.defn(self, '$force', def.$to_a);

      def.$lazy = function() {
        var self = this;

        return self;
      };

      def.$collect = TMP_11 = function() {
        var $a, $b, TMP_12, self = this, $iter = TMP_11.$$p, block = $iter || nil;

        TMP_11.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy map without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_12 = function(enum$, args){var self = TMP_12.$$s || this;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        
          var value = Opal.yieldX(block, args);

          if (value === $breaker) {
            return $breaker;
          }

          enum$.$yield(value);
        }, TMP_12.$$s = self, TMP_12), $a).call($b, self, self.$enumerator_size());
      };

      def.$collect_concat = TMP_13 = function() {
        var $a, $b, TMP_14, self = this, $iter = TMP_13.$$p, block = $iter || nil;

        TMP_13.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy map without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_14 = function(enum$, args){var self = TMP_14.$$s || this, $a, $b, TMP_15, $c, TMP_16;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        
          var value = Opal.yieldX(block, args);

          if (value === $breaker) {
            return $breaker;
          }

          if ((value)['$respond_to?']("force") && (value)['$respond_to?']("each")) {
            ($a = ($b = (value)).$each, $a.$$p = (TMP_15 = function(v){var self = TMP_15.$$s || this;
if (v == null) v = nil;
          return enum$.$yield(v)}, TMP_15.$$s = self, TMP_15), $a).call($b)
          }
          else {
            var array = $scope.get('Opal').$try_convert(value, $scope.get('Array'), "to_ary");

            if (array === nil) {
              enum$.$yield(value);
            }
            else {
              ($a = ($c = (value)).$each, $a.$$p = (TMP_16 = function(v){var self = TMP_16.$$s || this;
if (v == null) v = nil;
          return enum$.$yield(v)}, TMP_16.$$s = self, TMP_16), $a).call($c);
            }
          }
        ;}, TMP_14.$$s = self, TMP_14), $a).call($b, self, nil);
      };

      def.$drop = function(n) {
        var $a, $b, TMP_17, self = this, current_size = nil, set_size = nil, dropped = nil;

        n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");
        if (n['$<'](0)) {
          self.$raise($scope.get('ArgumentError'), "attempt to drop negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ((($a = $scope.get('Integer')['$==='](current_size)) !== nil && (!$a.$$is_boolean || $a == true))) {
          if (n['$<'](current_size)) {
            return n
            } else {
            return current_size
          }
          } else {
          return current_size
        }; return nil; })();
        dropped = 0;
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_17 = function(enum$, args){var self = TMP_17.$$s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        if (dropped['$<'](n)) {
            return dropped = dropped['$+'](1)
            } else {
            return ($a = enum$).$yield.apply($a, [].concat(args))
          }}, TMP_17.$$s = self, TMP_17), $a).call($b, self, set_size);
      };

      def.$drop_while = TMP_18 = function() {
        var $a, $b, TMP_19, self = this, $iter = TMP_18.$$p, block = $iter || nil, succeeding = nil;

        TMP_18.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy drop_while without a block")
        };
        succeeding = true;
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_19 = function(enum$, args){var self = TMP_19.$$s || this, $a, $b;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        if (succeeding !== false && succeeding !== nil) {
            
            var value = Opal.yieldX(block, args);

            if (value === $breaker) {
              return $breaker;
            }

            if ((($a = value) === nil || ($a.$$is_boolean && $a == false))) {
              succeeding = false;

              ($a = enum$).$yield.apply($a, [].concat(args));
            }
          
            } else {
            return ($b = enum$).$yield.apply($b, [].concat(args))
          }}, TMP_19.$$s = self, TMP_19), $a).call($b, self, nil);
      };

      def.$enum_for = TMP_20 = function(method, args) {
        var $a, $b, self = this, $iter = TMP_20.$$p, block = $iter || nil;

        args = $slice.call(arguments, 1);
        if (method == null) {
          method = "each"
        }
        TMP_20.$$p = null;
        return ($a = ($b = self.$class()).$for, $a.$$p = block.$to_proc(), $a).apply($b, [self, method].concat(args));
      };

      def.$find_all = TMP_21 = function() {
        var $a, $b, TMP_22, self = this, $iter = TMP_21.$$p, block = $iter || nil;

        TMP_21.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy select without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_22 = function(enum$, args){var self = TMP_22.$$s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        
          var value = Opal.yieldX(block, args);

          if (value === $breaker) {
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
            ($a = enum$).$yield.apply($a, [].concat(args));
          }
        ;}, TMP_22.$$s = self, TMP_22), $a).call($b, self, nil);
      };

      Opal.defn(self, '$flat_map', def.$collect_concat);

      def.$grep = TMP_23 = function(pattern) {
        var $a, $b, TMP_24, $c, TMP_25, self = this, $iter = TMP_23.$$p, block = $iter || nil;

        TMP_23.$$p = null;
        if (block !== false && block !== nil) {
          return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_24 = function(enum$, args){var self = TMP_24.$$s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
          
            var param = $scope.get('Opal').$destructure(args),
                value = pattern['$==='](param);

            if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
              value = Opal.yield1(block, param);

              if (value === $breaker) {
                return $breaker;
              }

              enum$.$yield(Opal.yield1(block, param));
            }
          ;}, TMP_24.$$s = self, TMP_24), $a).call($b, self, nil)
          } else {
          return ($a = ($c = $scope.get('Lazy')).$new, $a.$$p = (TMP_25 = function(enum$, args){var self = TMP_25.$$s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
          
            var param = $scope.get('Opal').$destructure(args),
                value = pattern['$==='](param);

            if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
              enum$.$yield(param);
            }
          ;}, TMP_25.$$s = self, TMP_25), $a).call($c, self, nil)
        };
      };

      Opal.defn(self, '$map', def.$collect);

      Opal.defn(self, '$select', def.$find_all);

      def.$reject = TMP_26 = function() {
        var $a, $b, TMP_27, self = this, $iter = TMP_26.$$p, block = $iter || nil;

        TMP_26.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy reject without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_27 = function(enum$, args){var self = TMP_27.$$s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        
          var value = Opal.yieldX(block, args);

          if (value === $breaker) {
            return $breaker;
          }

          if ((($a = value) === nil || ($a.$$is_boolean && $a == false))) {
            ($a = enum$).$yield.apply($a, [].concat(args));
          }
        ;}, TMP_27.$$s = self, TMP_27), $a).call($b, self, nil);
      };

      def.$take = function(n) {
        var $a, $b, TMP_28, self = this, current_size = nil, set_size = nil, taken = nil;

        n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");
        if (n['$<'](0)) {
          self.$raise($scope.get('ArgumentError'), "attempt to take negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ((($a = $scope.get('Integer')['$==='](current_size)) !== nil && (!$a.$$is_boolean || $a == true))) {
          if (n['$<'](current_size)) {
            return n
            } else {
            return current_size
          }
          } else {
          return current_size
        }; return nil; })();
        taken = 0;
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_28 = function(enum$, args){var self = TMP_28.$$s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        if (taken['$<'](n)) {
            ($a = enum$).$yield.apply($a, [].concat(args));
            return taken = taken['$+'](1);
            } else {
            return self.$raise($scope.get('StopLazyError'))
          }}, TMP_28.$$s = self, TMP_28), $a).call($b, self, set_size);
      };

      def.$take_while = TMP_29 = function() {
        var $a, $b, TMP_30, self = this, $iter = TMP_29.$$p, block = $iter || nil;

        TMP_29.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy take_while without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_30 = function(enum$, args){var self = TMP_30.$$s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        
          var value = Opal.yieldX(block, args);

          if (value === $breaker) {
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
            ($a = enum$).$yield.apply($a, [].concat(args));
          }
          else {
            self.$raise($scope.get('StopLazyError'));
          }
        ;}, TMP_30.$$s = self, TMP_30), $a).call($b, self, nil);
      };

      Opal.defn(self, '$to_enum', def.$enum_for);

      return (def.$inspect = function() {
        var self = this;

        return "#<" + (self.$class()) + ": " + (self.enumerator.$inspect()) + ">";
      }, nil) && 'inspect';
    })(self, self);
  })(self, null);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/array"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars, $range = Opal.range;

  Opal.add_stubs(['$require', '$include', '$new', '$class', '$raise', '$===', '$to_a', '$respond_to?', '$to_ary', '$coerce_to', '$coerce_to?', '$==', '$to_str', '$clone', '$hash', '$<=>', '$inspect', '$empty?', '$enum_for', '$nil?', '$coerce_to!', '$initialize_clone', '$initialize_dup', '$replace', '$eql?', '$length', '$begin', '$end', '$exclude_end?', '$flatten', '$__id__', '$[]', '$to_s', '$join', '$delete_if', '$to_proc', '$each', '$reverse', '$!', '$map', '$rand', '$keep_if', '$shuffle!', '$>', '$<', '$sort', '$times', '$[]=', '$<<', '$at']);
  self.$require("corelib/enumerable");
  return (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_24;

    def.length = nil;
    self.$include($scope.get('Enumerable'));

    def.$$is_array = true;

    Opal.defs(self, '$[]', function(objects) {
      var self = this;

      objects = $slice.call(arguments, 0);
      return objects;
    });

    def.$initialize = function(args) {
      var $a, self = this;

      args = $slice.call(arguments, 0);
      return ($a = self.$class()).$new.apply($a, [].concat(args));
    };

    Opal.defs(self, '$new', TMP_1 = function(size, obj) {
      var $a, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      if (size == null) {
        size = nil
      }
      if (obj == null) {
        obj = nil
      }
      TMP_1.$$p = null;
      if ((($a = arguments.length > 2) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 0..2)")};
      if ((($a = arguments.length === 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        return []};
      if ((($a = arguments.length === 1) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $scope.get('Array')['$==='](size)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return size.$to_a()
        } else if ((($a = size['$respond_to?']("to_ary")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return size.$to_ary()}};
      size = $scope.get('Opal').$coerce_to(size, $scope.get('Integer'), "to_int");
      if ((($a = size < 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "negative array size")};
      
      var result = [];

      if (block === nil) {
        for (var i = 0; i < size; i++) {
          result.push(obj);
        }
      }
      else {
        for (var i = 0, value; i < size; i++) {
          value = block(i);

          if (value === $breaker) {
            return $breaker.$v;
          }

          result[i] = value;
        }
      }

      return result;
    
    });

    Opal.defs(self, '$try_convert', function(obj) {
      var self = this;

      return $scope.get('Opal')['$coerce_to?'](obj, $scope.get('Array'), "to_ary");
    });

    def['$&'] = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      
      var result = [],
          seen   = {};

      for (var i = 0, length = self.length; i < length; i++) {
        var item = self[i];

        if (!seen[item]) {
          for (var j = 0, length2 = other.length; j < length2; j++) {
            var item2 = other[j];

            if (!seen[item2] && (item)['$=='](item2)) {
              seen[item] = true;
              result.push(item);
            }
          }
        }
      }

      return result;
    
    };

    def['$|'] = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      
      var result = [],
          seen   = {};

      for (var i = 0, length = self.length; i < length; i++) {
        var item = self[i];

        if (!seen[item]) {
          seen[item] = true;
          result.push(item);
        }
      }

      for (var i = 0, length = other.length; i < length; i++) {
        var item = other[i];

        if (!seen[item]) {
          seen[item] = true;
          result.push(item);
        }
      }
      return result;
    
    };

    def['$*'] = function(other) {
      var $a, self = this;

      if ((($a = other['$respond_to?']("to_str")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.join(other.$to_str())};
      if ((($a = other['$respond_to?']("to_int")) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "no implicit conversion of " + (other.$class()) + " into Integer")
      };
      other = $scope.get('Opal').$coerce_to(other, $scope.get('Integer'), "to_int");
      if ((($a = other < 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "negative argument")};
      
      var result = [];

      for (var i = 0; i < other; i++) {
        result = result.concat(self);
      }

      return result;
    
    };

    def['$+'] = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      return self.concat(other);
    };

    def['$-'] = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      if ((($a = self.length === 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        return []};
      if ((($a = other.length === 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$clone()};
      
      var seen   = {},
          result = [];

      for (var i = 0, length = other.length; i < length; i++) {
        seen[other[i]] = true;
      }

      for (var i = 0, length = self.length; i < length; i++) {
        var item = self[i];

        if (!seen[item]) {
          result.push(item);
        }
      }

      return result;
    
    };

    def['$<<'] = function(object) {
      var self = this;

      self.push(object);
      return self;
    };

    def['$<=>'] = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
      } else if ((($a = other['$respond_to?']("to_ary")) !== nil && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_ary().$to_a()
        } else {
        return nil
      };
      
      if (self.$hash() === other.$hash()) {
        return 0;
      }

      if (self.length != other.length) {
        return (self.length > other.length) ? 1 : -1;
      }

      for (var i = 0, length = self.length; i < length; i++) {
        var tmp = (self[i])['$<=>'](other[i]);

        if (tmp !== 0) {
          return tmp;
        }
      }

      return 0;
    ;
    };

    def['$=='] = function(other) {
      var $a, self = this;

      if ((($a = self === other) !== nil && (!$a.$$is_boolean || $a == true))) {
        return true};
      if ((($a = $scope.get('Array')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        if ((($a = other['$respond_to?']("to_ary")) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          return false
        };
        return other['$=='](self);
      };
      other = other.$to_a();
      if ((($a = self.length === other.length) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var a = self[i],
            b = other[i];

        if (a.$$is_array && b.$$is_array && (a === self)) {
          continue;
        }

        if (!(a)['$=='](b)) {
          return false;
        }
      }
    
      return true;
    };

    def['$[]'] = function(index, length) {
      var $a, self = this;

      if ((($a = $scope.get('Range')['$==='](index)) !== nil && (!$a.$$is_boolean || $a == true))) {
        
        var size    = self.length,
            exclude = index.exclude,
            from    = $scope.get('Opal').$coerce_to(index.begin, $scope.get('Integer'), "to_int"),
            to      = $scope.get('Opal').$coerce_to(index.end, $scope.get('Integer'), "to_int");

        if (from < 0) {
          from += size;

          if (from < 0) {
            return nil;
          }
        }

        if (from > size) {
          return nil;
        }

        if (to < 0) {
          to += size;

          if (to < 0) {
            return [];
          }
        }

        if (!exclude) {
          to += 1;
        }

        return self.slice(from, to);
      ;
        } else {
        index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");
        
        var size = self.length;

        if (index < 0) {
          index += size;

          if (index < 0) {
            return nil;
          }
        }

        if (length === undefined) {
          if (index >= size || index < 0) {
            return nil;
          }

          return self[index];
        }
        else {
          length = $scope.get('Opal').$coerce_to(length, $scope.get('Integer'), "to_int");

          if (length < 0 || index > size || index < 0) {
            return nil;
          }

          return self.slice(index, index + length);
        }
      
      };
    };

    def['$[]='] = function(index, value, extra) {
      var $a, self = this, data = nil, length = nil;

      if ((($a = $scope.get('Range')['$==='](index)) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $scope.get('Array')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
          data = value.$to_a()
        } else if ((($a = value['$respond_to?']("to_ary")) !== nil && (!$a.$$is_boolean || $a == true))) {
          data = value.$to_ary().$to_a()
          } else {
          data = [value]
        };
        
        var size    = self.length,
            exclude = index.exclude,
            from    = $scope.get('Opal').$coerce_to(index.begin, $scope.get('Integer'), "to_int"),
            to      = $scope.get('Opal').$coerce_to(index.end, $scope.get('Integer'), "to_int");

        if (from < 0) {
          from += size;

          if (from < 0) {
            self.$raise($scope.get('RangeError'), "" + (index.$inspect()) + " out of range");
          }
        }

        if (to < 0) {
          to += size;
        }

        if (!exclude) {
          to += 1;
        }

        if (from > size) {
          for (var i = size; i < from; i++) {
            self[i] = nil;
          }
        }

        if (to < 0) {
          self.splice.apply(self, [from, 0].concat(data));
        }
        else {
          self.splice.apply(self, [from, to - from].concat(data));
        }

        return value;
      ;
        } else {
        if ((($a = extra === undefined) !== nil && (!$a.$$is_boolean || $a == true))) {
          length = 1
          } else {
          length = value;
          value = extra;
          if ((($a = $scope.get('Array')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
            data = value.$to_a()
          } else if ((($a = value['$respond_to?']("to_ary")) !== nil && (!$a.$$is_boolean || $a == true))) {
            data = value.$to_ary().$to_a()
            } else {
            data = [value]
          };
        };
        
        var size   = self.length,
            index  = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int"),
            length = $scope.get('Opal').$coerce_to(length, $scope.get('Integer'), "to_int"),
            old;

        if (index < 0) {
          old    = index;
          index += size;

          if (index < 0) {
            self.$raise($scope.get('IndexError'), "index " + (old) + " too small for array; minimum " + (-self.length));
          }
        }

        if (length < 0) {
          self.$raise($scope.get('IndexError'), "negative length (" + (length) + ")")
        }

        if (index > size) {
          for (var i = size; i < index; i++) {
            self[i] = nil;
          }
        }

        if (extra === undefined) {
          self[index] = value;
        }
        else {
          self.splice.apply(self, [index, length].concat(data));
        }

        return value;
      ;
      };
    };

    def.$assoc = function(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        if (item = self[i], item.length && (item[0])['$=='](object)) {
          return item;
        }
      }

      return nil;
    
    };

    def.$at = function(index) {
      var self = this;

      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");
      
      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      return self[index];
    
    };

    def.$cycle = TMP_2 = function(n) {
      var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      if (n == null) {
        n = nil
      }
      TMP_2.$$p = null;
      if ((($a = ((($b = self['$empty?']()) !== false && $b !== nil) ? $b : n['$=='](0))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil};
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("cycle", n)
      };
      if ((($a = n['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        
        while (true) {
          for (var i = 0, length = self.length; i < length; i++) {
            var value = Opal.yield1(block, self[i]);

            if (value === $breaker) {
              return $breaker.$v;
            }
          }
        }
      
        } else {
        n = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
        
        if (n <= 0) {
          return self;
        }

        while (n > 0) {
          for (var i = 0, length = self.length; i < length; i++) {
            var value = Opal.yield1(block, self[i]);

            if (value === $breaker) {
              return $breaker.$v;
            }
          }

          n--;
        }
      
      };
      return self;
    };

    def.$clear = function() {
      var self = this;

      self.splice(0, self.length);
      return self;
    };

    def.$clone = function() {
      var self = this, copy = nil;

      copy = [];
      copy.$initialize_clone(self);
      return copy;
    };

    def.$dup = function() {
      var self = this, copy = nil;

      copy = [];
      copy.$initialize_dup(self);
      return copy;
    };

    def.$initialize_copy = function(other) {
      var self = this;

      return self.$replace(other);
    };

    def.$collect = TMP_3 = function() {
      var self = this, $iter = TMP_3.$$p, block = $iter || nil;

      TMP_3.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect")
      };
      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);

        if (value === $breaker) {
          return $breaker.$v;
        }

        result.push(value);
      }

      return result;
    
    };

    def['$collect!'] = TMP_4 = function() {
      var self = this, $iter = TMP_4.$$p, block = $iter || nil;

      TMP_4.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect!")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);

        if (value === $breaker) {
          return $breaker.$v;
        }

        self[i] = value;
      }
    
      return self;
    };

    def.$compact = function() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length, item; i < length; i++) {
        if ((item = self[i]) !== nil) {
          result.push(item);
        }
      }

      return result;
    
    };

    def['$compact!'] = function() {
      var self = this;

      
      var original = self.length;

      for (var i = 0, length = self.length; i < length; i++) {
        if (self[i] === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      return self.length === original ? nil : self;
    
    };

    def.$concat = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      
      for (var i = 0, length = other.length; i < length; i++) {
        self.push(other[i]);
      }
    
      return self;
    };

    def.$delete = function(object) {
      var self = this;

      
      var original = self.length;

      for (var i = 0, length = original; i < length; i++) {
        if ((self[i])['$=='](object)) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      return self.length === original ? nil : object;
    
    };

    def.$delete_at = function(index) {
      var self = this;

      
      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");

      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      var result = self[index];

      self.splice(index, 1);

      return result;
    ;
    };

    def.$delete_if = TMP_5 = function() {
      var self = this, $iter = TMP_5.$$p, block = $iter || nil;

      TMP_5.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("delete_if")
      };
      
      for (var i = 0, length = self.length, value; i < length; i++) {
        if ((value = block(self[i])) === $breaker) {
          return $breaker.$v;
        }

        if (value !== false && value !== nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }
    
      return self;
    };

    def.$drop = function(number) {
      var self = this;

      
      if (number < 0) {
        self.$raise($scope.get('ArgumentError'))
      }

      return self.slice(number);
    ;
    };

    Opal.defn(self, '$dup', def.$clone);

    def.$each = TMP_6 = function() {
      var self = this, $iter = TMP_6.$$p, block = $iter || nil;

      TMP_6.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);

        if (value == $breaker) {
          return $breaker.$v;
        }
      }
    
      return self;
    };

    def.$each_index = TMP_7 = function() {
      var self = this, $iter = TMP_7.$$p, block = $iter || nil;

      TMP_7.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_index")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, i);

        if (value === $breaker) {
          return $breaker.$v;
        }
      }
    
      return self;
    };

    def['$empty?'] = function() {
      var self = this;

      return self.length === 0;
    };

    def['$eql?'] = function(other) {
      var $a, self = this;

      if ((($a = self === other) !== nil && (!$a.$$is_boolean || $a == true))) {
        return true};
      if ((($a = $scope.get('Array')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      other = other.$to_a();
      if ((($a = self.length === other.length) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var a = self[i],
            b = other[i];

        if (a.$$is_array && b.$$is_array && (a === self)) {
          continue;
        }

        if (!(a)['$eql?'](b)) {
          return false;
        }
      }
    
      return true;
    };

    def.$fetch = TMP_8 = function(index, defaults) {
      var self = this, $iter = TMP_8.$$p, block = $iter || nil;

      TMP_8.$$p = null;
      
      var original = index;

      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");

      if (index < 0) {
        index += self.length;
      }

      if (index >= 0 && index < self.length) {
        return self[index];
      }

      if (block !== nil) {
        return block(original);
      }

      if (defaults != null) {
        return defaults;
      }

      if (self.length === 0) {
        self.$raise($scope.get('IndexError'), "index " + (original) + " outside of array bounds: 0...0")
      }
      else {
        self.$raise($scope.get('IndexError'), "index " + (original) + " outside of array bounds: -" + (self.length) + "..." + (self.length));
      }
    ;
    };

    def.$fill = TMP_9 = function(args) {
      var $a, self = this, $iter = TMP_9.$$p, block = $iter || nil, one = nil, two = nil, obj = nil, left = nil, right = nil;

      args = $slice.call(arguments, 0);
      TMP_9.$$p = null;
      if (block !== false && block !== nil) {
        if ((($a = args.length > 2) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (args.$length()) + " for 0..2)")};
        $a = Opal.to_ary(args), one = ($a[0] == null ? nil : $a[0]), two = ($a[1] == null ? nil : $a[1]);
        } else {
        if ((($a = args.length == 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (0 for 1..3)")
        } else if ((($a = args.length > 3) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (args.$length()) + " for 1..3)")};
        $a = Opal.to_ary(args), obj = ($a[0] == null ? nil : $a[0]), one = ($a[1] == null ? nil : $a[1]), two = ($a[2] == null ? nil : $a[2]);
      };
      if ((($a = $scope.get('Range')['$==='](one)) !== nil && (!$a.$$is_boolean || $a == true))) {
        if (two !== false && two !== nil) {
          self.$raise($scope.get('TypeError'), "length invalid with range")};
        left = $scope.get('Opal').$coerce_to(one.$begin(), $scope.get('Integer'), "to_int");
        if ((($a = left < 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          left += self.length;};
        if ((($a = left < 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('RangeError'), "" + (one.$inspect()) + " out of range")};
        right = $scope.get('Opal').$coerce_to(one.$end(), $scope.get('Integer'), "to_int");
        if ((($a = right < 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          right += self.length;};
        if ((($a = one['$exclude_end?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          right += 1;
        };
        if ((($a = right <= left) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self};
      } else if (one !== false && one !== nil) {
        left = $scope.get('Opal').$coerce_to(one, $scope.get('Integer'), "to_int");
        if ((($a = left < 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          left += self.length;};
        if ((($a = left < 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          left = 0};
        if (two !== false && two !== nil) {
          right = $scope.get('Opal').$coerce_to(two, $scope.get('Integer'), "to_int");
          if ((($a = right == 0) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self};
          right += left;
          } else {
          right = self.length
        };
        } else {
        left = 0;
        right = self.length;
      };
      if ((($a = left > self.length) !== nil && (!$a.$$is_boolean || $a == true))) {
        
        for (var i = self.length; i < right; i++) {
          self[i] = nil;
        }
      ;};
      if ((($a = right > self.length) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.length = right};
      if (block !== false && block !== nil) {
        
        for (var length = self.length; left < right; left++) {
          var value = block(left);

          if (value === $breaker) {
            return $breaker.$v;
          }

          self[left] = value;
        }
      ;
        } else {
        
        for (var length = self.length; left < right; left++) {
          self[left] = obj;
        }
      ;
      };
      return self;
    };

    def.$first = function(count) {
      var self = this;

      
      if (count == null) {
        return self.length === 0 ? nil : self[0];
      }

      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");

      if (count < 0) {
        self.$raise($scope.get('ArgumentError'), "negative array size");
      }

      return self.slice(0, count);
    
    };

    def.$flatten = function(level) {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var item = self[i];

        if ($scope.get('Opal')['$respond_to?'](item, "to_ary")) {
          item = (item).$to_ary();

          if (level == null) {
            result.push.apply(result, (item).$flatten().$to_a());
          }
          else if (level == 0) {
            result.push(item);
          }
          else {
            result.push.apply(result, (item).$flatten(level - 1).$to_a());
          }
        }
        else {
          result.push(item);
        }
      }

      return result;
    ;
    };

    def['$flatten!'] = function(level) {
      var self = this;

      
      var flattened = self.$flatten(level);

      if (self.length == flattened.length) {
        for (var i = 0, length = self.length; i < length; i++) {
          if (self[i] !== flattened[i]) {
            break;
          }
        }

        if (i == length) {
          return nil;
        }
      }

      self.$replace(flattened);
    ;
      return self;
    };

    def.$hash = function() {
      var self = this;

      
      var hash = ['A'], item, item_hash;
      for (var i = 0, length = self.length; i < length; i++) {
        item = self[i];
        // Guard against recursion
        item_hash = self === item ? 'self' : item.$hash();
        hash.push(item_hash);
      }
      return hash.join(',');
    
    };

    def['$include?'] = function(member) {
      var self = this;

      
      for (var i = 0, length = self.length; i < length; i++) {
        if ((self[i])['$=='](member)) {
          return true;
        }
      }

      return false;
    
    };

    def.$index = TMP_10 = function(object) {
      var self = this, $iter = TMP_10.$$p, block = $iter || nil;

      TMP_10.$$p = null;
      
      if (object != null) {
        for (var i = 0, length = self.length; i < length; i++) {
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (var i = 0, length = self.length, value; i < length; i++) {
          if ((value = block(self[i])) === $breaker) {
            return $breaker.$v;
          }

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else {
        return self.$enum_for("index");
      }

      return nil;
    
    };

    def.$insert = function(index, objects) {
      var self = this;

      objects = $slice.call(arguments, 1);
      
      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");

      if (objects.length > 0) {
        if (index < 0) {
          index += self.length + 1;

          if (index < 0) {
            self.$raise($scope.get('IndexError'), "" + (index) + " is out of bounds");
          }
        }
        if (index > self.length) {
          for (var i = self.length; i < index; i++) {
            self.push(nil);
          }
        }

        self.splice.apply(self, [index, 0].concat(objects));
      }
    ;
      return self;
    };

    def.$inspect = function() {
      var self = this;

      
      var result = [],
          id     = self.$__id__();

      for (var i = 0, length = self.length; i < length; i++) {
        var item = self['$[]'](i);

        if ((item).$__id__() === id) {
          result.push('[...]');
        }
        else {
          result.push((item).$inspect());
        }
      }

      return '[' + result.join(', ') + ']';
    ;
    };

    def.$join = function(sep) {
      var $a, self = this;
      if ($gvars[","] == null) $gvars[","] = nil;

      if (sep == null) {
        sep = nil
      }
      if ((($a = self.length === 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ""};
      if ((($a = sep === nil) !== nil && (!$a.$$is_boolean || $a == true))) {
        sep = $gvars[","]};
      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var item = self[i];

        if ($scope.get('Opal')['$respond_to?'](item, "to_str")) {
          var tmp = (item).$to_str();

          if (tmp !== nil) {
            result.push((tmp).$to_s());

            continue;
          }
        }

        if ($scope.get('Opal')['$respond_to?'](item, "to_ary")) {
          var tmp = (item).$to_ary();

          if (tmp !== nil) {
            result.push((tmp).$join(sep));

            continue;
          }
        }

        if ($scope.get('Opal')['$respond_to?'](item, "to_s")) {
          var tmp = (item).$to_s();

          if (tmp !== nil) {
            result.push(tmp);

            continue;
          }
        }

        self.$raise($scope.get('NoMethodError'), "" + ($scope.get('Opal').$inspect(item)) + " doesn't respond to #to_str, #to_ary or #to_s");
      }

      if (sep === nil) {
        return result.join('');
      }
      else {
        return result.join($scope.get('Opal')['$coerce_to!'](sep, $scope.get('String'), "to_str").$to_s());
      }
    ;
    };

    def.$keep_if = TMP_11 = function() {
      var self = this, $iter = TMP_11.$$p, block = $iter || nil;

      TMP_11.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("keep_if")
      };
      
      for (var i = 0, length = self.length, value; i < length; i++) {
        if ((value = block(self[i])) === $breaker) {
          return $breaker.$v;
        }

        if (value === false || value === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }
    
      return self;
    };

    def.$last = function(count) {
      var self = this;

      
      if (count == null) {
        return self.length === 0 ? nil : self[self.length - 1];
      }

      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");

      if (count < 0) {
        self.$raise($scope.get('ArgumentError'), "negative array size");
      }

      if (count > self.length) {
        count = self.length;
      }

      return self.slice(self.length - count, self.length);
    
    };

    def.$length = function() {
      var self = this;

      return self.length;
    };

    Opal.defn(self, '$map', def.$collect);

    Opal.defn(self, '$map!', def['$collect!']);

    def.$pop = function(count) {
      var $a, self = this;

      if ((($a = count === undefined) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = self.length === 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil};
        return self.pop();};
      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");
      if ((($a = count < 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "negative array size")};
      if ((($a = self.length === 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        return []};
      if ((($a = count > self.length) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.splice(0, self.length);
        } else {
        return self.splice(self.length - count, self.length);
      };
    };

    def.$push = function(objects) {
      var self = this;

      objects = $slice.call(arguments, 0);
      
      for (var i = 0, length = objects.length; i < length; i++) {
        self.push(objects[i]);
      }
    
      return self;
    };

    def.$rassoc = function(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        item = self[i];

        if (item.length && item[1] !== undefined) {
          if ((item[1])['$=='](object)) {
            return item;
          }
        }
      }

      return nil;
    
    };

    def.$reject = TMP_12 = function() {
      var self = this, $iter = TMP_12.$$p, block = $iter || nil;

      TMP_12.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("reject")
      };
      
      var result = [];

      for (var i = 0, length = self.length, value; i < length; i++) {
        if ((value = block(self[i])) === $breaker) {
          return $breaker.$v;
        }

        if (value === false || value === nil) {
          result.push(self[i]);
        }
      }
      return result;
    
    };

    def['$reject!'] = TMP_13 = function() {
      var $a, $b, self = this, $iter = TMP_13.$$p, block = $iter || nil, original = nil;

      TMP_13.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("reject!")
      };
      original = self.$length();
      ($a = ($b = self).$delete_if, $a.$$p = block.$to_proc(), $a).call($b);
      if (self.$length()['$=='](original)) {
        return nil
        } else {
        return self
      };
    };

    def.$replace = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      
      self.splice(0, self.length);
      self.push.apply(self, other);
    
      return self;
    };

    def.$reverse = function() {
      var self = this;

      return self.slice(0).reverse();
    };

    def['$reverse!'] = function() {
      var self = this;

      return self.reverse();
    };

    def.$reverse_each = TMP_14 = function() {
      var $a, $b, self = this, $iter = TMP_14.$$p, block = $iter || nil;

      TMP_14.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("reverse_each")
      };
      ($a = ($b = self.$reverse()).$each, $a.$$p = block.$to_proc(), $a).call($b);
      return self;
    };

    def.$rindex = TMP_15 = function(object) {
      var self = this, $iter = TMP_15.$$p, block = $iter || nil;

      TMP_15.$$p = null;
      
      if (object != null) {
        for (var i = self.length - 1; i >= 0; i--) {
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (var i = self.length - 1, value; i >= 0; i--) {
          if ((value = block(self[i])) === $breaker) {
            return $breaker.$v;
          }

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else if (object == null) {
        return self.$enum_for("rindex");
      }

      return nil;
    
    };

    def.$sample = function(n) {
      var $a, $b, TMP_16, self = this;

      if (n == null) {
        n = nil
      }
      if ((($a = ($b = n['$!'](), $b !== false && $b !== nil ?self['$empty?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil};
      if ((($a = (($b = n !== false && n !== nil) ? self['$empty?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return []};
      if (n !== false && n !== nil) {
        return ($a = ($b = ($range(1, n, false))).$map, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

        return self['$[]'](self.$rand(self.$length()))}, TMP_16.$$s = self, TMP_16), $a).call($b)
        } else {
        return self['$[]'](self.$rand(self.$length()))
      };
    };

    def.$select = TMP_17 = function() {
      var self = this, $iter = TMP_17.$$p, block = $iter || nil;

      TMP_17.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("select")
      };
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        if ((value = Opal.yield1(block, item)) === $breaker) {
          return $breaker.$v;
        }

        if (value !== false && value !== nil) {
          result.push(item);
        }
      }

      return result;
    
    };

    def['$select!'] = TMP_18 = function() {
      var $a, $b, self = this, $iter = TMP_18.$$p, block = $iter || nil;

      TMP_18.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("select!")
      };
      
      var original = self.length;
      ($a = ($b = self).$keep_if, $a.$$p = block.$to_proc(), $a).call($b);
      return self.length === original ? nil : self;
    
    };

    def.$shift = function(count) {
      var $a, self = this;

      if ((($a = count === undefined) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = self.length === 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil};
        return self.shift();};
      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");
      if ((($a = count < 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "negative array size")};
      if ((($a = self.length === 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        return []};
      return self.splice(0, count);
    };

    Opal.defn(self, '$size', def.$length);

    def.$shuffle = function() {
      var self = this;

      return self.$clone()['$shuffle!']();
    };

    def['$shuffle!'] = function() {
      var self = this;

      
      for (var i = self.length - 1; i > 0; i--) {
        var tmp = self[i],
            j   = Math.floor(Math.random() * (i + 1));

        self[i] = self[j];
        self[j] = tmp;
      }
    
      return self;
    };

    Opal.defn(self, '$slice', def['$[]']);

    def['$slice!'] = function(index, length) {
      var self = this;

      
      if (index < 0) {
        index += self.length;
      }

      if (length != null) {
        return self.splice(index, length);
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      return self.splice(index, 1)[0];
    
    };

    def.$sort = TMP_19 = function() {
      var $a, self = this, $iter = TMP_19.$$p, block = $iter || nil;

      TMP_19.$$p = null;
      if ((($a = self.length > 1) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return self
      };
      
      if (!(block !== nil)) {
        block = function(a, b) {
          return (a)['$<=>'](b);
        };
      }

      try {
        return self.slice().sort(function(x, y) {
          var ret = block(x, y);

          if (ret === $breaker) {
            throw $breaker;
          }
          else if (ret === nil) {
            self.$raise($scope.get('ArgumentError'), "comparison of " + ((x).$inspect()) + " with " + ((y).$inspect()) + " failed");
          }

          return (ret)['$>'](0) ? 1 : ((ret)['$<'](0) ? -1 : 0);
        });
      }
      catch (e) {
        if (e === $breaker) {
          return $breaker.$v;
        }
        else {
          throw e;
        }
      }
    ;
    };

    def['$sort!'] = TMP_20 = function() {
      var $a, $b, self = this, $iter = TMP_20.$$p, block = $iter || nil;

      TMP_20.$$p = null;
      
      var result;

      if ((block !== nil)) {
        result = ($a = ($b = (self.slice())).$sort, $a.$$p = block.$to_proc(), $a).call($b);
      }
      else {
        result = (self.slice()).$sort();
      }

      self.length = 0;
      for(var i = 0, length = result.length; i < length; i++) {
        self.push(result[i]);
      }

      return self;
    ;
    };

    def.$take = function(count) {
      var self = this;

      
      if (count < 0) {
        self.$raise($scope.get('ArgumentError'));
      }

      return self.slice(0, count);
    ;
    };

    def.$take_while = TMP_21 = function() {
      var self = this, $iter = TMP_21.$$p, block = $iter || nil;

      TMP_21.$$p = null;
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        if ((value = block(item)) === $breaker) {
          return $breaker.$v;
        }

        if (value === false || value === nil) {
          return result;
        }

        result.push(item);
      }

      return result;
    
    };

    def.$to_a = function() {
      var self = this;

      return self;
    };

    Opal.defn(self, '$to_ary', def.$to_a);

    Opal.defn(self, '$to_s', def.$inspect);

    def.$transpose = function() {
      var $a, $b, TMP_22, self = this, result = nil, max = nil;

      if ((($a = self['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return []};
      result = [];
      max = nil;
      ($a = ($b = self).$each, $a.$$p = (TMP_22 = function(row){var self = TMP_22.$$s || this, $a, $b, TMP_23;
if (row == null) row = nil;
      if ((($a = $scope.get('Array')['$==='](row)) !== nil && (!$a.$$is_boolean || $a == true))) {
          row = row.$to_a()
          } else {
          row = $scope.get('Opal').$coerce_to(row, $scope.get('Array'), "to_ary").$to_a()
        };
        ((($a = max) !== false && $a !== nil) ? $a : max = row.length);
        if ((($a = (row.length)['$=='](max)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('IndexError'), "element size differs (" + (row.length) + " should be " + (max))};
        return ($a = ($b = (row.length)).$times, $a.$$p = (TMP_23 = function(i){var self = TMP_23.$$s || this, $a, $b, $c, entry = nil;
if (i == null) i = nil;
        entry = (($a = i, $b = result, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, []))));
          return entry['$<<'](row.$at(i));}, TMP_23.$$s = self, TMP_23), $a).call($b);}, TMP_22.$$s = self, TMP_22), $a).call($b);
      return result;
    };

    def.$uniq = function() {
      var self = this;

      
      var result = [],
          seen   = {};

      for (var i = 0, length = self.length, item, hash; i < length; i++) {
        item = self[i];
        hash = item;

        if (!seen[hash]) {
          seen[hash] = true;

          result.push(item);
        }
      }

      return result;
    
    };

    def['$uniq!'] = function() {
      var self = this;

      
      var original = self.length,
          seen     = {};

      for (var i = 0, length = original, item, hash; i < length; i++) {
        item = self[i];
        hash = item;

        if (!seen[hash]) {
          seen[hash] = true;
        }
        else {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      return self.length === original ? nil : self;
    
    };

    def.$unshift = function(objects) {
      var self = this;

      objects = $slice.call(arguments, 0);
      
      for (var i = objects.length - 1; i >= 0; i--) {
        self.unshift(objects[i]);
      }
    
      return self;
    };

    return (def.$zip = TMP_24 = function(others) {
      var self = this, $iter = TMP_24.$$p, block = $iter || nil;

      others = $slice.call(arguments, 0);
      TMP_24.$$p = null;
      
      var result = [], size = self.length, part, o;

      for (var i = 0; i < size; i++) {
        part = [self[i]];

        for (var j = 0, jj = others.length; j < jj; j++) {
          o = others[j][i];

          if (o == null) {
            o = nil;
          }

          part[j + 1] = o;
        }

        result[i] = part;
      }

      if (block !== nil) {
        for (var i = 0; i < size; i++) {
          block(result[i]);
        }

        return nil;
      }

      return result;
    
    }, nil) && 'zip';
  })(self, null);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/array/inheritance"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$new', '$allocate', '$initialize', '$to_proc', '$__send__', '$clone', '$respond_to?', '$==', '$eql?', '$inspect', '$*', '$class', '$slice', '$uniq', '$flatten']);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defs(self, '$inherited', function(klass) {
      var self = this, replace = nil;

      replace = $scope.get('Class').$new((($scope.get('Array')).$$scope.get('Wrapper')));
      
      klass.$$proto         = replace.$$proto;
      klass.$$proto.$$class = klass;
      klass.$$alloc         = replace.$$alloc;
      klass.$$parent        = (($scope.get('Array')).$$scope.get('Wrapper'));

      klass.$allocate = replace.$allocate;
      klass.$new      = replace.$new;
      klass["$[]"]    = replace["$[]"];
    
    }), nil) && 'inherited'
  })(self, null);
  return (function($base, $super) {
    function $Wrapper(){};
    var self = $Wrapper = $klass($base, $super, 'Wrapper', $Wrapper);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

    def.literal = nil;
    Opal.defs(self, '$allocate', TMP_1 = function(array) {
      var self = this, $iter = TMP_1.$$p, $yield = $iter || nil, obj = nil;

      if (array == null) {
        array = []
      }
      TMP_1.$$p = null;
      obj = Opal.find_super_dispatcher(self, 'allocate', TMP_1, null, $Wrapper).apply(self, []);
      obj.literal = array;
      return obj;
    });

    Opal.defs(self, '$new', TMP_2 = function(args) {
      var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil, obj = nil;

      args = $slice.call(arguments, 0);
      TMP_2.$$p = null;
      obj = self.$allocate();
      ($a = ($b = obj).$initialize, $a.$$p = block.$to_proc(), $a).apply($b, [].concat(args));
      return obj;
    });

    Opal.defs(self, '$[]', function(objects) {
      var self = this;

      objects = $slice.call(arguments, 0);
      return self.$allocate(objects);
    });

    def.$initialize = TMP_3 = function(args) {
      var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_3.$$p = null;
      return self.literal = ($a = ($b = $scope.get('Array')).$new, $a.$$p = block.$to_proc(), $a).apply($b, [].concat(args));
    };

    def.$method_missing = TMP_4 = function(args) {
      var $a, $b, self = this, $iter = TMP_4.$$p, block = $iter || nil, result = nil;

      args = $slice.call(arguments, 0);
      TMP_4.$$p = null;
      result = ($a = ($b = self.literal).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, [].concat(args));
      if ((($a = result === self.literal) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self
        } else {
        return result
      };
    };

    def.$initialize_copy = function(other) {
      var self = this;

      return self.literal = (other.literal).$clone();
    };

    def['$respond_to?'] = TMP_5 = function(name) {var $zuper = $slice.call(arguments, 0);
      var $a, self = this, $iter = TMP_5.$$p, $yield = $iter || nil;

      TMP_5.$$p = null;
      return ((($a = Opal.find_super_dispatcher(self, 'respond_to?', TMP_5, $iter).apply(self, $zuper)) !== false && $a !== nil) ? $a : self.literal['$respond_to?'](name));
    };

    def['$=='] = function(other) {
      var self = this;

      return self.literal['$=='](other);
    };

    def['$eql?'] = function(other) {
      var self = this;

      return self.literal['$eql?'](other);
    };

    def.$to_a = function() {
      var self = this;

      return self.literal;
    };

    def.$to_ary = function() {
      var self = this;

      return self;
    };

    def.$inspect = function() {
      var self = this;

      return self.literal.$inspect();
    };

    def['$*'] = function(other) {
      var self = this;

      
      var result = self.literal['$*'](other);

      if (result.$$is_array) {
        return self.$class().$allocate(result)
      }
      else {
        return result;
      }
    ;
    };

    def['$[]'] = function(index, length) {
      var self = this;

      
      var result = self.literal.$slice(index, length);

      if (result.$$is_array && (index.$$is_range || length !== undefined)) {
        return self.$class().$allocate(result)
      }
      else {
        return result;
      }
    ;
    };

    Opal.defn(self, '$slice', def['$[]']);

    def.$uniq = function() {
      var self = this;

      return self.$class().$allocate(self.literal.$uniq());
    };

    return (def.$flatten = function(level) {
      var self = this;

      return self.$class().$allocate(self.literal.$flatten(level));
    }, nil) && 'flatten';
  })($scope.get('Array'), null);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/hash"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$!', '$==', '$call', '$coerce_to!', '$lambda?', '$abs', '$arity', '$raise', '$enum_for', '$flatten', '$eql?', '$===', '$clone', '$merge!', '$to_proc', '$alias_method']);
  self.$require("corelib/enumerable");
  return (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13;

    def.proc = def.none = nil;
    self.$include($scope.get('Enumerable'));

    def.$$is_hash = true;

    Opal.defs(self, '$[]', function(objs) {
      var self = this;

      objs = $slice.call(arguments, 0);
      return Opal.hash.apply(null, objs);
    });

    Opal.defs(self, '$allocate', function() {
      var self = this;

      
      var hash = new self.$$alloc;

      hash.map  = {};
      hash.smap = {};
      hash.keys = [];
      hash.none = nil;
      hash.proc = nil;

      return hash;
    
    });

    def.$initialize = TMP_1 = function(defaults) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      
      self.none = (defaults === undefined ? nil : defaults);
      self.proc = block;
    
      return self;
    };

    def['$=='] = function(other) {
      var self = this;

      
      if (self === other) {
        return true;
      }

      if (!other.keys || !other.smap || !other.map) {
        return false;
      }

      if (self.keys.length !== other.keys.length) {
        return false;
      }

      var _map  = self.map,
          smap  = self.smap,
          _map2 = other.map,
          smap2 = other.smap,
          map, map2, key, khash, value, value2;

      for (var i = 0, length = self.keys.length; i < length; i++) {
        key = self.keys[i];

        if (key.$$is_string) {
          khash = key;
          map   = smap;
          map2  = smap2;
        } else {
          khash = key.$hash();
          map   = _map;
          map2  = _map2;
        }

        value  = map[khash];
        if (value === undefined) console.log('==', key, self);
        value2 = map2[khash];

        if (value2 === undefined || ((value)['$=='](value2))['$!']()) {
          return false;
        }
      }

      return true;
    
    };

    def['$[]'] = function(key) {
      var self = this;

      
      var map, khash;

      if (key.$$is_string) {
        map = self.smap;
        khash = key;
      } else {
        map = self.map;
        khash = key.$hash();
      }

      if (map === undefined) { console.log(self, '[] --> key:', key, khash, map) }


      if (Opal.hasOwnProperty.call(map, khash)) {
        return map[khash];
      }

      var proc = self.proc;

      if (proc !== nil) {
        return (proc).$call(self, key);
      }

      return self.none;
    
    };

    def['$[]='] = function(key, value) {
      var self = this;

      
      var map, khash, value;

      if (key.$$is_string) {
        map = self.smap;
        khash = key;
      } else {
        map = self.map;
        khash = key.$hash();
      }

      if (!Opal.hasOwnProperty.call(map, khash)) {
        self.keys.push(key);
      }

      map[khash] = value;

      return value;
    
    };

    def.$assoc = function(object) {
      var self = this;

      
      var keys = self.keys,
          map, key, khash;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if ((key)['$=='](object)) {
          if (key.$$is_string) {
            map = self.smap;
            khash = key;
          } else {
            map = self.map;
            khash = key.$hash();
          }

          return [key, map[khash]];
        }
      }

      return nil;
    
    };

    def.$clear = function() {
      var self = this;

      
      self.map = {};
      self.smap = {};
      self.keys = [];
      return self;
    
    };

    def.$clone = function() {
      var self = this;

      
      var _map  = {},
          smap  = {},
          _map2 = self.map,
          smap2 = self.smap,
          keys  = [],
          map, map2, key, khash, value;

      for (var i = 0, length = self.keys.length; i < length; i++) {
        key   = self.keys[i];

        if (key.$$is_string) {
          khash = key;
          map = smap;
          map2 = smap2;
        } else {
          khash = key.$hash();
          map = _map;
          map2 = _map2;
        }

        value = map2[khash];

        keys.push(key);
        map[khash] = value;
      }

      var clone = new self.$$class.$$alloc();

      clone.map  = _map;
      clone.smap = smap;
      clone.keys = keys;
      clone.none = self.none;
      clone.proc = self.proc;

      return clone;
    
    };

    def.$default = function(val) {
      var self = this;

      
      if (val !== undefined && self.proc !== nil) {
        return self.proc.$call(self, val);
      }
      return self.none;
    ;
    };

    def['$default='] = function(object) {
      var self = this;

      
      self.proc = nil;
      return (self.none = object);
    
    };

    def.$default_proc = function() {
      var self = this;

      return self.proc;
    };

    def['$default_proc='] = function(proc) {
      var self = this;

      
      if (proc !== nil) {
        proc = $scope.get('Opal')['$coerce_to!'](proc, $scope.get('Proc'), "to_proc");

        if (proc['$lambda?']() && proc.$arity().$abs() != 2) {
          self.$raise($scope.get('TypeError'), "default_proc takes two arguments");
        }
      }
      self.none = nil;
      return (self.proc = proc);
    ;
    };

    def.$delete = TMP_2 = function(key) {
      var self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      
      var result, map, khash;

      if (key.$$is_string) {
        map = self.smap;
        khash = key;
      } else {
        map = self.map;
        khash = key.$hash();
      }

      result = map[khash];

      if (result != null) {
        delete map[khash];
        self.keys.$delete(key);

        return result;
      }

      if (block !== nil) {
        return block.$call(key);
      }
      return nil;
    
    };

    def.$delete_if = TMP_3 = function() {
      var self = this, $iter = TMP_3.$$p, block = $iter || nil;

      TMP_3.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("delete_if")
      };
      
      var _map = self.map,
          smap = self.smap,
          keys = self.keys,
          map, key, value, obj, khash;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          map = smap;
          khash = key;
        } else {
          map = _map;
          khash = key.$hash();
        }
        obj = map[khash];
        value = block(key, obj);

        if (value === $breaker) {
          return $breaker.$v;
        }

        if (value !== false && value !== nil) {
          keys.splice(i, 1);
          delete map[khash];

          length--;
          i--;
        }
      }

      return self;
    
    };

    Opal.defn(self, '$dup', def.$clone);

    def.$each = TMP_4 = function() {
      var self = this, $iter = TMP_4.$$p, block = $iter || nil;

      TMP_4.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("each")
      };
      
      var _map = self.map,
          smap = self.smap,
          keys = self.keys,
          map, key, khash, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          map = smap;
          khash = key;
        } else {
          map = _map;
          khash = key.$hash();
        }

        value = Opal.yield1(block, [key, map[khash]]);

        if (value === $breaker) {
          return $breaker.$v;
        }
      }

      return self;
    
    };

    def.$each_key = TMP_5 = function() {
      var self = this, $iter = TMP_5.$$p, block = $iter || nil;

      TMP_5.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("each_key")
      };
      
      var keys = self.keys, key;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (block(key) === $breaker) {
          return $breaker.$v;
        }
      }

      return self;
    
    };

    Opal.defn(self, '$each_pair', def.$each);

    def.$each_value = TMP_6 = function() {
      var self = this, $iter = TMP_6.$$p, block = $iter || nil;

      TMP_6.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("each_value")
      };
      
      var _map = self.map,
          smap = self.smap,
          keys = self.keys;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          map = smap;
          khash = key;
        } else {
          map = _map;
          khash = key.$hash();
        }

        if (block(map[khash]) === $breaker) {
          return $breaker.$v;
        }
      }

      return self;
    
    };

    def['$empty?'] = function() {
      var self = this;

      return self.keys.length === 0;
    };

    Opal.defn(self, '$eql?', def['$==']);

    def.$fetch = TMP_7 = function(key, defaults) {
      var self = this, $iter = TMP_7.$$p, block = $iter || nil;

      TMP_7.$$p = null;
      
      var map, khash, value;

      if (key.$$is_string) {
        khash = key;
        map = self.smap;
      } else {
        khash = key.$hash();
        map = self.map;
      }

      value = map[khash];

      if (value != null) {
        return value;
      }

      if (block !== nil) {
        var value;

        if ((value = block(key)) === $breaker) {
          return $breaker.$v;
        }

        return value;
      }

      if (defaults != null) {
        return defaults;
      }

      self.$raise($scope.get('KeyError'), "key not found");
    
    };

    def.$flatten = function(level) {
      var self = this;

      
      var _map = self.map,
          smap = self.smap,
          keys = self.keys,
          result = [],
          map, key, khash, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          khash = key;
          map = smap;
        } else {
          khash = key.$hash();
          map = _map;
        }

        value = map[khash];

        result.push(key);

        if (value.$$is_array) {
          if (level == null || level === 1) {
            result.push(value);
          }
          else {
            result = result.concat((value).$flatten(level - 1));
          }
        }
        else {
          result.push(value);
        }
      }

      return result;
    
    };

    def['$has_key?'] = function(key) {
      var self = this;

      
      var keys = self.keys,
          map, khash;

      if (key.$$is_string) {
        khash = key;
        map = self.smap;
      } else {
        khash = key.$hash();
        map = self.map;
      }

      if (Opal.hasOwnProperty.call(map, khash)) {
        for (var i = 0, length = keys.length; i < length; i++) {
          if (!(key['$eql?'](keys[i]))['$!']()) {
            return true;
          }
        }
      }

      return false;
    
    };

    def['$has_value?'] = function(value) {
      var self = this;

      
      for (var khash in self.map) {
        if ((self.map[khash])['$=='](value)) {
          return true;
        }
      }

      return false;
    ;
    };

    var hash_ids = null;

    def.$hash = function() {
      var self = this;

      
      var top = (hash_ids === null);
      try {
        var key, value,
            hash = ['Hash'],
            keys = self.keys,
            id = self.$object_id(),
            counter = 0;

        if (top) {
          hash_ids = {}
        }

        if (hash_ids.hasOwnProperty(id)) {
          return 'self';
        }

        hash_ids[id] = true;

        for (var i = 0, length = keys.length; i < length; i++) {
          key   = keys[i];
          value = key.$$is_string ? self.smap[key] : self.map[key.$hash()];
          key   = key.$hash();
          value = (typeof(value) === 'undefined') ? '' : value.$hash();
          hash.push([key,value]);
        }

        return hash.sort().join();
      } finally {
        if (top) {
          hash_ids = null;
        }
      }
    
    };

    Opal.defn(self, '$include?', def['$has_key?']);

    def.$index = function(object) {
      var self = this;

      
      var _map = self.map,
          smap = self.smap,
          keys = self.keys,
          map, khash, key;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          map = smap;
          khash = key;
        } else {
          map = _map;
          khash = key.$hash();
        }

        if ((map[khash])['$=='](object)) {
          return key;
        }
      }

      return nil;
    
    };

    def.$indexes = function(keys) {
      var self = this;

      keys = $slice.call(arguments, 0);
      
      var result = [],
          _map = self.map,
          smap = self.smap,
          map, key, khash, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          khash = key;
          map = smap;
        } else {
          khash = key.$hash();
          map = _map;
        }

        value = map[khash];

        if (value != null) {
          result.push(value);
        }
        else {
          result.push(self.none);
        }
      }

      return result;
    
    };

    Opal.defn(self, '$indices', def.$indexes);

    var inspect_ids = null;

    def.$inspect = function() {
      var self = this;

      
      var top = (inspect_ids === null);
      try {

        var key, value,
            inspect = [],
            keys = self.keys
            id = self.$object_id(),
            counter = 0;

        if (top) {
          inspect_ids = {}
        }

        if (inspect_ids.hasOwnProperty(id)) {
          return '{...}';
        }

        inspect_ids[id] = true;

        for (var i = 0, length = keys.length; i < length; i++) {
          key   = keys[i];
          value = key.$$is_string ? self.smap[key] : self.map[key.$hash()];
          key   = key.$inspect();
          value = value.$inspect();
          inspect.push(key + '=>' + value);
        }

        return '{' + inspect.join(', ') + '}';
      } finally {

        if (top) {
          inspect_ids = null;
        }
      }
    
    };

    def.$invert = function() {
      var self = this;

      
      var result = Opal.hash(),
          keys = self.keys,
          _map = self.map,
          smap = self.smap,
          keys2 = result.keys,
          _map2 = result.map,
          smap2 = result.smap,
          map, map2, key, khash, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          map = smap;
          khash = key;
        } else {
          map = _map;
          khash = key.$hash();
        }

        value = map[khash];
        keys2.push(value);

        if (value.$$is_string) {
          map2 = smap2;
          khash = value;
        } else {
          map2 = _map2;
          khash = value.$hash();
        }

        map2[khash] = key;
      }

      return result;
    
    };

    def.$keep_if = TMP_8 = function() {
      var self = this, $iter = TMP_8.$$p, block = $iter || nil;

      TMP_8.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("keep_if")
      };
      
      var _map = self.map,
          smap = self.smap,
          keys = self.keys,
          map, key, khash, value, keep;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          khash = key;
          map = smap;
        } else {
          khash = key.$hash();
          map = _map;
        }

        value = map[khash];
        keep  = block(key, value);

        if (keep === $breaker) {
          return $breaker.$v;
        }

        if (keep === false || keep === nil) {
          keys.splice(i, 1);
          delete map[khash];

          length--;
          i--;
        }
      }

      return self;
    
    };

    Opal.defn(self, '$key', def.$index);

    Opal.defn(self, '$key?', def['$has_key?']);

    def.$keys = function() {
      var self = this;

      return self.keys.slice(0);
    };

    def.$length = function() {
      var self = this;

      return self.keys.length;
    };

    Opal.defn(self, '$member?', def['$has_key?']);

    def.$merge = TMP_9 = function(other) {
      var $a, $b, self = this, $iter = TMP_9.$$p, block = $iter || nil, cloned = nil;

      TMP_9.$$p = null;
      if ((($a = $scope.get('Hash')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        other = $scope.get('Opal')['$coerce_to!'](other, $scope.get('Hash'), "to_hash")
      };
      cloned = self.$clone();
      ($a = ($b = cloned)['$merge!'], $a.$$p = block.$to_proc(), $a).call($b, other);
      return cloned;
    };

    def['$merge!'] = TMP_10 = function(other) {
      var self = this, $iter = TMP_10.$$p, block = $iter || nil;

      TMP_10.$$p = null;
      
      if (! $scope.get('Hash')['$==='](other)) {
        other = $scope.get('Opal')['$coerce_to!'](other, $scope.get('Hash'), "to_hash");
      }

      var keys  = self.keys,
          _map  = self.map,
          smap  = self.smap,
          keys2 = other.keys,
          _map2 = other.map,
          smap2 = other.smap,
          map, map2, key, khash, value, value2;

      if (block === nil) {
        for (var i = 0, length = keys2.length; i < length; i++) {
          key = keys2[i];

          if (key.$$is_string) {
            khash = key;
            map = smap;
            map2 = smap2;
          } else {
            khash = key.$hash();
            map = _map;
            map2 = _map2;
          }

          if (map[khash] == null) {
            keys.push(key);
          }

          map[khash] = map2[khash];
        }
      }
      else {
        for (var i = 0, length = keys2.length; i < length; i++) {
          key    = keys2[i];

          if (key.$$is_string) {
            khash = key;
            map = smap;
            map2 = smap2;
          } else {
            khash = key.$hash();
            map = _map;
            map2 = _map2;
          }

          value  = map[khash];
          value2 = map2[khash];

          if (value == null) {
            keys.push(key);
            map[khash] = value2;
          }
          else {
            map[khash] = block(key, value, value2);
          }
        }
      }

      return self;
    ;
    };

    def.$rassoc = function(object) {
      var self = this;

      
      var keys = self.keys,
          _map = self.map,
          smap = self.smap,
          key, khash, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i]

        if (key.$$is_string) {
          khash = key;
          map = smap;
        } else {
          khash = key.$hash();
          map = _map;
        }

        value = map[khash];

        if ((value)['$=='](object)) {
          return [key, value];
        }
      }

      return nil;
    
    };

    def.$reject = TMP_11 = function() {
      var self = this, $iter = TMP_11.$$p, block = $iter || nil;

      TMP_11.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("reject")
      };
      
      var keys   = self.keys,
          _map    = self.map,
          smap    = self.smap,
          result = Opal.hash(),
          _map2   = result.map,
          smap2   = result.smap,
          keys2  = result.keys,
          map, map2, key, khash, object, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          khash = key;
          map = smap;
          map2 = smap2;
        } else {
          khash = key.$hash();
          map = _map;
          map2 = _map2;
        }

        object = map[khash];

        if ((value = block(key, object)) === $breaker) {
          return $breaker.$v;
        }

        if (value === false || value === nil) {
          keys2.push(key);
          map2[khash] = object;
        }
      }

      return result;
    
    };

    def.$replace = function(other) {
      var self = this;

      
      var keys  = self.keys = [],
          _map  = self.map  = {},
          smap  = self.smap = {},
          _map2 = other.map,
          smap2 = other.smap,
          key, khash, map, map2;

      for (var i = 0, length = other.keys.length; i < length; i++) {
        key = other.keys[i];

        if (key.$$is_string) {
          khash = key;
          map = smap;
          map2 = smap2;
        } else {
          khash = key.$hash();
          map = _map;
          map2 = _map2;
        }

        keys.push(key);
        map[khash] = map2[khash];
      }

      return self;
    
    };

    def.$select = TMP_12 = function() {
      var self = this, $iter = TMP_12.$$p, block = $iter || nil;

      TMP_12.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("select")
      };
      
      var keys   = self.keys,
          _map   = self.map,
          smap   = self.smap,
          result = Opal.hash(),
          _map2  = result.map,
          smap2  = result.smap,
          keys2  = result.keys,
          map, map2, key, khash, value, object;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          khash = key;
          map = smap;
          map2 = smap2;
        } else {
          khash = key.$hash();
          map = _map;
          map2 = _map2;
        }

        value = map[khash];
        object = block(key, value);

        if (object === $breaker) {
          return $breaker.$v;
        }

        if (object !== false && object !== nil) {
          keys2.push(key);
          map2[khash] = value;
        }
      }

      return result;
    
    };

    def['$select!'] = TMP_13 = function() {
      var self = this, $iter = TMP_13.$$p, block = $iter || nil;

      TMP_13.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("select!")
      };
      
      var _map = self.map,
          smap = self.smap,
          keys = self.keys,
          result = nil,
          key, khash, value, object;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          khash = key;
          map = smap;
        } else {
          khash = key.$hash();
          map = _map;
        }

        value = map[khash];
        object = block(key, value);

        if (object === $breaker) {
          return $breaker.$v;
        }

        if (object === false || object === nil) {
          keys.splice(i, 1);
          delete map[khash];

          length--;
          i--;
          result = self
        }
      }

      return result;
    
    };

    def.$shift = function() {
      var self = this;

      
      var keys = self.keys,
          _map = self.map,
          smap = self.smap,
          map, key, khash, value;

      if (keys.length) {
        key = keys[0];
        if (key.$$is_string) {
          khash = key;
          map = smap;
        } else {
          khash = key.$hash();
          map = _map;
        }
        value = map[khash];

        delete map[khash];
        keys.splice(0, 1);

        return [key, value];
      }

      return nil;
    
    };

    Opal.defn(self, '$size', def.$length);

    self.$alias_method("store", "[]=");

    def.$to_a = function() {
      var self = this;

      
      var keys = self.keys,
          _map = self.map,
          smap = self.smap,
          result = [],
          map, key;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          khash = key;
          map = smap;
        } else {
          khash = key.$hash();
          map = _map;
        }

        result.push([key, map[khash]]);
      }

      return result;
    
    };

    def.$to_h = function() {
      var self = this;

      
      if (self.$$class === Opal.Hash) {
        return self
      }

      var hash   = new Opal.Hash.$$alloc,
          cloned = self.$clone();

      hash.map  = cloned.map;
      hash.smap = cloned.smap;
      hash.keys = cloned.keys;
      hash.none = cloned.none;
      hash.proc = cloned.proc;

      return hash;
    ;
    };

    def.$to_hash = function() {
      var self = this;

      return self;
    };

    Opal.defn(self, '$to_s', def.$inspect);

    Opal.defn(self, '$update', def['$merge!']);

    Opal.defn(self, '$value?', def['$has_value?']);

    Opal.defn(self, '$values_at', def.$indexes);

    return (def.$values = function() {
      var self = this;

      
      var _map = self.map,
          smap = self.smap,
          keys = self.keys,
          result = [],
          map, khash;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          khash = key;
          map = smap;
        } else {
          khash = key.$hash();
          map = _map;
        }

        result.push(map[khash]);
      }

      return result;
    
    }, nil) && 'values';
  })(self, null);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/string"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$to_str', '$===', '$format', '$coerce_to', '$to_s', '$respond_to?', '$<=>', '$raise', '$=~', '$empty?', '$ljust', '$ceil', '$/', '$+', '$rjust', '$floor', '$to_a', '$each_char', '$to_proc', '$coerce_to!', '$initialize_clone', '$initialize_dup', '$enum_for', '$split', '$chomp', '$escape', '$class', '$to_i', '$!', '$each_line', '$match', '$new', '$try_convert', '$chars', '$&', '$join', '$is_a?', '$[]', '$str', '$value', '$proc', '$shift', '$__send__']);
  self.$require("corelib/comparable");
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7;

    def.length = nil;
    self.$include($scope.get('Comparable'));

    def.$$is_string = true;

    Opal.defs(self, '$try_convert', function(what) {
      var self = this;

      try {
      return what.$to_str()
      } catch ($err) {if (true) {
        return nil
        }else { throw $err; }
      };
    });

    Opal.defs(self, '$new', function(str) {
      var self = this;

      if (str == null) {
        str = ""
      }
      return new String(str);
    });

    def['$%'] = function(data) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](data)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = self).$format.apply($a, [self].concat(data))
        } else {
        return self.$format(self, data)
      };
    };

    def['$*'] = function(count) {
      var self = this;

      
      if (count < 1) {
        return '';
      }

      var result  = '',
          pattern = self;

      while (count > 0) {
        if (count & 1) {
          result += pattern;
        }

        count >>= 1;
        pattern += pattern;
      }

      return result;
    
    };

    def['$+'] = function(other) {
      var self = this;

      other = $scope.get('Opal').$coerce_to(other, $scope.get('String'), "to_str");
      return self + other.$to_s();
    };

    def['$<=>'] = function(other) {
      var $a, self = this;

      if ((($a = other['$respond_to?']("to_str")) !== nil && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_str().$to_s();
        return self > other ? 1 : (self < other ? -1 : 0);
        } else {
        
        var cmp = other['$<=>'](self);

        if (cmp === nil) {
          return nil;
        }
        else {
          return cmp > 0 ? -1 : (cmp < 0 ? 1 : 0);
        }
      ;
      };
    };

    def['$<<'] = function(other) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), "#<< not supported. Mutable String methods are not supported in Opal.");
    };

    def['$=='] = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('String')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return self.$to_s() == other.$to_s();
    };

    Opal.defn(self, '$eql?', def['$==']);

    Opal.defn(self, '$===', def['$==']);

    def['$=~'] = function(other) {
      var self = this;

      
      if (other.$$is_string) {
        self.$raise($scope.get('TypeError'), "type mismatch: String given");
      }

      return other['$=~'](self);
    ;
    };

    def['$[]'] = function(index, length) {
      var self = this;

      
      var size = self.length;

      if (index.$$is_range) {
        var exclude = index.exclude,
            length  = index.end,
            index   = index.begin;

        if (index < 0) {
          index += size;
        }

        if (length < 0) {
          length += size;
        }

        if (!exclude) {
          length += 1;
        }

        if (index > size) {
          return nil;
        }

        length = length - index;

        if (length < 0) {
          length = 0;
        }

        return self.substr(index, length);
      }

      if (index < 0) {
        index += self.length;
      }

      if (length == null) {
        if (index >= self.length || index < 0) {
          return nil;
        }

        return self.substr(index, 1);
      }

      if (index > self.length || index < 0) {
        return nil;
      }

      return self.substr(index, length);
    
    };

    def.$capitalize = function() {
      var self = this;

      return self.charAt(0).toUpperCase() + self.substr(1).toLowerCase();
    };

    Opal.defn(self, '$capitalize!', def['$<<']);

    def.$casecmp = function(other) {
      var self = this;

      other = $scope.get('Opal').$coerce_to(other, $scope.get('String'), "to_str").$to_s();
      return (self.toLowerCase())['$<=>'](other.toLowerCase());
    };

    def.$center = function(width, padstr) {
      var $a, self = this;

      if (padstr == null) {
        padstr = " "
      }
      width = $scope.get('Opal').$coerce_to(width, $scope.get('Integer'), "to_int");
      padstr = $scope.get('Opal').$coerce_to(padstr, $scope.get('String'), "to_str").$to_s();
      if ((($a = padstr['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "zero width padding")};
      if ((($a = width <= self.length) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self};
      
      var ljustified = self.$ljust((width['$+'](self.length))['$/'](2).$ceil(), padstr),
          rjustified = self.$rjust((width['$+'](self.length))['$/'](2).$floor(), padstr);

      return rjustified + ljustified.slice(self.length);
    ;
    };

    def.$chars = TMP_1 = function() {
      var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$each_char().$to_a()
      };
      return ($a = ($b = self).$each_char, $a.$$p = block.$to_proc(), $a).call($b);
    };

    def.$chomp = function(separator) {
      var $a, self = this;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"]
      }
      if ((($a = separator === nil || self.length === 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self};
      separator = $scope.get('Opal')['$coerce_to!'](separator, $scope.get('String'), "to_str").$to_s();
      
      if (separator === "\n") {
        return self.replace(/\r?\n?$/, '');
      }
      else if (separator === "") {
        return self.replace(/(\r?\n)+$/, '');
      }
      else if (self.length > separator.length) {
        var tail = self.substr(self.length - separator.length, separator.length);

        if (tail === separator) {
          return self.substr(0, self.length - separator.length);
        }
      }
    
      return self;
    };

    Opal.defn(self, '$chomp!', def['$<<']);

    def.$chop = function() {
      var self = this;

      
      var length = self.length;

      if (length <= 1) {
        return "";
      }

      if (self.charAt(length - 1) === "\n" && self.charAt(length - 2) === "\r") {
        return self.substr(0, length - 2);
      }
      else {
        return self.substr(0, length - 1);
      }
    
    };

    Opal.defn(self, '$chop!', def['$<<']);

    def.$chr = function() {
      var self = this;

      return self.charAt(0);
    };

    def.$clone = function() {
      var self = this, copy = nil;

      copy = self.slice();
      copy.$initialize_clone(self);
      return copy;
    };

    def.$dup = function() {
      var self = this, copy = nil;

      copy = self.slice();
      copy.$initialize_dup(self);
      return copy;
    };

    def.$count = function(str) {
      var self = this;

      return (self.length - self.replace(new RegExp(str, 'g'), '').length) / str.length;
    };

    Opal.defn(self, '$dup', def.$clone);

    def.$downcase = function() {
      var self = this;

      return self.toLowerCase();
    };

    Opal.defn(self, '$downcase!', def['$<<']);

    def.$each_char = TMP_2 = function() {
      var $a, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_char")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        ((($a = Opal.yield1(block, self.charAt(i))) === $breaker) ? $breaker.$v : $a);
      }
    
      return self;
    };

    def.$each_line = TMP_3 = function(separator) {
      var $a, self = this, $iter = TMP_3.$$p, $yield = $iter || nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"]
      }
      TMP_3.$$p = null;
      if (($yield !== nil)) {
        } else {
        return self.$split(separator)
      };
      
      var chomped  = self.$chomp(),
          trailing = self.length != chomped.length,
          splitted = chomped.split(separator);

      for (var i = 0, length = splitted.length; i < length; i++) {
        if (i < length - 1 || trailing) {
          ((($a = Opal.yield1($yield, splitted[i] + separator)) === $breaker) ? $breaker.$v : $a);
        }
        else {
          ((($a = Opal.yield1($yield, splitted[i])) === $breaker) ? $breaker.$v : $a);
        }
      }
    ;
      return self;
    };

    def['$empty?'] = function() {
      var self = this;

      return self.length === 0;
    };

    def['$end_with?'] = function(suffixes) {
      var self = this;

      suffixes = $slice.call(arguments, 0);
      
      for (var i = 0, length = suffixes.length; i < length; i++) {
        var suffix = $scope.get('Opal').$coerce_to(suffixes[i], $scope.get('String'), "to_str").$to_s();

        if (self.length >= suffix.length &&
            self.substr(self.length - suffix.length, suffix.length) == suffix) {
          return true;
        }
      }
    
      return false;
    };

    Opal.defn(self, '$eql?', def['$==']);

    Opal.defn(self, '$equal?', def['$===']);

    def.$gsub = TMP_4 = function(pattern, replace) {
      var $a, $b, self = this, $iter = TMP_4.$$p, block = $iter || nil;

      TMP_4.$$p = null;
      if ((($a = ((($b = $scope.get('String')['$==='](pattern)) !== false && $b !== nil) ? $b : pattern['$respond_to?']("to_str"))) !== nil && (!$a.$$is_boolean || $a == true))) {
        pattern = (new RegExp("" + $scope.get('Regexp').$escape(pattern.$to_str())))};
      if ((($a = $scope.get('Regexp')['$==='](pattern)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "wrong argument type " + (pattern.$class()) + " (expected Regexp)")
      };
      
      var pattern = pattern.toString(),
          options = pattern.substr(pattern.lastIndexOf('/') + 1) + 'g',
          regexp  = pattern.substr(1, pattern.lastIndexOf('/') - 1);

      self.$sub.$$p = block;
      return self.$sub(new RegExp(regexp, options), replace);
    
    };

    Opal.defn(self, '$gsub!', def['$<<']);

    def.$hash = function() {
      var self = this;

      return self.toString();
    };

    def.$hex = function() {
      var self = this;

      return self.$to_i(16);
    };

    def['$include?'] = function(other) {
      var $a, self = this;

      
      if (other.$$is_string) {
        return self.indexOf(other) !== -1;
      }
    
      if ((($a = other['$respond_to?']("to_str")) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "no implicit conversion of " + (other.$class()) + " into String")
      };
      return self.indexOf(other.$to_str()) !== -1;
    };

    def.$index = function(what, offset) {
      var $a, self = this, result = nil;

      if (offset == null) {
        offset = nil
      }
      if ((($a = $scope.get('String')['$==='](what)) !== nil && (!$a.$$is_boolean || $a == true))) {
        what = what.$to_s()
      } else if ((($a = what['$respond_to?']("to_str")) !== nil && (!$a.$$is_boolean || $a == true))) {
        what = what.$to_str().$to_s()
      } else if ((($a = $scope.get('Regexp')['$==='](what)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('TypeError'), "type mismatch: " + (what.$class()) + " given")};
      result = -1;
      if (offset !== false && offset !== nil) {
        offset = $scope.get('Opal').$coerce_to(offset, $scope.get('Integer'), "to_int");
        
        var size = self.length;

        if (offset < 0) {
          offset = offset + size;
        }

        if (offset > size) {
          return nil;
        }
      
        if ((($a = $scope.get('Regexp')['$==='](what)) !== nil && (!$a.$$is_boolean || $a == true))) {
          result = ((($a = (what['$=~'](self.substr(offset)))) !== false && $a !== nil) ? $a : -1)
          } else {
          result = self.substr(offset).indexOf(what)
        };
        
        if (result !== -1) {
          result += offset;
        }
      
      } else if ((($a = $scope.get('Regexp')['$==='](what)) !== nil && (!$a.$$is_boolean || $a == true))) {
        result = ((($a = (what['$=~'](self))) !== false && $a !== nil) ? $a : -1)
        } else {
        result = self.indexOf(what)
      };
      if ((($a = result === -1) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        return result
      };
    };

    def.$inspect = function() {
      var self = this;

      
      var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          meta      = {
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
          };

      escapable.lastIndex = 0;

      return escapable.test(self) ? '"' + self.replace(escapable, function(a) {
        var c = meta[a];

        return typeof c === 'string' ? c :
          '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
      }) + '"' : '"' + self + '"';
    
    };

    def.$intern = function() {
      var self = this;

      return self;
    };

    def.$lines = function(separator) {
      var self = this;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"]
      }
      return self.$each_line(separator).$to_a();
    };

    def.$length = function() {
      var self = this;

      return self.length;
    };

    def.$ljust = function(width, padstr) {
      var $a, self = this;

      if (padstr == null) {
        padstr = " "
      }
      width = $scope.get('Opal').$coerce_to(width, $scope.get('Integer'), "to_int");
      padstr = $scope.get('Opal').$coerce_to(padstr, $scope.get('String'), "to_str").$to_s();
      if ((($a = padstr['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "zero width padding")};
      if ((($a = width <= self.length) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self};
      
      var index  = -1,
          result = "";

      width -= self.length;

      while (++index < width) {
        result += padstr;
      }

      return self + result.slice(0, width);
    
    };

    def.$lstrip = function() {
      var self = this;

      return self.replace(/^\s*/, '');
    };

    Opal.defn(self, '$lstrip!', def['$<<']);

    def.$match = TMP_5 = function(pattern, pos) {
      var $a, $b, self = this, $iter = TMP_5.$$p, block = $iter || nil;

      TMP_5.$$p = null;
      if ((($a = ((($b = $scope.get('String')['$==='](pattern)) !== false && $b !== nil) ? $b : pattern['$respond_to?']("to_str"))) !== nil && (!$a.$$is_boolean || $a == true))) {
        pattern = (new RegExp("" + $scope.get('Regexp').$escape(pattern.$to_str())))};
      if ((($a = $scope.get('Regexp')['$==='](pattern)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "wrong argument type " + (pattern.$class()) + " (expected Regexp)")
      };
      return ($a = ($b = pattern).$match, $a.$$p = block.$to_proc(), $a).call($b, self, pos);
    };

    def.$next = function() {
      var self = this;

      
      if (self.length === 0) {
        return "";
      }

      var initial = self.substr(0, self.length - 1);
      var last    = String.fromCharCode(self.charCodeAt(self.length - 1) + 1);

      return initial + last;
    
    };

    Opal.defn(self, '$next!', def['$<<']);

    def.$ord = function() {
      var self = this;

      return self.charCodeAt(0);
    };

    def.$partition = function(str) {
      var self = this;

      
      var result = self.split(str);
      var splitter = (result[0].length === self.length ? "" : str);

      return [result[0], splitter, result.slice(1).join(str.toString())];
    
    };

    def.$reverse = function() {
      var self = this;

      return self.split('').reverse().join('');
    };

    Opal.defn(self, '$reverse!', def['$<<']);

    def.$rindex = function(search, offset) {
      var self = this;

      
      var search_type = (search == null ? Opal.NilClass : search.constructor);
      if (search_type != String && search_type != RegExp) {
        var msg = "type mismatch: " + search_type + " given";
        self.$raise($scope.get('TypeError').$new(msg));
      }

      if (self.length == 0) {
        return search.length == 0 ? 0 : nil;
      }

      var result = -1;
      if (offset != null) {
        if (offset < 0) {
          offset = self.length + offset;
        }

        if (search_type == String) {
          result = self.lastIndexOf(search, offset);
        }
        else {
          result = self.substr(0, offset + 1).$reverse().search(search);
          if (result !== -1) {
            result = offset - result;
          }
        }
      }
      else {
        if (search_type == String) {
          result = self.lastIndexOf(search);
        }
        else {
          result = self.$reverse().search(search);
          if (result !== -1) {
            result = self.length - 1 - result;
          }
        }
      }

      return result === -1 ? nil : result;
    
    };

    def.$rjust = function(width, padstr) {
      var $a, self = this;

      if (padstr == null) {
        padstr = " "
      }
      width = $scope.get('Opal').$coerce_to(width, $scope.get('Integer'), "to_int");
      padstr = $scope.get('Opal').$coerce_to(padstr, $scope.get('String'), "to_str").$to_s();
      if ((($a = padstr['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "zero width padding")};
      if ((($a = width <= self.length) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self};
      
      var chars     = Math.floor(width - self.length),
          patterns  = Math.floor(chars / padstr.length),
          result    = Array(patterns + 1).join(padstr),
          remaining = chars - result.length;

      return result + padstr.slice(0, remaining) + self;
    
    };

    def.$rstrip = function() {
      var self = this;

      return self.replace(/\s*$/, '');
    };

    def.$scan = TMP_6 = function(pattern) {
      var self = this, $iter = TMP_6.$$p, block = $iter || nil;

      TMP_6.$$p = null;
      
      if (pattern.global) {
        // should we clear it afterwards too?
        pattern.lastIndex = 0;
      }
      else {
        // rewrite regular expression to add the global flag to capture pre/post match
        pattern = new RegExp(pattern.source, 'g' + (pattern.multiline ? 'm' : '') + (pattern.ignoreCase ? 'i' : ''));
      }

      var result = [];
      var match;

      while ((match = pattern.exec(self)) != null) {
        var match_data = $scope.get('MatchData').$new(pattern, match);
        if (block === nil) {
          match.length == 1 ? result.push(match[0]) : result.push(match.slice(1));
        }
        else {
          match.length == 1 ? block(match[0]) : block.apply(self, match.slice(1));
        }
      }

      return (block !== nil ? self : result);
    
    };

    Opal.defn(self, '$size', def.$length);

    Opal.defn(self, '$slice', def['$[]']);

    Opal.defn(self, '$slice!', def['$<<']);

    def.$split = function(pattern, limit) {
      var self = this, $a;
      if ($gvars[";"] == null) $gvars[";"] = nil;

      if (pattern == null) {
        pattern = ((($a = $gvars[";"]) !== false && $a !== nil) ? $a : " ")
      }
      
      if (pattern === nil || pattern === undefined) {
        pattern = $gvars[";"];
      }

      var result = [];
      if (limit !== undefined) {
        limit = $scope.get('Opal')['$coerce_to!'](limit, $scope.get('Integer'), "to_int");
      }

      if (self.length === 0) {
        return [];
      }

      if (limit === 1) {
        return [self];
      }

      if (pattern && pattern.$$is_regexp) {
        var pattern_str = pattern.toString();

        /* Opal and JS's repr of an empty RE. */
        var blank_pattern = (pattern_str.substr(0, 3) == '/^/') ||
                  (pattern_str.substr(0, 6) == '/(?:)/');

        /* This is our fast path */
        if (limit === undefined || limit === 0) {
          result = self.split(blank_pattern ? /(?:)/ : pattern);
        }
        else {
          /* RegExp.exec only has sane behavior with global flag */
          if (! pattern.global) {
            pattern = eval(pattern_str + 'g');
          }

          var match_data;
          var prev_index = 0;
          pattern.lastIndex = 0;

          while ((match_data = pattern.exec(self)) !== null) {
            var segment = self.slice(prev_index, match_data.index);
            result.push(segment);

            prev_index = pattern.lastIndex;

            if (match_data[0].length === 0) {
              if (blank_pattern) {
                /* explicitly split on JS's empty RE form.*/
                pattern = /(?:)/;
              }

              result = self.split(pattern);
              /* with "unlimited", ruby leaves a trail on blanks. */
              if (limit !== undefined && limit < 0 && blank_pattern) {
                result.push('');
              }

              prev_index = undefined;
              break;
            }

            if (limit !== undefined && limit > 1 && result.length + 1 == limit) {
              break;
            }
          }

          if (prev_index !== undefined) {
            result.push(self.slice(prev_index, self.length));
          }
        }
      }
      else {
        var splitted = 0, start = 0, lim = 0;

        if (pattern === nil || pattern === undefined) {
          pattern = ' '
        } else {
          pattern = $scope.get('Opal').$try_convert(pattern, $scope.get('String'), "to_str").$to_s();
        }

        var string = (pattern == ' ') ? self.replace(/[\r\n\t\v]\s+/g, ' ')
                                      : self;
        var cursor = -1;
        while ((cursor = string.indexOf(pattern, start)) > -1 && cursor < string.length) {
          if (splitted + 1 === limit) {
            break;
          }

          if (pattern == ' ' && cursor == start) {
            start = cursor + 1;
            continue;
          }

          result.push(string.substr(start, pattern.length ? cursor - start : 1));
          splitted++;

          start = cursor + (pattern.length ? pattern.length : 1);
        }

        if (string.length > 0 && (limit < 0 || string.length > start)) {
          if (string.length == start) {
            result.push('');
          }
          else {
            result.push(string.substr(start, string.length));
          }
        }
      }

      if (limit === undefined || limit === 0) {
        while (result[result.length-1] === '') {
          result.length = result.length - 1;
        }
      }

      if (limit > 0) {
        var tail = result.slice(limit - 1).join('');
        result.splice(limit - 1, result.length - 1, tail);
      }

      return result;
    ;
    };

    def.$squeeze = function(sets) {
      var self = this;

      sets = $slice.call(arguments, 0);
      
      if (sets.length === 0) {
        return self.replace(/(.)\1+/g, '$1');
      }
    
      
      var set = $scope.get('Opal').$coerce_to(sets[0], $scope.get('String'), "to_str").$chars();

      for (var i = 1, length = sets.length; i < length; i++) {
        set = (set)['$&']($scope.get('Opal').$coerce_to(sets[i], $scope.get('String'), "to_str").$chars());
      }

      if (set.length === 0) {
        return self;
      }

      return self.replace(new RegExp("([" + $scope.get('Regexp').$escape((set).$join()) + "])\\1+", "g"), "$1");
    ;
    };

    Opal.defn(self, '$squeeze!', def['$<<']);

    def['$start_with?'] = function(prefixes) {
      var self = this;

      prefixes = $slice.call(arguments, 0);
      
      for (var i = 0, length = prefixes.length; i < length; i++) {
        var prefix = $scope.get('Opal').$coerce_to(prefixes[i], $scope.get('String'), "to_str").$to_s();

        if (self.indexOf(prefix) === 0) {
          return true;
        }
      }

      return false;
    
    };

    def.$strip = function() {
      var self = this;

      return self.replace(/^\s*/, '').replace(/\s*$/, '');
    };

    Opal.defn(self, '$strip!', def['$<<']);

    
    // convert Ruby back reference to JavaScript back reference
    function convertReplace(replace) {
      return replace.replace(
        /(^|[^\\])\\(\d)/g, function(a, b, c) { return b + '$' + c }
      ).replace(
        /(^|[^\\])(\\\\)+\\\\(\d)/g, '$1$2\\$3'
      ).replace(
        /(^|[^\\])(?:(\\)\\)+([^\\]|$)/g, '$1$2$3'
      );
    }
  

    def.$sub = TMP_7 = function(pattern, replace) {
      var self = this, $iter = TMP_7.$$p, block = $iter || nil;

      TMP_7.$$p = null;
      
      if (typeof(pattern) !== 'string' && !pattern.$$is_regexp) {
        pattern = $scope.get('Opal')['$coerce_to!'](pattern, $scope.get('String'), "to_str");
      }

      if (replace !== undefined) {
        if (replace['$is_a?']($scope.get('Hash'))) {
          return self.replace(pattern, function(str) {
            var value = replace['$[]'](self.$str());

            return (value == null) ? nil : self.$value().$to_s();
          });
        }
        else {
          if (typeof(replace) !== 'string') {
            replace = $scope.get('Opal')['$coerce_to!'](replace, $scope.get('String'), "to_str");
          }

          replace = convertReplace(replace);
          return self.replace(pattern, replace);
        }

      }
      else if (block != null && block !== nil) {
        return self.replace(pattern, function() {
          // FIXME: this should be a formal MatchData object with all the goodies
          var match_data = []
          for (var i = 0, len = arguments.length; i < len; i++) {
            var arg = arguments[i];
            if (arg == undefined) {
              match_data.push(nil);
            }
            else {
              match_data.push(arg);
            }
          }

          var str = match_data.pop();
          var offset = match_data.pop();
          var match_len = match_data.length;

          // $1, $2, $3 not being parsed correctly in Ruby code
          for (var i = 1; i < match_len; i++) {
            Opal.gvars[String(i)] = match_data[i];
          }
          $gvars["&"] = match_data[0];
          $gvars["~"] = match_data;
          return block(match_data[0]);
        });
      }
      else {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (1 for 2)")
      }
    ;
    };

    Opal.defn(self, '$sub!', def['$<<']);

    Opal.defn(self, '$succ', def.$next);

    Opal.defn(self, '$succ!', def['$<<']);

    def.$sum = function(n) {
      var self = this;

      if (n == null) {
        n = 16
      }
      
      var result = 0;

      for (var i = 0, length = self.length; i < length; i++) {
        result += (self.charCodeAt(i) % ((1 << n) - 1));
      }

      return result;
    
    };

    def.$swapcase = function() {
      var self = this;

      
      var str = self.replace(/([a-z]+)|([A-Z]+)/g, function($0,$1,$2) {
        return $1 ? $0.toUpperCase() : $0.toLowerCase();
      });

      if (self.constructor === String) {
        return str;
      }

      return self.$class().$new(str);
    
    };

    Opal.defn(self, '$swapcase!', def['$<<']);

    def.$to_f = function() {
      var self = this;

      
      if (self.charAt(0) === '_') {
        return 0;
      }

      var result = parseFloat(self.replace(/_/g, ''));

      if (isNaN(result) || result == Infinity || result == -Infinity) {
        return 0;
      }
      else {
        return result;
      }
    
    };

    def.$to_i = function(base) {
      var self = this;

      if (base == null) {
        base = 10
      }
      
      var result = parseInt(self, base);

      if (isNaN(result)) {
        return 0;
      }

      return result;
    
    };

    def.$to_proc = function() {
      var $a, $b, TMP_8, self = this, sym = nil;

      sym = self;
      return ($a = ($b = self).$proc, $a.$$p = (TMP_8 = function(args){var self = TMP_8.$$s || this, block, $a, $b, obj = nil;
args = $slice.call(arguments, 0);
        block = TMP_8.$$p || nil, TMP_8.$$p = null;
      if ((($a = args['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError'), "no receiver given")};
        obj = args.$shift();
        return ($a = ($b = obj).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, [sym].concat(args));}, TMP_8.$$s = self, TMP_8), $a).call($b);
    };

    def.$to_s = function() {
      var self = this;

      return self.toString();
    };

    Opal.defn(self, '$to_str', def.$to_s);

    Opal.defn(self, '$to_sym', def.$intern);

    def.$tr = function(from, to) {
      var self = this;

      
      if (from.length == 0 || from === to) {
        return self;
      }

      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^') {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      var in_range = false;
      for (var i = 0; i < from_length; i++) {
        var ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          var start = last_from.charCodeAt(0) + 1;
          var end = ch.charCodeAt(0);
          for (var c = start; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (var i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          var in_range = false;
          for (var i = 0; i < to_length; i++) {
            var ch = to_chars[i];
            if (last_from == null) {
              last_from = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              var start = last_from.charCodeAt(0) + 1;
              var end = ch.charCodeAt(0);
              for (var c = start; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_from = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (var i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (var i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }

      var new_str = ''
      for (var i = 0, length = self.length; i < length; i++) {
        var ch = self.charAt(i);
        var sub = subs[ch];
        if (inverse) {
          new_str += (sub == null ? global_sub : ch);
        }
        else {
          new_str += (sub != null ? sub : ch);
        }
      }
      return new_str;
    
    };

    Opal.defn(self, '$tr!', def['$<<']);

    def.$tr_s = function(from, to) {
      var self = this;

      
      if (from.length == 0) {
        return self;
      }

      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^') {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      var in_range = false;
      for (var i = 0; i < from_length; i++) {
        var ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          var start = last_from.charCodeAt(0) + 1;
          var end = ch.charCodeAt(0);
          for (var c = start; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (var i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          var in_range = false;
          for (var i = 0; i < to_length; i++) {
            var ch = to_chars[i];
            if (last_from == null) {
              last_from = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              var start = last_from.charCodeAt(0) + 1;
              var end = ch.charCodeAt(0);
              for (var c = start; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_from = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (var i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (var i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }
      var new_str = ''
      var last_substitute = null
      for (var i = 0, length = self.length; i < length; i++) {
        var ch = self.charAt(i);
        var sub = subs[ch]
        if (inverse) {
          if (sub == null) {
            if (last_substitute == null) {
              new_str += global_sub;
              last_substitute = true;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
        else {
          if (sub != null) {
            if (last_substitute == null || last_substitute !== sub) {
              new_str += sub;
              last_substitute = sub;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
      }
      return new_str;
    
    };

    Opal.defn(self, '$tr_s!', def['$<<']);

    def.$upcase = function() {
      var self = this;

      return self.toUpperCase();
    };

    Opal.defn(self, '$upcase!', def['$<<']);

    def.$freeze = function() {
      var self = this;

      return self;
    };

    return (def['$frozen?'] = function() {
      var self = this;

      return true;
    }, nil) && 'frozen?';
  })(self, null);
  return Opal.cdecl($scope, 'Symbol', $scope.get('String'));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/string/inheritance"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$new', '$allocate', '$initialize', '$to_proc', '$__send__', '$class', '$clone', '$respond_to?', '$==', '$inspect']);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defs(self, '$inherited', function(klass) {
      var self = this, replace = nil;

      replace = $scope.get('Class').$new((($scope.get('String')).$$scope.get('Wrapper')));
      
      klass.$$proto         = replace.$$proto;
      klass.$$proto.$$class = klass;
      klass.$$alloc         = replace.$$alloc;
      klass.$$parent        = (($scope.get('String')).$$scope.get('Wrapper'));

      klass.$allocate = replace.$allocate;
      klass.$new      = replace.$new;
    
    }), nil) && 'inherited'
  })(self, null);
  return (function($base, $super) {
    function $Wrapper(){};
    var self = $Wrapper = $klass($base, $super, 'Wrapper', $Wrapper);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

    def.literal = nil;
    Opal.defs(self, '$allocate', TMP_1 = function(string) {
      var self = this, $iter = TMP_1.$$p, $yield = $iter || nil, obj = nil;

      if (string == null) {
        string = ""
      }
      TMP_1.$$p = null;
      obj = Opal.find_super_dispatcher(self, 'allocate', TMP_1, null, $Wrapper).apply(self, []);
      obj.literal = string;
      return obj;
    });

    Opal.defs(self, '$new', TMP_2 = function(args) {
      var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil, obj = nil;

      args = $slice.call(arguments, 0);
      TMP_2.$$p = null;
      obj = self.$allocate();
      ($a = ($b = obj).$initialize, $a.$$p = block.$to_proc(), $a).apply($b, [].concat(args));
      return obj;
    });

    Opal.defs(self, '$[]', function(objects) {
      var self = this;

      objects = $slice.call(arguments, 0);
      return self.$allocate(objects);
    });

    def.$initialize = function(string) {
      var self = this;

      if (string == null) {
        string = ""
      }
      return self.literal = string;
    };

    def.$method_missing = TMP_3 = function(args) {
      var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil, result = nil;

      args = $slice.call(arguments, 0);
      TMP_3.$$p = null;
      result = ($a = ($b = self.literal).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, [].concat(args));
      if ((($a = result.$$is_string != null) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = result == self.literal) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self
          } else {
          return self.$class().$allocate(result)
        }
        } else {
        return result
      };
    };

    def.$initialize_copy = function(other) {
      var self = this;

      return self.literal = (other.literal).$clone();
    };

    def['$respond_to?'] = TMP_4 = function(name) {var $zuper = $slice.call(arguments, 0);
      var $a, self = this, $iter = TMP_4.$$p, $yield = $iter || nil;

      TMP_4.$$p = null;
      return ((($a = Opal.find_super_dispatcher(self, 'respond_to?', TMP_4, $iter).apply(self, $zuper)) !== false && $a !== nil) ? $a : self.literal['$respond_to?'](name));
    };

    def['$=='] = function(other) {
      var self = this;

      return self.literal['$=='](other);
    };

    Opal.defn(self, '$eql?', def['$==']);

    Opal.defn(self, '$===', def['$==']);

    def.$to_s = function() {
      var self = this;

      return self.literal;
    };

    def.$to_str = function() {
      var self = this;

      return self;
    };

    return (def.$inspect = function() {
      var self = this;

      return self.literal.$inspect();
    }, nil) && 'inspect';
  })($scope.get('String'), null);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/match_data"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_reader', '$[]', '$===', '$!', '$==', '$raise', '$inspect']);
  return (function($base, $super) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $scope = self.$$scope;

    def.string = def.matches = def.begin = nil;
    self.$attr_reader("post_match", "pre_match", "regexp", "string");

    def.$initialize = function(regexp, match_groups) {
      var self = this;

      $gvars["~"] = self;
      self.regexp = regexp;
      self.begin = match_groups.index;
      self.string = match_groups.input;
      self.pre_match = self.string.substr(0, regexp.lastIndex - match_groups[0].length);
      self.post_match = self.string.substr(regexp.lastIndex);
      self.matches = [];
      
      for (var i = 0, length = match_groups.length; i < length; i++) {
        var group = match_groups[i];

        if (group == null) {
          self.matches.push(nil);
        }
        else {
          self.matches.push(group);
        }
      }
    
    };

    def['$[]'] = function(args) {
      var $a, self = this;

      args = $slice.call(arguments, 0);
      return ($a = self.matches)['$[]'].apply($a, [].concat(args));
    };

    def['$=='] = function(other) {
      var $a, $b, $c, $d, self = this;

      if ((($a = $scope.get('MatchData')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return ($a = ($b = ($c = ($d = self.string == other.string, $d !== false && $d !== nil ?self.regexp == other.regexp : $d), $c !== false && $c !== nil ?self.pre_match == other.pre_match : $c), $b !== false && $b !== nil ?self.post_match == other.post_match : $b), $a !== false && $a !== nil ?self.begin == other.begin : $a);
    };

    def.$begin = function(pos) {
      var $a, $b, self = this;

      if ((($a = ($b = pos['$=='](0)['$!'](), $b !== false && $b !== nil ?pos['$=='](1)['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "MatchData#begin only supports 0th element")};
      return self.begin;
    };

    def.$captures = function() {
      var self = this;

      return self.matches.slice(1);
    };

    def.$inspect = function() {
      var self = this;

      
      var str = "#<MatchData " + (self.matches[0]).$inspect();

      for (var i = 1, length = self.matches.length; i < length; i++) {
        str += " " + i + ":" + (self.matches[i]).$inspect();
      }

      return str + ">";
    ;
    };

    def.$length = function() {
      var self = this;

      return self.matches.length;
    };

    Opal.defn(self, '$size', def.$length);

    def.$to_a = function() {
      var self = this;

      return self.matches;
    };

    def.$to_s = function() {
      var self = this;

      return self.matches[0];
    };

    return (def.$values_at = function(indexes) {
      var self = this;

      indexes = $slice.call(arguments, 0);
      
      var values       = [],
          match_length = self.matches.length;

      for (var i = 0, length = indexes.length; i < length; i++) {
        var pos = indexes[i];

        if (pos >= 0) {
          values.push(self.matches[pos]);
        }
        else {
          pos += match_length;

          if (pos > 0) {
            values.push(self.matches[pos]);
          }
          else {
            values.push(nil);
          }
        }
      }

      return values;
    ;
    }, nil) && 'values_at';
  })(self, null)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/numeric"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$coerce', '$===', '$raise', '$class', '$__send__', '$send_coerced', '$coerce_to!', '$-@', '$**', '$-', '$respond_to?', '$==', '$enum_for', '$gcd', '$lcm', '$<', '$>', '$floor', '$/', '$%']);
  self.$require("corelib/comparable");
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6;

    self.$include($scope.get('Comparable'));

    def.$$is_number = true;

    def.$coerce = function(other, type) {
      var self = this, $case = nil;

      if (type == null) {
        type = "operation"
      }
      try {
      
      if (other.$$is_number) {
        return [self, other];
      }
      else {
        return other.$coerce(self);
      }
    
      } catch ($err) {if (true) {
        return (function() {$case = type;if ("operation"['$===']($case)) {return self.$raise($scope.get('TypeError'), "" + (other.$class()) + " can't be coerced into Numeric")}else if ("comparison"['$===']($case)) {return self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")}else { return nil }})()
        }else { throw $err; }
      };
    };

    def.$send_coerced = function(method, other) {
      var $a, self = this, type = nil, $case = nil, a = nil, b = nil;

      type = (function() {$case = method;if ("+"['$===']($case) || "-"['$===']($case) || "*"['$===']($case) || "/"['$===']($case) || "%"['$===']($case) || "&"['$===']($case) || "|"['$===']($case) || "^"['$===']($case) || "**"['$===']($case)) {return "operation"}else if (">"['$===']($case) || ">="['$===']($case) || "<"['$===']($case) || "<="['$===']($case) || "<=>"['$===']($case)) {return "comparison"}else { return nil }})();
      $a = Opal.to_ary(self.$coerce(other, type)), a = ($a[0] == null ? nil : $a[0]), b = ($a[1] == null ? nil : $a[1]);
      return a.$__send__(method, b);
    };

    def['$+'] = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self + other;
      }
      else {
        return self.$send_coerced("+", other);
      }
    
    };

    def['$-'] = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self - other;
      }
      else {
        return self.$send_coerced("-", other);
      }
    
    };

    def['$*'] = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self * other;
      }
      else {
        return self.$send_coerced("*", other);
      }
    
    };

    def['$/'] = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self / other;
      }
      else {
        return self.$send_coerced("/", other);
      }
    
    };

    def['$%'] = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        if (other < 0 || self < 0) {
          return (self % other + other) % other;
        }
        else {
          return self % other;
        }
      }
      else {
        return self.$send_coerced("%", other);
      }
    
    };

    def['$&'] = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self & other;
      }
      else {
        return self.$send_coerced("&", other);
      }
    
    };

    def['$|'] = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self | other;
      }
      else {
        return self.$send_coerced("|", other);
      }
    
    };

    def['$^'] = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self ^ other;
      }
      else {
        return self.$send_coerced("^", other);
      }
    
    };

    def['$<'] = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self < other;
      }
      else {
        return self.$send_coerced("<", other);
      }
    
    };

    def['$<='] = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self <= other;
      }
      else {
        return self.$send_coerced("<=", other);
      }
    
    };

    def['$>'] = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self > other;
      }
      else {
        return self.$send_coerced(">", other);
      }
    
    };

    def['$>='] = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self >= other;
      }
      else {
        return self.$send_coerced(">=", other);
      }
    
    };

    def['$<=>'] = function(other) {
      var self = this;

      try {
      
      if (other.$$is_number) {
        return self > other ? 1 : (self < other ? -1 : 0);
      }
      else {
        return self.$send_coerced("<=>", other);
      }
    
      } catch ($err) {if (Opal.rescue($err, [$scope.get('ArgumentError')])) {
        return nil
        }else { throw $err; }
      };
    };

    def['$<<'] = function(count) {
      var self = this;

      count = $scope.get('Opal')['$coerce_to!'](count, $scope.get('Integer'), "to_int");
      return count > 0 ? self << count : self >> -count;
    };

    def['$>>'] = function(count) {
      var self = this;

      count = $scope.get('Opal')['$coerce_to!'](count, $scope.get('Integer'), "to_int");
      return count > 0 ? self >> count : self << -count;
    };

    def['$[]'] = function(bit) {
      var self = this, min = nil, max = nil;

      bit = $scope.get('Opal')['$coerce_to!'](bit, $scope.get('Integer'), "to_int");
      min = ((2)['$**'](30))['$-@']();
      max = ((2)['$**'](30))['$-'](1);
      return (bit < min || bit > max) ? 0 : (self >> bit) % 2;
    };

    def['$+@'] = function() {
      var self = this;

      return +self;
    };

    def['$-@'] = function() {
      var self = this;

      return -self;
    };

    def['$~'] = function() {
      var self = this;

      return ~self;
    };

    def['$**'] = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return Math.pow(self, other);
      }
      else {
        return self.$send_coerced("**", other);
      }
    
    };

    def['$=='] = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self == Number(other);
      }
      else if (other['$respond_to?']("==")) {
        return other['$=='](self);
      }
      else {
        return false;
      }
    ;
    };

    def.$abs = function() {
      var self = this;

      return Math.abs(self);
    };

    def.$ceil = function() {
      var self = this;

      return Math.ceil(self);
    };

    def.$chr = function(encoding) {
      var self = this;

      return String.fromCharCode(self);
    };

    def.$conj = function() {
      var self = this;

      return self;
    };

    Opal.defn(self, '$conjugate', def.$conj);

    def.$downto = TMP_1 = function(finish) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("downto", finish)
      };
      
      for (var i = self; i >= finish; i--) {
        if (block(i) === $breaker) {
          return $breaker.$v;
        }
      }
    
      return self;
    };

    Opal.defn(self, '$eql?', def['$==']);

    Opal.defn(self, '$equal?', def['$==']);

    def['$even?'] = function() {
      var self = this;

      return self % 2 === 0;
    };

    def.$floor = function() {
      var self = this;

      return Math.floor(self);
    };

    def.$gcd = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "not an integer")
      };
      
      var min = Math.abs(self),
          max = Math.abs(other);

      while (min > 0) {
        var tmp = min;

        min = max % min;
        max = tmp;
      }

      return max;
    
    };

    def.$gcdlcm = function(other) {
      var self = this;

      return [self.$gcd(), self.$lcm()];
    };

    def.$hash = function() {
      var self = this;

      return 'Numeric:'+self.toString();
    };

    def['$integer?'] = function() {
      var self = this;

      return self % 1 === 0;
    };

    def['$is_a?'] = TMP_2 = function(klass) {var $zuper = $slice.call(arguments, 0);
      var $a, $b, self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

      TMP_2.$$p = null;
      if ((($a = (($b = klass['$==']($scope.get('Fixnum'))) ? $scope.get('Integer')['$==='](self) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.get('Integer'))) ? $scope.get('Integer')['$==='](self) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.get('Float'))) ? $scope.get('Float')['$==='](self) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return true};
      return Opal.find_super_dispatcher(self, 'is_a?', TMP_2, $iter).apply(self, $zuper);
    };

    Opal.defn(self, '$kind_of?', def['$is_a?']);

    def['$instance_of?'] = TMP_3 = function(klass) {var $zuper = $slice.call(arguments, 0);
      var $a, $b, self = this, $iter = TMP_3.$$p, $yield = $iter || nil;

      TMP_3.$$p = null;
      if ((($a = (($b = klass['$==']($scope.get('Fixnum'))) ? $scope.get('Integer')['$==='](self) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.get('Integer'))) ? $scope.get('Integer')['$==='](self) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.get('Float'))) ? $scope.get('Float')['$==='](self) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return true};
      return Opal.find_super_dispatcher(self, 'instance_of?', TMP_3, $iter).apply(self, $zuper);
    };

    def.$lcm = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "not an integer")
      };
      
      if (self == 0 || other == 0) {
        return 0;
      }
      else {
        return Math.abs(self * other / self.$gcd(other));
      }
    
    };

    Opal.defn(self, '$magnitude', def.$abs);

    Opal.defn(self, '$modulo', def['$%']);

    def.$next = function() {
      var self = this;

      return self + 1;
    };

    def['$nonzero?'] = function() {
      var self = this;

      return self == 0 ? nil : self;
    };

    def['$odd?'] = function() {
      var self = this;

      return self % 2 !== 0;
    };

    def.$ord = function() {
      var self = this;

      return self;
    };

    def.$pred = function() {
      var self = this;

      return self - 1;
    };

    def.$round = function(ndigits) {
      var self = this;

      if (ndigits == null) {
        ndigits = 0
      }
      
      var scale = Math.pow(10, ndigits);
      return Math.round(self * scale) / scale;
    
    };

    def.$step = TMP_4 = function(limit, step) {
      var $a, self = this, $iter = TMP_4.$$p, block = $iter || nil;

      if (step == null) {
        step = 1
      }
      TMP_4.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("step", limit, step)
      };
      if ((($a = step == 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "step cannot be 0")};
      
      var value = self;

      if (step > 0) {
        while (value <= limit) {
          block(value);
          value += step;
        }
      }
      else {
        while (value >= limit) {
          block(value);
          value += step;
        }
      }
    
      return self;
    };

    Opal.defn(self, '$succ', def.$next);

    def.$times = TMP_5 = function() {
      var self = this, $iter = TMP_5.$$p, block = $iter || nil;

      TMP_5.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("times")
      };
      
      for (var i = 0; i < self; i++) {
        if (block(i) === $breaker) {
          return $breaker.$v;
        }
      }
    
      return self;
    };

    def.$to_f = function() {
      var self = this;

      return self;
    };

    def.$to_i = function() {
      var self = this;

      return parseInt(self);
    };

    Opal.defn(self, '$to_int', def.$to_i);

    def.$to_s = function(base) {
      var $a, $b, self = this;

      if (base == null) {
        base = 10
      }
      if ((($a = ((($b = base['$<'](2)) !== false && $b !== nil) ? $b : base['$>'](36))) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "base must be between 2 and 36")};
      return self.toString(base);
    };

    Opal.defn(self, '$inspect', def.$to_s);

    def.$divmod = function(rhs) {
      var self = this, q = nil, r = nil;

      q = (self['$/'](rhs)).$floor();
      r = self['$%'](rhs);
      return [q, r];
    };

    def.$upto = TMP_6 = function(finish) {
      var self = this, $iter = TMP_6.$$p, block = $iter || nil;

      TMP_6.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("upto", finish)
      };
      
      for (var i = self; i <= finish; i++) {
        if (block(i) === $breaker) {
          return $breaker.$v;
        }
      }
    
      return self;
    };

    def['$zero?'] = function() {
      var self = this;

      return self == 0;
    };

    def.$size = function() {
      var self = this;

      return 4;
    };

    def['$nan?'] = function() {
      var self = this;

      return isNaN(self);
    };

    def['$finite?'] = function() {
      var self = this;

      return self != Infinity && self != -Infinity;
    };

    def['$infinite?'] = function() {
      var self = this;

      
      if (self == Infinity) {
        return +1;
      }
      else if (self == -Infinity) {
        return -1;
      }
      else {
        return nil;
      }
    
    };

    def['$positive?'] = function() {
      var self = this;

      return 1 / self > 0;
    };

    return (def['$negative?'] = function() {
      var self = this;

      return 1 / self < 0;
    }, nil) && 'negative?';
  })(self, null);
  Opal.cdecl($scope, 'Fixnum', $scope.get('Numeric'));
  (function($base, $super) {
    function $Integer(){};
    var self = $Integer = $klass($base, $super, 'Integer', $Integer);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defs(self, '$===', function(other) {
      var self = this;

      
      if (!other.$$is_number) {
        return false;
      }

      return (other % 1) === 0;
    
    }), nil) && '==='
  })(self, $scope.get('Numeric'));
  return (function($base, $super) {
    function $Float(){};
    var self = $Float = $klass($base, $super, 'Float', $Float);

    var def = self.$$proto, $scope = self.$$scope, $a;

    Opal.defs(self, '$===', function(other) {
      var self = this;

      return !!other.$$is_number;
    });

    Opal.cdecl($scope, 'INFINITY', Infinity);

    Opal.cdecl($scope, 'NAN', NaN);

    if ((($a = (typeof(Number.EPSILON) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      return Opal.cdecl($scope, 'EPSILON', Number.EPSILON)
      } else {
      return Opal.cdecl($scope, 'EPSILON', 2.2204460492503130808472633361816E-16)
    };
  })(self, $scope.get('Numeric'));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/complex"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super) {
    function $Complex(){};
    var self = $Complex = $klass($base, $super, 'Complex', $Complex);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('Numeric'))
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/rational"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super) {
    function $Rational(){};
    var self = $Rational = $klass($base, $super, 'Rational', $Rational);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('Numeric'))
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/proc"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$raise']);
  return (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    def.$$is_proc = true;

    def.$$is_lambda = false;

    Opal.defs(self, '$new', TMP_1 = function() {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        self.$raise($scope.get('ArgumentError'), "tried to create a Proc object without a block")
      };
      return block;
    });

    def.$call = TMP_2 = function(args) {
      var self = this, $iter = TMP_2.$$p, block = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_2.$$p = null;
      
      if (block !== nil) {
        self.$$p = block;
      }

      var result;

      if (self.$$is_lambda) {
        result = self.apply(null, args);
      }
      else {
        result = Opal.yieldX(self, args);
      }

      if (result === $breaker) {
        return $breaker.$v;
      }

      return result;
    
    };

    Opal.defn(self, '$[]', def.$call);

    def.$to_proc = function() {
      var self = this;

      return self;
    };

    def['$lambda?'] = function() {
      var self = this;

      return !!self.$$is_lambda;
    };

    return (def.$arity = function() {
      var self = this;

      return self.length;
    }, nil) && 'arity';
  })(self, null)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/method"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$class', '$arity', '$new', '$name']);
  (function($base, $super) {
    function $Method(){};
    var self = $Method = $klass($base, $super, 'Method', $Method);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    def.method = def.receiver = def.owner = def.name = def.obj = nil;
    self.$attr_reader("owner", "receiver", "name");

    def.$initialize = function(receiver, method, name) {
      var self = this;

      self.receiver = receiver;
      self.owner = receiver.$class();
      self.name = name;
      return self.method = method;
    };

    def.$arity = function() {
      var self = this;

      return self.method.$arity();
    };

    def.$call = TMP_1 = function(args) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_1.$$p = null;
      
      self.method.$$p = block;

      return self.method.apply(self.receiver, args);
    ;
    };

    Opal.defn(self, '$[]', def.$call);

    def.$unbind = function() {
      var self = this;

      return $scope.get('UnboundMethod').$new(self.owner, self.method, self.name);
    };

    def.$to_proc = function() {
      var self = this;

      return self.method;
    };

    return (def.$inspect = function() {
      var self = this;

      return "#<Method: " + (self.obj.$class()) + "#" + (self.name) + "}>";
    }, nil) && 'inspect';
  })(self, null);
  return (function($base, $super) {
    function $UnboundMethod(){};
    var self = $UnboundMethod = $klass($base, $super, 'UnboundMethod', $UnboundMethod);

    var def = self.$$proto, $scope = self.$$scope;

    def.method = def.name = def.owner = nil;
    self.$attr_reader("owner", "name");

    def.$initialize = function(owner, method, name) {
      var self = this;

      self.owner = owner;
      self.method = method;
      return self.name = name;
    };

    def.$arity = function() {
      var self = this;

      return self.method.$arity();
    };

    def.$bind = function(object) {
      var self = this;

      return $scope.get('Method').$new(object, self.method, self.name);
    };

    return (def.$inspect = function() {
      var self = this;

      return "#<UnboundMethod: " + (self.owner.$name()) + "#" + (self.name) + ">";
    }, nil) && 'inspect';
  })(self, null);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/range"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$attr_reader', '$<=>', '$raise', '$include?', '$<=', '$<', '$enum_for', '$succ', '$!', '$==', '$===', '$exclude_end?', '$eql?', '$begin', '$end', '$-', '$abs', '$to_i', '$inspect']);
  self.$require("corelib/enumerable");
  return (function($base, $super) {
    function $Range(){};
    var self = $Range = $klass($base, $super, 'Range', $Range);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

    def.begin = def.exclude = def.end = nil;
    self.$include($scope.get('Enumerable'));

    def.$$is_range = true;

    self.$attr_reader("begin", "end");

    def.$initialize = function(first, last, exclude) {
      var $a, self = this;

      if (exclude == null) {
        exclude = false
      }
      if ((($a = first['$<=>'](last)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'))
      };
      self.begin = first;
      self.end = last;
      return self.exclude = exclude;
    };

    def['$=='] = function(other) {
      var self = this;

      
      if (!other.$$is_range) {
        return false;
      }

      return self.exclude === other.exclude &&
             self.begin   ==  other.begin &&
             self.end     ==  other.end;
    
    };

    def['$==='] = function(value) {
      var self = this;

      return self['$include?'](value);
    };

    def['$cover?'] = function(value) {
      var $a, $b, self = this;

      return (($a = self.begin['$<='](value)) ? ((function() {if ((($b = self.exclude) !== nil && (!$b.$$is_boolean || $b == true))) {
        return value['$<'](self.end)
        } else {
        return value['$<='](self.end)
      }; return nil; })()) : $a);
    };

    def.$each = TMP_1 = function() {
      var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil, current = nil, last = nil;

      TMP_1.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      current = self.begin;
      last = self.end;
      while (current['$<'](last)) {
      if (Opal.yield1(block, current) === $breaker) return $breaker.$v;
      current = current.$succ();};
      if ((($a = ($b = self.exclude['$!'](), $b !== false && $b !== nil ?current['$=='](last) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        if (Opal.yield1(block, current) === $breaker) return $breaker.$v};
      return self;
    };

    def['$eql?'] = function(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Range')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return ($a = ($b = self.exclude['$==='](other['$exclude_end?']()), $b !== false && $b !== nil ?self.begin['$eql?'](other.$begin()) : $b), $a !== false && $a !== nil ?self.end['$eql?'](other.$end()) : $a);
    };

    def['$exclude_end?'] = function() {
      var self = this;

      return self.exclude;
    };

    Opal.defn(self, '$first', def.$begin);

    Opal.defn(self, '$include?', def['$cover?']);

    Opal.defn(self, '$last', def.$end);

    def.$max = TMP_2 = function() {var $zuper = $slice.call(arguments, 0);
      var self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

      TMP_2.$$p = null;
      if (($yield !== nil)) {
        return Opal.find_super_dispatcher(self, 'max', TMP_2, $iter).apply(self, $zuper)
        } else {
        return self.exclude ? self.end - 1 : self.end;
      };
    };

    Opal.defn(self, '$member?', def['$cover?']);

    def.$min = TMP_3 = function() {var $zuper = $slice.call(arguments, 0);
      var self = this, $iter = TMP_3.$$p, $yield = $iter || nil;

      TMP_3.$$p = null;
      if (($yield !== nil)) {
        return Opal.find_super_dispatcher(self, 'min', TMP_3, $iter).apply(self, $zuper)
        } else {
        return self.begin
      };
    };

    Opal.defn(self, '$member?', def['$include?']);

    def.$size = function() {
      var $a, $b, self = this, _begin = nil, _end = nil, infinity = nil;

      _begin = self.begin;
      _end = self.end;
      if ((($a = self.exclude) !== nil && (!$a.$$is_boolean || $a == true))) {
        _end = _end['$-'](1)};
      if ((($a = ($b = $scope.get('Numeric')['$==='](_begin), $b !== false && $b !== nil ?$scope.get('Numeric')['$==='](_end) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      if (_end['$<'](_begin)) {
        return 0};
      infinity = (($scope.get('Float')).$$scope.get('INFINITY'));
      if ((($a = ((($b = infinity['$=='](_begin.$abs())) !== false && $b !== nil) ? $b : _end.$abs()['$=='](infinity))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return infinity};
      return ((Math.abs(_end - _begin) + 1)).$to_i();
    };

    def.$step = function(n) {
      var self = this;

      if (n == null) {
        n = 1
      }
      return self.$raise($scope.get('NotImplementedError'));
    };

    def.$to_s = function() {
      var self = this;

      return self.begin.$inspect() + (self.exclude ? '...' : '..') + self.end.$inspect();
    };

    return Opal.defn(self, '$inspect', def.$to_s);
  })(self, null);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/time"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$include', '$kind_of?', '$to_i', '$coerce_to', '$between?', '$raise', '$new', '$compact', '$nil?', '$===', '$<=>', '$to_f', '$strftime', '$is_a?', '$zero?', '$wday', '$utc?', '$warn', '$year', '$mon', '$day', '$yday', '$hour', '$min', '$sec', '$rjust', '$ljust', '$zone', '$to_s', '$[]', '$cweek_cyear', '$month', '$isdst', '$private', '$<=', '$!', '$==', '$-', '$ceil', '$/', '$+']);
  self.$require("corelib/comparable");
  return (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope;

    def.tz_offset = nil;
    self.$include($scope.get('Comparable'));

    
    var days_of_week = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
        short_days   = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        short_months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        long_months  = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  ;

    Opal.defs(self, '$at', function(seconds, frac) {
      var self = this;

      if (frac == null) {
        frac = 0
      }
      return new Date(seconds * 1000 + frac);
    });

    Opal.defs(self, '$new', function(year, month, day, hour, minute, second, utc_offset) {
      var self = this;

      
      switch (arguments.length) {
        case 1:
          return new Date(year, 0);

        case 2:
          return new Date(year, month - 1);

        case 3:
          return new Date(year, month - 1, day);

        case 4:
          return new Date(year, month - 1, day, hour);

        case 5:
          return new Date(year, month - 1, day, hour, minute);

        case 6:
          return new Date(year, month - 1, day, hour, minute, second);

        case 7:
          return new Date(year, month - 1, day, hour, minute, second);

        default:
          return new Date();
      }
    
    });

    Opal.defs(self, '$local', function(year, month, day, hour, minute, second, millisecond) {
      var $a, self = this;

      if (month == null) {
        month = nil
      }
      if (day == null) {
        day = nil
      }
      if (hour == null) {
        hour = nil
      }
      if (minute == null) {
        minute = nil
      }
      if (second == null) {
        second = nil
      }
      if (millisecond == null) {
        millisecond = nil
      }
      if ((($a = arguments.length === 10) !== nil && (!$a.$$is_boolean || $a == true))) {
        
        var args = $slice.call(arguments).reverse();

        second = args[9];
        minute = args[8];
        hour   = args[7];
        day    = args[6];
        month  = args[5];
        year   = args[4];
      };
      year = (function() {if ((($a = year['$kind_of?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return year.$to_i()
        } else {
        return $scope.get('Opal').$coerce_to(year, $scope.get('Integer'), "to_int")
      }; return nil; })();
      month = (function() {if ((($a = month['$kind_of?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return month.$to_i()
        } else {
        return $scope.get('Opal').$coerce_to(((($a = month) !== false && $a !== nil) ? $a : 1), $scope.get('Integer'), "to_int")
      }; return nil; })();
      if ((($a = month['$between?'](1, 12)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "month out of range: " + (month))
      };
      day = (function() {if ((($a = day['$kind_of?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return day.$to_i()
        } else {
        return $scope.get('Opal').$coerce_to(((($a = day) !== false && $a !== nil) ? $a : 1), $scope.get('Integer'), "to_int")
      }; return nil; })();
      if ((($a = day['$between?'](1, 31)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "day out of range: " + (day))
      };
      hour = (function() {if ((($a = hour['$kind_of?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return hour.$to_i()
        } else {
        return $scope.get('Opal').$coerce_to(((($a = hour) !== false && $a !== nil) ? $a : 0), $scope.get('Integer'), "to_int")
      }; return nil; })();
      if ((($a = hour['$between?'](0, 24)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "hour out of range: " + (hour))
      };
      minute = (function() {if ((($a = minute['$kind_of?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return minute.$to_i()
        } else {
        return $scope.get('Opal').$coerce_to(((($a = minute) !== false && $a !== nil) ? $a : 0), $scope.get('Integer'), "to_int")
      }; return nil; })();
      if ((($a = minute['$between?'](0, 59)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "minute out of range: " + (minute))
      };
      second = (function() {if ((($a = second['$kind_of?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return second.$to_i()
        } else {
        return $scope.get('Opal').$coerce_to(((($a = second) !== false && $a !== nil) ? $a : 0), $scope.get('Integer'), "to_int")
      }; return nil; })();
      if ((($a = second['$between?'](0, 59)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "second out of range: " + (second))
      };
      return ($a = self).$new.apply($a, [].concat([year, month, day, hour, minute, second].$compact()));
    });

    Opal.defs(self, '$gm', function(year, month, day, hour, minute, second, utc_offset) {
      var $a, self = this;

      if ((($a = year['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('TypeError'), "missing year (got nil)")};
      
      if (month > 12 || day > 31 || hour > 24 || minute > 59 || second > 59) {
        self.$raise($scope.get('ArgumentError'));
      }

      var date = new Date(Date.UTC(year, (month || 1) - 1, (day || 1), (hour || 0), (minute || 0), (second || 0)));
      date.tz_offset = 0
      return date;
    ;
    });

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      self.$$proto.$mktime = self.$$proto.$local;
      return self.$$proto.$utc = self.$$proto.$gm;
    })(self.$singleton_class());

    Opal.defs(self, '$now', function() {
      var self = this;

      return new Date();
    });

    def['$+'] = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Time')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('TypeError'), "time + time?")};
      other = $scope.get('Opal').$coerce_to(other, $scope.get('Integer'), "to_int");
      
      var result           = new Date(self.getTime() + (other * 1000));
          result.tz_offset = self.tz_offset;

      return result;
    
    };

    def['$-'] = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Time')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return (self.getTime() - other.getTime()) / 1000};
      other = $scope.get('Opal').$coerce_to(other, $scope.get('Integer'), "to_int");
      
      var result           = new Date(self.getTime() - (other * 1000));
          result.tz_offset = self.tz_offset;

      return result;
    
    };

    def['$<=>'] = function(other) {
      var self = this;

      return self.$to_f()['$<=>'](other.$to_f());
    };

    def['$=='] = function(other) {
      var self = this;

      return self.$to_f() === other.$to_f();
    };

    def.$asctime = function() {
      var self = this;

      return self.$strftime("%a %b %e %H:%M:%S %Y");
    };

    Opal.defn(self, '$ctime', def.$asctime);

    def.$day = function() {
      var self = this;

      
      if (self.tz_offset === 0) {
        return self.getUTCDate();
      }
      else {
        return self.getDate();
      }
    ;
    };

    def.$yday = function() {
      var self = this;

      
      // http://javascript.about.com/library/bldayyear.htm
      var onejan = new Date(self.getFullYear(), 0, 1);
      return Math.ceil((self - onejan) / 86400000);
    
    };

    def.$isdst = function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    };

    def['$eql?'] = function(other) {
      var $a, self = this;

      return ($a = other['$is_a?']($scope.get('Time')), $a !== false && $a !== nil ?(self['$<=>'](other))['$zero?']() : $a);
    };

    def['$friday?'] = function() {
      var self = this;

      return self.$wday() == 5;
    };

    def.$hour = function() {
      var self = this;

      
      if (self.tz_offset === 0) {
        return self.getUTCHours();
      }
      else {
        return self.getHours();
      }
    ;
    };

    def.$inspect = function() {
      var $a, self = this;

      if ((($a = self['$utc?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$strftime("%Y-%m-%d %H:%M:%S UTC")
        } else {
        return self.$strftime("%Y-%m-%d %H:%M:%S %z")
      };
    };

    Opal.defn(self, '$mday', def.$day);

    def.$min = function() {
      var self = this;

      
      if (self.tz_offset === 0) {
        return self.getUTCMinutes();
      }
      else {
        return self.getMinutes();
      }
    ;
    };

    def.$mon = function() {
      var self = this;

      
      if (self.tz_offset === 0) {
        return self.getUTCMonth() + 1;
      }
      else {
        return self.getMonth() + 1;
      }
    ;
    };

    def['$monday?'] = function() {
      var self = this;

      return self.$wday() == 1;
    };

    Opal.defn(self, '$month', def.$mon);

    def['$saturday?'] = function() {
      var self = this;

      return self.$wday() == 6;
    };

    def.$sec = function() {
      var self = this;

      
      if (self.tz_offset === 0) {
        return self.getUTCSeconds();
      }
      else {
        return self.getSeconds();
      }
    ;
    };

    def.$usec = function() {
      var self = this;

      self.$warn("Microseconds are not supported");
      return 0;
    };

    def.$zone = function() {
      var self = this;

      
      var string = self.toString(),
          result;

      if (string.indexOf('(') == -1) {
        result = string.match(/[A-Z]{3,4}/)[0];
      }
      else {
        result = string.match(/\([^)]+\)/)[0].match(/[A-Z]/g).join('');
      }

      if (result == "GMT" && /(GMT\W*\d{4})/.test(string)) {
        return RegExp.$1;
      }
      else {
        return result;
      }
    
    };

    def.$getgm = function() {
      var self = this;

      
      var result           = new Date(self.getTime());
          result.tz_offset = 0;

      return result;
    
    };

    def['$gmt?'] = function() {
      var self = this;

      return self.tz_offset === 0;
    };

    def.$gmt_offset = function() {
      var self = this;

      return -self.getTimezoneOffset() * 60;
    };

    def.$strftime = function(format) {
      var self = this;

      
      return format.replace(/%([\-_#^0]*:{0,2})(\d+)?([EO]*)(.)/g, function(full, flags, width, _, conv) {
        var result = "",
            width  = parseInt(width),
            zero   = flags.indexOf('0') !== -1,
            pad    = flags.indexOf('-') === -1,
            blank  = flags.indexOf('_') !== -1,
            upcase = flags.indexOf('^') !== -1,
            invert = flags.indexOf('#') !== -1,
            colons = (flags.match(':') || []).length;

        if (zero && blank) {
          if (flags.indexOf('0') < flags.indexOf('_')) {
            zero = false;
          }
          else {
            blank = false;
          }
        }

        switch (conv) {
          case 'Y':
            result += self.$year();
            break;

          case 'C':
            zero    = !blank;
            result += Math.round(self.$year() / 100);
            break;

          case 'y':
            zero    = !blank;
            result += (self.$year() % 100);
            break;

          case 'm':
            zero    = !blank;
            result += self.$mon();
            break;

          case 'B':
            result += long_months[self.$mon() - 1];
            break;

          case 'b':
          case 'h':
            blank   = !zero;
            result += short_months[self.$mon() - 1];
            break;

          case 'd':
            zero    = !blank
            result += self.$day();
            break;

          case 'e':
            blank   = !zero
            result += self.$day();
            break;

          case 'j':
            result += self.$yday();
            break;

          case 'H':
            zero    = !blank;
            result += self.$hour();
            break;

          case 'k':
            blank   = !zero;
            result += self.$hour();
            break;

          case 'I':
            zero    = !blank;
            result += (self.$hour() % 12 || 12);
            break;

          case 'l':
            blank   = !zero;
            result += (self.$hour() % 12 || 12);
            break;

          case 'P':
            result += (self.$hour() >= 12 ? "pm" : "am");
            break;

          case 'p':
            result += (self.$hour() >= 12 ? "PM" : "AM");
            break;

          case 'M':
            zero    = !blank;
            result += self.$min();
            break;

          case 'S':
            zero    = !blank;
            result += self.$sec()
            break;

          case 'L':
            zero    = !blank;
            width   = isNaN(width) ? 3 : width;
            result += self.getMilliseconds();
            break;

          case 'N':
            width   = isNaN(width) ? 9 : width;
            result += (self.getMilliseconds().toString()).$rjust(3, "0");
            result  = (result).$ljust(width, "0");
            break;

          case 'z':
            var offset  = self.getTimezoneOffset(),
                hours   = Math.floor(Math.abs(offset) / 60),
                minutes = Math.abs(offset) % 60;

            result += offset < 0 ? "+" : "-";
            result += hours < 10 ? "0" : "";
            result += hours;

            if (colons > 0) {
              result += ":";
            }

            result += minutes < 10 ? "0" : "";
            result += minutes;

            if (colons > 1) {
              result += ":00";
            }

            break;

          case 'Z':
            result += self.$zone();
            break;

          case 'A':
            result += days_of_week[self.$wday()];
            break;

          case 'a':
            result += short_days[self.$wday()];
            break;

          case 'u':
            result += (self.$wday() + 1);
            break;

          case 'w':
            result += self.$wday();
            break;

          case 'V':
            result += self.$cweek_cyear()['$[]'](0).$to_s().$rjust(2, "0");
            break;

          case 'G':
            result += self.$cweek_cyear()['$[]'](1);
            break;

          case 'g':
            result += self.$cweek_cyear()['$[]'](1)['$[]']($range(-2, -1, false));
            break;

          case 's':
            result += self.$to_i();
            break;

          case 'n':
            result += "\n";
            break;

          case 't':
            result += "\t";
            break;

          case '%':
            result += "%";
            break;

          case 'c':
            result += self.$strftime("%a %b %e %T %Y");
            break;

          case 'D':
          case 'x':
            result += self.$strftime("%m/%d/%y");
            break;

          case 'F':
            result += self.$strftime("%Y-%m-%d");
            break;

          case 'v':
            result += self.$strftime("%e-%^b-%4Y");
            break;

          case 'r':
            result += self.$strftime("%I:%M:%S %p");
            break;

          case 'R':
            result += self.$strftime("%H:%M");
            break;

          case 'T':
          case 'X':
            result += self.$strftime("%H:%M:%S");
            break;

          default:
            return full;
        }

        if (upcase) {
          result = result.toUpperCase();
        }

        if (invert) {
          result = result.replace(/[A-Z]/, function(c) { c.toLowerCase() }).
                          replace(/[a-z]/, function(c) { c.toUpperCase() });
        }

        if (pad && (zero || blank)) {
          result = (result).$rjust(isNaN(width) ? 2 : width, blank ? " " : "0");
        }

        return result;
      });
    
    };

    def['$sunday?'] = function() {
      var self = this;

      return self.$wday() == 0;
    };

    def['$thursday?'] = function() {
      var self = this;

      return self.$wday() == 4;
    };

    def.$to_a = function() {
      var self = this;

      return [self.$sec(), self.$min(), self.$hour(), self.$day(), self.$month(), self.$year(), self.$wday(), self.$yday(), self.$isdst(), self.$zone()];
    };

    def.$to_f = function() {
      var self = this;

      return self.getTime() / 1000;
    };

    def.$to_i = function() {
      var self = this;

      return parseInt(self.getTime() / 1000);
    };

    Opal.defn(self, '$to_s', def.$inspect);

    def['$tuesday?'] = function() {
      var self = this;

      return self.$wday() == 2;
    };

    Opal.defn(self, '$utc?', def['$gmt?']);

    Opal.defn(self, '$utc_offset', def.$gmt_offset);

    def.$wday = function() {
      var self = this;

      
      if (self.tz_offset === 0) {
        return self.getUTCDay();
      }
      else {
        return self.getDay();
      }
    ;
    };

    def['$wednesday?'] = function() {
      var self = this;

      return self.$wday() == 3;
    };

    def.$year = function() {
      var self = this;

      
      if (self.tz_offset === 0) {
        return self.getUTCFullYear();
      }
      else {
        return self.getFullYear();
      }
    ;
    };

    self.$private("cweek_cyear");

    return (def.$cweek_cyear = function() {
      var $a, $b, self = this, jan01 = nil, jan01_wday = nil, first_monday = nil, year = nil, offset = nil, week = nil, dec31 = nil, dec31_wday = nil;

      jan01 = $scope.get('Time').$new(self.$year(), 1, 1);
      jan01_wday = jan01.$wday();
      first_monday = 0;
      year = self.$year();
      if ((($a = (($b = jan01_wday['$<='](4)) ? jan01_wday['$=='](0)['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        offset = jan01_wday['$-'](1)
        } else {
        offset = jan01_wday['$-'](7)['$-'](1);
        if (offset['$=='](-8)) {
          offset = -1};
      };
      week = ((self.$yday()['$+'](offset))['$/'](7.0)).$ceil();
      if (week['$<='](0)) {
        return $scope.get('Time').$new(self.$year()['$-'](1), 12, 31).$cweek_cyear()
      } else if (week['$=='](53)) {
        dec31 = $scope.get('Time').$new(self.$year(), 12, 31);
        dec31_wday = dec31.$wday();
        if ((($a = (($b = dec31_wday['$<='](3)) ? dec31_wday['$=='](0)['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          week = 1;
          year = year['$+'](1);};};
      return [week, year];
    }, nil) && 'cweek_cyear';
  })(self, null);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/struct"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$==', '$[]', '$upcase', '$const_set', '$new', '$unshift', '$each', '$define_struct_attribute', '$instance_eval', '$to_proc', '$raise', '$<<', '$members', '$attr_accessor', '$include', '$each_with_index', '$instance_variable_set', '$class', '$===', '$>=', '$size', '$include?', '$to_sym', '$instance_variable_get', '$enum_for', '$hash', '$all?', '$length', '$map', '$+', '$join', '$inspect', '$each_pair']);
  return (function($base, $super) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_6, TMP_8;

    Opal.defs(self, '$new', TMP_1 = function(name, args) {var $zuper = $slice.call(arguments, 0);
      var $a, $b, $c, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      TMP_1.$$p = null;
      if (self['$==']($scope.get('Struct'))) {
        } else {
        return Opal.find_super_dispatcher(self, 'new', TMP_1, $iter, $Struct).apply(self, $zuper)
      };
      if (name['$[]'](0)['$=='](name['$[]'](0).$upcase())) {
        return $scope.get('Struct').$const_set(name, ($a = self).$new.apply($a, [].concat(args)))
        } else {
        args.$unshift(name);
        return ($b = ($c = $scope.get('Class')).$new, $b.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $b, TMP_3, $c;

        ($a = ($b = args).$each, $a.$$p = (TMP_3 = function(arg){var self = TMP_3.$$s || this;
if (arg == null) arg = nil;
          return self.$define_struct_attribute(arg)}, TMP_3.$$s = self, TMP_3), $a).call($b);
          if (block !== false && block !== nil) {
            return ($a = ($c = self).$instance_eval, $a.$$p = block.$to_proc(), $a).call($c)
            } else {
            return nil
          };}, TMP_2.$$s = self, TMP_2), $b).call($c, self);
      };
    });

    Opal.defs(self, '$define_struct_attribute', function(name) {
      var self = this;

      if (self['$==']($scope.get('Struct'))) {
        self.$raise($scope.get('ArgumentError'), "you cannot define attributes to the Struct class")};
      self.$members()['$<<'](name);
      return self.$attr_accessor(name);
    });

    Opal.defs(self, '$members', function() {
      var $a, self = this;
      if (self.members == null) self.members = nil;

      if (self['$==']($scope.get('Struct'))) {
        self.$raise($scope.get('ArgumentError'), "the Struct class has no members")};
      return ((($a = self.members) !== false && $a !== nil) ? $a : self.members = []);
    });

    Opal.defs(self, '$inherited', function(klass) {
      var $a, $b, TMP_4, self = this, members = nil;
      if (self.members == null) self.members = nil;

      if (self['$==']($scope.get('Struct'))) {
        return nil};
      members = self.members;
      return ($a = ($b = klass).$instance_eval, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

      return self.members = members}, TMP_4.$$s = self, TMP_4), $a).call($b);
    });

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return self.$$proto['$[]'] = self.$$proto.$new
    })(self.$singleton_class());

    self.$include($scope.get('Enumerable'));

    def.$initialize = function(args) {
      var $a, $b, TMP_5, self = this;

      args = $slice.call(arguments, 0);
      return ($a = ($b = self.$members()).$each_with_index, $a.$$p = (TMP_5 = function(name, index){var self = TMP_5.$$s || this;
if (name == null) name = nil;if (index == null) index = nil;
      return self.$instance_variable_set("@" + (name), args['$[]'](index))}, TMP_5.$$s = self, TMP_5), $a).call($b);
    };

    def.$members = function() {
      var self = this;

      return self.$class().$members();
    };

    def['$[]'] = function(name) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
        if (name['$>='](self.$members().$size())) {
          self.$raise($scope.get('IndexError'), "offset " + (name) + " too large for struct(size:" + (self.$members().$size()) + ")")};
        name = self.$members()['$[]'](name);
      } else if ((($a = self.$members()['$include?'](name.$to_sym())) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('NameError'), "no member '" + (name) + "' in struct")
      };
      return self.$instance_variable_get("@" + (name));
    };

    def['$[]='] = function(name, value) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
        if (name['$>='](self.$members().$size())) {
          self.$raise($scope.get('IndexError'), "offset " + (name) + " too large for struct(size:" + (self.$members().$size()) + ")")};
        name = self.$members()['$[]'](name);
      } else if ((($a = self.$members()['$include?'](name.$to_sym())) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('NameError'), "no member '" + (name) + "' in struct")
      };
      return self.$instance_variable_set("@" + (name), value);
    };

    def.$each = TMP_6 = function() {
      var $a, $b, TMP_7, self = this, $iter = TMP_6.$$p, $yield = $iter || nil;

      TMP_6.$$p = null;
      if (($yield !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      ($a = ($b = self.$members()).$each, $a.$$p = (TMP_7 = function(name){var self = TMP_7.$$s || this, $a;
if (name == null) name = nil;
      return $a = Opal.yield1($yield, self['$[]'](name)), $a === $breaker ? $a : $a}, TMP_7.$$s = self, TMP_7), $a).call($b);
      return self;
    };

    def.$each_pair = TMP_8 = function() {
      var $a, $b, TMP_9, self = this, $iter = TMP_8.$$p, $yield = $iter || nil;

      TMP_8.$$p = null;
      if (($yield !== nil)) {
        } else {
        return self.$enum_for("each_pair")
      };
      ($a = ($b = self.$members()).$each, $a.$$p = (TMP_9 = function(name){var self = TMP_9.$$s || this, $a;
if (name == null) name = nil;
      return $a = Opal.yieldX($yield, [name, self['$[]'](name)]), $a === $breaker ? $a : $a}, TMP_9.$$s = self, TMP_9), $a).call($b);
      return self;
    };

    def['$eql?'] = function(other) {
      var $a, $b, $c, TMP_10, self = this;

      return ((($a = self.$hash()['$=='](other.$hash())) !== false && $a !== nil) ? $a : ($b = ($c = other.$each_with_index())['$all?'], $b.$$p = (TMP_10 = function(object, index){var self = TMP_10.$$s || this;
if (object == null) object = nil;if (index == null) index = nil;
      return self['$[]'](self.$members()['$[]'](index))['$=='](object)}, TMP_10.$$s = self, TMP_10), $b).call($c));
    };

    def.$length = function() {
      var self = this;

      return self.$members().$length();
    };

    Opal.defn(self, '$size', def.$length);

    def.$to_a = function() {
      var $a, $b, TMP_11, self = this;

      return ($a = ($b = self.$members()).$map, $a.$$p = (TMP_11 = function(name){var self = TMP_11.$$s || this;
if (name == null) name = nil;
      return self['$[]'](name)}, TMP_11.$$s = self, TMP_11), $a).call($b);
    };

    Opal.defn(self, '$values', def.$to_a);

    def.$inspect = function() {
      var $a, $b, TMP_12, self = this, result = nil;

      result = "#<struct ";
      if (self.$class()['$==']($scope.get('Struct'))) {
        result = result['$+']("" + (self.$class()) + " ")};
      result = result['$+'](($a = ($b = self.$each_pair()).$map, $a.$$p = (TMP_12 = function(name, value){var self = TMP_12.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return "" + (name) + "=" + (value.$inspect())}, TMP_12.$$s = self, TMP_12), $a).call($b).$join(", "));
      result = result['$+'](">");
      return result;
    };

    return Opal.defn(self, '$to_s', def.$inspect);
  })(self, null)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/io"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $gvars = Opal.gvars;
  if ($gvars.stdout == null) $gvars.stdout = nil;
  if ($gvars.stderr == null) $gvars.stderr = nil;

  Opal.add_stubs(['$attr_accessor', '$size', '$write', '$join', '$map', '$String', '$empty?', '$concat', '$chomp', '$getbyte', '$getc', '$raise', '$new', '$write_proc=', '$extend']);
  (function($base, $super) {
    function $IO(){};
    var self = $IO = $klass($base, $super, 'IO', $IO);

    var def = self.$$proto, $scope = self.$$scope;

    def.tty = nil;
    Opal.cdecl($scope, 'SEEK_SET', 0);

    Opal.cdecl($scope, 'SEEK_CUR', 1);

    Opal.cdecl($scope, 'SEEK_END', 2);

    def['$tty?'] = function() {
      var self = this;

      return self.tty;
    };

    self.$attr_accessor("write_proc");

    def.$write = function(string) {
      var self = this;

      self.write_proc(string);
      return string.$size();
    };

    self.$attr_accessor("sync");

    (function($base) {
      var self = $module($base, 'Writable');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defn(self, '$<<', function(string) {
        var self = this;

        self.$write(string);
        return self;
      });

      Opal.defn(self, '$print', function(args) {
        var $a, $b, TMP_1, self = this;
        if ($gvars[","] == null) $gvars[","] = nil;

        args = $slice.call(arguments, 0);
        self.$write(($a = ($b = args).$map, $a.$$p = (TMP_1 = function(arg){var self = TMP_1.$$s || this;
if (arg == null) arg = nil;
        return self.$String(arg)}, TMP_1.$$s = self, TMP_1), $a).call($b).$join($gvars[","]));
        return nil;
      });

      Opal.defn(self, '$puts', function(args) {
        var $a, $b, TMP_2, self = this, newline = nil;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        args = $slice.call(arguments, 0);
        newline = $gvars["/"];
        if ((($a = args['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$write($gvars["/"])
          } else {
          self.$write(($a = ($b = args).$map, $a.$$p = (TMP_2 = function(arg){var self = TMP_2.$$s || this;
if (arg == null) arg = nil;
          return self.$String(arg).$chomp()}, TMP_2.$$s = self, TMP_2), $a).call($b).$concat([nil]).$join(newline))
        };
        return nil;
      });
    })(self);

    return (function($base) {
      var self = $module($base, 'Readable');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defn(self, '$readbyte', function() {
        var self = this;

        return self.$getbyte();
      });

      Opal.defn(self, '$readchar', function() {
        var self = this;

        return self.$getc();
      });

      Opal.defn(self, '$readline', function(sep) {
        var self = this;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        if (sep == null) {
          sep = $gvars["/"]
        }
        return self.$raise($scope.get('NotImplementedError'));
      });

      Opal.defn(self, '$readpartial', function(integer, outbuf) {
        var self = this;

        if (outbuf == null) {
          outbuf = nil
        }
        return self.$raise($scope.get('NotImplementedError'));
      });
    })(self);
  })(self, null);
  Opal.cdecl($scope, 'STDERR', $gvars.stderr = $scope.get('IO').$new());
  Opal.cdecl($scope, 'STDIN', $gvars.stdin = $scope.get('IO').$new());
  Opal.cdecl($scope, 'STDOUT', $gvars.stdout = $scope.get('IO').$new());
  (($a = [typeof(process) === 'object' ? function(s){process.stdout.write(s)} : function(s){console.log(s)}]), $b = $gvars.stdout, $b['$write_proc='].apply($b, $a), $a[$a.length-1]);
  (($a = [typeof(process) === 'object' ? function(s){process.stderr.write(s)} : function(s){console.warn(s)}]), $b = $gvars.stderr, $b['$write_proc='].apply($b, $a), $a[$a.length-1]);
  $gvars.stdout.$extend((($scope.get('IO')).$$scope.get('Writable')));
  return $gvars.stderr.$extend((($scope.get('IO')).$$scope.get('Writable')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/main"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$include']);
  Opal.defs(self, '$to_s', function() {
    var self = this;

    return "main";
  });
  return (Opal.defs(self, '$include', function(mod) {
    var self = this;

    return $scope.get('Object').$include(mod);
  }), nil) && 'include';
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/variables"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new']);
  $gvars["&"] = $gvars["~"] = $gvars["`"] = $gvars["'"] = nil;
  $gvars.LOADED_FEATURES = $gvars["\""] = Opal.loaded_features;
  $gvars.LOAD_PATH = $gvars[":"] = [];
  $gvars["/"] = "\n";
  $gvars[","] = nil;
  Opal.cdecl($scope, 'ARGV', []);
  Opal.cdecl($scope, 'ARGF', $scope.get('Object').$new());
  Opal.cdecl($scope, 'ENV', $hash2([], {}));
  $gvars.VERBOSE = false;
  $gvars.DEBUG = false;
  $gvars.SAFE = 0;
  Opal.cdecl($scope, 'RUBY_PLATFORM', "opal");
  Opal.cdecl($scope, 'RUBY_ENGINE', "opal");
  Opal.cdecl($scope, 'RUBY_VERSION', "2.1.1");
  Opal.cdecl($scope, 'RUBY_ENGINE_VERSION', "0.6.1");
  return Opal.cdecl($scope, 'RUBY_RELEASE_DATE', "2014-04-15");
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/dir"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$[]']);
  return (function($base, $super) {
    function $Dir(){};
    var self = $Dir = $klass($base, $super, 'Dir', $Dir);

    var def = self.$$proto, $scope = self.$$scope;

    return (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      self.$$proto.$chdir = TMP_1 = function(dir) {
        var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, prev_cwd = nil;

        TMP_1.$$p = null;
        try {
        prev_cwd = Opal.current_dir;
        Opal.current_dir = dir;
        return $a = Opal.yieldX($yield, []), $a === $breaker ? $a : $a;
        } finally {
        Opal.current_dir = prev_cwd;
        };
      };
      self.$$proto.$pwd = function() {
        var self = this;

        return Opal.current_dir || '.';
      };
      self.$$proto.$getwd = self.$$proto.$pwd;
      return (self.$$proto.$home = function() {
        var $a, self = this;

        return ((($a = $scope.get('ENV')['$[]']("HOME")) !== false && $a !== nil) ? $a : ".");
      }, nil) && 'home';
    })(self.$singleton_class())
  })(self, null)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["corelib/file"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$join', '$compact', '$split', '$==', '$first', '$[]=', '$home', '$each', '$pop', '$<<', '$[]', '$gsub', '$find', '$=~']);
  return (function($base, $super) {
    function $File(){};
    var self = $File = $klass($base, $super, 'File', $File);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'Separator', Opal.cdecl($scope, 'SEPARATOR', "/"));

    Opal.cdecl($scope, 'ALT_SEPARATOR', nil);

    Opal.cdecl($scope, 'PATH_SEPARATOR', ":");

    return (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      self.$$proto.$expand_path = function(path, basedir) {
        var $a, $b, TMP_1, self = this, parts = nil, new_parts = nil;

        if (basedir == null) {
          basedir = nil
        }
        path = [basedir, path].$compact().$join($scope.get('SEPARATOR'));
        parts = path.$split($scope.get('SEPARATOR'));
        new_parts = [];
        if (parts.$first()['$==']("~")) {
          parts['$[]='](0, $scope.get('Dir').$home())};
        ($a = ($b = parts).$each, $a.$$p = (TMP_1 = function(part){var self = TMP_1.$$s || this;
if (part == null) part = nil;
        if (part['$==']("..")) {
            return new_parts.$pop()
            } else {
            return new_parts['$<<'](part)
          }}, TMP_1.$$s = self, TMP_1), $a).call($b);
        return new_parts.$join($scope.get('SEPARATOR'));
      };
      self.$$proto.$dirname = function(path) {
        var self = this;

        return self.$split(path)['$[]']($range(0, -2, false));
      };
      self.$$proto.$basename = function(path) {
        var self = this;

        return self.$split(path)['$[]'](-1);
      };
      self.$$proto['$exist?'] = function(path) {
        var self = this;

        return Opal.modules[path] != null;
      };
      self.$$proto['$exists?'] = self.$$proto['$exist?'];
      self.$$proto['$directory?'] = function(path) {
        var $a, $b, TMP_2, self = this, files = nil, file = nil;

        files = [];
        
        for (var key in Opal.modules) {
          files.push(key)
        }
      ;
        path = path.$gsub((new RegExp("(^." + $scope.get('SEPARATOR') + "+|" + $scope.get('SEPARATOR') + "+$)")));
        file = ($a = ($b = files).$find, $a.$$p = (TMP_2 = function(file){var self = TMP_2.$$s || this;
if (file == null) file = nil;
        return file['$=~']((new RegExp("^" + path)))}, TMP_2.$$s = self, TMP_2), $a).call($b);
        return file;
      };
      self.$$proto.$join = function(paths) {
        var self = this;

        paths = $slice.call(arguments, 0);
        return paths.$join($scope.get('SEPARATOR')).$gsub((new RegExp("" + $scope.get('SEPARATOR') + "+")), $scope.get('SEPARATOR'));
      };
      return (self.$$proto.$split = function(path) {
        var self = this;

        return path.$split($scope.get('SEPARATOR'));
      }, nil) && 'split';
    })(self.$singleton_class());
  })(self, $scope.get('IO'))
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["opal"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("corelib/runtime");
  self.$require("corelib/helpers");
  self.$require("corelib/module");
  self.$require("corelib/class");
  self.$require("corelib/basic_object");
  self.$require("corelib/kernel");
  self.$require("corelib/nil_class");
  self.$require("corelib/boolean");
  self.$require("corelib/error");
  self.$require("corelib/regexp");
  self.$require("corelib/comparable");
  self.$require("corelib/enumerable");
  self.$require("corelib/enumerator");
  self.$require("corelib/array");
  self.$require("corelib/array/inheritance");
  self.$require("corelib/hash");
  self.$require("corelib/string");
  self.$require("corelib/string/inheritance");
  self.$require("corelib/match_data");
  self.$require("corelib/numeric");
  self.$require("corelib/complex");
  self.$require("corelib/rational");
  self.$require("corelib/proc");
  self.$require("corelib/method");
  self.$require("corelib/range");
  self.$require("corelib/time");
  self.$require("corelib/struct");
  self.$require("corelib/io");
  self.$require("corelib/main");
  self.$require("corelib/variables");
  self.$require("corelib/dir");
  return self.$require("corelib/file");
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["thread"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$allocate', '$core_initialize!', '$current', '$fail', '$[]', '$coerce_key_name', '$[]=', '$key?', '$keys', '$private', '$coerce_to!', '$public', '$clear', '$empty?', '$size', '$shift', '$push', '$each', '$to_proc', '$locked?', '$lock', '$unlock']);
  (function($base, $super) {
    function $ThreadError(){};
    var self = $ThreadError = $klass($base, $super, 'ThreadError', $ThreadError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('StandardError'));
  (function($base, $super) {
    function $Thread(){};
    var self = $Thread = $klass($base, $super, 'Thread', $Thread);

    var def = self.$$proto, $scope = self.$$scope;

    def.fiber_locals = def.thread_locals = nil;
    Opal.defs(self, '$current', function() {
      var $a, self = this;
      if (self.current == null) self.current = nil;

      if ((($a = self.current) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.current = self.$allocate();
        self.current['$core_initialize!']();
      };
      return self.current;
    });

    Opal.defs(self, '$list', function() {
      var self = this;

      return [self.$current()];
    });

    def.$initialize = function(args) {
      var self = this;

      args = $slice.call(arguments, 0);
      return self.$fail($scope.get('NotImplementedError'), "Thread creation not available");
    };

    def['$[]'] = function(key) {
      var self = this;

      return self.fiber_locals['$[]'](self.$coerce_key_name(key));
    };

    def['$[]='] = function(key, value) {
      var self = this;

      return self.fiber_locals['$[]='](self.$coerce_key_name(key), value);
    };

    def['$key?'] = function(key) {
      var self = this;

      return self.fiber_locals['$key?'](self.$coerce_key_name(key));
    };

    def.$keys = function() {
      var self = this;

      return self.fiber_locals.$keys();
    };

    def.$thread_variable_get = function(key) {
      var self = this;

      return self.thread_locals['$[]'](self.$coerce_key_name(key));
    };

    def.$thread_variable_set = function(key, value) {
      var self = this;

      return self.thread_locals['$[]='](self.$coerce_key_name(key), value);
    };

    def['$thread_variable?'] = function(key) {
      var self = this;

      return self.thread_locals['$key?'](self.$coerce_key_name(key));
    };

    def.$thread_variables = function() {
      var self = this;

      return self.thread_locals.$keys();
    };

    self.$private();

    def['$core_initialize!'] = function() {
      var self = this;

      self.thread_locals = $hash2([], {});
      return self.fiber_locals = $hash2([], {});
    };

    def.$coerce_key_name = function(key) {
      var self = this;

      return $scope.get('Opal')['$coerce_to!'](key, $scope.get('String'), "to_s");
    };

    self.$public();

    return (function($base, $super) {
      function $Queue(){};
      var self = $Queue = $klass($base, $super, 'Queue', $Queue);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      def.storage = nil;
      def.$initialize = function() {
        var self = this;

        return self.$clear();
      };

      def.$clear = function() {
        var self = this;

        return self.storage = [];
      };

      def['$empty?'] = function() {
        var self = this;

        return self.storage['$empty?']();
      };

      def.$size = function() {
        var self = this;

        return self.storage.$size();
      };

      Opal.defn(self, '$length', def.$size);

      def.$pop = function(non_block) {
        var $a, self = this;

        if (non_block == null) {
          non_block = false
        }
        if ((($a = self['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if (non_block !== false && non_block !== nil) {
            self.$fail($scope.get('ThreadError'), "Queue empty")};
          self.$fail($scope.get('ThreadError'), "Deadlock");};
        return self.storage.$shift();
      };

      Opal.defn(self, '$shift', def.$pop);

      Opal.defn(self, '$deq', def.$pop);

      def.$push = function(value) {
        var self = this;

        return self.storage.$push(value);
      };

      Opal.defn(self, '$<<', def.$push);

      Opal.defn(self, '$enq', def.$push);

      return (def.$each = TMP_1 = function() {
        var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

        TMP_1.$$p = null;
        return ($a = ($b = self.storage).$each, $a.$$p = block.$to_proc(), $a).call($b);
      }, nil) && 'each';
    })(self, null);
  })(self, null);
  Opal.cdecl($scope, 'Queue', (($scope.get('Thread')).$$scope.get('Queue')));
  return (function($base, $super) {
    function $Mutex(){};
    var self = $Mutex = $klass($base, $super, 'Mutex', $Mutex);

    var def = self.$$proto, $scope = self.$$scope, TMP_2;

    def.locked = nil;
    def.$initialize = function() {
      var self = this;

      return self.locked = false;
    };

    def.$lock = function() {
      var $a, self = this;

      if ((($a = self.locked) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$fail($scope.get('ThreadError'), "Deadlock")};
      self.locked = true;
      return self;
    };

    def['$locked?'] = function() {
      var self = this;

      return self.locked;
    };

    def['$owned?'] = function() {
      var self = this;

      return self.locked;
    };

    def.$try_lock = function() {
      var $a, self = this;

      if ((($a = self['$locked?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return false
        } else {
        self.$lock();
        return true;
      };
    };

    def.$unlock = function() {
      var $a, self = this;

      if ((($a = self.locked) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$fail($scope.get('ThreadError'), "Mutex not locked")
      };
      self.locked = false;
      return self;
    };

    return (def.$synchronize = TMP_2 = function() {
      var $a, self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

      TMP_2.$$p = null;
      self.$lock();
      try {
      return $a = Opal.yieldX($yield, []), $a === $breaker ? $a : $a
      } finally {
      self.$unlock()
      };
    }, nil) && 'synchronize';
  })(self, null);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["set"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$include', '$new', '$nil?', '$===', '$raise', '$each', '$add', '$call', '$merge', '$class', '$respond_to?', '$subtract', '$dup', '$join', '$to_a', '$equal?', '$instance_of?', '$==', '$instance_variable_get', '$is_a?', '$size', '$all?', '$include?', '$[]=', '$enum_for', '$[]', '$<<', '$replace', '$delete', '$select', '$each_key', '$to_proc', '$empty?', '$eql?', '$instance_eval', '$clear', '$keys']);
  (function($base, $super) {
    function $Set(){};
    var self = $Set = $klass($base, $super, 'Set', $Set);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_7, TMP_9, TMP_12;

    def.hash = nil;
    self.$include($scope.get('Enumerable'));

    Opal.defs(self, '$[]', function(ary) {
      var self = this;

      ary = $slice.call(arguments, 0);
      return self.$new(ary);
    });

    def.$initialize = TMP_1 = function(enum$) {
      var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      if (enum$ == null) {
        enum$ = nil
      }
      TMP_1.$$p = null;
      self.hash = $scope.get('Hash').$new();
      if ((($a = enum$['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil};
      if ((($a = $scope.get('Enumerable')['$==='](enum$)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      if (block !== false && block !== nil) {
        return ($a = ($b = enum$).$each, $a.$$p = (TMP_2 = function(item){var self = TMP_2.$$s || this;
if (item == null) item = nil;
        return self.$add(block.$call(item))}, TMP_2.$$s = self, TMP_2), $a).call($b)
        } else {
        return self.$merge(enum$)
      };
    };

    def.$dup = function() {
      var self = this, result = nil;

      result = self.$class().$new();
      return result.$merge(self);
    };

    def['$-'] = function(enum$) {
      var $a, self = this;

      if ((($a = enum$['$respond_to?']("each")) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$subtract(enum$);
    };

    Opal.defn(self, '$difference', def['$-']);

    def.$inspect = function() {
      var self = this;

      return "#<Set: {" + (self.$to_a().$join(",")) + "}>";
    };

    def['$=='] = function(other) {
      var $a, $b, TMP_3, self = this;

      if ((($a = self['$equal?'](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return true
      } else if ((($a = other['$instance_of?'](self.$class())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.hash['$=='](other.$instance_variable_get("@hash"))
      } else if ((($a = ($b = other['$is_a?']($scope.get('Set')), $b !== false && $b !== nil ?self.$size()['$=='](other.$size()) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = other)['$all?'], $a.$$p = (TMP_3 = function(o){var self = TMP_3.$$s || this;
          if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
        return self.hash['$include?'](o)}, TMP_3.$$s = self, TMP_3), $a).call($b)
        } else {
        return false
      };
    };

    def.$add = function(o) {
      var self = this;

      self.hash['$[]='](o, true);
      return self;
    };

    Opal.defn(self, '$<<', def.$add);

    def.$classify = TMP_4 = function() {
      var $a, $b, TMP_5, $c, TMP_6, self = this, $iter = TMP_4.$$p, block = $iter || nil, result = nil;

      TMP_4.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("classify")
      };
      result = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_5 = function(h, k){var self = TMP_5.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
      return h['$[]='](k, self.$class().$new())}, TMP_5.$$s = self, TMP_5), $a).call($b);
      ($a = ($c = self).$each, $a.$$p = (TMP_6 = function(item){var self = TMP_6.$$s || this, $a;
if (item == null) item = nil;
      return result['$[]'](((($a = Opal.yield1(block, item)) === $breaker) ? $breaker.$v : $a)).$add(item)}, TMP_6.$$s = self, TMP_6), $a).call($c);
      return result;
    };

    def['$collect!'] = TMP_7 = function() {
      var $a, $b, TMP_8, self = this, $iter = TMP_7.$$p, block = $iter || nil, result = nil;

      TMP_7.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect!")
      };
      result = self.$class().$new();
      ($a = ($b = self).$each, $a.$$p = (TMP_8 = function(item){var self = TMP_8.$$s || this, $a;
if (item == null) item = nil;
      return result['$<<'](((($a = Opal.yield1(block, item)) === $breaker) ? $breaker.$v : $a))}, TMP_8.$$s = self, TMP_8), $a).call($b);
      return self.$replace(result);
    };

    Opal.defn(self, '$map!', def['$collect!']);

    def.$delete = function(o) {
      var self = this;

      self.hash.$delete(o);
      return self;
    };

    def['$delete?'] = function(o) {
      var $a, self = this;

      if ((($a = self['$include?'](o)) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$delete(o);
        return self;
        } else {
        return nil
      };
    };

    def.$delete_if = TMP_9 = function() {try {

      var $a, $b, TMP_10, $c, $d, TMP_11, self = this, $iter = TMP_9.$$p, $yield = $iter || nil;

      TMP_9.$$p = null;
      ((($a = ($yield !== nil)) !== false && $a !== nil) ? $a : Opal.ret(self.$enum_for("delete_if")));
      ($a = ($b = ($c = ($d = self).$select, $c.$$p = (TMP_11 = function(o){var self = TMP_11.$$s || this, $a;
if (o == null) o = nil;
      return $a = Opal.yield1($yield, o), $a === $breaker ? $a : $a}, TMP_11.$$s = self, TMP_11), $c).call($d)).$each, $a.$$p = (TMP_10 = function(o){var self = TMP_10.$$s || this;
        if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
      return self.hash.$delete(o)}, TMP_10.$$s = self, TMP_10), $a).call($b);
      return self;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    };

    def['$add?'] = function(o) {
      var $a, self = this;

      if ((($a = self['$include?'](o)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        return self.$add(o)
      };
    };

    def.$each = TMP_12 = function() {
      var $a, $b, self = this, $iter = TMP_12.$$p, block = $iter || nil;

      TMP_12.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      ($a = ($b = self.hash).$each_key, $a.$$p = block.$to_proc(), $a).call($b);
      return self;
    };

    def['$empty?'] = function() {
      var self = this;

      return self.hash['$empty?']();
    };

    def['$eql?'] = function(other) {
      var $a, $b, TMP_13, self = this;

      return self.hash['$eql?'](($a = ($b = other).$instance_eval, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;
        if (self.hash == null) self.hash = nil;

      return self.hash}, TMP_13.$$s = self, TMP_13), $a).call($b));
    };

    def.$clear = function() {
      var self = this;

      self.hash.$clear();
      return self;
    };

    def['$include?'] = function(o) {
      var self = this;

      return self.hash['$include?'](o);
    };

    Opal.defn(self, '$member?', def['$include?']);

    def.$merge = function(enum$) {
      var $a, $b, TMP_14, self = this;

      ($a = ($b = enum$).$each, $a.$$p = (TMP_14 = function(item){var self = TMP_14.$$s || this;
if (item == null) item = nil;
      return self.$add(item)}, TMP_14.$$s = self, TMP_14), $a).call($b);
      return self;
    };

    def.$replace = function(enum$) {
      var self = this;

      self.$clear();
      self.$merge(enum$);
      return self;
    };

    def.$size = function() {
      var self = this;

      return self.hash.$size();
    };

    Opal.defn(self, '$length', def.$size);

    def.$subtract = function(enum$) {
      var $a, $b, TMP_15, self = this;

      ($a = ($b = enum$).$each, $a.$$p = (TMP_15 = function(item){var self = TMP_15.$$s || this;
if (item == null) item = nil;
      return self.$delete(item)}, TMP_15.$$s = self, TMP_15), $a).call($b);
      return self;
    };

    return (def.$to_a = function() {
      var self = this;

      return self.hash.$keys();
    }, nil) && 'to_a';
  })(self, null);
  return (function($base) {
    var self = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope, TMP_16;

    Opal.defn(self, '$to_set', TMP_16 = function(klass, args) {
      var $a, $b, self = this, $iter = TMP_16.$$p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      if (klass == null) {
        klass = $scope.get('Set')
      }
      TMP_16.$$p = null;
      return ($a = ($b = klass).$new, $a.$$p = block.$to_proc(), $a).apply($b, [self].concat(args));
    })
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["time"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$strftime']);
  return (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defs(self, '$parse', function(str) {
      var self = this;

      return new Date(Date.parse(str));
    });

    return (def.$iso8601 = function() {
      var self = this;

      return self.$strftime("%FT%T%z");
    }, nil) && 'iso8601';
  })(self, null)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rbconfig"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$split', '$[]']);
  (function($base) {
    var self = $module($base, 'RbConfig');

    var def = self.$$proto, $scope = self.$$scope, versions = nil;

    versions = $scope.get('RUBY_VERSION').$split(".");

    Opal.cdecl($scope, 'CONFIG', $hash2(["ruby_version", "MAJOR", "MINOR", "TEENY", "RUBY", "RUBY_INSTALL_NAME", "RUBY_SO_NAME", "target_os", "host_os", "PATH_SEPARATOR"], {"ruby_version": $scope.get('RUBY_VERSION'), "MAJOR": versions['$[]'](0), "MINOR": versions['$[]'](1), "TEENY": versions['$[]'](2), "RUBY": $scope.get('RUBY_ENGINE'), "RUBY_INSTALL_NAME": $scope.get('RUBY_ENGINE'), "RUBY_SO_NAME": $scope.get('RUBY_ENGINE'), "target_os": "ECMA-262", "host_os": "ECMA-262", "PATH_SEPARATOR": ":"}));
  })(self);
  Opal.cdecl($scope, 'RUBY_NAME', "opal");
  Opal.cdecl($scope, 'RUBY_EXE', "opal");
  return Opal.cdecl($scope, 'RUBY_PATCHLEVEL', "327");
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["pathname"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$==', '$raise', '$attr_reader', '$path', '$start_with?', '$!', '$absolute?', '$sub', '$new']);
  (function($base, $super) {
    function $Pathname(){};
    var self = $Pathname = $klass($base, $super, 'Pathname', $Pathname);

    var def = self.$$proto, $scope = self.$$scope;

    def.path = nil;
    def.$initialize = function(path) {
      var self = this;

      if (path['$==']("\x00")) {
        self.$raise($scope.get('ArgumentError'))};
      return self.path = path;
    };

    self.$attr_reader("path");

    def['$=='] = function(other) {
      var self = this;

      return other.$path()['$=='](self.path);
    };

    def['$absolute?'] = function() {
      var self = this;

      return self.path['$start_with?']("/");
    };

    def['$relative?'] = function() {
      var self = this;

      return self['$absolute?']()['$!']();
    };

    def['$root?'] = function() {
      var self = this;

      return self.path['$==']("/");
    };

    def.$parent = function() {
      var $a, self = this, new_path = nil;

      new_path = self.path.$sub(/\/([^\/]+\/?$)/, "");
      if (new_path['$==']("")) {
        new_path = (function() {if ((($a = self['$absolute?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "/"
          } else {
          return "."
        }; return nil; })()};
      return $scope.get('Pathname').$new(new_path);
    };

    def.$sub = function(args) {
      var $a, self = this;

      args = $slice.call(arguments, 0);
      return $scope.get('Pathname').$new(($a = self.path).$sub.apply($a, [].concat(args)));
    };

    def.$cleanpath = function() {
      var self = this;

      return Opal.normalize_loadable_path(self.path);
    };

    def.$to_path = function() {
      var self = this;

      return self.path;
    };

    def.$hash = function() {
      var self = this;

      return self.path;
    };

    Opal.defn(self, '$to_str', def.$to_path);

    return Opal.defn(self, '$to_s', def.$to_path);
  })(self, null);
  return (function($base) {
    var self = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$Pathname', function(path) {
      var self = this;

      return $scope.get('Pathname').$new(path);
    })
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/version"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Version');

        var def = self.$$proto, $scope = self.$$scope;

        Opal.cdecl($scope, 'STRING', "3.0.0.beta1")
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/flat_map"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$respond_to?', '$flat_map', '$flatten', '$map', '$module_function']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'FlatMap');

        var def = self.$$proto, $scope = self.$$scope, $a, TMP_2, TMP_4;

        if ((($a = []['$respond_to?']("flat_map")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$flat_map', TMP_2 = function(array) {
            var $a, $b, TMP_1, self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

            TMP_2.$$p = null;
            return ($a = ($b = array).$flat_map, $a.$$p = (TMP_1 = function(item){var self = TMP_1.$$s || this, $a;
if (item == null) item = nil;
            return $a = Opal.yield1($yield, item), $a === $breaker ? $a : $a}, TMP_1.$$s = self, TMP_1), $a).call($b);
          })
          } else {
          Opal.defn(self, '$flat_map', TMP_4 = function(array) {
            var $a, $b, TMP_3, self = this, $iter = TMP_4.$$p, $yield = $iter || nil;

            TMP_4.$$p = null;
            return ($a = ($b = array).$map, $a.$$p = (TMP_3 = function(item){var self = TMP_3.$$s || this, $a;
if (item == null) item = nil;
            return $a = Opal.yield1($yield, item), $a === $breaker ? $a : $a}, TMP_3.$$s = self, TMP_3), $a).call($b).$flatten();
          })
        };

        self.$module_function("flat_map");
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/filter_manager"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expand_path', '$gsub', '$inspect', '$inspect_filter_hash', '$lambda', '$!', '$each', '$store', '$without_conditional_filters', '$empty?', '$private', '$reject', '$==', '$[]', '$_warn_deprecated_keys', '$last', '$has_key?', '$_warn_deprecated_key', '$deprecate', '$[]=', '$delete', '$attr_reader', '$new', '$extend', '$push', '$replace', '$clear', '$inclusions', '$empty_without_conditional_filters?', '$exclusions', '$select', '$exclude?', '$include?', '$merge', '$reverse_merge', '$any_apply?', '$unless_standalone', '$already_set_standalone_filter?', '$is_standalone_filter?', '$each_key', '$merge!', '$each_pair', '$any?']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $FilterManager(){};
        var self = $FilterManager = $klass($base, $super, 'FilterManager', $FilterManager);

        var def = self.$$proto, $scope = self.$$scope, TMP_13;

        def.inclusions = def.exclusions = nil;
        Opal.cdecl($scope, 'STANDALONE_FILTERS', ["locations", "line_numbers", "full_description"]);

        Opal.cdecl($scope, 'PROC_HEX_NUMBER', /0x[0-9a-f]+@/);

        Opal.cdecl($scope, 'PROJECT_DIR', $scope.get('File').$expand_path("."));

        Opal.defs(self, '$inspect_filter_hash', function(hash) {
          var self = this;

          return hash.$inspect().$gsub($scope.get('PROC_HEX_NUMBER'), "").$gsub($scope.get('PROJECT_DIR'), ".").$gsub(" (lambda)", "");
        });

        (function($base, $super) {
          function $InclusionFilterHash(){};
          var self = $InclusionFilterHash = $klass($base, $super, 'InclusionFilterHash', $InclusionFilterHash);

          var def = self.$$proto, $scope = self.$$scope;

          return (def.$description = function() {
            var self = this;

            return $scope.get('FilterManager').$inspect_filter_hash(self);
          }, nil) && 'description'
        })(self, $scope.get('Hash'));

        (function($base, $super) {
          function $ExclusionFilterHash(){};
          var self = $ExclusionFilterHash = $klass($base, $super, 'ExclusionFilterHash', $ExclusionFilterHash);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, TMP_3;

          Opal.cdecl($scope, 'CONDITIONAL_FILTERS', $hash2(["if", "unless"], {"if": ($a = ($b = self).$lambda, $a.$$p = (TMP_1 = function(value){var self = TMP_1.$$s || this;
if (value == null) value = nil;
          return value['$!']()}, TMP_1.$$s = self, TMP_1), $a).call($b), "unless": ($a = ($c = self).$lambda, $a.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
if (value == null) value = nil;
          return value}, TMP_2.$$s = self, TMP_2), $a).call($c)}));

          def.$initialize = TMP_3 = function() {var $zuper = $slice.call(arguments, 0);
            var $a, $b, TMP_4, self = this, $iter = TMP_3.$$p, $yield = $iter || nil;

            TMP_3.$$p = null;
            Opal.find_super_dispatcher(self, 'initialize', TMP_3, $iter).apply(self, $zuper);
            return ($a = ($b = $scope.get('CONDITIONAL_FILTERS')).$each, $a.$$p = (TMP_4 = function(k, v){var self = TMP_4.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
            return self.$store(k, v)}, TMP_4.$$s = self, TMP_4), $a).call($b);
          };

          def.$description = function() {
            var self = this;

            return $scope.get('FilterManager').$inspect_filter_hash(self.$without_conditional_filters());
          };

          def['$empty_without_conditional_filters?'] = function() {
            var self = this;

            return self.$without_conditional_filters()['$empty?']();
          };

          self.$private();

          return (def.$without_conditional_filters = function() {
            var $a, $b, TMP_5, self = this;

            return ($a = ($b = self).$reject, $a.$$p = (TMP_5 = function(k, v){var self = TMP_5.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
            return $scope.get('CONDITIONAL_FILTERS')['$[]'](k)['$=='](v)}, TMP_5.$$s = self, TMP_5), $a).call($b);
          }, nil) && 'without_conditional_filters';
        })(self, $scope.get('Hash'));

        (function($base) {
          var self = $module($base, 'BackwardCompatibility');

          var def = self.$$proto, $scope = self.$$scope, TMP_6, TMP_7;

          Opal.defn(self, '$merge', TMP_6 = function(orig, opposite, updates) {var $zuper = $slice.call(arguments, 0);
            var self = this, $iter = TMP_6.$$p, $yield = $iter || nil;

            updates = $slice.call(arguments, 2);
            TMP_6.$$p = null;
            self.$_warn_deprecated_keys(updates.$last());
            return Opal.find_super_dispatcher(self, 'merge', TMP_6, $iter).apply(self, $zuper);
          });

          Opal.defn(self, '$reverse_merge', TMP_7 = function(orig, opposite, updates) {var $zuper = $slice.call(arguments, 0);
            var self = this, $iter = TMP_7.$$p, $yield = $iter || nil;

            updates = $slice.call(arguments, 2);
            TMP_7.$$p = null;
            self.$_warn_deprecated_keys(updates.$last());
            return Opal.find_super_dispatcher(self, 'reverse_merge', TMP_7, $iter).apply(self, $zuper);
          });

          Opal.defn(self, '$_warn_deprecated_keys', function(updates) {
            var $a, self = this;

            if ((($a = updates['$has_key?']("unless")) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$_warn_deprecated_key("unless", updates)};
            if ((($a = updates['$has_key?']("if")) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$_warn_deprecated_key("if", updates)
              } else {
              return nil
            };
          });

          Opal.defn(self, '$_warn_deprecated_key', function(key, updates) {
            var self = this;
            if (self.exclusions == null) self.exclusions = nil;

            $scope.get('RSpec').$deprecate("FilterManager#exclude(" + (key.$inspect()) + " => " + (updates['$[]'](key).$inspect()) + ")");
            return self.exclusions['$[]='](key, updates.$delete(key));
          });
        })(self);

        self.$attr_reader("exclusions", "inclusions");

        def.$initialize = function() {
          var self = this;

          self.exclusions = $scope.get('ExclusionFilterHash').$new();
          self.inclusions = $scope.get('InclusionFilterHash').$new();
          return self.$extend($scope.get('BackwardCompatibility'));
        };

        def.$add_location = function(file_path, line_numbers) {
          var $a, $b, $c, TMP_8, self = this, locations = nil;

          locations = ((($a = self.inclusions.$delete("locations")) !== false && $a !== nil) ? $a : ($b = ($c = $scope.get('Hash')).$new, $b.$$p = (TMP_8 = function(h, k){var self = TMP_8.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
          return h['$[]='](k, [])}, TMP_8.$$s = self, TMP_8), $b).call($c));
          ($a = locations['$[]']($scope.get('File').$expand_path(file_path))).$push.apply($a, [].concat(line_numbers));
          self.inclusions.$replace($hash2(["locations"], {"locations": locations}));
          return self.exclusions.$clear();
        };

        def['$empty?'] = function() {
          var $a, self = this;

          return ($a = self.$inclusions()['$empty?'](), $a !== false && $a !== nil ?self.$exclusions()['$empty_without_conditional_filters?']() : $a);
        };

        def.$prune = function(examples) {
          var $a, $b, TMP_9, self = this;

          return ($a = ($b = examples).$select, $a.$$p = (TMP_9 = function(e){var self = TMP_9.$$s || this, $a;
if (e == null) e = nil;
          return ($a = self['$exclude?'](e)['$!'](), $a !== false && $a !== nil ?self['$include?'](e) : $a)}, TMP_9.$$s = self, TMP_9), $a).call($b);
        };

        def.$exclude = function(args) {
          var $a, self = this;

          args = $slice.call(arguments, 0);
          return ($a = self).$merge.apply($a, [self.exclusions, self.inclusions].concat(args));
        };

        def['$exclude!'] = function(args) {
          var $a, self = this;

          args = $slice.call(arguments, 0);
          return ($a = self).$replace.apply($a, [self.exclusions, self.inclusions].concat(args));
        };

        def.$exclude_with_low_priority = function(args) {
          var $a, self = this;

          args = $slice.call(arguments, 0);
          return ($a = self).$reverse_merge.apply($a, [self.exclusions, self.inclusions].concat(args));
        };

        def['$exclude?'] = function(example) {
          var $a, self = this;

          if ((($a = self.exclusions['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return false
            } else {
            return example['$any_apply?'](self.exclusions)
          };
        };

        def.$include = function(args) {
          var $a, $b, TMP_10, self = this;

          args = $slice.call(arguments, 0);
          return ($a = ($b = self).$unless_standalone, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this, $a;
            if (self.inclusions == null) self.inclusions = nil;
            if (self.exclusions == null) self.exclusions = nil;

          return ($a = self).$merge.apply($a, [self.inclusions, self.exclusions].concat(args))}, TMP_10.$$s = self, TMP_10), $a).apply($b, [].concat(args));
        };

        def['$include!'] = function(args) {
          var $a, $b, TMP_11, self = this;

          args = $slice.call(arguments, 0);
          return ($a = ($b = self).$unless_standalone, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this, $a;
            if (self.inclusions == null) self.inclusions = nil;
            if (self.exclusions == null) self.exclusions = nil;

          return ($a = self).$replace.apply($a, [self.inclusions, self.exclusions].concat(args))}, TMP_11.$$s = self, TMP_11), $a).apply($b, [].concat(args));
        };

        def.$include_with_low_priority = function(args) {
          var $a, $b, TMP_12, self = this;

          args = $slice.call(arguments, 0);
          return ($a = ($b = self).$unless_standalone, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this, $a;
            if (self.inclusions == null) self.inclusions = nil;
            if (self.exclusions == null) self.exclusions = nil;

          return ($a = self).$reverse_merge.apply($a, [self.inclusions, self.exclusions].concat(args))}, TMP_12.$$s = self, TMP_12), $a).apply($b, [].concat(args));
        };

        def['$include?'] = function(example) {
          var $a, self = this;

          if ((($a = self.inclusions['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return true
            } else {
            return example['$any_apply?'](self.inclusions)
          };
        };

        self.$private();

        def.$unless_standalone = TMP_13 = function(args) {
          var $a, self = this, $iter = TMP_13.$$p, $yield = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_13.$$p = null;
          if ((($a = self['$already_set_standalone_filter?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
          } else if ((($a = self['$is_standalone_filter?'](args.$last())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.inclusions.$replace(args.$last())
            } else {
            return $a = Opal.yieldX($yield, []), $a === $breaker ? $a : $a
          };
        };

        def.$merge = function(orig, opposite, updates) {
          var $a, $b, TMP_14, self = this;

          updates = $slice.call(arguments, 2);
          return ($a = ($b = orig['$merge!'](updates.$last())).$each_key, $a.$$p = (TMP_14 = function(k){var self = TMP_14.$$s || this;
if (k == null) k = nil;
          return opposite.$delete(k)}, TMP_14.$$s = self, TMP_14), $a).call($b);
        };

        def.$replace = function(orig, opposite, updates) {
          var $a, $b, TMP_15, self = this;

          updates = $slice.call(arguments, 2);
          ($a = ($b = updates.$last()).$each_key, $a.$$p = (TMP_15 = function(k){var self = TMP_15.$$s || this;
if (k == null) k = nil;
          return opposite.$delete(k)}, TMP_15.$$s = self, TMP_15), $a).call($b);
          return orig.$replace(updates.$last());
        };

        def.$reverse_merge = function(orig, opposite, updates) {
          var $a, $b, TMP_16, self = this, updated = nil;

          updates = $slice.call(arguments, 2);
          updated = updates.$last().$merge(orig);
          ($a = ($b = opposite).$each_pair, $a.$$p = (TMP_16 = function(k, v){var self = TMP_16.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
          if (updated['$[]'](k)['$=='](v)) {
              return updated.$delete(k)
              } else {
              return nil
            }}, TMP_16.$$s = self, TMP_16), $a).call($b);
          return orig.$replace(updated);
        };

        def['$already_set_standalone_filter?'] = function() {
          var self = this;

          return self['$is_standalone_filter?'](self.$inclusions());
        };

        return (def['$is_standalone_filter?'] = function(filter) {
          var $a, $b, TMP_17, self = this;

          return ($a = ($b = $scope.get('STANDALONE_FILTERS'))['$any?'], $a.$$p = (TMP_17 = function(key){var self = TMP_17.$$s || this;
if (key == null) key = nil;
          return filter['$has_key?'](key)}, TMP_17.$$s = self, TMP_17), $a).call($b);
        }, nil) && 'is_standalone_filter?';
      })(self, null)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/dsl"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$register', '$describe', '$to_proc', '$extend', '$send']);
  (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'DSL');

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        Opal.defn(self, '$describe', TMP_1 = function(args) {
          var $a, $b, self = this, $iter = TMP_1.$$p, example_group_block = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_1.$$p = null;
          return ($a = ($b = (((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('ExampleGroup'))).$describe, $a.$$p = example_group_block.$to_proc(), $a).apply($b, [].concat(args)).$register();
        })
      })(self)
    })(self)
  })(self);
  self.$extend((((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('DSL')));
  return $scope.get('Module').$send("include", (((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('DSL')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/reporter"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$map', '$to_proc', '$new', '$[]=', '$each', '$register_listener', '$respond_to?', '$<<', '$[]', '$to_sym', '$start', '$finish', '$now', '$notify', '$empty?', '$descendant_filtered_examples', '$+', '$stop', '$seed_used?', '$seed', '$alias_method', '$to_f', '$-', '$send', '$registered_listeners', '$private']);
  return (function($base) {
    var self = $module($base, 'Core');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Reporter(){};
      var self = $Reporter = $klass($base, $super, 'Reporter', $Reporter);

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_4, TMP_5;

      def.listeners = def.example_count = def.failure_count = def.pending_count = def.duration = def.configuration = def.start = nil;
      Opal.cdecl($scope, 'NOTIFICATIONS', ($a = ($b = ["start", "message", "example_group_started", "example_group_finished", "example_started", "example_passed", "example_failed", "example_pending", "start_dump", "dump_pending", "dump_failures", "dump_summary", "seed", "close", "stop", "deprecation", "deprecation_summary"]).$map, $a.$$p = "to_sym".$to_proc(), $a).call($b));

      def.$initialize = function(configuration, formatters) {
        var $a, $b, TMP_1, $c, TMP_2, self = this;

        formatters = $slice.call(arguments, 1);
        self.configuration = configuration;
        self.listeners = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_1 = function(h, k){var self = TMP_1.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
        return h['$[]='](k, [])}, TMP_1.$$s = self, TMP_1), $a).call($b);
        ($a = ($c = formatters).$each, $a.$$p = (TMP_2 = function(formatter){var self = TMP_2.$$s || this, $a;
if (formatter == null) formatter = nil;
        return ($a = self).$register_listener.apply($a, [formatter].concat($scope.get('NOTIFICATIONS')))}, TMP_2.$$s = self, TMP_2), $a).call($c);
        self.example_count = self.failure_count = self.pending_count = 0;
        return self.duration = self.start = nil;
      };

      def.$register_listener = function(listener, notifications) {
        var $a, $b, TMP_3, self = this;

        notifications = $slice.call(arguments, 1);
        ($a = ($b = notifications).$each, $a.$$p = (TMP_3 = function(notification){var self = TMP_3.$$s || this, $a;
          if (self.listeners == null) self.listeners = nil;
if (notification == null) notification = nil;
        if ((($a = listener['$respond_to?'](notification)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.listeners['$[]'](notification.$to_sym())['$<<'](listener)
            } else {
            return nil
          }}, TMP_3.$$s = self, TMP_3), $a).call($b);
        return true;
      };

      def.$registered_listeners = function(notification) {
        var self = this;

        return self.listeners['$[]'](notification);
      };

      def.$report = TMP_4 = function(expected_example_count) {
        var $a, self = this, $iter = TMP_4.$$p, $yield = $iter || nil;

        TMP_4.$$p = null;
        self.$start(expected_example_count);
        try {
        return $a = Opal.yield1($yield, self), $a === $breaker ? $a : $a
        } finally {
        self.$finish()
        };
      };

      def.$start = function(expected_example_count) {
        var self = this;

        self.start = (((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('Time')).$now();
        return self.$notify("start", expected_example_count);
      };

      def.$message = function(message) {
        var self = this;

        return self.$notify("message", message);
      };

      def.$example_group_started = function(group) {
        var $a, self = this;

        if ((($a = group.$descendant_filtered_examples()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return self.$notify("example_group_started", group)
        };
      };

      def.$example_group_finished = function(group) {
        var $a, self = this;

        if ((($a = group.$descendant_filtered_examples()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return self.$notify("example_group_finished", group)
        };
      };

      def.$example_started = function(example) {
        var self = this;

        self.example_count = self.example_count['$+'](1);
        return self.$notify("example_started", example);
      };

      def.$example_passed = function(example) {
        var self = this;

        return self.$notify("example_passed", example);
      };

      def.$example_failed = function(example) {
        var self = this;

        self.failure_count = self.failure_count['$+'](1);
        return self.$notify("example_failed", example);
      };

      def.$example_pending = function(example) {
        var self = this;

        self.pending_count = self.pending_count['$+'](1);
        return self.$notify("example_pending", example);
      };

      def.$deprecation = function(message) {
        var self = this;

        return self.$notify("deprecation", message);
      };

      def.$finish = function() {
        var $a, self = this;

        try {
        self.$stop();
        self.$notify("start_dump");
        self.$notify("dump_pending");
        self.$notify("dump_failures");
        self.$notify("dump_summary", self.duration, self.example_count, self.failure_count, self.pending_count);
        self.$notify("deprecation_summary");
        if ((($a = self['$seed_used?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$notify("seed", self.configuration.$seed())
          } else {
          return nil
        };
        } finally {
        self.$notify("close")
        };
      };

      self.$alias_method("abort", "finish");

      def.$stop = function() {
        var $a, self = this;

        if ((($a = self.start) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.duration = ((((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('Time')).$now()['$-'](self.start)).$to_f()};
        return self.$notify("stop");
      };

      def.$notify = TMP_5 = function(event, args) {
        var $a, $b, TMP_6, self = this, $iter = TMP_5.$$p, block = $iter || nil;

        args = $slice.call(arguments, 1);
        TMP_5.$$p = null;
        return ($a = ($b = self.$registered_listeners(event)).$each, $a.$$p = (TMP_6 = function(formatter){var self = TMP_6.$$s || this, $a, $b;
if (formatter == null) formatter = nil;
        return ($a = ($b = formatter).$send, $a.$$p = block.$to_proc(), $a).apply($b, [event].concat(args))}, TMP_6.$$s = self, TMP_6), $a).call($b);
      };

      self.$private();

      return (def['$seed_used?'] = function() {
        var $a, self = this;

        return ($a = self.configuration.$seed(), $a !== false && $a !== nil ?self.configuration['$seed_used?']() : $a);
      }, nil) && 'seed_used?';
    })(self, null)
  })($scope.get('RSpec'))
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/hooks"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$all_apply?', '$options', '$instance_exec', '$to_proc', '$block', '$instance_exec_with_rescue', '$message', '$reporter', '$configuration', '$class', '$first', '$backtrace', '$each', '$define_method', '$__send__', '$hooks', '$public_instance_methods', '$protected', '$with', '$new', '$select', '$options_apply?', '$run', '$call', '$reduce', '$wrap', '$empty?', '$shift', '$[]', '$process', '$private', '$==', '$any?', '$include?', '$parent_groups', '$<<', '$register_hook', '$alias_method', '$dry_run?', '$find_hook', '$for', '$flat_map', '$[]=', '$reverse', '$scope_and_options_from', '$send', '$===', '$before_all_hooks_for', '$after_all_hooks_for', '$around_each_hooks_for', '$before_each_hooks_for', '$after_each_hooks_for', '$extract_scope_from', '$build_hash_from', '$is_a?', '$raise']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Hooks');

        var def = self.$$proto, $scope = self.$$scope, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, $a, $b, TMP_16, $c, TMP_17, $d, TMP_18, TMP_21;

        (function($base, $super) {
          function $Hook(){};
          var self = $Hook = $klass($base, $super, 'Hook', $Hook);

          var def = self.$$proto, $scope = self.$$scope;

          self.$attr_reader("block", "options");

          def.$initialize = function(block, options) {
            var self = this;

            self.block = block;
            return self.options = options;
          };

          return (def['$options_apply?'] = function(example_or_group) {
            var self = this;

            return example_or_group['$all_apply?'](self.$options());
          }, nil) && 'options_apply?';
        })(self, null);

        (function($base, $super) {
          function $BeforeHook(){};
          var self = $BeforeHook = $klass($base, $super, 'BeforeHook', $BeforeHook);

          var def = self.$$proto, $scope = self.$$scope;

          def.$run = function(example) {
            var $a, $b, self = this;

            return ($a = ($b = example).$instance_exec, $a.$$p = self.$block().$to_proc(), $a).call($b, example);
          };

          return (def.$display_name = function() {
            var self = this;

            return "before hook";
          }, nil) && 'display_name';
        })(self, $scope.get('Hook'));

        (function($base, $super) {
          function $AfterHook(){};
          var self = $AfterHook = $klass($base, $super, 'AfterHook', $AfterHook);

          var def = self.$$proto, $scope = self.$$scope;

          def.$run = function(example) {
            var $a, $b, self = this;

            return ($a = ($b = example).$instance_exec_with_rescue, $a.$$p = self.$block().$to_proc(), $a).call($b, "in an after hook");
          };

          return (def.$display_name = function() {
            var self = this;

            return "after hook";
          }, nil) && 'display_name';
        })(self, $scope.get('Hook'));

        (function($base, $super) {
          function $AfterAllHook(){};
          var self = $AfterAllHook = $klass($base, $super, 'AfterAllHook', $AfterAllHook);

          var def = self.$$proto, $scope = self.$$scope;

          def.$run = function(example) {
            var $a, $b, self = this, e = nil;

            try {
            return ($a = ($b = example).$instance_exec, $a.$$p = self.$block().$to_proc(), $a).call($b, example)
            } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              return $scope.get('RSpec').$configuration().$reporter().$message("\nAn error occurred in an after(:all) hook.\n  " + (e.$class()) + ": " + (e.$message()) + "\n  occurred at " + (e.$backtrace().$first()) + "\n\n")
              }else { throw $err; }
            };
          };

          return (def.$display_name = function() {
            var self = this;

            return "after(:all) hook";
          }, nil) && 'display_name';
        })(self, $scope.get('Hook'));

        (function($base, $super) {
          function $AroundHook(){};
          var self = $AroundHook = $klass($base, $super, 'AroundHook', $AroundHook);

          var def = self.$$proto, $scope = self.$$scope;

          return (def.$display_name = function() {
            var self = this;

            return "around hook";
          }, nil) && 'display_name'
        })(self, $scope.get('Hook'));

        (function($base, $super) {
          function $BaseHookCollection(){};
          var self = $BaseHookCollection = $klass($base, $super, 'BaseHookCollection', $BaseHookCollection);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          ($a = ($b = $scope.get('Array').$public_instance_methods(false)).$each, $a.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (name == null) name = nil;
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_2 = function(a){var self = TMP_2.$$s || this, b, $a, $b;
a = $slice.call(arguments, 0);
              b = TMP_2.$$p || nil, TMP_2.$$p = null;
            return ($a = ($b = self.$hooks()).$__send__, $a.$$p = b.$to_proc(), $a).apply($b, [name].concat(a))}, TMP_2.$$s = self, TMP_2), $a).call($b, name)}, TMP_1.$$s = self, TMP_1), $a).call($b);

          self.$attr_reader("hooks");

          self.$protected("hooks");

          Opal.defn(self, '$append', def.$push);

          Opal.defn(self, '$prepend', def.$unshift);

          return (def.$initialize = function(hooks) {
            var self = this;

            if (hooks == null) {
              hooks = []
            }
            return self.hooks = hooks;
          }, nil) && 'initialize';
        })(self, null);

        (function($base, $super) {
          function $HookCollection(){};
          var self = $HookCollection = $klass($base, $super, 'HookCollection', $HookCollection);

          var def = self.$$proto, $scope = self.$$scope;

          def.$for = function(example_or_group) {
            var $a, $b, TMP_3, self = this;

            return self.$class().$new(($a = ($b = self.$hooks()).$select, $a.$$p = (TMP_3 = function(hook){var self = TMP_3.$$s || this;
if (hook == null) hook = nil;
            return hook['$options_apply?'](example_or_group)}, TMP_3.$$s = self, TMP_3), $a).call($b)).$with(example_or_group);
          };

          def.$with = function(example) {
            var self = this;

            self.example = example;
            return self;
          };

          return (def.$run = function() {
            var $a, $b, TMP_4, self = this;

            return ($a = ($b = self.$hooks()).$each, $a.$$p = (TMP_4 = function(h){var self = TMP_4.$$s || this;
              if (self.example == null) self.example = nil;
if (h == null) h = nil;
            return h.$run(self.example)}, TMP_4.$$s = self, TMP_4), $a).call($b);
          }, nil) && 'run';
        })(self, $scope.get('BaseHookCollection'));

        (function($base, $super) {
          function $AroundHookCollection(){};
          var self = $AroundHookCollection = $klass($base, $super, 'AroundHookCollection', $AroundHookCollection);

          var def = self.$$proto, $scope = self.$$scope;

          def.initial_procsy = nil;
          def.$for = function(example, initial_procsy) {
            var $a, $b, TMP_5, self = this;

            if (initial_procsy == null) {
              initial_procsy = nil
            }
            return self.$class().$new(($a = ($b = self.$hooks()).$select, $a.$$p = (TMP_5 = function(hook){var self = TMP_5.$$s || this;
if (hook == null) hook = nil;
            return hook['$options_apply?'](example)}, TMP_5.$$s = self, TMP_5), $a).call($b)).$with(example, initial_procsy);
          };

          def.$with = function(example, initial_procsy) {
            var self = this;

            self.example = example;
            self.initial_procsy = initial_procsy;
            return self;
          };

          return (def.$run = function() {
            var $a, $b, TMP_6, self = this;

            return ($a = ($b = self.$hooks()).$reduce, $a.$$p = (TMP_6 = function(procsy, around_hook){var self = TMP_6.$$s || this, $a, $b, TMP_7;
if (procsy == null) procsy = nil;if (around_hook == null) around_hook = nil;
            return ($a = ($b = procsy).$wrap, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $a, $b;
                if (self.example == null) self.example = nil;

              return ($a = ($b = self.example).$instance_exec, $a.$$p = around_hook.$block().$to_proc(), $a).call($b, procsy)}, TMP_7.$$s = self, TMP_7), $a).call($b)}, TMP_6.$$s = self, TMP_6), $a).call($b, self.initial_procsy).$call();
          }, nil) && 'run';
        })(self, $scope.get('BaseHookCollection'));

        (function($base, $super) {
          function $GroupHookCollection(){};
          var self = $GroupHookCollection = $klass($base, $super, 'GroupHookCollection', $GroupHookCollection);

          var def = self.$$proto, $scope = self.$$scope;

          def.group = nil;
          def.$for = function(group) {
            var self = this;

            self.group = group;
            return self;
          };

          return (def.$run = function() {
            var $a, $b, self = this;

            return (function() {while (!((($b = self.$hooks()['$empty?']()) !== nil && (!$b.$$is_boolean || $b == true)))) {
            self.$hooks().$shift().$run(self.group)}; return nil; })();
          }, nil) && 'run';
        })(self, $scope.get('BaseHookCollection'));

        (function($base, $super) {
          function $HookCollections(){};
          var self = $HookCollections = $klass($base, $super, 'HookCollections', $HookCollections);

          var def = self.$$proto, $scope = self.$$scope;

          def.data = nil;
          def.$initialize = function(data) {
            var self = this;

            return self.data = data;
          };

          def['$[]'] = function(key) {
            var self = this;

            return self.data['$[]'](key);
          };

          def.$register_globals = function(host, globals) {
            var self = this;

            self.$process(host, globals, "before", "each");
            self.$process(host, globals, "after", "each");
            self.$process(host, globals, "around", "each");
            self.$process(host, globals, "before", "all");
            return self.$process(host, globals, "after", "all");
          };

          self.$private();

          return (def.$process = function(host, globals, position, scope) {
            var $a, $b, TMP_8, self = this;

            return ($a = ($b = globals['$[]'](position)['$[]'](scope)).$each, $a.$$p = (TMP_8 = function(hook){var self = TMP_8.$$s || this, $a, $b, $c, TMP_9;
if (hook == null) hook = nil;
            if ((($a = ((($b = scope['$==']("each")) !== false && $b !== nil) ? $b : hook['$options_apply?'](host))) !== nil && (!$a.$$is_boolean || $a == true))) {
                } else {
                return nil;
              };
              if ((($a = ($b = ($c = host.$parent_groups())['$any?'], $b.$$p = (TMP_9 = function(a){var self = TMP_9.$$s || this;
if (a == null) a = nil;
              return a.$hooks()['$[]'](position)['$[]'](scope)['$include?'](hook)}, TMP_9.$$s = self, TMP_9), $b).call($c)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return nil;};
              return self['$[]'](position)['$[]'](scope)['$<<'](hook);}, TMP_8.$$s = self, TMP_8), $a).call($b);
          }, nil) && 'process';
        })(self, null);

        Opal.defn(self, '$hooks', function() {
          var $a, self = this;
          if (self.hooks == null) self.hooks = nil;

          return ((($a = self.hooks) !== false && $a !== nil) ? $a : self.hooks = $scope.get('HookCollections').$new($hash2(["around", "before", "after"], {"around": $hash2(["each"], {"each": $scope.get('AroundHookCollection').$new()}), "before": $hash2(["each", "all", "suite"], {"each": $scope.get('HookCollection').$new(), "all": $scope.get('HookCollection').$new(), "suite": $scope.get('HookCollection').$new()}), "after": $hash2(["each", "all", "suite"], {"each": $scope.get('HookCollection').$new(), "all": $scope.get('HookCollection').$new(), "suite": $scope.get('HookCollection').$new()})})));
        });

        Opal.defn(self, '$before', TMP_10 = function(args) {
          var $a, $b, self = this, $iter = TMP_10.$$p, block = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_10.$$p = null;
          return ($a = ($b = self).$register_hook, $a.$$p = block.$to_proc(), $a).apply($b, ["append", "before"].concat(args));
        });

        self.$alias_method("append_before", "before");

        Opal.defn(self, '$prepend_before', TMP_11 = function(args) {
          var $a, $b, self = this, $iter = TMP_11.$$p, block = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_11.$$p = null;
          return ($a = ($b = self).$register_hook, $a.$$p = block.$to_proc(), $a).apply($b, ["prepend", "before"].concat(args));
        });

        Opal.defn(self, '$after', TMP_12 = function(args) {
          var $a, $b, self = this, $iter = TMP_12.$$p, block = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_12.$$p = null;
          return ($a = ($b = self).$register_hook, $a.$$p = block.$to_proc(), $a).apply($b, ["prepend", "after"].concat(args));
        });

        self.$alias_method("prepend_after", "after");

        Opal.defn(self, '$append_after', TMP_13 = function(args) {
          var $a, $b, self = this, $iter = TMP_13.$$p, block = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_13.$$p = null;
          return ($a = ($b = self).$register_hook, $a.$$p = block.$to_proc(), $a).apply($b, ["append", "after"].concat(args));
        });

        Opal.defn(self, '$around', TMP_14 = function(args) {
          var $a, $b, self = this, $iter = TMP_14.$$p, block = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_14.$$p = null;
          return ($a = ($b = self).$register_hook, $a.$$p = block.$to_proc(), $a).apply($b, ["prepend", "around"].concat(args));
        });

        Opal.defn(self, '$run_hook', function(hook, scope, example_or_group, initial_procsy) {
          var $a, self = this;

          if (example_or_group == null) {
            example_or_group = $scope.get('ExampleGroup').$new()
          }
          if (initial_procsy == null) {
            initial_procsy = nil
          }
          if ((($a = $scope.get('RSpec').$configuration()['$dry_run?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          return self.$find_hook(hook, scope, example_or_group, initial_procsy).$run();
        });

        Opal.defn(self, '$around_each_hooks_for', function(example, initial_procsy) {
          var $a, $b, TMP_15, self = this;

          if (initial_procsy == null) {
            initial_procsy = nil
          }
          return $scope.get('AroundHookCollection').$new(($a = ($b = $scope.get('FlatMap')).$flat_map, $a.$$p = (TMP_15 = function(a){var self = TMP_15.$$s || this;
if (a == null) a = nil;
          return a.$hooks()['$[]']("around")['$[]']("each")}, TMP_15.$$s = self, TMP_15), $a).call($b, self.$parent_groups())).$for(example, initial_procsy);
        });

        self.$private();

        Opal.cdecl($scope, 'SCOPES', ["each", "all", "suite"]);

        Opal.cdecl($scope, 'HOOK_TYPES', $hash2(["before", "after", "around"], {"before": ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

        return $scope.get('BeforeHook')}, TMP_16.$$s = self, TMP_16), $a).call($b), "after": ($a = ($c = $scope.get('Hash')).$new, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this;

        return $scope.get('AfterHook')}, TMP_17.$$s = self, TMP_17), $a).call($c), "around": ($a = ($d = $scope.get('Hash')).$new, $a.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this;

        return $scope.get('AroundHook')}, TMP_18.$$s = self, TMP_18), $a).call($d)}));

        $scope.get('HOOK_TYPES')['$[]']("after")['$[]=']("all", $scope.get('AfterAllHook'));

        Opal.defn(self, '$before_all_hooks_for', function(group) {
          var self = this;

          return $scope.get('GroupHookCollection').$new(self.$hooks()['$[]']("before")['$[]']("all")).$for(group);
        });

        Opal.defn(self, '$after_all_hooks_for', function(group) {
          var self = this;

          return $scope.get('GroupHookCollection').$new(self.$hooks()['$[]']("after")['$[]']("all")).$for(group);
        });

        Opal.defn(self, '$before_each_hooks_for', function(example) {
          var $a, $b, TMP_19, self = this;

          return $scope.get('HookCollection').$new(($a = ($b = $scope.get('FlatMap')).$flat_map, $a.$$p = (TMP_19 = function(a){var self = TMP_19.$$s || this;
if (a == null) a = nil;
          return a.$hooks()['$[]']("before")['$[]']("each")}, TMP_19.$$s = self, TMP_19), $a).call($b, self.$parent_groups().$reverse())).$for(example);
        });

        Opal.defn(self, '$after_each_hooks_for', function(example) {
          var $a, $b, TMP_20, self = this;

          return $scope.get('HookCollection').$new(($a = ($b = $scope.get('FlatMap')).$flat_map, $a.$$p = (TMP_20 = function(a){var self = TMP_20.$$s || this;
if (a == null) a = nil;
          return a.$hooks()['$[]']("after")['$[]']("each")}, TMP_20.$$s = self, TMP_20), $a).call($b, self.$parent_groups())).$for(example);
        });

        Opal.defn(self, '$register_hook', TMP_21 = function(prepend_or_append, hook, args) {
          var $a, $b, self = this, $iter = TMP_21.$$p, block = $iter || nil, scope = nil, options = nil;

          args = $slice.call(arguments, 2);
          TMP_21.$$p = null;
          $a = Opal.to_ary(($b = self).$scope_and_options_from.apply($b, [].concat(args))), scope = ($a[0] == null ? nil : $a[0]), options = ($a[1] == null ? nil : $a[1]);
          return self.$hooks()['$[]'](hook)['$[]'](scope).$send(prepend_or_append, $scope.get('HOOK_TYPES')['$[]'](hook)['$[]'](scope).$new(block, options));
        });

        Opal.defn(self, '$find_hook', function(hook, scope, example_or_group, initial_procsy) {
          var self = this, $case = nil;

          return (function() {$case = [hook, scope];if (["before", "all"]['$===']($case)) {return self.$before_all_hooks_for(example_or_group)}else if (["after", "all"]['$===']($case)) {return self.$after_all_hooks_for(example_or_group)}else if (["around", "each"]['$===']($case)) {return self.$around_each_hooks_for(example_or_group, initial_procsy)}else if (["before", "each"]['$===']($case)) {return self.$before_each_hooks_for(example_or_group)}else if (["after", "each"]['$===']($case)) {return self.$after_each_hooks_for(example_or_group)}else if (["before", "suite"]['$===']($case) || ["after", "suite"]['$===']($case)) {return self.$hooks()['$[]'](hook)['$[]']("suite").$with(example_or_group)}else { return nil }})();
        });

        Opal.defn(self, '$scope_and_options_from', function(args) {
          var self = this;

          args = $slice.call(arguments, 0);
          return [self.$extract_scope_from(args), $scope.get('Metadata').$build_hash_from(args)];
        });

        Opal.defn(self, '$extract_scope_from', function(args) {
          var $a, $b, $c, TMP_22, self = this;

          if ((($a = $scope.get('SCOPES')['$include?'](args.$first())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return args.$shift()
          } else if ((($a = ($b = ($c = args)['$any?'], $b.$$p = (TMP_22 = function(a){var self = TMP_22.$$s || this;
if (a == null) a = nil;
          return a['$is_a?']($scope.get('Symbol'))}, TMP_22.$$s = self, TMP_22), $b).call($c)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$raise($scope.get('ArgumentError').$new("You must explicitly give a scope (:each, :all, or :suite) when using symbols as metadata for a hook."))
            } else {
            return "each"
          };
        });
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/memoized_helpers"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $klass = Opal.klass;

  Opal.add_stubs(['$fetch', '$[]=', '$__memoized', '$described_class', '$description', '$class', '$===', '$new', '$handle_matcher', '$subject', '$private', '$instance_eval', '$==', '$raise', '$article', '$hook_expression', '$first_non_rspec_line', '$hook_intention', '$extend', '$nil?', '$send', '$to_proc', '$module_for', '$arity', '$define_method', '$current_example', '$let', '$before', '$__send__', '$alias_method', '$get_constant_or_yield', '$include', '$const_set', '$method', '$const_defined?', '$const_get']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'MemoizedHelpers');

        var def = self.$$proto, $scope = self.$$scope, TMP_19, TMP_20;

        Opal.defn(self, '$subject', function() {
          var $a, $b, TMP_1, self = this;

          return ($a = ($b = self.$__memoized()).$fetch, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, described = nil;

          return self.$__memoized()['$[]=']("subject", (function() {described = ((($a = self.$described_class()) !== false && $a !== nil) ? $a : self.$class().$description());
            if ((($a = $scope.get('Class')['$==='](described)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return described.$new()
              } else {
              return described
            };})())}, TMP_1.$$s = self, TMP_1), $a).call($b, "subject");
        });

        Opal.defn(self, '$should', function(matcher, message) {
          var self = this;

          if (matcher == null) {
            matcher = nil
          }
          if (message == null) {
            message = nil
          }
          return (((($scope.get('RSpec')).$$scope.get('Expectations'))).$$scope.get('PositiveExpectationHandler')).$handle_matcher(self.$subject(), matcher, message);
        });

        Opal.defn(self, '$should_not', function(matcher, message) {
          var self = this;

          if (matcher == null) {
            matcher = nil
          }
          if (message == null) {
            message = nil
          }
          return (((($scope.get('RSpec')).$$scope.get('Expectations'))).$$scope.get('NegativeExpectationHandler')).$handle_matcher(self.$subject(), matcher, message);
        });

        self.$private();

        Opal.defn(self, '$__memoized', function() {
          var $a, self = this;
          if (self.__memoized == null) self.__memoized = nil;

          return ((($a = self.__memoized) !== false && $a !== nil) ? $a : self.__memoized = $hash2([], {}));
        });

        (function($base, $super) {
          function $AllHookMemoizedHash(){};
          var self = $AllHookMemoizedHash = $klass($base, $super, 'AllHookMemoizedHash', $AllHookMemoizedHash);

          var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4;

          Opal.defs(self, '$isolate_for_all_hook', TMP_3 = function(example_group_instance) {
            var $a, $b, TMP_2, self = this, $iter = TMP_3.$$p, $yield = $iter || nil, hash = nil;

            TMP_3.$$p = null;
            hash = self;
            return ($a = ($b = example_group_instance).$instance_eval, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a;

            self.__memoized = hash;
              try {
              return $a = Opal.yieldX($yield, []), $a === $breaker ? $a : $a
              } finally {
              self.__memoized = nil
              };}, TMP_2.$$s = self, TMP_2), $a).call($b);
          });

          Opal.defs(self, '$fetch', TMP_4 = function(key) {
            var self = this, $iter = TMP_4.$$p, block = $iter || nil, description = nil;

            TMP_4.$$p = null;
            description = (function() {if (key['$==']("subject")) {
              return "subject"
              } else {
              return "let declaration `" + (key) + "`"
            }; return nil; })();
            return self.$raise("" + (description) + " accessed in " + (self.$article()) + " " + (self.$hook_expression()) + " hook at:\n  " + ($scope.get('CallerFilter').$first_non_rspec_line()) + "\n\n`let` and `subject` declarations are not intended to be called\nin " + (self.$article()) + " " + (self.$hook_expression()) + " hook, as they exist to define state that\nis reset between each example, while " + (self.$hook_expression()) + " exists to\n" + (self.$hook_intention()) + ".\n");
          });

          (function($base, $super) {
            function $Before(){};
            var self = $Before = $klass($base, $super, 'Before', $Before);

            var def = self.$$proto, $scope = self.$$scope;

            Opal.defs(self, '$hook_expression', function() {
              var self = this;

              return "`before(:all)`";
            });

            Opal.defs(self, '$article', function() {
              var self = this;

              return "a";
            });

            return (Opal.defs(self, '$hook_intention', function() {
              var self = this;

              return "define state that is shared across examples in an example group";
            }), nil) && 'hook_intention';
          })(self, self);

          return (function($base, $super) {
            function $After(){};
            var self = $After = $klass($base, $super, 'After', $After);

            var def = self.$$proto, $scope = self.$$scope;

            Opal.defs(self, '$hook_expression', function() {
              var self = this;

              return "`after(:all)`";
            });

            Opal.defs(self, '$article', function() {
              var self = this;

              return "an";
            });

            return (Opal.defs(self, '$hook_intention', function() {
              var self = this;

              return "cleanup state that is shared across examples in an example group";
            }), nil) && 'hook_intention';
          })(self, self);
        })(self, null);

        Opal.defs(self, '$included', function(mod) {
          var self = this;

          return mod.$extend($scope.get('ClassMethods'));
        });

        (function($base) {
          var self = $module($base, 'ClassMethods');

          var def = self.$$proto, $scope = self.$$scope, TMP_5, TMP_10, TMP_12, TMP_14;

          Opal.defn(self, '$let', TMP_5 = function(name) {
            var $a, $b, $c, TMP_6, $d, TMP_8, self = this, $iter = TMP_5.$$p, block = $iter || nil;

            TMP_5.$$p = null;
            if ((($a = block['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$raise("#let or #subject called without a block")};
            ($a = ($b = $scope.get('MemoizedHelpers').$module_for(self)).$send, $a.$$p = block.$to_proc(), $a).call($b, "define_method", name);
            if (block.$arity()['$=='](1)) {
              return ($a = ($c = self).$define_method, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $a, $b, TMP_7;

              return ($a = ($b = self.$__memoized()).$fetch, $a.$$p = (TMP_7 = function(k){var self = TMP_7.$$s || this;
if (k == null) k = nil;
                return self.$__memoized()['$[]='](k, Opal.find_iter_super_dispatcher(self, 'let', (TMP_7.$$def || TMP_6.$$def || TMP_5), null).apply(self, [$scope.get('RSpec').$current_example(), nil.$to_proc()]))}, TMP_7.$$s = self, TMP_7), $a).call($b, name)}, TMP_6.$$s = self, TMP_6), $a).call($c, name)
              } else {
              return ($a = ($d = self).$define_method, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $a, $b, TMP_9;

              return ($a = ($b = self.$__memoized()).$fetch, $a.$$p = (TMP_9 = function(k){var self = TMP_9.$$s || this;
if (k == null) k = nil;
                return self.$__memoized()['$[]='](k, Opal.find_iter_super_dispatcher(self, 'let', (TMP_9.$$def || TMP_8.$$def || TMP_5), null).apply(self, [nil.$to_proc()]))}, TMP_9.$$s = self, TMP_9), $a).call($b, name)}, TMP_8.$$s = self, TMP_8), $a).call($d, name)
            };
          });

          Opal.defn(self, '$let!', TMP_10 = function(name) {
            var $a, $b, $c, TMP_11, self = this, $iter = TMP_10.$$p, block = $iter || nil;

            TMP_10.$$p = null;
            ($a = ($b = self).$let, $a.$$p = block.$to_proc(), $a).call($b, name);
            return ($a = ($c = self).$before, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

            return self.$__send__(name)}, TMP_11.$$s = self, TMP_11), $a).call($c);
          });

          Opal.defn(self, '$subject', TMP_12 = function(name) {
            var $a, $b, $c, TMP_13, $d, self = this, $iter = TMP_12.$$p, block = $iter || nil;

            if (name == null) {
              name = nil
            }
            TMP_12.$$p = null;
            if (name !== false && name !== nil) {
              ($a = ($b = self).$let, $a.$$p = block.$to_proc(), $a).call($b, name);
              self.$alias_method("subject", name);
              return ($a = ($c = ((self).$$scope.get('NamedSubjectPreventSuper'))).$send, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

              return self.$raise($scope.get('NotImplementedError'), "`super` in named subjects is not supported")}, TMP_13.$$s = self, TMP_13), $a).call($c, "define_method", name);
              } else {
              return ($a = ($d = self).$let, $a.$$p = block.$to_proc(), $a).call($d, "subject")
            };
          });

          Opal.defn(self, '$subject!', TMP_14 = function(name) {
            var $a, $b, $c, TMP_15, self = this, $iter = TMP_14.$$p, block = $iter || nil;

            if (name == null) {
              name = nil
            }
            TMP_14.$$p = null;
            ($a = ($b = self).$subject, $a.$$p = block.$to_proc(), $a).call($b, name);
            return ($a = ($c = self).$before, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

            return self.$subject()}, TMP_15.$$s = self, TMP_15), $a).call($c);
          });
        })(self);

        Opal.defs(self, '$module_for', function(example_group) {
          var $a, $b, TMP_16, self = this;

          return ($a = ($b = self).$get_constant_or_yield, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this, $a, $b, TMP_17, mod = nil;

          mod = ($a = ($b = $scope.get('Module')).$new, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this, $a, $b, TMP_18;

            return self.$include(($a = ($b = $scope.get('Module')).$new, $a.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this;

              return example_group.$const_set("NamedSubjectPreventSuper", self)}, TMP_18.$$s = self, TMP_18), $a).call($b))}, TMP_17.$$s = self, TMP_17), $a).call($b);
            example_group.$const_set("LetDefinitions", mod);
            return mod;}, TMP_16.$$s = self, TMP_16), $a).call($b, example_group, "LetDefinitions");
        });

        Opal.defs(self, '$define_helpers_on', function(example_group) {
          var self = this;

          return example_group.$send("include", self.$module_for(example_group));
        });

        if ($scope.get('Module').$method("const_defined?").$arity()['$=='](1)) {
          Opal.defs(self, '$get_constant_or_yield', TMP_19 = function(example_group, name) {
            var $a, self = this, $iter = TMP_19.$$p, $yield = $iter || nil;

            TMP_19.$$p = null;
            if ((($a = example_group['$const_defined?'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return example_group.$const_get(name)
              } else {
              return $a = Opal.yieldX($yield, []), $a === $breaker ? $a : $a
            };
          })
          } else {
          Opal.defs(self, '$get_constant_or_yield', TMP_20 = function(example_group, name) {
            var $a, self = this, $iter = TMP_20.$$p, $yield = $iter || nil, check_ancestors = nil;

            TMP_20.$$p = null;
            if ((($a = example_group['$const_defined?'](name, (check_ancestors = false))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return example_group.$const_get(name, check_ancestors)
              } else {
              return $a = Opal.yieldX($yield, []), $a === $breaker ? $a : $a
            };
          })
        };
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/metadata"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars, $hash = Opal.hash;

  Opal.add_stubs(['$sub', '$expand_path', '$==', '$is_a?', '$last', '$pop', '$[]=', '$has_key?', '$store_computed', '$private', '$===', '$store', '$location', '$file_and_line_number', '$described_class', '$full_description', '$build_description_from', '$[]', '$=~', '$first_caller_from_outside_rspec', '$relative_path', '$to_i', '$detect', '$inject', '$to_s', '$method_description_after_module?', '$+', '$include', '$each', '$nil?', '$container_stack', '$first', '$reverse', '$flat_map', '$<<', '$update', '$extend', '$ensure_valid_keys', '$delete', '$caller', '$configure_for_example', '$dup', '$any?', '$filter_applies?', '$all?', '$!', '$filter_applies_to_any_value?', '$line_number_filter_applies?', '$location_filter_applies?', '$filters_apply?', '$arity', '$call', '$example_group_declaration_line', '$map', '$preceding_declaration_line', '$world', '$empty?', '$&', '$relevant_line_numbers', '$protected', '$raise', '$*', '$first_non_rspec_line', '$join']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Metadata(){};
        var self = $Metadata = $klass($base, $super, 'Metadata', $Metadata);

        var def = self.$$proto, $scope = self.$$scope, TMP_9;

        Opal.defs(self, '$relative_path', function(line) {
          var self = this;

          try {
          line = line.$sub($scope.get('File').$expand_path("."), ".");
            line = line.$sub(/\A([^:]+:\d+)$/, "\\1");
            if (line['$==']("-e:1")) {
              return nil};
            return line;
          } catch ($err) {if (Opal.rescue($err, [$scope.get('SecurityError')])) {
            return nil
            }else { throw $err; }
          };
        });

        Opal.defs(self, '$build_hash_from', function(args) {
          var $a, $b, self = this, hash = nil;

          hash = (function() {if ((($a = args.$last()['$is_a?']($scope.get('Hash'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return args.$pop()
            } else {
            return $hash2([], {})
          }; return nil; })();
          while ((($b = args.$last()['$is_a?']($scope.get('Symbol'))) !== nil && (!$b.$$is_boolean || $b == true))) {
          hash['$[]='](args.$pop(), true)};
          return hash;
        });

        (function($base) {
          var self = $module($base, 'MetadataHash');

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

          Opal.defn(self, '$[]', TMP_1 = function(key) {var $zuper = $slice.call(arguments, 0);
            var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

            TMP_1.$$p = null;
            if ((($a = self['$has_key?'](key)) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$store_computed(key)
            };
            return Opal.find_super_dispatcher(self, '[]', TMP_1, $iter).apply(self, $zuper);
          });

          Opal.defn(self, '$fetch', TMP_2 = function(key, args) {var $zuper = $slice.call(arguments, 0);
            var $a, self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

            args = $slice.call(arguments, 1);
            TMP_2.$$p = null;
            if ((($a = self['$has_key?'](key)) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$store_computed(key)
            };
            return Opal.find_super_dispatcher(self, 'fetch', TMP_2, $iter).apply(self, $zuper);
          });

          self.$private();

          Opal.defn(self, '$store_computed', function(key) {
            var $a, self = this, $case = nil, file_path = nil, line_number = nil, klass = nil;

            return (function() {$case = key;if ("location"['$===']($case)) {return self.$store("location", self.$location())}else if ("file_path"['$===']($case) || "line_number"['$===']($case)) {$a = Opal.to_ary(self.$file_and_line_number()), file_path = ($a[0] == null ? nil : $a[0]), line_number = ($a[1] == null ? nil : $a[1]);
            self.$store("file_path", file_path);
            return self.$store("line_number", line_number);}else if ("execution_result"['$===']($case)) {return self.$store("execution_result", $hash2([], {}))}else if ("describes"['$===']($case) || "described_class"['$===']($case)) {klass = self.$described_class();
            self.$store("described_class", klass);
            return self.$store("describes", klass);}else if ("full_description"['$===']($case)) {return self.$store("full_description", self.$full_description())}else if ("description"['$===']($case)) {return self.$store("description", ($a = self).$build_description_from.apply($a, [].concat(self['$[]']("description_args"))))}else if ("description_args"['$===']($case)) {return self.$store("description_args", [])}else { return nil }})();
          });

          Opal.defn(self, '$location', function() {
            var self = this;

            return "" + (self['$[]']("file_path")) + ":" + (self['$[]']("line_number"));
          });

          Opal.defn(self, '$file_and_line_number', function() {
            var $a, self = this;

            self.$first_caller_from_outside_rspec()['$=~'](/(.+?):(\d+)(|:\d+)/);
            return [$scope.get('Metadata').$relative_path((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))), (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$to_i()];
          });

          Opal.defn(self, '$first_caller_from_outside_rspec', function() {
            var $a, $b, TMP_3, self = this;

            return ($a = ($b = self['$[]']("caller")).$detect, $a.$$p = (TMP_3 = function(l){var self = TMP_3.$$s || this, $a;
if (l == null) l = nil;
            return ($a = l['$=~'](/\/lib\/rspec\/core/), ($a === nil || $a === false))}, TMP_3.$$s = self, TMP_3), $a).call($b);
          });

          Opal.defn(self, '$method_description_after_module?', function(parent_part, child_part) {
            var $a, self = this;

            if ((($a = parent_part['$is_a?']($scope.get('Module'))) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              return false
            };
            return child_part['$=~'](/^(#|::|\.)/);
          });

          Opal.defn(self, '$build_description_from', function(first_part, parts) {
            var $a, $b, $c, TMP_4, self = this, description = nil, _ = nil;

            parts = $slice.call(arguments, 1);
            if (first_part == null) {
              first_part = ""
            }
            $a = Opal.to_ary(($b = ($c = parts).$inject, $b.$$p = (TMP_4 = function($d, this_part){var self = TMP_4.$$s || this, $a;
desc = $d[0];last_part = $d[1];if (this_part == null) this_part = nil;
            this_part = this_part.$to_s();
              if ((($a = self['$method_description_after_module?'](last_part, this_part)) !== nil && (!$a.$$is_boolean || $a == true))) {
                } else {
                this_part = (" "['$+'](this_part))
              };
              return [(desc['$+'](this_part)), this_part];}, TMP_4.$$s = self, TMP_4), $b).call($c, [first_part.$to_s(), first_part])), description = ($a[0] == null ? nil : $a[0]), _ = ($a[1] == null ? nil : $a[1]);
            return description;
          });
        })(self);

        (function($base) {
          var self = $module($base, 'ExampleMetadataHash');

          var def = self.$$proto, $scope = self.$$scope;

          self.$include($scope.get('MetadataHash'));

          Opal.defn(self, '$described_class', function() {
            var self = this;

            return self['$[]']("example_group").$described_class();
          });

          Opal.defn(self, '$full_description', function() {
            var $a, self = this;

            return ($a = self).$build_description_from.apply($a, [self['$[]']("example_group")['$[]']("full_description")].concat(self['$[]']("description_args")));
          });
        })(self);

        (function($base) {
          var self = $module($base, 'GroupMetadataHash');

          var def = self.$$proto, $scope = self.$$scope;

          self.$include($scope.get('MetadataHash'));

          Opal.defn(self, '$described_class', function() {try {

            var $a, $b, TMP_5, $c, TMP_7, self = this;

            ($a = ($b = self.$container_stack()).$each, $a.$$p = (TMP_5 = function(g){var self = TMP_5.$$s || this, $a, $b, TMP_6;
if (g == null) g = nil;
            return ($a = ($b = ["described_class", "describes"]).$each, $a.$$p = (TMP_6 = function(key){var self = TMP_6.$$s || this, $a, value = nil;
if (key == null) key = nil;
              if ((($a = g['$has_key?'](key)) !== nil && (!$a.$$is_boolean || $a == true))) {
                  value = g['$[]'](key);
                  if ((($a = value['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                    return nil
                    } else {
                    Opal.ret(value)
                  };
                  } else {
                  return nil
                }}, TMP_6.$$s = self, TMP_6), $a).call($b)}, TMP_5.$$s = self, TMP_5), $a).call($b);
            ($a = ($c = self.$container_stack().$reverse()).$each, $a.$$p = (TMP_7 = function(g){var self = TMP_7.$$s || this, $a, $b, candidate = nil;
if (g == null) g = nil;
            candidate = g['$[]']("description_args").$first();
              if ((($a = ((($b = $scope.get('String')['$==='](candidate)) !== false && $b !== nil) ? $b : $scope.get('Symbol')['$==='](candidate))) !== nil && (!$a.$$is_boolean || $a == true))) {
                return nil
                } else {
                Opal.ret(candidate)
              };}, TMP_7.$$s = self, TMP_7), $a).call($c);
            return nil;
            } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
          });

          Opal.defn(self, '$full_description', function() {
            var $a, $b, $c, TMP_8, self = this;

            return ($a = self).$build_description_from.apply($a, [].concat(($b = ($c = $scope.get('FlatMap')).$flat_map, $b.$$p = (TMP_8 = function(a){var self = TMP_8.$$s || this;
if (a == null) a = nil;
            return a['$[]']("description_args")}, TMP_8.$$s = self, TMP_8), $b).call($c, self.$container_stack().$reverse())));
          });

          Opal.defn(self, '$container_stack', function() {
            var $a, $b, $c, self = this, groups = nil, group = nil;
            if (self.container_stack == null) self.container_stack = nil;

            return ((($a = self.container_stack) !== false && $a !== nil) ? $a : self.container_stack = (function() {groups = [group = self];
            while ((($c = group['$has_key?']("example_group")) !== nil && (!$c.$$is_boolean || $c == true))) {
            groups['$<<'](group['$[]']("example_group"));
            group = group['$[]']("example_group");};
            return groups;})());
          });
        })(self);

        def.$initialize = TMP_9 = function(parent_group_metadata) {
          var $a, self = this, $iter = TMP_9.$$p, $yield = $iter || nil;

          if (parent_group_metadata == null) {
            parent_group_metadata = nil
          }
          TMP_9.$$p = null;
          if (parent_group_metadata !== false && parent_group_metadata !== nil) {
            self.$update(parent_group_metadata);
            self.$store("example_group", $hash2(["example_group"], {"example_group": parent_group_metadata['$[]']("example_group").$extend($scope.get('GroupMetadataHash'))}).$extend($scope.get('GroupMetadataHash')));
            } else {
            self.$store("example_group", $hash2([], {}).$extend($scope.get('GroupMetadataHash')))
          };
          if (($yield !== nil)) {
            return $a = Opal.yield1($yield, self), $a === $breaker ? $a : $a
            } else {
            return nil
          };
        };

        def.$process = function(args) {
          var $a, self = this, user_metadata = nil;

          args = $slice.call(arguments, 0);
          user_metadata = (function() {if ((($a = args.$last()['$is_a?']($scope.get('Hash'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return args.$pop()
            } else {
            return $hash2([], {})
          }; return nil; })();
          self.$ensure_valid_keys(user_metadata);
          self['$[]']("example_group").$store("description_args", args);
          self['$[]']("example_group").$store("caller", ((($a = user_metadata.$delete("caller")) !== false && $a !== nil) ? $a : self.$caller()));
          return self.$update(user_metadata);
        };

        def.$for_example = function(description, user_metadata) {
          var self = this;

          return self.$dup().$extend($scope.get('ExampleMetadataHash')).$configure_for_example(description, user_metadata);
        };

        def['$any_apply?'] = function(filters) {
          var $a, $b, TMP_10, self = this;

          return ($a = ($b = filters)['$any?'], $a.$$p = (TMP_10 = function(k, v){var self = TMP_10.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
          return self['$filter_applies?'](k, v)}, TMP_10.$$s = self, TMP_10), $a).call($b);
        };

        def['$all_apply?'] = function(filters) {
          var $a, $b, TMP_11, self = this;

          return ($a = ($b = filters)['$all?'], $a.$$p = (TMP_11 = function(k, v){var self = TMP_11.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
          return self['$filter_applies?'](k, v)}, TMP_11.$$s = self, TMP_11), $a).call($b);
        };

        def['$filter_applies?'] = function(key, value, metadata) {
          var $a, $b, self = this, $case = nil;

          if (metadata == null) {
            metadata = self
          }
          if ((($a = ($b = $scope.get('Array')['$==='](metadata['$[]'](key)), $b !== false && $b !== nil ?($scope.get('Proc')['$==='](value))['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return metadata['$filter_applies_to_any_value?'](key, value)};
          if (key['$==']("line_numbers")) {
            return metadata['$line_number_filter_applies?'](value)};
          if (key['$==']("locations")) {
            return metadata['$location_filter_applies?'](value)};
          if ((($a = $scope.get('Hash')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return metadata['$filters_apply?'](key, value)};
          if ((($a = metadata['$has_key?'](key)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return false
          };
          return (function() {$case = value;if ($scope.get('Regexp')['$===']($case)) {return metadata['$[]'](key)['$=~'](value)}else if ($scope.get('Proc')['$===']($case)) {return (function() {$case = value.$arity();if ((0)['$===']($case)) {return value.$call()}else if ((2)['$===']($case)) {return value.$call(metadata['$[]'](key), metadata)}else {return value.$call(metadata['$[]'](key))}})()}else {return metadata['$[]'](key).$to_s()['$=='](value.$to_s())}})();
        };

        def['$filters_apply?'] = function(key, value) {
          var $a, $b, TMP_12, self = this;

          return ($a = ($b = value)['$all?'], $a.$$p = (TMP_12 = function(k, v){var self = TMP_12.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
          return self['$filter_applies?'](k, v, self['$[]'](key))}, TMP_12.$$s = self, TMP_12), $a).call($b);
        };

        def['$filter_applies_to_any_value?'] = function(key, value) {
          var $a, $b, TMP_13, self = this;

          return ($a = ($b = self['$[]'](key))['$any?'], $a.$$p = (TMP_13 = function(v){var self = TMP_13.$$s || this;
if (v == null) v = nil;
          return self['$filter_applies?'](key, v, $hash(key, value))}, TMP_13.$$s = self, TMP_13), $a).call($b);
        };

        def['$location_filter_applies?'] = function(locations) {
          var self = this, line_number = nil;

          line_number = self.$example_group_declaration_line(locations);
          if (line_number !== false && line_number !== nil) {
            return self['$line_number_filter_applies?'](line_number)
            } else {
            return true
          };
        };

        def['$line_number_filter_applies?'] = function(line_numbers) {
          var $a, $b, TMP_14, self = this, preceding_declaration_lines = nil;

          preceding_declaration_lines = ($a = ($b = line_numbers).$map, $a.$$p = (TMP_14 = function(n){var self = TMP_14.$$s || this;
if (n == null) n = nil;
          return $scope.get('RSpec').$world().$preceding_declaration_line(n)}, TMP_14.$$s = self, TMP_14), $a).call($b);
          return (self.$relevant_line_numbers()['$&'](preceding_declaration_lines))['$empty?']()['$!']();
        };

        self.$protected();

        def.$configure_for_example = function(description, user_metadata) {
          var $a, self = this;

          if (description !== false && description !== nil) {
            self.$store("description_args", [description])};
          self.$store("caller", ((($a = user_metadata.$delete("caller")) !== false && $a !== nil) ? $a : self.$caller()));
          return self.$update(user_metadata);
        };

        self.$private();

        Opal.cdecl($scope, 'RESERVED_KEYS', ["description", "example_group", "execution_result", "file_path", "full_description", "line_number", "location"]);

        def.$ensure_valid_keys = function(user_metadata) {
          var $a, $b, TMP_15, self = this;

          return ($a = ($b = $scope.get('RESERVED_KEYS')).$each, $a.$$p = (TMP_15 = function(key){var self = TMP_15.$$s || this, $a;
if (key == null) key = nil;
          if ((($a = user_metadata['$has_key?'](key)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$raise("            " + ("*"['$*'](50)) + "\n:" + (key) + " is not allowed\n\nRSpec reserves some hash keys for its own internal use,\nincluding :" + (key) + ", which is used on:\n\n            " + ($scope.get('CallerFilter').$first_non_rspec_line()) + ".\n\nHere are all of RSpec's reserved hash keys:\n\n            " + ($scope.get('RESERVED_KEYS').$join("\n  ")) + "\n            " + ("*"['$*'](50)) + "\n")
              } else {
              return nil
            }}, TMP_15.$$s = self, TMP_15), $a).call($b);
        };

        def.$example_group_declaration_line = function(locations) {
          var $a, self = this;

          if ((($a = self['$[]']("example_group")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return locations['$[]']($scope.get('File').$expand_path(self['$[]']("example_group")['$[]']("file_path")))
            } else {
            return nil
          };
        };

        return (def.$relevant_line_numbers = function(metadata) {
          var $a, self = this;

          if (metadata == null) {
            metadata = self
          }
          return [metadata['$[]']("line_number")]['$+'](((function() {if ((($a = metadata['$[]']("example_group")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$relevant_line_numbers(metadata['$[]']("example_group"))
            } else {
            return []
          }; return nil; })()));
        }, nil) && 'relevant_line_numbers';
      })(self, $scope.get('Hash'))
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/pending"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$current_example', '$before', '$pending', '$class', '$is_a?', '$last', '$pop', '$first', '$[]', '$has_key?', '$!', '$[]=', '$metadata', '$execution_result', '$instance_eval', '$verify_mocks_for_rspec', '$example_group_instance', '$teardown_mocks_for_rspec', '$raise', '$new']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Pending');

        var def = self.$$proto, $scope = self.$$scope, TMP_2;

        (function($base, $super) {
          function $PendingDeclaredInExample(){};
          var self = $PendingDeclaredInExample = $klass($base, $super, 'PendingDeclaredInExample', $PendingDeclaredInExample);

          var def = self.$$proto, $scope = self.$$scope;

          return nil;
        })(self, $scope.get('StandardError'));

        try {
        (function($base, $super) {
            function $PendingExampleFixedError(){};
            var self = $PendingExampleFixedError = $klass($base, $super, 'PendingExampleFixedError', $PendingExampleFixedError);

            var def = self.$$proto, $scope = self.$$scope;

            return nil;
          })(self, (((($scope.get('Test')).$$scope.get('Unit'))).$$scope.get('AssertionFailedError')))
        } catch ($err) {if (true) {
          (function($base, $super) {
            function $PendingExampleFixedError(){};
            var self = $PendingExampleFixedError = $klass($base, $super, 'PendingExampleFixedError', $PendingExampleFixedError);

            var def = self.$$proto, $scope = self.$$scope;

            return nil;
          })(self, $scope.get('StandardError'))
          }else { throw $err; }
        };

        Opal.cdecl($scope, 'NO_REASON_GIVEN', "No reason given");

        Opal.cdecl($scope, 'NOT_YET_IMPLEMENTED', "Not yet implemented");

        Opal.defn(self, '$pending', TMP_2 = function(args) {
          var $a, $b, TMP_1, $c, $d, TMP_3, self = this, $iter = TMP_2.$$p, $yield = $iter || nil, current_example = nil, options = nil, message = nil, result = nil, e = nil;

          args = $slice.call(arguments, 0);
          TMP_2.$$p = null;
          current_example = $scope.get('RSpec').$current_example();
          if (current_example !== false && current_example !== nil) {
            } else {
            return ($a = ($b = self.$class()).$before, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a;

            return ($a = self).$pending.apply($a, [].concat(args))}, TMP_1.$$s = self, TMP_1), $a).call($b, "each")
          };
          options = (function() {if ((($a = args.$last()['$is_a?']($scope.get('Hash'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return args.$pop()
            } else {
            return $hash2([], {})
          }; return nil; })();
          message = ((($a = args.$first()) !== false && $a !== nil) ? $a : $scope.get('NO_REASON_GIVEN'));
          if ((($a = ((($c = options['$[]']("unless")) !== false && $c !== nil) ? $c : (($d = options['$has_key?']("if"), $d !== false && $d !== nil ?options['$[]']("if")['$!']() : $d)))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return (function() {if (($yield !== nil)) {
              return $a = Opal.yieldX($yield, []), $a === $breaker ? $a : $a
              } else {
              return nil
            }; return nil; })()};
          current_example.$metadata()['$[]=']("pending", true);
          current_example.$metadata()['$[]']("execution_result")['$[]=']("pending_message", message);
          current_example.$execution_result()['$[]=']("pending_fixed", false);
          if (($yield !== nil)) {
            try {
            try {
            result = (function() {if (Opal.yieldX($yield, []) === $breaker) return $breaker.$v;
              return ($a = ($c = current_example.$example_group_instance()).$instance_eval, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

              return self.$verify_mocks_for_rspec()}, TMP_3.$$s = self, TMP_3), $a).call($c);})();
              current_example.$metadata()['$[]=']("pending", false);
            } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              current_example.$execution_result()['$[]=']("exception", e)
              }else { throw $err; }
            }
            } finally {
            self.$teardown_mocks_for_rspec()
            };
            if (result !== false && result !== nil) {
              current_example.$execution_result()['$[]=']("pending_fixed", true);
              self.$raise($scope.get('PendingExampleFixedError').$new());};};
          return self.$raise($scope.get('PendingDeclaredInExample').$new(message));
        });
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/formatters"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var self = $module($base, 'Formatters');

    var def = self.$$proto, $scope = self.$$scope;

    nil
  })((($scope.get('RSpec')).$$scope.get('Core')))
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/backport_random"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$kind_of?', '$__send__', '$raise', '$inspect', '$message', '$class', '$coerce_to', '$new', '$-', '$seed=', '$times', '$|', '$&', '$[]', '$+', '$[]=', '$^', '$>>', '$odd?', '$===', '$each', '$*', '$>=', '$size', '$max', '$next_state', '$<<', '$/', '$random_32_bits', '$>', '$mask_32_bits', '$<', '$map', '$pack', '$each_with_index', '$state_as_bignum', '$left', '$abs', '$==', '$pop', '$first', '$convert_seed', '$private', '$attr_reader', '$seed_rand', '$coerce_to_int', '$nonzero?', '$new_seed', '$random_float', '$<=', '$_rand_range', '$random_integer', '$random_bytes', '$is_a?', '$seed', '$send', '$state', '$marshal_dump', '$allocate', '$marshal_load', '$end', '$begin', '$!', '$respond_to?', '$exclude_end?', '$loop', '$**', '$rand', '$include']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Backports');

        var def = self.$$proto, $scope = self.$$scope;

        Opal.defs(self, '$coerce_to', function(obj, cls, meth) {
          var $a, self = this, ret = nil, e = nil;

          if ((($a = obj['$kind_of?'](cls)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return obj};
          try {
          ret = obj.$__send__(meth)
          } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
            self.$raise($scope.get('TypeError'), "Coercion error: " + (obj.$inspect()) + "." + (meth) + " => " + (cls) + " failed:\n" + ("(" + (e.$message()) + ")"))
            }else { throw $err; }
          };
          if ((($a = ret['$kind_of?'](cls)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise($scope.get('TypeError'), "Coercion error: obj." + (meth) + " did NOT return a " + (cls) + " (was " + (ret.$class()) + ")")
          };
          return ret;
        });

        Opal.defs(self, '$coerce_to_int', function(obj) {
          var self = this;

          return self.$coerce_to(obj, $scope.get('Integer'), "to_int");
        });

        Opal.cdecl($scope, 'Undefined', $scope.get('Object').$new());

        (function($base, $super) {
          function $Random(){};
          var self = $Random = $klass($base, $super, 'Random', $Random);

          var def = self.$$proto, $scope = self.$$scope;

          (function($base, $super) {
            function $MT19937(){};
            var self = $MT19937 = $klass($base, $super, 'MT19937', $MT19937);

            var def = self.$$proto, $scope = self.$$scope;

            def.state = def.last_read = nil;
            Opal.cdecl($scope, 'STATE_SIZE', 624);

            Opal.cdecl($scope, 'LAST_STATE', $scope.get('STATE_SIZE')['$-'](1));

            Opal.cdecl($scope, 'PAD_32_BITS', 4294967295);

            def.$initialize = function(seed) {
              var $a, $b, self = this;

              return (($a = [seed]), $b = self, $b['$seed='].apply($b, $a), $a[$a.length-1]);
            };

            Opal.cdecl($scope, 'LAST_31_BITS', 2147483647);

            Opal.cdecl($scope, 'OFFSET', 397);

            def.$next_state = function() {
              var $a, $b, TMP_1, self = this;

              ($a = ($b = $scope.get('STATE_SIZE')).$times, $a.$$p = (TMP_1 = function(i){var self = TMP_1.$$s || this, $a, $b, mix = nil;
                if (self.state == null) self.state = nil;
if (i == null) i = nil;
              mix = self.state['$[]'](i)['$&'](2147483648)['$|'](self.state['$[]'](i['$+'](1)['$-']($scope.get('STATE_SIZE')))['$&'](2147483647));
                self.state['$[]='](i, self.state['$[]'](i['$+']($scope.get('OFFSET'))['$-']($scope.get('STATE_SIZE')))['$^']((mix['$>>'](1))));
                if ((($a = mix['$odd?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                  return ($a = i, $b = self.state, $b['$[]=']($a, $b['$[]']($a)['$^'](2567483615)))
                  } else {
                  return nil
                };}, TMP_1.$$s = self, TMP_1), $a).call($b);
              return self.last_read = -1;
            };

            def['$seed='] = function(seed) {
              var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, self = this, $case = nil, j = nil;

              return (function() {$case = seed;if ($scope.get('Integer')['$===']($case)) {self.state = $scope.get('Array').$new($scope.get('STATE_SIZE'));
              self.state['$[]='](0, seed['$&']($scope.get('PAD_32_BITS')));
              ($a = ($b = ($range(1, $scope.get('LAST_STATE'), false))).$each, $a.$$p = (TMP_2 = function(i){var self = TMP_2.$$s || this;
                if (self.state == null) self.state = nil;
if (i == null) i = nil;
              return self.state['$[]='](i, ((1812433253)['$*']((self.state['$[]'](i['$-'](1))['$^'](self.state['$[]'](i['$-'](1))['$>>'](30))))['$+'](i))['$&']($scope.get('PAD_32_BITS')))}, TMP_2.$$s = self, TMP_2), $a).call($b);
              return self.last_read = $scope.get('LAST_STATE');}else if ($scope.get('Array')['$===']($case)) {(($a = [19650218]), $c = self, $c['$seed='].apply($c, $a), $a[$a.length-1]);
              i = 1;
              j = 0;
              ($a = ($c = [$scope.get('STATE_SIZE'), seed.$size()].$max()).$times, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;
                if (self.state == null) self.state = nil;

              self.state['$[]='](i, (self.state['$[]'](i)['$^']((self.state['$[]'](i['$-'](1))['$^'](self.state['$[]'](i['$-'](1))['$>>'](30)))['$*'](1664525)))['$+'](j)['$+'](seed['$[]'](j))['$&']($scope.get('PAD_32_BITS')));
                if (((i = i['$+'](1)))['$>=']($scope.get('STATE_SIZE'))) {
                  self.state['$[]='](0, self.state['$[]'](-1));
                  i = 1;};
                if (((j = j['$+'](1)))['$>='](seed.$size())) {
                  return j = 0
                  } else {
                  return nil
                };}, TMP_3.$$s = self, TMP_3), $a).call($c);
              ($a = ($d = ($scope.get('STATE_SIZE')['$-'](1))).$times, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;
                if (self.state == null) self.state = nil;

              self.state['$[]='](i, (self.state['$[]'](i)['$^']((self.state['$[]'](i['$-'](1))['$^'](self.state['$[]'](i['$-'](1))['$>>'](30)))['$*'](1566083941)))['$-'](i)['$&']($scope.get('PAD_32_BITS')));
                if (((i = i['$+'](1)))['$>=']($scope.get('STATE_SIZE'))) {
                  self.state['$[]='](0, self.state['$[]'](-1));
                  return i = 1;
                  } else {
                  return nil
                };}, TMP_4.$$s = self, TMP_4), $a).call($d);
              return self.state['$[]='](0, 2147483648);}else {return self.$raise($scope.get('ArgumentError'), "Seed must be an Integer or an Array")}})();
            };

            def.$random_32_bits = function() {
              var self = this, y = nil;

              if (self.last_read['$>=']($scope.get('LAST_STATE'))) {
                self.$next_state()};
              self.last_read = self.last_read['$+'](1);
              y = self.state['$[]'](self.last_read);
              y = y['$^']((y['$>>'](11)));
              y = y['$^']((y['$<<'](7))['$&'](2636928640));
              y = y['$^']((y['$<<'](15))['$&'](4022730752));
              return y = y['$^']((y['$>>'](18)));
            };

            Opal.cdecl($scope, 'FLOAT_FACTOR', (1.0)['$/'](9.007199254740992e+15));

            def.$random_float = function() {
              var self = this;

              return ((self.$random_32_bits()['$>>'](5))['$*'](67108864.0)['$+']((self.$random_32_bits()['$>>'](6))))['$*']($scope.get('FLOAT_FACTOR'));
            };

            def.$random_integer = function(upto) {
              var $a, $b, $c, TMP_5, self = this, n = nil, nb_full_32 = nil, mask = nil, rand = nil;

              n = upto['$-'](1);
              nb_full_32 = 0;
              while (n['$>']($scope.get('PAD_32_BITS'))) {
              n = n['$>>'](32);
              nb_full_32 = nb_full_32['$+'](1);};
              mask = self.$mask_32_bits(n);
              while (!(rand['$<'](upto))) {
              rand = self.$random_32_bits()['$&'](mask);
              ($b = ($c = nb_full_32).$times, $b.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

              rand = rand['$<<'](32);
                return rand = rand['$|'](self.$random_32_bits());}, TMP_5.$$s = self, TMP_5), $b).call($c);};
              return rand;
            };

            def.$random_bytes = function(nb) {
              var $a, $b, TMP_6, self = this, nb_32_bits = nil, random = nil;

              nb_32_bits = (nb['$+'](3))['$/'](4);
              random = ($a = ($b = nb_32_bits.$times()).$map, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

              return self.$random_32_bits()}, TMP_6.$$s = self, TMP_6), $a).call($b);
              return random.$pack("L"['$*'](nb_32_bits))['$[]'](0, nb);
            };

            def.$state_as_bignum = function() {
              var $a, $b, TMP_7, self = this, b = nil;

              b = 0;
              ($a = ($b = self.state).$each_with_index, $a.$$p = (TMP_7 = function(val, i){var self = TMP_7.$$s || this;
if (val == null) val = nil;if (i == null) i = nil;
              return b = b['$|'](val['$<<'](((32)['$*'](i))))}, TMP_7.$$s = self, TMP_7), $a).call($b);
              return b;
            };

            def.$left = function() {
              var self = this;

              return (($scope.get('MT19937')).$$scope.get('STATE_SIZE'))['$-'](self.last_read);
            };

            def.$marshal_dump = function() {
              var self = this;

              return [self.$state_as_bignum(), self.$left()];
            };

            def.$marshal_load = function(ary) {
              var $a, $b, TMP_8, self = this, b = nil, left = nil;

              $a = Opal.to_ary(ary), b = ($a[0] == null ? nil : $a[0]), left = ($a[1] == null ? nil : $a[1]);
              self.last_read = (($scope.get('MT19937')).$$scope.get('STATE_SIZE'))['$-'](left);
              self.state = $scope.get('Array').$new($scope.get('STATE_SIZE'));
              return ($a = ($b = $scope.get('STATE_SIZE')).$times, $a.$$p = (TMP_8 = function(i){var self = TMP_8.$$s || this;
                if (self.state == null) self.state = nil;
if (i == null) i = nil;
              self.state['$[]='](i, b['$&']($scope.get('PAD_32_BITS')));
                return b = b['$>>'](32);}, TMP_8.$$s = self, TMP_8), $a).call($b);
            };

            Opal.defs(self, '$convert_seed', function(seed) {
              var $a, $b, self = this, long_values = nil;

              seed = seed.$abs();
              long_values = [];
              while (!(seed['$=='](0))) {
              long_values['$<<']((seed['$&']($scope.get('PAD_32_BITS'))));
              seed = seed['$>>'](32);};
              if ((($a = (($b = long_values['$[]'](-1)['$=='](1)) ? long_values.$size()['$>'](1) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
                long_values.$pop()};
              if (long_values.$size()['$>'](1)) {
                return long_values
                } else {
                return long_values.$first()
              };
            });

            Opal.defs(self, '$[]', function(seed) {
              var self = this;

              return self.$new(self.$convert_seed(seed));
            });

            self.$private();

            Opal.cdecl($scope, 'MASK_BY', [1, 2, 4, 8, 16]);

            return (def.$mask_32_bits = function(n) {
              var $a, $b, TMP_9, self = this;

              ($a = ($b = $scope.get('MASK_BY')).$each, $a.$$p = (TMP_9 = function(shift){var self = TMP_9.$$s || this;
if (shift == null) shift = nil;
              return n = n['$|'](n['$>>'](shift))}, TMP_9.$$s = self, TMP_9), $a).call($b);
              return n;
            }, nil) && 'mask_32_bits';
          })(self, null);

          (function($base) {
            var self = $module($base, 'Implementation');

            var def = self.$$proto, $scope = self.$$scope, TMP_10;

            self.$attr_reader("seed");

            Opal.defn(self, '$initialize', TMP_10 = function(seed) {
              var self = this, $iter = TMP_10.$$p, $yield = $iter || nil;

              if (seed == null) {
                seed = 0
              }
              TMP_10.$$p = null;
              Opal.find_super_dispatcher(self, 'initialize', TMP_10, null).apply(self, []);
              return self.$seed_rand(seed);
            });

            Opal.defn(self, '$seed_rand', function(new_seed) {
              var $a, $b, self = this, old = nil;
              if (self.seed == null) self.seed = nil;

              if (new_seed == null) {
                new_seed = 0
              }
              new_seed = $scope.get('Backports').$coerce_to_int(new_seed);
              if ((($a = (($b = self['seed'], $b != null && $b !== nil) ? 'instance-variable' : nil)) !== nil && (!$a.$$is_boolean || $a == true))) {
                } else {
                self.seed = nil
              };
              $a = [self.seed, ((($b = new_seed['$nonzero?']()) !== false && $b !== nil) ? $b : $scope.get('Random').$new_seed())], old = $a[0], self.seed = $a[1];
              self.mt = $scope.get('MT19937')['$[]'](self.seed);
              return old;
            });

            Opal.defn(self, '$rand', function(limit) {
              var $a, self = this, $case = nil;
              if (self.mt == null) self.mt = nil;

              if (limit == null) {
                limit = (($scope.get('Backports')).$$scope.get('Undefined'))
              }
              return ((($a = (function() {$case = limit;if ((($scope.get('Backports')).$$scope.get('Undefined'))['$===']($case)) {return self.mt.$random_float()}else if ($scope.get('Float')['$===']($case)) {if (limit['$<='](0)) {
                return nil
                } else {
                return limit['$*'](self.mt.$random_float())
              }}else if ($scope.get('Range')['$===']($case)) {return self.$_rand_range(limit)}else {limit = $scope.get('Backports').$coerce_to_int(limit);
              if (limit['$<='](0)) {
                return nil
                } else {
                return self.mt.$random_integer(limit)
              };}})()) !== false && $a !== nil) ? $a : self.$raise($scope.get('ArgumentError'), "invalid argument " + (limit)));
            });

            Opal.defn(self, '$bytes', function(nb) {
              var self = this;
              if (self.mt == null) self.mt = nil;

              nb = $scope.get('Backports').$coerce_to_int(nb);
              if (nb['$<'](0)) {
                self.$raise($scope.get('ArgumentError'), "negative size")};
              return self.mt.$random_bytes(nb);
            });

            Opal.defn(self, '$==', function(other) {
              var $a, $b, $c, self = this;

              return ($a = ($b = ($c = other['$is_a?']($scope.get('Random')), $c !== false && $c !== nil ?self.$seed()['$=='](other.$seed()) : $c), $b !== false && $b !== nil ?self.$left()['$=='](other.$send("left")) : $b), $a !== false && $a !== nil ?self.$state()['$=='](other.$send("state")) : $a);
            });

            Opal.defn(self, '$marshal_dump', function() {
              var self = this;
              if (self.mt == null) self.mt = nil;
              if (self.seed == null) self.seed = nil;

              return self.mt.$marshal_dump()['$<<'](self.seed);
            });

            Opal.defn(self, '$marshal_load', function(ary) {
              var self = this;
              if (self.mt == null) self.mt = nil;

              self.seed = ary.$pop();
              self.mt = $scope.get('MT19937').$allocate();
              return self.mt.$marshal_load(ary);
            });

            self.$private();

            Opal.defn(self, '$state', function() {
              var self = this;
              if (self.mt == null) self.mt = nil;

              return self.mt.$state_as_bignum();
            });

            Opal.defn(self, '$left', function() {
              var self = this;
              if (self.mt == null) self.mt = nil;

              return self.mt.$left();
            });

            Opal.defn(self, '$_rand_range', function(limit) {
              var $a, $b, $c, TMP_11, self = this, range = nil;
              if (self.mt == null) self.mt = nil;

              range = limit.$end()['$-'](limit.$begin());
              if ((($a = ($b = ($c = (range['$is_a?']($scope.get('Float'))['$!']()), $c !== false && $c !== nil ?range['$respond_to?']("to_int") : $c), $b !== false && $b !== nil ?range = $scope.get('Backports').$coerce_to_int(range) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
                if ((($a = limit['$exclude_end?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                  } else {
                  range = range['$+'](1)
                };
                if (range['$<='](0)) {
                  return nil
                  } else {
                  return limit.$begin()['$+'](self.mt.$random_integer(range))
                };
              } else if ((($a = range = $scope.get('Backports').$coerce_to(range, $scope.get('Float'), "to_f")) !== nil && (!$a.$$is_boolean || $a == true))) {
                if (range['$<'](0)) {
                  return nil
                } else if ((($a = limit['$exclude_end?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                  if (range['$<='](0)) {
                    return nil
                    } else {
                    return limit.$begin()['$+'](self.mt.$random_float()['$*'](range))
                  }
                  } else {
                  return ($a = ($b = self).$loop, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this, r = nil;
                    if (self.mt == null) self.mt = nil;

                  r = self.mt.$random_float()['$*'](range)['$*'](1.0001);
                    if (r['$>'](range)) {
                      return nil
                      } else {
                      return ($breaker.$v = limit.$begin()['$+'](r), $breaker)
                    };}, TMP_11.$$s = self, TMP_11), $a).call($b)
                }
                } else {
                return nil
              };
            });
          })(self);

          return (Opal.defs(self, '$new_seed', function() {
            var self = this;

            return ((2)['$**'](62))['$+']($scope.get('Kernel').$rand((2)['$**'](62)));
          }), nil) && 'new_seed';
        })(self, null);

        (function($base, $super) {
          function $Random(){};
          var self = $Random = $klass($base, $super, 'Random', $Random);

          var def = self.$$proto, $scope = self.$$scope;

          self.$include($scope.get('Implementation'));

          return (function(self) {
            var $scope = self.$$scope, def = self.$$proto;

            return self.$include($scope.get('Implementation'))
          })(self.$singleton_class());
        })(self, null);
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/ordering"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$new', '$seed', '$shuffle', '$>', '$dup', '$times', '$+', '$rand', '$-', '$size', '$==', '$[]', '$[]=', '$call', '$register', '$fetch', '$to_proc', '$used?', '$attr_reader', '$used_random_seed?', '$ordering_registry', '$register_ordering', '$to_i', '$split', '$to_s', '$include?', '$has_key?', '$seed=', '$order=']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope, $a;

      if ((($a = (Opal.Object.$$scope.Random == null ? nil : 'constant')) !== nil && (!$a.$$is_boolean || $a == true))) {
        Opal.cdecl($scope, 'RandomNumberGenerator', Opal.get('Random'))
        } else {
        self.$require("rspec/core/backport_random");

        Opal.cdecl($scope, 'RandomNumberGenerator', (((((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('Backports'))).$$scope.get('Random')));
      };

      (function($base) {
        var self = $module($base, 'Ordering');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Identity(){};
          var self = $Identity = $klass($base, $super, 'Identity', $Identity);

          var def = self.$$proto, $scope = self.$$scope;

          return (def.$order = function(items) {
            var self = this;

            return items;
          }, nil) && 'order'
        })(self, null);

        (function($base, $super) {
          function $Random(){};
          var self = $Random = $klass($base, $super, 'Random', $Random);

          var def = self.$$proto, $scope = self.$$scope;

          def.used = def.configuration = nil;
          def.$initialize = function(configuration) {
            var self = this;

            self.configuration = configuration;
            return self.used = false;
          };

          def['$used?'] = function() {
            var self = this;

            return self.used;
          };

          def.$order = function(items) {
            var self = this, rng = nil;

            self.used = true;
            rng = $scope.get('RandomNumberGenerator').$new(self.configuration.$seed());
            return self.$shuffle(items, rng);
          };

          if ($scope.get('RUBY_VERSION')['$>']("1.9.3")) {
            return (def.$shuffle = function(list, rng) {
              var self = this;

              return list.$shuffle($hash2(["random"], {"random": rng}));
            }, nil) && 'shuffle'
            } else {
            return (def.$shuffle = function(list, rng) {
              var $a, $b, TMP_1, self = this, shuffled = nil;

              shuffled = list.$dup();
              ($a = ($b = shuffled.$size()).$times, $a.$$p = (TMP_1 = function(i){var self = TMP_1.$$s || this, $a, j = nil;
if (i == null) i = nil;
              j = i['$+'](rng.$rand(shuffled.$size()['$-'](i)));
                if (i['$=='](j)) {
                  return nil;};
                return $a = [shuffled['$[]'](j), shuffled['$[]'](i)], shuffled['$[]='](i, $a[0]), shuffled['$[]='](j, $a[1]);}, TMP_1.$$s = self, TMP_1), $a).call($b);
              return shuffled;
            }, nil) && 'shuffle'
          };
        })(self, null);

        (function($base, $super) {
          function $Custom(){};
          var self = $Custom = $klass($base, $super, 'Custom', $Custom);

          var def = self.$$proto, $scope = self.$$scope;

          def.callable = nil;
          def.$initialize = function(callable) {
            var self = this;

            return self.callable = callable;
          };

          return (def.$order = function(list) {
            var self = this;

            return self.callable.$call(list);
          }, nil) && 'order';
        })(self, null);

        (function($base, $super) {
          function $Registry(){};
          var self = $Registry = $klass($base, $super, 'Registry', $Registry);

          var def = self.$$proto, $scope = self.$$scope, TMP_2;

          def.strategies = nil;
          def.$initialize = function(configuration) {
            var self = this, identity = nil;

            self.configuration = configuration;
            self.strategies = $hash2([], {});
            self.$register("random", $scope.get('Random').$new(configuration));
            identity = $scope.get('Identity').$new();
            self.$register("defined", identity);
            return self.$register("global", identity);
          };

          def.$fetch = TMP_2 = function(name) {
            var $a, $b, self = this, $iter = TMP_2.$$p, fallback = $iter || nil;

            TMP_2.$$p = null;
            return ($a = ($b = self.strategies).$fetch, $a.$$p = fallback.$to_proc(), $a).call($b, name);
          };

          def.$register = function(sym, strategy) {
            var self = this;

            return self.strategies['$[]='](sym, strategy);
          };

          return (def['$used_random_seed?'] = function() {
            var self = this;

            return self.strategies['$[]']("random")['$used?']();
          }, nil) && 'used_random_seed?';
        })(self, null);

        (function($base, $super) {
          function $ConfigurationManager(){};
          var self = $ConfigurationManager = $klass($base, $super, 'ConfigurationManager', $ConfigurationManager);

          var def = self.$$proto, $scope = self.$$scope, TMP_4;

          def.seed_forced = def.order_forced = nil;
          self.$attr_reader("seed", "ordering_registry");

          def.$initialize = function() {
            var self = this;

            self.ordering_registry = $scope.get('Registry').$new(self);
            self.seed = self.$rand(65535);
            self.seed_forced = false;
            return self.order_forced = false;
          };

          def['$seed_used?'] = function() {
            var self = this;

            return self.$ordering_registry()['$used_random_seed?']();
          };

          def['$seed='] = function(seed) {
            var $a, self = this;

            if ((($a = self.seed_forced) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil};
            self.$register_ordering("global", self.$ordering_registry().$fetch("random"));
            return self.seed = seed.$to_i();
          };

          def['$order='] = function(type) {
            var $a, self = this, order = nil, seed = nil, ordering_name = nil;

            $a = Opal.to_ary(type.$to_s().$split(":")), order = ($a[0] == null ? nil : $a[0]), seed = ($a[1] == null ? nil : $a[1]);
            if (seed !== false && seed !== nil) {
              self.seed = seed = seed.$to_i()};
            ordering_name = (function() {if ((($a = order['$include?']("rand")) !== nil && (!$a.$$is_boolean || $a == true))) {
              return "random"
            } else if (order['$==']("defined")) {
              return "defined"
              } else {
              return nil
            }; return nil; })();
            if (ordering_name !== false && ordering_name !== nil) {
              return self.$register_ordering("global", self.$ordering_registry().$fetch(ordering_name))
              } else {
              return nil
            };
          };

          def.$force = function(hash) {
            var $a, $b, self = this;

            if ((($a = hash['$has_key?']("seed")) !== nil && (!$a.$$is_boolean || $a == true))) {
              (($a = [hash['$[]']("seed")]), $b = self, $b['$seed='].apply($b, $a), $a[$a.length-1]);
              self.seed_forced = true;
              return self.order_forced = true;
            } else if ((($a = hash['$has_key?']("order")) !== nil && (!$a.$$is_boolean || $a == true))) {
              (($a = [hash['$[]']("order")]), $b = self, $b['$order='].apply($b, $a), $a[$a.length-1]);
              return self.order_forced = true;
              } else {
              return nil
            };
          };

          return (def.$register_ordering = TMP_4 = function(name, strategy) {
            var $a, $b, self = this, TMP_3, $iter = TMP_4.$$p, $yield = $iter || nil;

            if (strategy == null) {
              strategy = $scope.get('Custom').$new(($a = ($b = $scope.get('Proc')).$new, $a.$$p = (TMP_3 = function(l){var self = TMP_3.$$s || this, $a;
if (l == null) l = nil;
            return $a = Opal.yield1($yield, l), $a === $breaker ? $a : $a}, TMP_3.$$s = self, TMP_3), $a).call($b))
            }
            TMP_4.$$p = null;
            if ((($a = ($b = self.order_forced, $b !== false && $b !== nil ?name['$==']("global") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil};
            return self.$ordering_registry().$register(name, strategy);
          }, nil) && 'register_ordering';
        })(self, null);
      })(self);
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/world"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$attr_reader', '$attr_accessor', '$new', '$[]=', '$dup', '$examples', '$prune', '$filter_manager', '$uniq!', '$configuration', '$fetch', '$ordering_registry', '$order', '$clear', '$example_groups', '$registry', '$<<', '$inclusion_filter', '$exclusion_filter', '$configure_group', '$inject', '$+', '$size', '$filtered_examples', '$flat_map', '$descendants', '$<=', '$sort', '$declaration_line_numbers', '$reporter', '$announce_inclusion_filter', '$announce_exclusion_filter', '$empty?', '$==', '$length', '$message', '$[]', '$join', '$run_all_when_everything_filtered?', '$zero?', '$example_count', '$everything_filtered_message', '$description', '$empty_without_conditional_filters?', '$private']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $World(){};
        var self = $World = $klass($base, $super, 'World', $World);

        var def = self.$$proto, $scope = self.$$scope;

        def.configuration = def.example_groups = def.line_numbers = nil;
        self.$include((((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('Hooks')));

        self.$attr_reader("example_groups", "filtered_examples");

        self.$attr_accessor("wants_to_quit");

        def.$initialize = function(configuration) {
          var $a, $b, TMP_1, self = this;

          if (configuration == null) {
            configuration = $scope.get('RSpec').$configuration()
          }
          self.configuration = configuration;
          self.example_groups = [];
          return self.filtered_examples = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_1 = function(hash, group){var self = TMP_1.$$s || this, examples = nil;
if (hash == null) hash = nil;if (group == null) group = nil;
          return hash['$[]='](group, (function() {examples = group.$examples().$dup();
            examples = self.$filter_manager().$prune(examples);
            examples['$uniq!']();
            return examples;})())}, TMP_1.$$s = self, TMP_1), $a).call($b);
        };

        def.$ordered_example_groups = function() {
          var self = this, ordering_strategy = nil;

          ordering_strategy = self.configuration.$ordering_registry().$fetch("global");
          return ordering_strategy.$order(self.example_groups);
        };

        def.$reset = function() {
          var self = this;

          self.$example_groups().$clear();
          return $scope.get('SharedExampleGroup').$registry().$clear();
        };

        def.$filter_manager = function() {
          var self = this;

          return self.configuration.$filter_manager();
        };

        def.$register = function(example_group) {
          var self = this;

          self.$example_groups()['$<<'](example_group);
          return example_group;
        };

        def.$inclusion_filter = function() {
          var self = this;

          return self.configuration.$inclusion_filter();
        };

        def.$exclusion_filter = function() {
          var self = this;

          return self.configuration.$exclusion_filter();
        };

        def.$configure_group = function(group) {
          var self = this;

          return self.configuration.$configure_group(group);
        };

        def.$example_count = function() {
          var $a, $b, TMP_2, $c, $d, TMP_3, self = this;

          return ($a = ($b = ($c = ($d = $scope.get('FlatMap')).$flat_map, $c.$$p = (TMP_3 = function(g){var self = TMP_3.$$s || this;
if (g == null) g = nil;
          return g.$descendants()}, TMP_3.$$s = self, TMP_3), $c).call($d, self.$example_groups())).$inject, $a.$$p = (TMP_2 = function(sum, g){var self = TMP_2.$$s || this;
if (sum == null) sum = nil;if (g == null) g = nil;
          return sum['$+'](g.$filtered_examples().$size())}, TMP_2.$$s = self, TMP_2), $a).call($b, 0);
        };

        def.$preceding_declaration_line = function(filter_line) {
          var $a, $b, TMP_4, self = this;

          return ($a = ($b = self.$declaration_line_numbers().$sort()).$inject, $a.$$p = (TMP_4 = function(highest_prior_declaration_line, line){var self = TMP_4.$$s || this;
if (highest_prior_declaration_line == null) highest_prior_declaration_line = nil;if (line == null) line = nil;
          if (line['$<='](filter_line)) {
              return line
              } else {
              return highest_prior_declaration_line
            }}, TMP_4.$$s = self, TMP_4), $a).call($b, nil);
        };

        def.$reporter = function() {
          var self = this;

          return self.configuration.$reporter();
        };

        def.$announce_filters = function() {
          var $a, $b, self = this, filter_announcements = nil, message = nil;

          filter_announcements = [];
          self.$announce_inclusion_filter(filter_announcements);
          self.$announce_exclusion_filter(filter_announcements);
          if ((($a = self.$filter_manager()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else if (filter_announcements.$length()['$=='](1)) {
            self.$reporter().$message("Run options: " + (filter_announcements['$[]'](0)))
            } else {
            self.$reporter().$message("Run options:\n  " + (filter_announcements.$join("\n  ")))
          };
          if ((($a = ($b = self.configuration['$run_all_when_everything_filtered?'](), $b !== false && $b !== nil ?self.$example_count()['$zero?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$reporter().$message("" + (self.$everything_filtered_message()) + "; ignoring " + (self.$inclusion_filter().$description()));
            self.$filtered_examples().$clear();
            self.$inclusion_filter().$clear();};
          if ((($a = self.$example_count()['$zero?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$example_groups().$clear();
            if ((($a = self.$filter_manager()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$reporter().$message("No examples found.")
            } else if ((($a = self.$exclusion_filter()['$empty_without_conditional_filters?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              message = self.$everything_filtered_message();
              if ((($a = self.configuration['$run_all_when_everything_filtered?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                message['$<<']("; ignoring " + (self.$inclusion_filter().$description()))};
              return self.$reporter().$message(message);
            } else if ((($a = self.$inclusion_filter()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$reporter().$message(self.$everything_filtered_message())
              } else {
              return nil
            };
            } else {
            return nil
          };
        };

        def.$everything_filtered_message = function() {
          var self = this;

          return "\nAll examples were filtered out";
        };

        def.$announce_inclusion_filter = function(announcements) {
          var $a, self = this;

          if ((($a = self.$inclusion_filter()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return announcements['$<<']("include " + (self.$inclusion_filter().$description()))
          };
        };

        def.$announce_exclusion_filter = function(announcements) {
          var $a, self = this;

          if ((($a = self.$exclusion_filter()['$empty_without_conditional_filters?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return announcements['$<<']("exclude " + (self.$exclusion_filter().$description()))
          };
        };

        self.$private();

        return (def.$declaration_line_numbers = function() {
          var $a, $b, $c, TMP_5, self = this;

          return ((($a = self.line_numbers) !== false && $a !== nil) ? $a : self.line_numbers = ($b = ($c = self.$example_groups()).$inject, $b.$$p = (TMP_5 = function(lines, g){var self = TMP_5.$$s || this;
if (lines == null) lines = nil;if (g == null) g = nil;
          return lines['$+'](g.$declaration_line_numbers())}, TMP_5.$$s = self, TMP_5), $b).call($c, []));
        }, nil) && 'declaration_line_numbers';
      })(self, null)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["fileutils"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  return nil
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/backtrace_formatter"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$format_backtrace', '$backtrace_formatter', '$configuration', '$attr_accessor', '$<<', '$union', '$map', '$new', '$gsub', '$getwd', '$empty?', '$[]', '$tap', '$concat', '$compact', '$backtrace_line', '$take_while', '$!', '$==', '$exclude?', '$relative_path', '$any?', '$=~', '$none?']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $BacktraceFormatter(){};
        var self = $BacktraceFormatter = $klass($base, $super, 'BacktraceFormatter', $BacktraceFormatter);

        var def = self.$$proto, $scope = self.$$scope;

        def.full_backtrace = def.exclusion_patterns = def.inclusion_patterns = nil;
        Opal.defs(self, '$format_backtrace', function(backtrace, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {})
          }
          return $scope.get('RSpec').$configuration().$backtrace_formatter().$format_backtrace(backtrace, options);
        });

        self.$attr_accessor("exclusion_patterns", "inclusion_patterns");

        def.$initialize = function() {
          var $a, $b, $c, TMP_1, self = this;

          self.full_backtrace = false;
          self.exclusion_patterns = []['$<<'](($a = $scope.get('Regexp')).$union.apply($a, [].concat(($b = ($c = ["/libd*/ruby/", "org/jruby/", "bin/", "/gems/", "lib/rspec/(core|expectations|matchers|mocks)"]).$map, $b.$$p = (TMP_1 = function(s){var self = TMP_1.$$s || this;
if (s == null) s = nil;
          return $scope.get('Regexp').$new(s.$gsub("/", (($scope.get('File')).$$scope.get('SEPARATOR'))))}, TMP_1.$$s = self, TMP_1), $b).call($c))));
          return self.inclusion_patterns = [$scope.get('Regexp').$new($scope.get('Dir').$getwd())];
        };

        def['$full_backtrace='] = function(full_backtrace) {
          var self = this;

          return self.full_backtrace = full_backtrace;
        };

        def['$full_backtrace?'] = function() {
          var $a, self = this;

          return ((($a = self.full_backtrace) !== false && $a !== nil) ? $a : self.exclusion_patterns['$empty?']());
        };

        def.$format_backtrace = function(backtrace, options) {
          var $a, $b, TMP_2, $c, $d, TMP_3, $e, $f, TMP_4, self = this;

          if (options == null) {
            options = $hash2([], {})
          }
          if ((($a = options['$[]']("full_backtrace")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return backtrace};
          return ($a = ($b = ($c = ($d = ($e = ($f = backtrace).$take_while, $e.$$p = (TMP_4 = function(l){var self = TMP_4.$$s || this;
if (l == null) l = nil;
          return l['$==']((((((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('Runner'))).$$scope.get('AT_EXIT_HOOK_BACKTRACE_LINE')))['$!']()}, TMP_4.$$s = self, TMP_4), $e).call($f)).$map, $c.$$p = (TMP_3 = function(l){var self = TMP_3.$$s || this;
if (l == null) l = nil;
          return self.$backtrace_line(l)}, TMP_3.$$s = self, TMP_3), $c).call($d).$compact()).$tap, $a.$$p = (TMP_2 = function(filtered){var self = TMP_2.$$s || this, $a;
if (filtered == null) filtered = nil;
          if ((($a = filtered['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              filtered.$concat(backtrace);
              filtered['$<<']("");
              filtered['$<<']("  Showing full backtrace because every line was filtered out.");
              filtered['$<<']("  See docs for RSpec::Configuration#backtrace_exclusion_patterns and");
              return filtered['$<<']("  RSpec::Configuration#backtrace_inclusion_patterns for more information.");
              } else {
              return nil
            }}, TMP_2.$$s = self, TMP_2), $a).call($b);
        };

        def.$backtrace_line = function(line) {
          var $a, self = this;

          try {
          if ((($a = self['$exclude?'](line)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return (((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('Metadata')).$relative_path(line)
            }
          } catch ($err) {if (Opal.rescue($err, [$scope.get('SecurityError')])) {
            return nil
            }else { throw $err; }
          };
        };

        return (def['$exclude?'] = function(line) {
          var $a, $b, $c, TMP_5, $d, TMP_6, self = this;

          if ((($a = self.full_backtrace) !== nil && (!$a.$$is_boolean || $a == true))) {
            return false};
          return ($a = ($b = ($c = self.exclusion_patterns)['$any?'], $b.$$p = (TMP_5 = function(p){var self = TMP_5.$$s || this;
if (p == null) p = nil;
          return p['$=~'](line)}, TMP_5.$$s = self, TMP_5), $b).call($c), $a !== false && $a !== nil ?($b = ($d = self.inclusion_patterns)['$none?'], $b.$$p = (TMP_6 = function(p){var self = TMP_6.$$s || this;
if (p == null) p = nil;
          return p['$=~'](line)}, TMP_6.$$s = self, TMP_6), $b).call($d) : $a);
        }, nil) && 'exclude?';
      })(self, null)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/ruby_project"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$map', '$add_dir_to_load_path', '$join', '$root', '$include?', '$unshift', '$determine_root', '$find_first_parent_containing', '$ascend_until', '$exists?', '$ascend', '$Pathname', '$expand_path', '$module_function']);
  self.$require("pathname");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'RubyProject');

        var def = self.$$proto, $scope = self.$$scope, TMP_4;

        Opal.defn(self, '$add_to_load_path', function(dirs) {
          var $a, $b, TMP_1, self = this;

          dirs = $slice.call(arguments, 0);
          return ($a = ($b = dirs).$map, $a.$$p = (TMP_1 = function(dir){var self = TMP_1.$$s || this;
if (dir == null) dir = nil;
          return self.$add_dir_to_load_path($scope.get('File').$join(self.$root(), dir))}, TMP_1.$$s = self, TMP_1), $a).call($b);
        });

        Opal.defn(self, '$add_dir_to_load_path', function(dir) {
          var $a, self = this;
          if ($gvars.LOAD_PATH == null) $gvars.LOAD_PATH = nil;

          if ((($a = $gvars.LOAD_PATH['$include?'](dir)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $gvars.LOAD_PATH.$unshift(dir)
          };
        });

        Opal.defn(self, '$root', function() {
          var $a, self = this;
          if (self.project_root == null) self.project_root = nil;

          return ((($a = self.project_root) !== false && $a !== nil) ? $a : self.project_root = self.$determine_root());
        });

        Opal.defn(self, '$determine_root', function() {
          var $a, self = this;

          return ((($a = self.$find_first_parent_containing("spec")) !== false && $a !== nil) ? $a : ".");
        });

        Opal.defn(self, '$find_first_parent_containing', function(dir) {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = self).$ascend_until, $a.$$p = (TMP_2 = function(path){var self = TMP_2.$$s || this;
if (path == null) path = nil;
          return $scope.get('File')['$exists?']($scope.get('File').$join(path, dir))}, TMP_2.$$s = self, TMP_2), $a).call($b);
        });

        Opal.defn(self, '$ascend_until', TMP_4 = function() {try {

          var $a, $b, TMP_3, self = this, $iter = TMP_4.$$p, $yield = $iter || nil;

          TMP_4.$$p = null;
          return ($a = ($b = self.$Pathname($scope.get('File').$expand_path("."))).$ascend, $a.$$p = (TMP_3 = function(path){var self = TMP_3.$$s || this, $a, $b;
if (path == null) path = nil;
          if ((($a = ((($b = Opal.yield1($yield, path)) === $breaker) ? $breaker.$v : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              Opal.ret(path)
              } else {
              return nil
            }}, TMP_3.$$s = self, TMP_3), $a).call($b);
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        });

        self.$module_function("add_to_load_path");

        self.$module_function("add_dir_to_load_path");

        self.$module_function("root");

        self.$module_function("determine_root");

        self.$module_function("find_first_parent_containing");

        self.$module_function("ascend_until");
      })(self)
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/formatters/helpers"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$<', '$>', '$to_i', '$/', '$-', '$*', '$pluralize', '$format_seconds', '$sprintf', '$strip_trailing_zeroes', '$sub', '$empty?', '$==', '$to_f']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Formatters');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base) {
          var self = $module($base, 'Helpers');

          var def = self.$$proto, $scope = self.$$scope;

          Opal.cdecl($scope, 'SUB_SECOND_PRECISION', 5);

          Opal.cdecl($scope, 'DEFAULT_PRECISION', 2);

          Opal.defn(self, '$format_duration', function(duration) {
            var self = this, precision = nil, minutes = nil, seconds = nil;

            precision = (function() {if (duration['$<'](1)) {return $scope.get('SUB_SECOND_PRECISION')}else if (duration['$<'](120)) {return $scope.get('DEFAULT_PRECISION')}else if (duration['$<'](300)) {return 1}else {return 0}})();
            if (duration['$>'](60)) {
              minutes = (duration.$to_i()['$/'](60)).$to_i();
              seconds = duration['$-'](minutes['$*'](60));
              return "" + (self.$pluralize(minutes, "minute")) + " " + (self.$pluralize(self.$format_seconds(seconds, precision), "second"));
              } else {
              return self.$pluralize(self.$format_seconds(duration, precision), "second")
            };
          });

          Opal.defn(self, '$format_seconds', function(float$, precision) {
            var $a, $b, self = this, formatted = nil;

            if (precision == null) {
              precision = nil
            }
            ((($a = precision) !== false && $a !== nil) ? $a : precision = (function() {if ((($b = (float$['$<'](1))) !== nil && (!$b.$$is_boolean || $b == true))) {
              return $scope.get('SUB_SECOND_PRECISION')
              } else {
              return $scope.get('DEFAULT_PRECISION')
            }; return nil; })());
            formatted = self.$sprintf("%." + (precision) + "f", float$);
            return self.$strip_trailing_zeroes(formatted);
          });

          Opal.defn(self, '$strip_trailing_zeroes', function(string) {
            var $a, self = this, stripped = nil;

            stripped = string.$sub(/[^1-9]+$/, "");
            if ((($a = stripped['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return "0"
              } else {
              return stripped
            };
          });

          Opal.defn(self, '$pluralize', function(count, string) {
            var self = this;

            return "" + (count) + " " + (string) + ((function() {if (count.$to_f()['$=='](1)) {
              return nil
              } else {
              return "s"
            }; return nil; })());
          });
        })(self)
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/formatters/deprecation_formatter"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$attr_reader', '$new', '$deprecation_stream', '$===', '$summary_stream', '$include?', '$+', '$print_deprecation_message', '$printer', '$<<', '$deprecation_summary', '$[]', '$gsub', '$deprecation_type_for', '$private', '$type', '$include', '$sync=', '$deprecation_message_for', '$deprecation_formatter', '$puts', '$to_s', '$>', '$count', '$pluralize', '$path', '$[]=', '$stash_deprecation_message', '$<', '$==', '$too_many_warnings_message', '$any?', '$print_deferred_deprecation_warnings', '$each', '$sort_by', '$to_proc', '$keys', '$raise']);
  self.$require("rspec/core/formatters/helpers");
  self.$require("set");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Formatters');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $DeprecationFormatter(){};
          var self = $DeprecationFormatter = $klass($base, $super, 'DeprecationFormatter', $DeprecationFormatter);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_3;

          def.printer = def.seen_deprecations = def.count = nil;
          self.$attr_reader("count", "deprecation_stream", "summary_stream");

          def.$initialize = function(deprecation_stream, summary_stream) {
            var self = this;

            self.deprecation_stream = deprecation_stream;
            self.summary_stream = summary_stream;
            self.seen_deprecations = $scope.get('Set').$new();
            return self.count = 0;
          };

          def.$printer = function() {
            var $a, self = this, $case = nil;

            return ((($a = self.printer) !== false && $a !== nil) ? $a : self.printer = (function() {$case = self.$deprecation_stream();if ($scope.get('File')['$===']($case) || $scope.get('RaiseErrorStream')['$===']($case)) {return $scope.get('ImmediatePrinter').$new(self.$deprecation_stream(), self.$summary_stream(), self)}else {return $scope.get('DelayedPrinter').$new(self.$deprecation_stream(), self.$summary_stream(), self)}})());
          };

          def.$deprecation = function(data) {
            var $a, self = this;

            if ((($a = self.seen_deprecations['$include?'](data)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil};
            self.count = self.count['$+'](1);
            self.$printer().$print_deprecation_message(data);
            return self.seen_deprecations['$<<'](data);
          };

          def.$deprecation_summary = function() {
            var self = this;

            return self.$printer().$deprecation_summary();
          };

          def.$deprecation_message_for = function(data) {
            var $a, self = this;

            if ((($a = data['$[]']("message")) !== nil && (!$a.$$is_boolean || $a == true))) {
              return $scope.get('SpecifiedDeprecationMessage').$new(data)
              } else {
              return $scope.get('GeneratedDeprecationMessage').$new(data)
            };
          };

          Opal.cdecl($scope, 'RAISE_ERROR_CONFIG_NOTICE', "          |\n          |If you need more of the backtrace for any of these deprecations to\n          |identify where to make the necessary changes, you can configure\n          |`config.raise_errors_for_deprecations!`, and it will turn the\n          |deprecation warnings into errors, giving you the full backtrace.\n".$gsub(/^\s+\|/, ""));

          Opal.cdecl($scope, 'SpecifiedDeprecationMessage', ($a = ($b = $scope.get('Struct')).$new, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, TMP_2;

          Opal.defn(self, '$initialize', TMP_2 = function(data) {
              var self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

              TMP_2.$$p = null;
              self.message = data['$[]']("message");
              return Opal.find_super_dispatcher(self, 'initialize', TMP_2, null).apply(self, [self.$deprecation_type_for(data)]);
            });
            Opal.defn(self, '$to_s', function() {
              var self = this;
              if (self.message == null) self.message = nil;

              return self.message;
            });
            Opal.defn(self, '$too_many_warnings_message', function() {
              var self = this, msg = nil;

              msg = "Too many similar deprecation messages reported, disregarding further reports.";
              msg['$<<'](" Set config.deprecation_stream to a File for full output.");
              return msg;
            });
            self.$private();
            return (Opal.defn(self, '$deprecation_type_for', function(data) {
              var self = this;

              return data['$[]']("message").$gsub(/(\w+\/)+\w+\.rb:\d+/, "");
            }), nil) && 'deprecation_type_for';}, TMP_1.$$s = self, TMP_1), $a).call($b, "type"));

          Opal.cdecl($scope, 'GeneratedDeprecationMessage', ($a = ($c = $scope.get('Struct')).$new, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, TMP_4;

          Opal.defn(self, '$initialize', TMP_4 = function(data) {
              var self = this, $iter = TMP_4.$$p, $yield = $iter || nil;

              TMP_4.$$p = null;
              self.data = data;
              return Opal.find_super_dispatcher(self, 'initialize', TMP_4, null).apply(self, [data['$[]']("deprecated")]);
            });
            Opal.defn(self, '$to_s', function() {
              var $a, self = this, msg = nil;
              if (self.data == null) self.data = nil;

              msg = "" + (self.data['$[]']("deprecated")) + " is deprecated.";
              if ((($a = self.data['$[]']("replacement")) !== nil && (!$a.$$is_boolean || $a == true))) {
                msg['$<<'](" Use " + (self.data['$[]']("replacement")) + " instead.")};
              if ((($a = self.data['$[]']("call_site")) !== nil && (!$a.$$is_boolean || $a == true))) {
                msg['$<<'](" Called from " + (self.data['$[]']("call_site")) + ".")};
              return msg;
            });
            return (Opal.defn(self, '$too_many_warnings_message', function() {
              var self = this, msg = nil;

              msg = "Too many uses of deprecated '" + (self.$type()) + "'.";
              msg['$<<'](" Set config.deprecation_stream to a File for full output.");
              return msg;
            }), nil) && 'too_many_warnings_message';}, TMP_3.$$s = self, TMP_3), $a).call($c, "type"));

          (function($base, $super) {
            function $ImmediatePrinter(){};
            var self = $ImmediatePrinter = $klass($base, $super, 'ImmediatePrinter', $ImmediatePrinter);

            var def = self.$$proto, $scope = self.$$scope;

            def.deprecation_stream = nil;
            self.$include(((((((Opal.get('RSpec')).$$scope.get('Core'))).$$scope.get('Formatters'))).$$scope.get('Helpers')));

            self.$attr_reader("deprecation_stream", "summary_stream", "deprecation_formatter");

            def.$initialize = function(deprecation_stream, summary_stream, deprecation_formatter) {
              var $a, $b, self = this;

              self.deprecation_stream = deprecation_stream;
              (($a = [true]), $b = self.deprecation_stream, $b['$sync='].apply($b, $a), $a[$a.length-1]);
              self.summary_stream = summary_stream;
              return self.deprecation_formatter = deprecation_formatter;
            };

            def.$print_deprecation_message = function(data) {
              var self = this, deprecation_message = nil;

              deprecation_message = self.$deprecation_formatter().$deprecation_message_for(data);
              return self.$deprecation_stream().$puts(deprecation_message.$to_s());
            };

            return (def.$deprecation_summary = function() {
              var self = this;

              if (self.$deprecation_formatter().$count()['$>'](0)) {
                self.$summary_stream().$puts("\n" + (self.$pluralize(self.$deprecation_formatter().$count(), "deprecation")) + " logged to " + (self.$deprecation_stream().$path()));
                return self.$deprecation_stream().$puts($scope.get('RAISE_ERROR_CONFIG_NOTICE'));
                } else {
                return nil
              };
            }, nil) && 'deprecation_summary';
          })(self, null);

          (function($base, $super) {
            function $DelayedPrinter(){};
            var self = $DelayedPrinter = $klass($base, $super, 'DelayedPrinter', $DelayedPrinter);

            var def = self.$$proto, $scope = self.$$scope;

            def.seen_deprecations = def.deprecation_messages = nil;
            Opal.cdecl($scope, 'TOO_MANY_USES_LIMIT', 4);

            self.$include(((((((Opal.get('RSpec')).$$scope.get('Core'))).$$scope.get('Formatters'))).$$scope.get('Helpers')));

            self.$attr_reader("deprecation_stream", "summary_stream", "deprecation_formatter");

            def.$initialize = function(deprecation_stream, summary_stream, deprecation_formatter) {
              var $a, $b, TMP_5, $c, TMP_6, self = this;

              self.deprecation_stream = deprecation_stream;
              self.summary_stream = summary_stream;
              self.deprecation_formatter = deprecation_formatter;
              self.seen_deprecations = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

              return 0}, TMP_5.$$s = self, TMP_5), $a).call($b);
              return self.deprecation_messages = ($a = ($c = $scope.get('Hash')).$new, $a.$$p = (TMP_6 = function(h, k){var self = TMP_6.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
              return h['$[]='](k, [])}, TMP_6.$$s = self, TMP_6), $a).call($c);
            };

            def.$print_deprecation_message = function(data) {
              var $a, $b, self = this, deprecation_message = nil;

              deprecation_message = self.$deprecation_formatter().$deprecation_message_for(data);
              ($a = deprecation_message, $b = self.seen_deprecations, $b['$[]=']($a, $b['$[]']($a)['$+'](1)));
              return self.$stash_deprecation_message(deprecation_message);
            };

            def.$stash_deprecation_message = function(deprecation_message) {
              var self = this;

              if (self.seen_deprecations['$[]'](deprecation_message)['$<']($scope.get('TOO_MANY_USES_LIMIT'))) {
                return self.deprecation_messages['$[]'](deprecation_message)['$<<'](deprecation_message.$to_s())
              } else if (self.seen_deprecations['$[]'](deprecation_message)['$==']($scope.get('TOO_MANY_USES_LIMIT'))) {
                return self.deprecation_messages['$[]'](deprecation_message)['$<<'](deprecation_message.$too_many_warnings_message())
                } else {
                return nil
              };
            };

            def.$deprecation_summary = function() {
              var $a, self = this;

              if ((($a = self.deprecation_messages['$any?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                } else {
                return nil
              };
              self.$print_deferred_deprecation_warnings();
              self.$deprecation_stream().$puts($scope.get('RAISE_ERROR_CONFIG_NOTICE'));
              return self.$summary_stream().$puts("\n" + (self.$pluralize(self.$deprecation_formatter().$count(), "deprecation warning")) + " total");
            };

            return (def.$print_deferred_deprecation_warnings = function() {
              var $a, $b, TMP_7, $c, $d, self = this;

              self.$deprecation_stream().$puts("\nDeprecation Warnings:\n\n");
              return ($a = ($b = ($c = ($d = self.deprecation_messages.$keys()).$sort_by, $c.$$p = "type".$to_proc(), $c).call($d)).$each, $a.$$p = (TMP_7 = function(deprecation){var self = TMP_7.$$s || this, $a, $b, TMP_8, messages = nil;
                if (self.deprecation_messages == null) self.deprecation_messages = nil;
if (deprecation == null) deprecation = nil;
              messages = self.deprecation_messages['$[]'](deprecation);
                ($a = ($b = messages).$each, $a.$$p = (TMP_8 = function(msg){var self = TMP_8.$$s || this;
if (msg == null) msg = nil;
                return self.$deprecation_stream().$puts(msg)}, TMP_8.$$s = self, TMP_8), $a).call($b);
                return self.$deprecation_stream().$puts();}, TMP_7.$$s = self, TMP_7), $a).call($b);
            }, nil) && 'print_deferred_deprecation_warnings';
          })(self, null);

          return (function($base, $super) {
            function $RaiseErrorStream(){};
            var self = $RaiseErrorStream = $klass($base, $super, 'RaiseErrorStream', $RaiseErrorStream);

            var def = self.$$proto, $scope = self.$$scope;

            def.$puts = function(message) {
              var self = this;

              return self.$raise($scope.get('DeprecationError'), message);
            };

            return (def['$sync='] = function(value) {
              var self = this;

              return nil;
            }, nil) && 'sync=';
          })(self, null);
        })(self, null)
      })(self);

      Opal.cdecl($scope, 'DeprecationError', $scope.get('Class').$new($scope.get('StandardError')));
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/support/caller_filter"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$join', '$+', '$>=', '$!', '$caller', '$raise', '$find', '$=~', '$*']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $CallerFilter(){};
      var self = $CallerFilter = $klass($base, $super, 'CallerFilter', $CallerFilter);

      var def = self.$$proto, $scope = self.$$scope;

      Opal.cdecl($scope, 'RSPEC_LIBS', ["core", "mocks", "expectations", "support", "matchers", "rails"]);

      Opal.cdecl($scope, 'ADDITIONAL_TOP_LEVEL_FILES', ["autorun"]);

      Opal.cdecl($scope, 'LIB_REGEX', (new RegExp("/lib/rspec/(" + ($scope.get('RSPEC_LIBS')['$+']($scope.get('ADDITIONAL_TOP_LEVEL_FILES'))).$join("|") + ")(\\.rb|/)")));

      if ($scope.get('RUBY_VERSION')['$>=']("2.0.0")) {
        return (Opal.defs(self, '$first_non_rspec_line', function() {
          var $a, $b, $c, TMP_1, self = this, increment = nil, i = nil, line = nil, stack = nil;

          increment = 5;
          i = 1;
          line = nil;
          while ((($b = line['$!']()) !== nil && (!$b.$$is_boolean || $b == true))) {
          stack = self.$caller(i, increment);
          if (stack !== false && stack !== nil) {
            } else {
            self.$raise("No non-lib lines in stack")
          };
          line = ($b = ($c = stack).$find, $b.$$p = (TMP_1 = function(l){var self = TMP_1.$$s || this, $a;
if (l == null) l = nil;
          return ($a = l['$=~']($scope.get('LIB_REGEX')), ($a === nil || $a === false))}, TMP_1.$$s = self, TMP_1), $b).call($c);
          i = i['$+'](increment);
          increment = increment['$*'](2);};
          return line;
        }), nil) && 'first_non_rspec_line'
        } else {
        return (Opal.defs(self, '$first_non_rspec_line', function() {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = self.$caller()).$find, $a.$$p = (TMP_2 = function(line){var self = TMP_2.$$s || this, $a;
if (line == null) line = nil;
          return ($a = line['$=~']($scope.get('LIB_REGEX')), ($a === nil || $a === false))}, TMP_2.$$s = self, TMP_2), $a).call($b);
        }), nil) && 'first_non_rspec_line'
      };
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/support/warnings"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$respond_to?', '$warn_with', '$fetch', '$first_non_rspec_line', '$<<', '$warn']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope, $a;

    if ((($a = self['$respond_to?']("deprecate")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      Opal.defs(self, '$deprecate', function(deprecated, options) {
        var self = this;

        if (options == null) {
          options = $hash2([], {})
        }
        return self.$warn_with("DEPRECATION: " + (deprecated) + " is deprecated.", options);
      })
    };

    if ((($a = self['$respond_to?']("warn_deprecation")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      Opal.defs(self, '$warn_deprecation', function(message) {
        var self = this;

        return self.$warn_with("DEPRECATION: \n " + (message));
      })
    };

    Opal.defs(self, '$warning', function(text, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {})
      }
      return self.$warn_with("WARNING: " + (text) + ".", options);
    });

    Opal.defs(self, '$warn_with', function(message, options) {
      var $a, $b, TMP_1, self = this, call_site = nil;

      if (options == null) {
        options = $hash2([], {})
      }
      call_site = ($a = ($b = options).$fetch, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

      return $scope.get('CallerFilter').$first_non_rspec_line()}, TMP_1.$$s = self, TMP_1), $a).call($b, "call_site");
      if (call_site !== false && call_site !== nil) {
        message['$<<'](" Called from " + (call_site) + ".")};
      return Opal.get('Kernel').$warn(message);
    });
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/expectations/extensions/object"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$===', '$deprecate', '$to_s', '$reject!', '$=~', '$compile', '$backtrace', '$raise', '$extend']);
  (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Expectations');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'DeprecatedConstants');

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        Opal.defn(self, '$const_missing', TMP_1 = function(name) {var $zuper = $slice.call(arguments, 0);
          var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $case = nil, e = nil;

          TMP_1.$$p = null;
          return (function() {$case = name;if ("Rspec"['$===']($case) || "Spec"['$===']($case)) {$scope.get('RSpec').$deprecate(name.$to_s(), $hash2(["replacement"], {"replacement": "RSpec"}));
          return $scope.get('RSpec');}else {try {
          return Opal.find_super_dispatcher(self, 'const_missing', TMP_1, $iter).apply(self, $zuper)
          } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
            ($a = ($b = e.$backtrace())['$reject!'], $a.$$p = (TMP_2 = function(l){var self = TMP_2.$$s || this;
if (l == null) l = nil;
            return l['$=~']($scope.get('Regexp').$compile("rspec/expectations/extensions/object"))}, TMP_2.$$s = self, TMP_2), $a).call($b);
            return self.$raise(e);
            }else { throw $err; }
          }}})();
        })
      })(self);

      Opal.defn(self, '$differ=', function(ignore) {
        var self = this;

        return $scope.get('RSpec').$deprecate("RSpec::Expectations.differ=(differ)");
      });
    })(self)
  })(self);
  return self.$extend((((($scope.get('RSpec')).$$scope.get('Expectations'))).$$scope.get('DeprecatedConstants')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/expectations/extensions"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("rspec/expectations/extensions/object")
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/pretty"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range;

  Opal.add_stubs(['$gsub', '$to_s', '$map', '$to_word', '$Array', '$length', '$===', '$[]', '$join', '$each_with_index', '$<', '$-', '$<<', '$inspect', '$is_matcher_with_description?', '$description', '$split_words', '$name', '$to_sentence', '$underscore', '$last', '$split', '$class', '$dup', '$gsub!', '$tr!', '$downcase!', '$private', '$is_a_matcher?', '$respond_to?']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Pretty');

        var def = self.$$proto, $scope = self.$$scope;

        Opal.defn(self, '$split_words', function(sym) {
          var self = this;

          return sym.$to_s().$gsub(/_/, " ");
        });

        Opal.defn(self, '$to_sentence', function(words) {
          var $a, $b, TMP_1, self = this, $case = nil;

          if (words !== false && words !== nil) {
            } else {
            return ""
          };
          words = ($a = ($b = self.$Array(words)).$map, $a.$$p = (TMP_1 = function(w){var self = TMP_1.$$s || this;
if (w == null) w = nil;
          return self.$to_word(w)}, TMP_1.$$s = self, TMP_1), $a).call($b);
          return (function() {$case = words.$length();if ((0)['$===']($case)) {return ""}else if ((1)['$===']($case)) {return " " + (words['$[]'](0))}else if ((2)['$===']($case)) {return " " + (words['$[]'](0)) + " and " + (words['$[]'](1))}else {return " " + (words['$[]']($range(0, -1, true)).$join(", ")) + ", and " + (words['$[]'](-1))}})();
        });

        Opal.defn(self, '$_pretty_print', function(array) {
          var $a, $b, TMP_2, self = this, result = nil;

          result = "";
          ($a = ($b = array).$each_with_index, $a.$$p = (TMP_2 = function(item, index){var self = TMP_2.$$s || this;
if (item == null) item = nil;if (index == null) index = nil;
          if (index['$<']((array.$length()['$-'](2)))) {
              return result['$<<']("" + (item.$inspect()) + ", ")
            } else if (index['$<']((array.$length()['$-'](1)))) {
              return result['$<<']("" + (item.$inspect()) + " and ")
              } else {
              return result['$<<']("" + (item.$inspect()))
            }}, TMP_2.$$s = self, TMP_2), $a).call($b);
          return result;
        });

        Opal.defn(self, '$to_word', function(item) {
          var $a, self = this;

          if ((($a = self['$is_matcher_with_description?'](item)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return item.$description()
            } else {
            return item.$inspect()
          };
        });

        Opal.defn(self, '$name_to_sentence', function() {
          var self = this;

          return self.$split_words(self.$name());
        });

        Opal.defn(self, '$expected_to_sentence', function() {
          var $a, $b, self = this;
          if (self.expected == null) self.expected = nil;

          if ((($a = (($b = self['expected'], $b != null && $b !== nil) ? 'instance-variable' : nil)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$to_sentence(self.expected)
            } else {
            return nil
          };
        });

        Opal.defn(self, '$name', function() {
          var $a, $b, self = this;
          if (self.name == null) self.name = nil;

          if ((($a = (($b = self['name'], $b != null && $b !== nil) ? 'instance-variable' : nil)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.name
            } else {
            return self.$underscore(self.$class().$name().$split("::").$last())
          };
        });

        Opal.defn(self, '$underscore', function(camel_cased_word) {
          var self = this, word = nil;

          word = camel_cased_word.$to_s().$dup();
          word['$gsub!'](/([A-Z]+)([A-Z][a-z])/, "\\1_\\2");
          word['$gsub!'](/([a-z\d])([A-Z])/, "\\1_\\2");
          word['$tr!']("-", "_");
          word['$downcase!']();
          return word;
        });

        self.$private();

        Opal.defn(self, '$is_matcher_with_description?', function(object) {
          var $a, self = this;

          return ($a = (($scope.get('RSpec')).$$scope.get('Matchers'))['$is_a_matcher?'](object), $a !== false && $a !== nil ?object['$respond_to?']("description") : $a);
        });
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/built_in/base_matcher"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$attr_reader', '$match', '$expected', '$empty?', '$unshift', '$assert_ivars', '$inspect', '$name_to_sentence', '$expected_to_sentence', '$matches?', '$private', '$all?', '$include?', '$map', '$to_proc', '$instance_variables', '$raise', '$name', '$class', '$to_sentence']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'BuiltIn');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $BaseMatcher(){};
          var self = $BaseMatcher = $klass($base, $super, 'BaseMatcher', $BaseMatcher);

          var def = self.$$proto, $scope = self.$$scope, TMP_1;

          def.actual = def.expected = nil;
          self.$include((((($scope.get('RSpec')).$$scope.get('Matchers'))).$$scope.get('Pretty')));

          self.$attr_reader("actual", "expected", "rescued_exception");

          def.$initialize = function(expected) {
            var self = this;

            if (expected == null) {
              expected = nil
            }
            return self.expected = expected;
          };

          def['$matches?'] = function(actual) {
            var self = this;

            self.actual = actual;
            return self.$match(self.$expected(), actual);
          };

          def.$match_unless_raises = TMP_1 = function(exceptions) {
            var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

            exceptions = $slice.call(arguments, 0);
            TMP_1.$$p = null;
            if ((($a = exceptions['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              exceptions.$unshift($scope.get('Exception'))};
            try {
            if (Opal.yieldX($yield, []) === $breaker) return $breaker.$v;
              return true;
            } catch ($err) {if (Opal.rescue($err, [exceptions])) {self.rescued_exception = $err;
              return false
              }else { throw $err; }
            };
          };

          def.$failure_message_for_should = function() {
            var self = this;

            self.$assert_ivars("@actual", "@expected");
            return "expected " + (self.actual.$inspect()) + " to " + (self.$name_to_sentence()) + (self.$expected_to_sentence());
          };

          def.$failure_message_for_should_not = function() {
            var self = this;

            self.$assert_ivars("@actual", "@expected");
            return "expected " + (self.actual.$inspect()) + " not to " + (self.$name_to_sentence()) + (self.$expected_to_sentence());
          };

          def.$description = function() {
            var $a, self = this;

            if ((($a = self.$expected()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return "" + (self.$name_to_sentence()) + " " + (self.expected.$inspect())
              } else {
              return self.$name_to_sentence()
            };
          };

          def['$diffable?'] = function() {
            var self = this;

            return false;
          };

          def['$=='] = function(other) {
            var self = this;

            return self['$matches?'](other);
          };

          self.$private();

          return (def.$assert_ivars = function(ivars) {
            var $a, $b, $c, TMP_2, self = this;

            ivars = $slice.call(arguments, 0);
            if ((($a = ($b = ($c = ivars)['$all?'], $b.$$p = (TMP_2 = function(v){var self = TMP_2.$$s || this, $a, $b;
if (v == null) v = nil;
            return ($a = ($b = self.$instance_variables()).$map, $a.$$p = "intern".$to_proc(), $a).call($b)['$include?'](v)}, TMP_2.$$s = self, TMP_2), $b).call($c)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$raise("" + (self.$class().$name()) + " needs to supply " + (self.$to_sentence(ivars)))
            };
          }, nil) && 'assert_ivars';
        })(self, null)
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/built_in/be_instance_of"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$instance_of?', '$expected']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'BuiltIn');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $BeAnInstanceOf(){};
          var self = $BeAnInstanceOf = $klass($base, $super, 'BeAnInstanceOf', $BeAnInstanceOf);

          var def = self.$$proto, $scope = self.$$scope;

          def.$match = function(expected, actual) {
            var self = this;

            return actual['$instance_of?'](expected);
          };

          return (def.$description = function() {
            var self = this;

            return "be an instance of " + (self.$expected());
          }, nil) && 'description';
        })(self, $scope.get('BaseMatcher'))
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/dsl"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$define_method', '$new', '$matcher_execution_context=', '$alias_method', '$respond_to?', '$configure', '$extend']);
  (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'DSL');

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, $b, TMP_3;

        Opal.defn(self, '$define', TMP_1 = function(name) {
          var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, declarations = $iter || nil;

          TMP_1.$$p = null;
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_2 = function(expected){var self = TMP_2.$$s || this, $a, $b, $c, $d, matcher = nil;
            if (self.matcher_execution_context == null) self.matcher_execution_context = nil;
expected = $slice.call(arguments, 0);
          matcher = ($a = (((((($scope.get('RSpec')).$$scope.get('Matchers'))).$$scope.get('DSL'))).$$scope.get('Matcher'))).$new.apply($a, [name, declarations].concat(expected));
            (($b = [((($d = self.matcher_execution_context) !== false && $d !== nil) ? $d : self.matcher_execution_context = self)]), $c = matcher, $c['$matcher_execution_context='].apply($c, $b), $b[$b.length-1]);
            return matcher;}, TMP_2.$$s = self, TMP_2), $a).call($b, name);
        });

        self.$alias_method("matcher", "define");

        if ((($a = $scope.get('RSpec')['$respond_to?']("configure")) !== nil && (!$a.$$is_boolean || $a == true))) {
          ($a = ($b = $scope.get('RSpec')).$configure, $a.$$p = (TMP_3 = function(c){var self = TMP_3.$$s || this;
if (c == null) c = nil;
          return c.$extend(self)}, TMP_3.$$s = self, TMP_3), $a).call($b)};
      })(self)
    })(self)
  })(self);
  return (($scope.get('RSpec')).$$scope.get('Matchers')).$extend((((($scope.get('RSpec')).$$scope.get('Matchers'))).$$scope.get('DSL')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/built_in/be"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$!', '$inspect', '$actual', '$nil?', '$private', '$empty?', '$parenthesize', '$join', '$inspected_args', '$collect', '$split_words', '$to_sentence', '$include', '$each', '$define_method', '$new', '$__send__', '$gsub', '$to_s', '$negative_expectation_expression', '$raise', '$<<', '$include?', '$expected_to_sentence', '$args_to_sentence', '$negative_expression', '$parse_expected', '$shift', '$is_private_on?', '$predicate', '$to_proc', '$present_tense_predicate', '$args_to_s', '$prefix_to_sentence', '$is_a?', '$first', '$methods', '$private_methods', '$to_sym', '$prefix_and_expected', '$=~']);
  self.$require("rspec/matchers/dsl");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'BuiltIn');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $BeTruthy(){};
          var self = $BeTruthy = $klass($base, $super, 'BeTruthy', $BeTruthy);

          var def = self.$$proto, $scope = self.$$scope;

          def.$match = function(_, actual) {
            var self = this;

            return actual['$!']()['$!']();
          };

          def.$failure_message_for_should = function() {
            var self = this;

            return "expected: truthy value\n     got: " + (self.$actual().$inspect());
          };

          return (def.$failure_message_for_should_not = function() {
            var self = this;

            return "expected: falsey value\n     got: " + (self.$actual().$inspect());
          }, nil) && 'failure_message_for_should_not';
        })(self, $scope.get('BaseMatcher'));

        (function($base, $super) {
          function $BeFalsey(){};
          var self = $BeFalsey = $klass($base, $super, 'BeFalsey', $BeFalsey);

          var def = self.$$proto, $scope = self.$$scope;

          def.$match = function(_, actual) {
            var self = this;

            return actual['$!']();
          };

          def.$failure_message_for_should = function() {
            var self = this;

            return "expected: falsey value\n     got: " + (self.$actual().$inspect());
          };

          return (def.$failure_message_for_should_not = function() {
            var self = this;

            return "expected: truthy value\n     got: " + (self.$actual().$inspect());
          }, nil) && 'failure_message_for_should_not';
        })(self, $scope.get('BaseMatcher'));

        (function($base, $super) {
          function $BeNil(){};
          var self = $BeNil = $klass($base, $super, 'BeNil', $BeNil);

          var def = self.$$proto, $scope = self.$$scope;

          def.$match = function(_, actual) {
            var self = this;

            return actual['$nil?']();
          };

          def.$failure_message_for_should = function() {
            var self = this;

            return "expected: nil\n     got: " + (self.$actual().$inspect());
          };

          return (def.$failure_message_for_should_not = function() {
            var self = this;

            return "expected: not nil\n     got: nil";
          }, nil) && 'failure_message_for_should_not';
        })(self, $scope.get('BaseMatcher'));

        (function($base) {
          var self = $module($base, 'BeHelpers');

          var def = self.$$proto, $scope = self.$$scope;

          self.$private();

          Opal.defn(self, '$args_to_s', function() {
            var $a, self = this;
            if (self.args == null) self.args = nil;

            if ((($a = self.args['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return ""
              } else {
              return self.$parenthesize(self.$inspected_args().$join(", "))
            };
          });

          Opal.defn(self, '$parenthesize', function(string) {
            var self = this;

            return "(" + (string) + ")";
          });

          Opal.defn(self, '$inspected_args', function() {
            var $a, $b, TMP_1, self = this;
            if (self.args == null) self.args = nil;

            return ($a = ($b = self.args).$collect, $a.$$p = (TMP_1 = function(a){var self = TMP_1.$$s || this;
if (a == null) a = nil;
            return a.$inspect()}, TMP_1.$$s = self, TMP_1), $a).call($b);
          });

          Opal.defn(self, '$expected_to_sentence', function() {
            var self = this;
            if (self.expected == null) self.expected = nil;

            return self.$split_words(self.expected);
          });

          Opal.defn(self, '$args_to_sentence', function() {
            var self = this;
            if (self.args == null) self.args = nil;

            return self.$to_sentence(self.args);
          });
        })(self);

        (function($base, $super) {
          function $Be(){};
          var self = $Be = $klass($base, $super, 'Be', $Be);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, $a, $b, TMP_3;

          def.actual = nil;
          self.$include($scope.get('BeHelpers'));

          def.$initialize = TMP_2 = function(args) {
            var self = this, $iter = TMP_2.$$p, block = $iter || nil;

            args = $slice.call(arguments, 0);
            TMP_2.$$p = null;
            return self.args = args;
          };

          def.$match = function(_, actual) {
            var self = this;

            return actual['$!']()['$!']();
          };

          def.$failure_message_for_should = function() {
            var self = this;

            return "expected " + (self.actual.$inspect()) + " to evaluate to true";
          };

          def.$failure_message_for_should_not = function() {
            var self = this;

            return "expected " + (self.actual.$inspect()) + " to evaluate to false";
          };

          return ($a = ($b = ["==", "<", "<=", ">=", ">", "===", "=~"]).$each, $a.$$p = (TMP_3 = function(operator){var self = TMP_3.$$s || this, $a, $b, TMP_4;
if (operator == null) operator = nil;
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_4 = function(operand){var self = TMP_4.$$s || this;
if (operand == null) operand = nil;
            return $scope.get('BeComparedTo').$new(operand, operator)}, TMP_4.$$s = self, TMP_4), $a).call($b, operator)}, TMP_3.$$s = self, TMP_3), $a).call($b);
        })(self, $scope.get('BaseMatcher'));

        (function($base, $super) {
          function $BeComparedTo(){};
          var self = $BeComparedTo = $klass($base, $super, 'BeComparedTo', $BeComparedTo);

          var def = self.$$proto, $scope = self.$$scope;

          def.actual = def.operator = def.expected = nil;
          def.$initialize = function(operand, operator) {
            var $a, self = this;

            $a = [operand, operator], self.expected = $a[0], self.operator = $a[1];
            return self.args = [];
          };

          def['$matches?'] = function(actual) {
            var self = this;

            self.actual = actual;
            return self.actual.$__send__(self.operator, self.expected);
          };

          def.$failure_message_for_should = function() {
            var self = this;

            return "expected: " + (self.operator) + " " + (self.expected.$inspect()) + "\n     got: " + (self.operator.$to_s().$gsub(/./, " ")) + " " + (self.actual.$inspect());
          };

          def.$failure_message_for_should_not = function() {
            var $a, self = this, message = nil;

            message = "`" + (self.$negative_expectation_expression()) + "` not only FAILED,\nit is a bit confusing.\n";
            return self.$raise(message['$<<'](((function() {if ((($a = ["===", "=="]['$include?'](self.operator)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return "It might be more clearly expressed without the \"be\"?"
              } else {
              return "It might be more clearly expressed in the positive?"
            }; return nil; })())));
          };

          def.$description = function() {
            var self = this;

            return "be " + (self.operator) + " " + (self.$expected_to_sentence()) + (self.$args_to_sentence());
          };

          return (def.$negative_expectation_expression = function() {
            var self = this;

            return (($scope.get('Expectations')).$$scope.get('Syntax')).$negative_expression("actual", "be " + (self.operator) + " " + (self.expected));
          }, nil) && 'negative_expectation_expression';
        })(self, $scope.get('Be'));

        (function($base, $super) {
          function $BePredicate(){};
          var self = $BePredicate = $klass($base, $super, 'BePredicate', $BePredicate);

          var def = self.$$proto, $scope = self.$$scope, TMP_5, $a;

          def.actual = def.block = def.args = def.result = def.expected = def.prefix = nil;
          self.$include($scope.get('BeHelpers'));

          def.$initialize = TMP_5 = function(args) {
            var self = this, $iter = TMP_5.$$p, block = $iter || nil;

            args = $slice.call(arguments, 0);
            TMP_5.$$p = null;
            self.expected = self.$parse_expected(args.$shift());
            self.args = args;
            return self.block = block;
          };

          def['$matches?'] = function(actual) {
            var $a, $b, $c, self = this, predicate_missing_error = nil;

            self.actual = actual;
            if ((($a = self['$is_private_on?'](self.actual)) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$raise((($scope.get('Expectations')).$$scope.get('ExpectationNotMetError')).$new("expectation set on private method `" + (self.$predicate()) + "`"))};
            try {
            return self.result = ($a = ($b = actual).$__send__, $a.$$p = self.block.$to_proc(), $a).apply($b, [self.$predicate()].concat(self.args))
            } catch ($err) {if (Opal.rescue($err, [$scope.get('NameError')])) {predicate_missing_error = $err;
              "this needs to be here or rcov will not count this branch even though it's executed in a code example"
              }else { throw $err; }
            };
            try {
            return self.result = ($a = ($c = actual).$__send__, $a.$$p = self.block.$to_proc(), $a).apply($c, [self.$present_tense_predicate()].concat(self.args))
            } catch ($err) {if (Opal.rescue($err, [$scope.get('NameError')])) {
              return self.$raise(predicate_missing_error)
              }else { throw $err; }
            };
          };

          Opal.defn(self, '$===', def['$matches?']);

          def.$failure_message_for_should = function() {
            var self = this;

            return "expected " + (self.$predicate()) + (self.$args_to_s()) + " to return true, got " + (self.result.$inspect());
          };

          def.$failure_message_for_should_not = function() {
            var self = this;

            return "expected " + (self.$predicate()) + (self.$args_to_s()) + " to return false, got " + (self.result.$inspect());
          };

          def.$description = function() {
            var self = this;

            return "" + (self.$prefix_to_sentence()) + (self.$expected_to_sentence()) + (self.$args_to_sentence());
          };

          self.$private();

          if ((($a = self.$methods().$first()['$is_a?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            def['$is_private_on?'] = function(actual) {
              var self = this;

              return actual.$private_methods()['$include?'](self.$predicate().$to_s());
            }
            } else {
            def['$is_private_on?'] = function(actual) {
              var self = this;

              return actual.$private_methods()['$include?'](self.$predicate());
            }
          };

          def.$predicate = function() {
            var self = this;

            return ((("") + (self.expected)) + "?").$to_sym();
          };

          def.$present_tense_predicate = function() {
            var self = this;

            return ((("") + (self.expected)) + "s?").$to_sym();
          };

          def.$parse_expected = function(expected) {
            var $a, self = this;

            $a = Opal.to_ary(self.$prefix_and_expected(expected)), self.prefix = ($a[0] == null ? nil : $a[0]), expected = ($a[1] == null ? nil : $a[1]);
            return expected;
          };

          def.$prefix_and_expected = function(symbol) {
            var $a, self = this;

            symbol.$to_s()['$=~'](/^(be_(an?_)?)(.*)/);
            return [(($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](3))];
          };

          return (def.$prefix_to_sentence = function() {
            var self = this;

            return self.$split_words(self.prefix);
          }, nil) && 'prefix_to_sentence';
        })(self, $scope.get('BaseMatcher'));
      })(self)
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/built_in/be_kind_of"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$kind_of?']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'BuiltIn');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $BeAKindOf(){};
          var self = $BeAKindOf = $klass($base, $super, 'BeAKindOf', $BeAKindOf);

          var def = self.$$proto, $scope = self.$$scope;

          return (def.$match = function(expected, actual) {
            var self = this;

            return actual['$kind_of?'](expected);
          }, nil) && 'match'
        })(self, $scope.get('BaseMatcher'))
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/built_in/be_within"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$needs_expected', '$respond_to?', '$needs_subtractable', '$<=', '$abs', '$-', '$/', '$*', '$description', '$private', '$new', '$inspect']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'BuiltIn');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $BeWithin(){};
          var self = $BeWithin = $klass($base, $super, 'BeWithin', $BeWithin);

          var def = self.$$proto, $scope = self.$$scope;

          def.actual = def.expected = def.tolerance = def.delta = def.unit = nil;
          def.$initialize = function(delta) {
            var self = this;

            return self.delta = delta;
          };

          def['$matches?'] = function(actual) {
            var $a, $b, self = this;

            self.actual = actual;
            if ((($a = (($b = self['expected'], $b != null && $b !== nil) ? 'instance-variable' : nil)) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$raise(self.$needs_expected())
            };
            if ((($a = self.actual['$respond_to?']("-")) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$raise(self.$needs_subtractable())
            };
            return (self.actual['$-'](self.expected)).$abs()['$<='](self.tolerance);
          };

          Opal.defn(self, '$==', def['$matches?']);

          def.$of = function(expected) {
            var self = this;

            self.expected = expected;
            self.tolerance = self.delta;
            self.unit = "";
            return self;
          };

          def.$percent_of = function(expected) {
            var self = this;

            self.expected = expected;
            self.tolerance = self.delta['$*'](self.expected.$abs())['$/'](100.0);
            self.unit = "%";
            return self;
          };

          def.$failure_message_for_should = function() {
            var self = this;

            return "expected " + (self.actual) + " to " + (self.$description());
          };

          def.$failure_message_for_should_not = function() {
            var self = this;

            return "expected " + (self.actual) + " not to " + (self.$description());
          };

          def.$description = function() {
            var self = this;

            return "be within " + (self.delta) + (self.unit) + " of " + (self.expected);
          };

          self.$private();

          def.$needs_subtractable = function() {
            var self = this;

            return $scope.get('ArgumentError').$new("The actual value (" + (self.actual.$inspect()) + ") must respond to `-`");
          };

          return (def.$needs_expected = function() {
            var self = this;

            return $scope.get('ArgumentError').$new("You must set an expected value using #of: be_within(" + (self.delta) + ").of(expected_value)");
          }, nil) && 'needs_expected';
        })(self, null)
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/built_in/change"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$lambda', '$__send__', '$raise_block_syntax_error', '$evaluate_value_proc', '$call', '$!', '$change_expected?', '$changed?', '$matches_before?', '$matches_after?', '$matches_expected_delta?', '$matches_min?', '$matches_max?', '$raise', '$new', '$===', '$dup', '$expected_matches_actual?', '$message', '$inspect', '$failure_message_for_expected_after', '$actual_delta', '$-', '$private', '$is_a_matcher?', '$description', '$==', '$+', '$>=', '$<=']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'BuiltIn');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Change(){};
          var self = $Change = $klass($base, $super, 'Change', $Change);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3;

          def.value_proc = def.eval_before = def.expected_before = def.actual_before = def.eval_after = def.expected_after = def.actual_after = def.expected_delta = def.minimum = def.maximum = def.message = nil;
          def.$initialize = TMP_1 = function(receiver, message) {
            var $a, $b, $c, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil;

            if (receiver == null) {
              receiver = nil
            }
            if (message == null) {
              message = nil
            }
            TMP_1.$$p = null;
            self.message = message;
            self.value_proc = ((($a = block) !== false && $a !== nil) ? $a : ($b = ($c = self).$lambda, $b.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

            return receiver.$__send__(message)}, TMP_2.$$s = self, TMP_2), $b).call($c));
            self.expected_after = self.expected_before = self.minimum = self.maximum = self.expected_delta = nil;
            return self.eval_before = self.eval_after = false;
          };

          def['$matches?'] = TMP_3 = function(event_proc) {
            var $a, $b, $c, $d, $e, $f, self = this, $iter = TMP_3.$$p, $yield = $iter || nil;

            TMP_3.$$p = null;
            if (($yield !== nil)) {
              self.$raise_block_syntax_error()};
            self.actual_before = self.$evaluate_value_proc();
            event_proc.$call();
            self.actual_after = self.$evaluate_value_proc();
            return ($a = ($b = ($c = ($d = ($e = (((($f = self['$change_expected?']()['$!']()) !== false && $f !== nil) ? $f : self['$changed?']())), $e !== false && $e !== nil ?self['$matches_before?']() : $e), $d !== false && $d !== nil ?self['$matches_after?']() : $d), $c !== false && $c !== nil ?self['$matches_expected_delta?']() : $c), $b !== false && $b !== nil ?self['$matches_min?']() : $b), $a !== false && $a !== nil ?self['$matches_max?']() : $a);
          };

          Opal.defn(self, '$==', def['$matches?']);

          def.$raise_block_syntax_error = function() {
            var self = this;

            return self.$raise($scope.get('SyntaxError').$new("block passed to should or should_not change must use {} instead of do/end\n"));
          };

          def.$evaluate_value_proc = function() {
            var self = this, $case = nil, val = nil;

            return (function() {$case = val = self.value_proc.$call();if ($scope.get('Enumerable')['$===']($case) || $scope.get('String')['$===']($case)) {return val.$dup()}else {return val}})();
          };

          def.$failure_message_for_should = function() {
            var $a, $b, self = this;

            if ((($a = ($b = self.eval_before, $b !== false && $b !== nil ?self['$expected_matches_actual?'](self.expected_before, self.actual_before)['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return "" + (self.$message()) + " should have initially been " + (self.expected_before.$inspect()) + ", but was " + (self.actual_before.$inspect())
            } else if ((($a = ($b = self.eval_after, $b !== false && $b !== nil ?self['$expected_matches_actual?'](self.expected_after, self.actual_after)['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return "" + (self.$message()) + " should have been changed to " + (self.$failure_message_for_expected_after()) + ", but is now " + (self.actual_after.$inspect())
            } else if ((($a = self.expected_delta) !== nil && (!$a.$$is_boolean || $a == true))) {
              return "" + (self.$message()) + " should have been changed by " + (self.expected_delta.$inspect()) + ", but was changed by " + (self.$actual_delta().$inspect())
            } else if ((($a = self.minimum) !== nil && (!$a.$$is_boolean || $a == true))) {
              return "" + (self.$message()) + " should have been changed by at least " + (self.minimum.$inspect()) + ", but was changed by " + (self.$actual_delta().$inspect())
            } else if ((($a = self.maximum) !== nil && (!$a.$$is_boolean || $a == true))) {
              return "" + (self.$message()) + " should have been changed by at most " + (self.maximum.$inspect()) + ", but was changed by " + (self.$actual_delta().$inspect())
              } else {
              return "" + (self.$message()) + " should have changed, but is still " + (self.actual_before.$inspect())
            };
          };

          def.$actual_delta = function() {
            var self = this;

            return self.actual_after['$-'](self.actual_before);
          };

          def.$failure_message_for_should_not = function() {
            var self = this;

            return "" + (self.$message()) + " should not have changed, but did change from " + (self.actual_before.$inspect()) + " to " + (self.actual_after.$inspect());
          };

          def.$by = function(expected_delta) {
            var self = this;

            self.expected_delta = expected_delta;
            return self;
          };

          def.$by_at_least = function(minimum) {
            var self = this;

            self.minimum = minimum;
            return self;
          };

          def.$by_at_most = function(maximum) {
            var self = this;

            self.maximum = maximum;
            return self;
          };

          def.$to = function(to) {
            var self = this;

            self.eval_after = true;
            self.expected_after = to;
            return self;
          };

          def.$from = function(before) {
            var self = this;

            self.eval_before = true;
            self.expected_before = before;
            return self;
          };

          def.$description = function() {
            var self = this;

            return "change #" + (self.$message());
          };

          self.$private();

          def.$failure_message_for_expected_after = function() {
            var $a, self = this;

            if ((($a = (($scope.get('RSpec')).$$scope.get('Matchers'))['$is_a_matcher?'](self.expected_after)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.expected_after.$description()
              } else {
              return self.expected_after.$inspect()
            };
          };

          def.$message = function() {
            var $a, self = this;

            return ((($a = self.message) !== false && $a !== nil) ? $a : "result");
          };

          def['$change_expected?'] = function() {
            var self = this;

            return self.expected_delta['$=='](0)['$!']();
          };

          def['$changed?'] = function() {
            var self = this;

            return self.actual_before['$=='](self.actual_after)['$!']();
          };

          def['$matches_before?'] = function() {
            var $a, self = this;

            if ((($a = self.eval_before) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self['$expected_matches_actual?'](self.expected_before, self.actual_before)
              } else {
              return true
            };
          };

          def['$matches_after?'] = function() {
            var $a, self = this;

            if ((($a = self.eval_after) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self['$expected_matches_actual?'](self.expected_after, self.actual_after)
              } else {
              return true
            };
          };

          def['$matches_expected_delta?'] = function() {
            var $a, self = this;

            if ((($a = self.expected_delta) !== nil && (!$a.$$is_boolean || $a == true))) {
              return (self.actual_before['$+'](self.expected_delta)['$=='](self.actual_after))
              } else {
              return true
            };
          };

          def['$matches_min?'] = function() {
            var $a, self = this;

            if ((($a = self.minimum) !== nil && (!$a.$$is_boolean || $a == true))) {
              return (self.actual_after['$-'](self.actual_before)['$>='](self.minimum))
              } else {
              return true
            };
          };

          def['$matches_max?'] = function() {
            var $a, self = this;

            if ((($a = self.maximum) !== nil && (!$a.$$is_boolean || $a == true))) {
              return (self.actual_after['$-'](self.actual_before)['$<='](self.maximum))
              } else {
              return true
            };
          };

          return (def['$expected_matches_actual?'] = function(expected, actual) {
            var $a, self = this;

            return ((($a = expected['$==='](actual)) !== false && $a !== nil) ? $a : actual['$=='](expected));
          }, nil) && 'expected_matches_actual?';
        })(self, null)
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/built_in/cover"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$all?', '$cover?', '$none?', '$expected']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'BuiltIn');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Cover(){};
          var self = $Cover = $klass($base, $super, 'Cover', $Cover);

          var def = self.$$proto, $scope = self.$$scope;

          def.expected = nil;
          def.$initialize = function(expected) {
            var self = this;

            expected = $slice.call(arguments, 0);
            return self.expected = expected;
          };

          def['$matches?'] = function(range) {
            var $a, $b, TMP_1, self = this;

            self.actual = range;
            return ($a = ($b = self.expected)['$all?'], $a.$$p = (TMP_1 = function(e){var self = TMP_1.$$s || this;
if (e == null) e = nil;
            return range['$cover?'](e)}, TMP_1.$$s = self, TMP_1), $a).call($b);
          };

          return (def['$does_not_match?'] = function(range) {
            var $a, $b, TMP_2, self = this;

            self.actual = range;
            return ($a = ($b = self.$expected())['$none?'], $a.$$p = (TMP_2 = function(e){var self = TMP_2.$$s || this;
if (e == null) e = nil;
            return range['$cover?'](e)}, TMP_2.$$s = self, TMP_2), $a).call($b);
          }, nil) && 'does_not_match?';
        })(self, $scope.get('BaseMatcher'))
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/built_in/eq"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$==', '$inspect', '$expected', '$actual']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'BuiltIn');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Eq(){};
          var self = $Eq = $klass($base, $super, 'Eq', $Eq);

          var def = self.$$proto, $scope = self.$$scope;

          def.$match = function(expected, actual) {
            var self = this;

            return actual['$=='](expected);
          };

          def.$failure_message_for_should = function() {
            var self = this;

            return "\nexpected: " + (self.$expected().$inspect()) + "\n     got: " + (self.$actual().$inspect()) + "\n\n(compared using ==)\n";
          };

          def.$failure_message_for_should_not = function() {
            var self = this;

            return "\nexpected: value != " + (self.$expected().$inspect()) + "\n     got: " + (self.$actual().$inspect()) + "\n\n(compared using ==)\n";
          };

          return (def['$diffable?'] = function() {
            var self = this;

            return true;
          }, nil) && 'diffable?';
        })(self, $scope.get('BaseMatcher'))
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/built_in/eql"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$eql?', '$inspect', '$expected', '$actual']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'BuiltIn');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Eql(){};
          var self = $Eql = $klass($base, $super, 'Eql', $Eql);

          var def = self.$$proto, $scope = self.$$scope;

          def.$match = function(expected, actual) {
            var self = this;

            return actual['$eql?'](expected);
          };

          def.$failure_message_for_should = function() {
            var self = this;

            return "\nexpected: " + (self.$expected().$inspect()) + "\n     got: " + (self.$actual().$inspect()) + "\n\n(compared using eql?)\n";
          };

          def.$failure_message_for_should_not = function() {
            var self = this;

            return "\nexpected: value != " + (self.$expected().$inspect()) + "\n     got: " + (self.$actual().$inspect()) + "\n\n(compared using eql?)\n";
          };

          return (def['$diffable?'] = function() {
            var self = this;

            return true;
          }, nil) && 'diffable?';
        })(self, $scope.get('BaseMatcher'))
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/built_in/equal"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$equal?', '$inspect_object', '$expected', '$actual', '$eq_expression', '$private', '$class', '$object_id', '$inspect', '$positive_expression']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'BuiltIn');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Equal(){};
          var self = $Equal = $klass($base, $super, 'Equal', $Equal);

          var def = self.$$proto, $scope = self.$$scope;

          def.$match = function(expected, actual) {
            var self = this;

            return actual['$equal?'](expected);
          };

          def.$failure_message_for_should = function() {
            var self = this;

            return "\nexpected " + (self.$inspect_object(self.$expected())) + "\n     got " + (self.$inspect_object(self.$actual())) + "\n\nCompared using equal?, which compares object identity,\nbut expected and actual are not the same object. Use\n`" + (self.$eq_expression()) + "` if you don't care about\nobject identity in this example.\n\n";
          };

          def.$failure_message_for_should_not = function() {
            var self = this;

            return "\nexpected not " + (self.$inspect_object(self.$actual())) + "\n         got " + (self.$inspect_object(self.$expected())) + "\n\nCompared using equal?, which compares object identity.\n\n";
          };

          def['$diffable?'] = function() {
            var self = this;

            return true;
          };

          self.$private();

          def.$inspect_object = function(o) {
            var self = this;

            return "#<" + (o.$class()) + ":" + (o.$object_id()) + "> => " + (o.$inspect());
          };

          return (def.$eq_expression = function() {
            var self = this;

            return (($scope.get('Expectations')).$$scope.get('Syntax')).$positive_expression("actual", "eq(expected)");
          }, nil) && 'eq_expression';
        })(self, $scope.get('BaseMatcher'))
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/built_in/exist"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$select', '$respond_to?', '$map', '$__send__', '$uniq', '$!', '$size', '$===', '$raise', '$new', '$inspect', '$first', '$+', '$last']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'BuiltIn');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Exist(){};
          var self = $Exist = $klass($base, $super, 'Exist', $Exist);

          var def = self.$$proto, $scope = self.$$scope;

          def.actual = nil;
          def.$initialize = function(expected) {
            var self = this;

            expected = $slice.call(arguments, 0);
            return self.expected = expected;
          };

          return (def['$matches?'] = function(actual) {
            var $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, self = this, predicates = nil, existence_values = nil, uniq_truthy_values = nil, $case = nil;

            self.actual = actual;
            predicates = ($a = ($b = ["exist?", "exists?"]).$select, $a.$$p = (TMP_1 = function(p){var self = TMP_1.$$s || this;
              if (self.actual == null) self.actual = nil;
if (p == null) p = nil;
            return self.actual['$respond_to?'](p)}, TMP_1.$$s = self, TMP_1), $a).call($b);
            existence_values = ($a = ($c = predicates).$map, $a.$$p = (TMP_2 = function(p){var self = TMP_2.$$s || this, $a;
              if (self.actual == null) self.actual = nil;
              if (self.expected == null) self.expected = nil;
if (p == null) p = nil;
            return ($a = self.actual).$__send__.apply($a, [p].concat(self.expected))}, TMP_2.$$s = self, TMP_2), $a).call($c);
            uniq_truthy_values = ($a = ($d = existence_values).$map, $a.$$p = (TMP_3 = function(v){var self = TMP_3.$$s || this;
if (v == null) v = nil;
            return v['$!']()['$!']()}, TMP_3.$$s = self, TMP_3), $a).call($d).$uniq();
            return (function() {$case = uniq_truthy_values.$size();if ((0)['$===']($case)) {return self.$raise($scope.get('NoMethodError').$new("" + (self.actual.$inspect()) + " does not respond to either #exist? or #exists?"))}else if ((1)['$===']($case)) {return existence_values.$first()}else {return self.$raise("#exist? and #exists? returned different values:\n\n"['$+'](" exist?: " + (existence_values.$first()) + "\n")['$+']("exists?: " + (existence_values.$last())))}})();
          }, nil) && 'matches?';
        })(self, $scope.get('BaseMatcher'))
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/built_in/has"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$__send__', '$predicate', '$failure_message_args_description', '$join', '$compact', '$method_description', '$args_description', '$private', '$to_sym', '$sub', '$to_s', '$gsub', '$empty?', '$map', '$inspect']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'BuiltIn');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Has(){};
          var self = $Has = $klass($base, $super, 'Has', $Has);

          var def = self.$$proto, $scope = self.$$scope;

          def.expected = def.args = nil;
          def.$initialize = function(expected, args) {
            var $a, self = this;

            args = $slice.call(arguments, 1);
            return $a = [expected, args], self.expected = $a[0], self.args = $a[1];
          };

          def['$matches?'] = function(actual) {
            var $a, self = this;

            return ($a = actual).$__send__.apply($a, [self.$predicate(self.expected)].concat(self.args));
          };

          Opal.defn(self, '$==', def['$matches?']);

          def.$failure_message_for_should = function() {
            var self = this;

            return "expected #" + (self.$predicate(self.expected)) + (self.$failure_message_args_description()) + " to return true, got false";
          };

          def.$failure_message_for_should_not = function() {
            var self = this;

            return "expected #" + (self.$predicate(self.expected)) + (self.$failure_message_args_description()) + " to return false, got true";
          };

          def.$description = function() {
            var self = this;

            return [self.$method_description(self.expected), self.$args_description()].$compact().$join(" ");
          };

          self.$private();

          def.$predicate = function(sym) {
            var self = this;

            return ((("") + (sym.$to_s().$sub("have_", "has_"))) + "?").$to_sym();
          };

          def.$method_description = function(method) {
            var self = this;

            return method.$to_s().$gsub("_", " ");
          };

          def.$args_description = function() {
            var $a, $b, TMP_1, self = this;

            if ((($a = self.args['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil};
            return ($a = ($b = self.args).$map, $a.$$p = (TMP_1 = function(arg){var self = TMP_1.$$s || this;
if (arg == null) arg = nil;
            return arg.$inspect()}, TMP_1.$$s = self, TMP_1), $a).call($b).$join(", ");
          };

          return (def.$failure_message_args_description = function() {
            var self = this, desc = nil;

            desc = self.$args_description();
            if (desc !== false && desc !== nil) {
              return "(" + (desc) + ")"
              } else {
              return nil
            };
          }, nil) && 'failure_message_args_description';
        })(self, null)
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/built_in/have"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  return nil
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/built_in/include"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$perform_match', '$expected_to_sentence', '$none?', '$is_a_matcher?', '$private', '$__send__', '$comparing_hash_values?', '$has_key?', '$==', '$[]', '$comparing_hash_keys?', '$comparing_with_matcher?', '$actual', '$any?', '$matches?', '$include?', '$is_a?', '$!']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'BuiltIn');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Include(){};
          var self = $Include = $klass($base, $super, 'Include', $Include);

          var def = self.$$proto, $scope = self.$$scope;

          def.actual = def.expected = nil;
          def.$initialize = function(expected) {
            var self = this;

            expected = $slice.call(arguments, 0);
            return self.expected = expected;
          };

          def['$matches?'] = function(actual) {
            var self = this;

            self.actual = actual;
            return self.$perform_match("all?", "all?", self.actual, self.expected);
          };

          def['$does_not_match?'] = function(actual) {
            var self = this;

            self.actual = actual;
            return self.$perform_match("none?", "any?", self.actual, self.expected);
          };

          def.$description = function() {
            var self = this;

            return "include" + (self.$expected_to_sentence());
          };

          def['$diffable?'] = function() {
            var $a, $b, TMP_1, self = this;

            return ($a = ($b = self.expected)['$none?'], $a.$$p = (TMP_1 = function(e){var self = TMP_1.$$s || this;
if (e == null) e = nil;
            return (($scope.get('RSpec')).$$scope.get('Matchers'))['$is_a_matcher?'](e)}, TMP_1.$$s = self, TMP_1), $a).call($b);
          };

          self.$private();

          def.$perform_match = function(predicate, hash_predicate, actuals, expecteds) {
            var $a, $b, TMP_2, self = this;

            return ($a = ($b = expecteds).$__send__, $a.$$p = (TMP_2 = function(expected){var self = TMP_2.$$s || this, $a, $b, TMP_3, $c, TMP_4;
if (expected == null) expected = nil;
            if ((($a = self['$comparing_hash_values?'](actuals, expected)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return ($a = ($b = expected).$__send__, $a.$$p = (TMP_3 = function(k, v){var self = TMP_3.$$s || this, $a;
if (k == null) k = nil;if (v == null) v = nil;
                return ($a = actuals['$has_key?'](k), $a !== false && $a !== nil ?actuals['$[]'](k)['$=='](v) : $a)}, TMP_3.$$s = self, TMP_3), $a).call($b, hash_predicate)
              } else if ((($a = self['$comparing_hash_keys?'](actuals, expected)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return actuals['$has_key?'](expected)
              } else if ((($a = self['$comparing_with_matcher?'](self.$actual(), expected)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return ($a = ($c = self.$actual())['$any?'], $a.$$p = (TMP_4 = function(value){var self = TMP_4.$$s || this;
if (value == null) value = nil;
                return expected['$matches?'](value)}, TMP_4.$$s = self, TMP_4), $a).call($c)
                } else {
                return actuals['$include?'](expected)
              }}, TMP_2.$$s = self, TMP_2), $a).call($b, predicate);
          };

          def['$comparing_hash_keys?'] = function(actual, expected) {
            var $a, self = this;

            return ($a = actual['$is_a?']($scope.get('Hash')), $a !== false && $a !== nil ?expected['$is_a?']($scope.get('Hash'))['$!']() : $a);
          };

          def['$comparing_hash_values?'] = function(actual, expected) {
            var $a, self = this;

            return ($a = actual['$is_a?']($scope.get('Hash')), $a !== false && $a !== nil ?expected['$is_a?']($scope.get('Hash')) : $a);
          };

          return (def['$comparing_with_matcher?'] = function(actual, expected) {
            var $a, self = this;

            return ($a = actual['$is_a?']($scope.get('Array')), $a !== false && $a !== nil ?(($scope.get('RSpec')).$$scope.get('Matchers'))['$is_a_matcher?'](expected) : $a);
          }, nil) && 'comparing_with_matcher?';
        })(self, $scope.get('BaseMatcher'))
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/built_in/match"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$match']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'BuiltIn');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Match(){};
          var self = $Match = $klass($base, $super, 'Match', $Match);

          var def = self.$$proto, $scope = self.$$scope;

          def.$match = function(expected, actual) {
            var self = this;

            return actual.$match(expected);
          };

          return (def['$diffable?'] = function() {
            var self = this;

            return true;
          }, nil) && 'diffable?';
        })(self, $scope.get('BaseMatcher'))
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/built_in/match_array"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$respond_to?', '$difference_between_arrays', '$&', '$empty?', '$actual', '$inspect', '$safe_sort', '$expected', '$+', '$_pretty_print', '$private', '$sort', '$dup', '$to_ary', '$each', '$index', '$delete_at']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'BuiltIn');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $MatchArray(){};
          var self = $MatchArray = $klass($base, $super, 'MatchArray', $MatchArray);

          var def = self.$$proto, $scope = self.$$scope;

          def.extra_items = def.missing_items = nil;
          def.$match = function(expected, actual) {
            var $a, self = this;

            if ((($a = actual['$respond_to?']("to_ary")) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              return false
            };
            self.extra_items = self.$difference_between_arrays(actual, expected);
            self.missing_items = self.$difference_between_arrays(expected, actual);
            return self.extra_items['$empty?']()['$&'](self.missing_items['$empty?']());
          };

          def.$failure_message_for_should = function() {
            var $a, self = this, message = nil;

            if ((($a = self.$actual()['$respond_to?']("to_ary")) !== nil && (!$a.$$is_boolean || $a == true))) {
              message = "expected collection contained:  " + (self.$safe_sort(self.$expected()).$inspect()) + "\n";
              message = message['$+']("actual collection contained:    " + (self.$safe_sort(self.$actual()).$inspect()) + "\n");
              if ((($a = self.missing_items['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                } else {
                message = message['$+']("the missing elements were:      " + (self.$safe_sort(self.missing_items).$inspect()) + "\n")
              };
              if ((($a = self.extra_items['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                } else {
                message = message['$+']("the extra elements were:        " + (self.$safe_sort(self.extra_items).$inspect()) + "\n")
              };
              } else {
              message = "expected an array, actual collection was " + (self.$actual().$inspect())
            };
            return message;
          };

          def.$failure_message_for_should_not = function() {
            var self = this;

            return "Matcher does not support should_not";
          };

          def.$description = function() {
            var self = this;

            return "contain exactly " + (self.$_pretty_print(self.$expected()));
          };

          self.$private();

          def.$safe_sort = function(array) {
            var self = this;

            try {return array.$sort() } catch ($err) { return array };
          };

          return (def.$difference_between_arrays = function(array_1, array_2) {
            var $a, $b, TMP_1, self = this, difference = nil;

            difference = array_1.$to_ary().$dup();
            ($a = ($b = array_2.$to_ary()).$each, $a.$$p = (TMP_1 = function(element){var self = TMP_1.$$s || this, $a, index = nil;
if (element == null) element = nil;
            if ((($a = index = difference.$index(element)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return difference.$delete_at(index)
                } else {
                return nil
              }}, TMP_1.$$s = self, TMP_1), $a).call($b);
            return difference;
          }, nil) && 'difference_between_arrays';
        })(self, $scope.get('BaseMatcher'))
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/built_in/raise_error"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$===', '$raise_message_already_set', '$respond_to?', '$warn', '$inspect', '$call', '$==', '$verify_message', '$eval_block', '$expectation_matched?', '$error_and_message_match?', '$block_matches?', '$prevent_invalid_expectations', '$!', '$matches?', '$[]', '$=~', '$message', '$expected_error', '$given_error', '$private', '$expecting_specific_exception?', '$new', '$raise', '$backtrace_formatter', '$configuration', '$format_backtrace', '$backtrace', '$join']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'BuiltIn');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $RaiseError(){};
          var self = $RaiseError = $klass($base, $super, 'RaiseError', $RaiseError);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

          def.expected_message = def.block = def.actual_error = def.expected_error = def.raised_expected_error = def.with_expected_message = def.eval_block = def.eval_block_passed = nil;
          def.$initialize = TMP_1 = function(expected_error_or_message, expected_message) {
            var $a, self = this, $iter = TMP_1.$$p, block = $iter || nil, $case = nil;

            if (expected_error_or_message == null) {
              expected_error_or_message = $scope.get('Exception')
            }
            if (expected_message == null) {
              expected_message = nil
            }
            TMP_1.$$p = null;
            self.block = block;
            self.actual_error = nil;
            return (function() {$case = expected_error_or_message;if ($scope.get('String')['$===']($case) || $scope.get('Regexp')['$===']($case)) {return $a = [$scope.get('Exception'), expected_error_or_message], self.expected_error = $a[0], self.expected_message = $a[1]}else {return $a = [expected_error_or_message, expected_message], self.expected_error = $a[0], self.expected_message = $a[1]}})();
          };

          def.$with_message = function(expected_message) {
            var $a, self = this;

            if ((($a = self.expected_message) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$raise_message_already_set()};
            self.expected_message = expected_message;
            return self;
          };

          def['$matches?'] = TMP_2 = function(given_proc, negative_expectation) {
            var $a, $b, $c, self = this, $iter = TMP_2.$$p, block = $iter || nil;

            if (negative_expectation == null) {
              negative_expectation = false
            }
            TMP_2.$$p = null;
            ((($a = self.block) !== false && $a !== nil) ? $a : self.block = block);
            self.raised_expected_error = false;
            self.with_expected_message = false;
            self.eval_block = false;
            self.eval_block_passed = false;
            if ((($a = given_proc['$respond_to?']("call")) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              Opal.get('Kernel').$warn("`raise_error` was called with non-proc object " + (given_proc.$inspect()));
              return false;
            };
            try {
            given_proc.$call()
            } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {self.actual_error = $err;
              if ((($a = ((($b = self.actual_error['$=='](self.expected_error)) !== false && $b !== nil) ? $b : self.expected_error['$==='](self.actual_error))) !== nil && (!$a.$$is_boolean || $a == true))) {
                self.raised_expected_error = true;
                self.with_expected_message = self.$verify_message();}
              }else { throw $err; }
            };
            if (negative_expectation !== false && negative_expectation !== nil) {
            } else if ((($a = ($b = ($c = self.raised_expected_error, $c !== false && $c !== nil ?self.with_expected_message : $c), $b !== false && $b !== nil ?self.block : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$eval_block()};
            return self['$expectation_matched?']();
          };

          Opal.defn(self, '$==', def['$matches?']);

          def['$expectation_matched?'] = function() {
            var $a, self = this;

            return ($a = self['$error_and_message_match?'](), $a !== false && $a !== nil ?self['$block_matches?']() : $a);
          };

          def['$error_and_message_match?'] = function() {
            var $a, self = this;

            return ($a = self.raised_expected_error, $a !== false && $a !== nil ?self.with_expected_message : $a);
          };

          def['$block_matches?'] = function() {
            var $a, self = this;

            if ((($a = self.eval_block) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.eval_block_passed
              } else {
              return true
            };
          };

          def['$does_not_match?'] = function(given_proc) {
            var self = this;

            self.$prevent_invalid_expectations();
            return self['$matches?'](given_proc, "negative_expectation")['$!']();
          };

          def.$eval_block = function() {
            var self = this, err = nil;

            self.eval_block = true;
            try {
            self.block['$[]'](self.actual_error);
              return self.eval_block_passed = true;
            } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {err = $err;
              return self.actual_error = err
              }else { throw $err; }
            };
          };

          def.$verify_message = function() {
            var self = this, $case = nil;

            return (function() {$case = self.expected_message;if (nil['$===']($case)) {return true}else if ($scope.get('Regexp')['$===']($case)) {return self.expected_message['$=~'](self.actual_error.$message())}else {return self.expected_message['$=='](self.actual_error.$message())}})();
          };

          def.$failure_message_for_should = function() {
            var $a, self = this;

            if ((($a = self.eval_block) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.actual_error.$message()
              } else {
              return "expected " + (self.$expected_error()) + (self.$given_error())
            };
          };

          def.$failure_message_for_should_not = function() {
            var self = this;

            return "expected no " + (self.$expected_error()) + (self.$given_error());
          };

          def.$description = function() {
            var self = this;

            return "raise " + (self.$expected_error());
          };

          self.$private();

          def.$prevent_invalid_expectations = function() {
            var $a, $b, self = this, what_to_raise = nil, specific_class_error = nil;

            if ((($a = (((($b = self['$expecting_specific_exception?']()) !== false && $b !== nil) ? $b : self.expected_message))) !== nil && (!$a.$$is_boolean || $a == true))) {
              what_to_raise = (function() {if ((($a = ($b = self['$expecting_specific_exception?'](), $b !== false && $b !== nil ?self.expected_message : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return "`expect { }.not_to raise_error(SpecificErrorClass, message)`"
              } else if ((($a = self['$expecting_specific_exception?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                return "`expect { }.not_to raise_error(SpecificErrorClass)`"
              } else if ((($a = self.expected_message) !== nil && (!$a.$$is_boolean || $a == true))) {
                return "`expect { }.not_to raise_error(message)`"
                } else {
                return nil
              }; return nil; })();
              specific_class_error = $scope.get('ArgumentError').$new("" + (what_to_raise) + " is not valid, use `expect { }.not_to raise_error` (with no args) instead");
              return self.$raise(specific_class_error);
              } else {
              return nil
            };
          };

          def.$expected_error = function() {
            var self = this, $case = nil;

            return (function() {$case = self.expected_message;if (nil['$===']($case)) {return self.expected_error.$inspect()}else if ($scope.get('Regexp')['$===']($case)) {return "" + (self.expected_error) + " with message matching " + (self.expected_message.$inspect())}else {return "" + (self.expected_error) + " with " + (self.expected_message.$inspect())}})();
          };

          def.$format_backtrace = function(backtrace) {
            var self = this, formatter = nil;

            formatter = $scope.get('Matchers').$configuration().$backtrace_formatter();
            return formatter.$format_backtrace(backtrace);
          };

          def.$given_error = function() {
            var $a, self = this, backtrace = nil;

            if ((($a = self.actual_error) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              return " but nothing was raised"
            };
            backtrace = self.$format_backtrace(self.actual_error.$backtrace());
            return [", got " + (self.actual_error.$inspect()) + " with backtrace:"].concat(backtrace).$join("\n  # ");
          };

          def['$expecting_specific_exception?'] = function() {
            var self = this;

            return self.expected_error['$==']($scope.get('Exception'))['$!']();
          };

          return (def.$raise_message_already_set = function() {
            var self = this;

            return self.$raise("`expect { }.to raise_error(message).with_message(message)` is not valid. The matcher only allows the expected message to be specified once");
          }, nil) && 'raise_message_already_set';
        })(self, null)
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/built_in/respond_to"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$empty?', '$find_failing_method_names', '$inspect', '$join', '$collect', '$with_arity', '$sub', '$failure_message_for_should', '$pp_names', '$private', '$__send__', '$respond_to?', '$matches_arity?', '$arity', '$method', '$<', '$<=', '$~', '$==', '$nil?', '$length', '$first']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'BuiltIn');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $RespondTo(){};
          var self = $RespondTo = $klass($base, $super, 'RespondTo', $RespondTo);

          var def = self.$$proto, $scope = self.$$scope;

          def.actual = def.failing_method_names = def.names = def.expected_arity = nil;
          def.$initialize = function(names) {
            var self = this;

            names = $slice.call(arguments, 0);
            self.names = names;
            return self.expected_arity = nil;
          };

          def['$matches?'] = function(actual) {
            var self = this;

            return self.$find_failing_method_names(actual, "reject")['$empty?']();
          };

          Opal.defn(self, '$==', def['$matches?']);

          def['$does_not_match?'] = function(actual) {
            var self = this;

            return self.$find_failing_method_names(actual, "select")['$empty?']();
          };

          def.$failure_message_for_should = function() {
            var $a, $b, TMP_1, self = this;

            return "expected " + (self.actual.$inspect()) + " to respond to " + (($a = ($b = self.failing_method_names).$collect, $a.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this;
if (name == null) name = nil;
            return name.$inspect()}, TMP_1.$$s = self, TMP_1), $a).call($b).$join(", ")) + (self.$with_arity());
          };

          def.$failure_message_for_should_not = function() {
            var self = this;

            return self.$failure_message_for_should().$sub(/to respond to/, "not to respond to");
          };

          def.$description = function() {
            var self = this;

            return "respond to " + (self.$pp_names()) + (self.$with_arity());
          };

          def.$with = function(n) {
            var self = this;

            self.expected_arity = n;
            return self;
          };

          def.$argument = function() {
            var self = this;

            return self;
          };

          Opal.defn(self, '$arguments', def.$argument);

          self.$private();

          def.$find_failing_method_names = function(actual, filter_method) {
            var $a, $b, TMP_2, self = this;

            self.actual = actual;
            return self.failing_method_names = ($a = ($b = self.names).$__send__, $a.$$p = (TMP_2 = function(name){var self = TMP_2.$$s || this, $a;
              if (self.actual == null) self.actual = nil;
if (name == null) name = nil;
            return ($a = self.actual['$respond_to?'](name), $a !== false && $a !== nil ?self['$matches_arity?'](actual, name) : $a)}, TMP_2.$$s = self, TMP_2), $a).call($b, filter_method);
          };

          def['$matches_arity?'] = function(actual, name) {
            var $a, self = this, actual_arity = nil;

            if ((($a = self.expected_arity) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              return true
            };
            actual_arity = actual.$method(name).$arity();
            if (actual_arity['$<'](0)) {
              return actual_arity['$~']()['$<='](self.expected_arity)
              } else {
              return actual_arity['$=='](self.expected_arity)
            };
          };

          def.$with_arity = function() {
            var $a, self = this;

            if ((($a = self.expected_arity['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return ""
              } else {
              return " with " + (self.expected_arity) + " argument" + ((function() {if (self.expected_arity['$=='](1)) {
                return ""
                } else {
                return "s"
              }; return nil; })())
            };
          };

          return (def.$pp_names = function() {
            var self = this;

            if (self.names.$length()['$=='](1)) {
              return "#" + (self.names.$first())
              } else {
              return self.names.$inspect()
            };
          }, nil) && 'pp_names';
        })(self, null)
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/built_in/start_and_end_with"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$==', '$length', '$first', '$respond_to?', '$raise', '$new', '$inspect', '$subset_matches?', '$element_matches?', '$downcase', '$sub', '$last', '$split', '$name', '$class', '$[]', '$-@']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'BuiltIn');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $StartAndEndWith(){};
          var self = $StartAndEndWith = $klass($base, $super, 'StartAndEndWith', $StartAndEndWith);

          var def = self.$$proto, $scope = self.$$scope;

          def.expected = def.actual = nil;
          def.$initialize = function(expected) {
            var self = this;

            expected = $slice.call(arguments, 0);
            return self.expected = (function() {if (expected.$length()['$=='](1)) {
              return expected.$first()
              } else {
              return expected
            }; return nil; })();
          };

          def['$matches?'] = function(actual) {
            var $a, self = this;

            self.actual = (function() {if ((($a = actual['$respond_to?']("[]")) !== nil && (!$a.$$is_boolean || $a == true))) {
              return actual
              } else {
              return (self.$raise($scope.get('ArgumentError').$new("" + (actual.$inspect()) + " does not respond to :[]")))
            }; return nil; })();
            try {
            if ((($a = self.expected['$respond_to?']("length")) !== nil && (!$a.$$is_boolean || $a == true))) {
                return self['$subset_matches?'](self.expected, self.actual)
                } else {
                return self['$element_matches?'](self.expected, self.actual)
              }
            } catch ($err) {if (Opal.rescue($err, [$scope.get('ArgumentError')])) {
              return self.$raise($scope.get('ArgumentError').$new("" + (actual.$inspect()) + " does not have ordered elements"))
              }else { throw $err; }
            };
          };

          def.$failure_message_for_should = function() {
            var self = this;

            return "expected " + (self.actual.$inspect()) + " to " + (self.$class().$name().$split("::").$last().$sub(/With/, "").$downcase()) + " with " + (self.expected.$inspect());
          };

          return (def.$failure_message_for_should_not = function() {
            var self = this;

            return "expected " + (self.actual.$inspect()) + " not to " + (self.$class().$name().$split("::").$last().$sub(/With/, "").$downcase()) + " with " + (self.expected.$inspect());
          }, nil) && 'failure_message_for_should_not';
        })(self, $scope.get('BaseMatcher'));

        (function($base, $super) {
          function $StartWith(){};
          var self = $StartWith = $klass($base, $super, 'StartWith', $StartWith);

          var def = self.$$proto, $scope = self.$$scope;

          def.actual = def.expected = nil;
          def['$subset_matches?'] = function(expected, actual) {
            var self = this;

            return actual['$[]'](0, expected.$length())['$=='](expected);
          };

          return (def['$element_matches?'] = function(expected, actual) {
            var self = this;

            return self.actual['$[]'](0)['$=='](self.expected);
          }, nil) && 'element_matches?';
        })(self, $scope.get('StartAndEndWith'));

        (function($base, $super) {
          function $EndWith(){};
          var self = $EndWith = $klass($base, $super, 'EndWith', $EndWith);

          var def = self.$$proto, $scope = self.$$scope;

          def['$subset_matches?'] = function(expected, actual) {
            var self = this;

            return actual['$[]'](expected.$length()['$-@'](), expected.$length())['$=='](expected);
          };

          return (def['$element_matches?'] = function(expected, actual) {
            var self = this;

            return actual['$[]'](-1)['$=='](expected);
          }, nil) && 'element_matches?';
        })(self, $scope.get('StartAndEndWith'));
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/built_in/satisfy"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$call']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'BuiltIn');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Satisfy(){};
          var self = $Satisfy = $klass($base, $super, 'Satisfy', $Satisfy);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

          def.block = def.actual = nil;
          def.$initialize = TMP_1 = function() {
            var self = this, $iter = TMP_1.$$p, block = $iter || nil;

            TMP_1.$$p = null;
            return self.block = block;
          };

          def['$matches?'] = TMP_2 = function(actual) {
            var self = this, $iter = TMP_2.$$p, block = $iter || nil;

            TMP_2.$$p = null;
            if (block !== false && block !== nil) {
              self.block = block};
            self.actual = actual;
            return self.block.$call(actual);
          };

          Opal.defn(self, '$==', def['$matches?']);

          def.$failure_message_for_should = function() {
            var self = this;

            return "expected " + (self.actual) + " to satisfy block";
          };

          def.$failure_message_for_should_not = function() {
            var self = this;

            return "expected " + (self.actual) + " not to satisfy block";
          };

          return (def.$description = function() {
            var self = this;

            return "satisfy block";
          }, nil) && 'description';
        })(self, null)
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/built_in/throw_symbol"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$nil?', '$call', '$catch', '$throw', '$==', '$=~', '$message', '$raise', '$to_sym', '$!', '$&', '$expected', '$caught', '$private', '$throw_description', '$is_a?', '$inspect', '$+']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'BuiltIn');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $ThrowSymbol(){};
          var self = $ThrowSymbol = $klass($base, $super, 'ThrowSymbol', $ThrowSymbol);

          var def = self.$$proto, $scope = self.$$scope;

          def.expected_symbol = def.caught_arg = def.caught_symbol = def.expected_arg = nil;
          def.$initialize = function(expected_symbol, expected_arg) {
            var self = this;

            if (expected_symbol == null) {
              expected_symbol = nil
            }
            if (expected_arg == null) {
              expected_arg = nil
            }
            self.expected_symbol = expected_symbol;
            self.expected_arg = expected_arg;
            return self.caught_symbol = self.caught_arg = nil;
          };

          def['$matches?'] = function(given_proc) {
            var $a, $b, TMP_1, self = this, e = nil, other_exception = nil;

            try {
            try {
            if ((($a = self.expected_symbol['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                return given_proc.$call()
                } else {
                self.caught_arg = ($a = ($b = self).$catch, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2;
                  if (self.expected_symbol == null) self.expected_symbol = nil;

                return ($a = ($b = self).$catch, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

                  given_proc.$call();
                    return self.$throw("proc_did_not_throw_anything", "nothing_thrown");}, TMP_2.$$s = self, TMP_2), $a).call($b, self.expected_symbol)}, TMP_1.$$s = self, TMP_1), $a).call($b, "proc_did_not_throw_anything");
                if (self.caught_arg['$==']("nothing_thrown")) {
                  return self.caught_arg = nil
                  } else {
                  return self.caught_symbol = self.expected_symbol
                };
              }
            } catch ($err) {if (Opal.rescue($err, [$scope.get('NameError'), $scope.get('ArgumentError')])) {e = $err;
              if ((($a = e.$message()['$=~'](/uncaught throw (`|\:)([a-zA-Z0-9_]*)(')?/)) !== nil && (!$a.$$is_boolean || $a == true))) {
                } else {
                other_exception = e;
                self.$raise();
              };
              return self.caught_symbol = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$to_sym();
              }else if (true) {other_exception = $err;
              self.$raise()
              }else { throw $err; }
            }
            } finally {
            if (other_exception !== false && other_exception !== nil) {
            } else if ((($a = self.expected_symbol['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.caught_symbol['$nil?']()['$!']()
            } else if ((($a = self.expected_arg['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.caught_symbol['$=='](self.expected_symbol)
              } else {
              return (self.caught_symbol['$=='](self.expected_symbol))['$&']((self.caught_arg['$=='](self.expected_arg)))
            }
            };
          };

          Opal.defn(self, '$==', def['$matches?']);

          def.$failure_message_for_should = function() {
            var self = this;

            return "expected " + (self.$expected()) + " to be thrown, got " + (self.$caught());
          };

          def.$failure_message_for_should_not = function() {
            var $a, self = this;

            return "expected " + (self.$expected("no Symbol")) + ((function() {if ((($a = self.expected_symbol) !== nil && (!$a.$$is_boolean || $a == true))) {
              return " not"
              } else {
              return nil
            }; return nil; })()) + " to be thrown, got " + (self.$caught());
          };

          def.$description = function() {
            var self = this;

            return "throw " + (self.$expected());
          };

          self.$private();

          def.$expected = function(symbol_desc) {
            var $a, self = this;

            if (symbol_desc == null) {
              symbol_desc = "a Symbol"
            }
            return self.$throw_description(((($a = self.expected_symbol) !== false && $a !== nil) ? $a : symbol_desc), self.expected_arg);
          };

          def.$caught = function() {
            var $a, self = this;

            return self.$throw_description(((($a = self.caught_symbol) !== false && $a !== nil) ? $a : "nothing"), self.caught_arg);
          };

          return (def.$throw_description = function(symbol, arg) {
            var $a, $b, self = this, symbol_description = nil, arg_description = nil;

            symbol_description = (function() {if ((($a = symbol['$is_a?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return symbol
              } else {
              return symbol.$inspect()
            }; return nil; })();
            arg_description = (function() {if (arg !== false && arg !== nil) {
              return " with " + (arg.$inspect())
            } else if ((($a = ($b = self.expected_arg, $b !== false && $b !== nil ?self.caught_symbol['$=='](self.expected_symbol) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return " with no argument"
              } else {
              return ""
            }; return nil; })();
            return symbol_description['$+'](arg_description);
          }, nil) && 'throw_description';
        })(self, null)
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/built_in/yield"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$new', '$assert_valid_expect_block!', '$call', '$assert_used!', '$attr_accessor', '$num_yields=', '$yielded_args=', '$+', '$num_yields', '$<<', '$yielded_args', '$first', '$===', '$raise', '$map', '$==', '$size', '$arity', '$probe', '$send', '$yielded_once?', '$exactly', '$set_expected_yields_count', '$tap', '$relativity_failure_message', '$private', '$human_readable_expecation_type', '$human_readable_count', '$empty?', '$single_yield_args', '$failure_reason', '$zero?', '$inspect', '$args_match?', '$positive_failure_reason', '$negative_failure_reason', '$join', '$all_args_match?', '$!', '$all?', '$zip', '$successive_yield_args']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'BuiltIn');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $YieldProbe(){};
          var self = $YieldProbe = $klass($base, $super, 'YieldProbe', $YieldProbe);

          var def = self.$$proto, $scope = self.$$scope;

          def.used = nil;
          Opal.defs(self, '$probe', function(block) {
            var self = this, probe = nil;

            probe = self.$new();
            self['$assert_valid_expect_block!'](block);
            block.$call(probe);
            probe['$assert_used!']();
            return probe;
          });

          self.$attr_accessor("num_yields", "yielded_args");

          def.$initialize = function() {
            var $a, self = this;

            self.used = false;
            return $a = [0, []], self['$num_yields=']($a[0]), self['$yielded_args=']($a[1]);
          };

          def.$to_proc = function() {
            var $a, $b, TMP_1, self = this, probe = nil;

            self.used = true;
            probe = self;
            return ($a = ($b = $scope.get('Proc')).$new, $a.$$p = (TMP_1 = function(args){var self = TMP_1.$$s || this, $a;
args = $slice.call(arguments, 0);
            ($a = probe, $a['$num_yields=']($a.$num_yields()['$+'](1)));
              probe.$yielded_args()['$<<'](args);
              return nil;}, TMP_1.$$s = self, TMP_1), $a).call($b);
          };

          def.$single_yield_args = function() {
            var self = this;

            return self.$yielded_args().$first();
          };

          def['$yielded_once?'] = function(matcher_name) {
            var self = this, $case = nil;

            return (function() {$case = self.$num_yields();if ((1)['$===']($case)) {return true}else if ((0)['$===']($case)) {return false}else {return self.$raise(((("The ") + (matcher_name)) + " matcher is not designed to be used with a ")['$+']("method that yields multiple times. Use the yield_successive_args ")['$+']("matcher for that case."))}})();
          };

          def.$successive_yield_args = function() {
            var $a, $b, TMP_2, self = this;

            return ($a = ($b = self.$yielded_args()).$map, $a.$$p = (TMP_2 = function(arg_array){var self = TMP_2.$$s || this;
if (arg_array == null) arg_array = nil;
            if (arg_array.$size()['$=='](1)) {
                return arg_array.$first()
                } else {
                return arg_array
              }}, TMP_2.$$s = self, TMP_2), $a).call($b);
          };

          def['$assert_used!'] = function() {
            var $a, self = this;

            if ((($a = self.used) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil};
            return self.$raise("You must pass the argument yielded to your expect block on "['$+']("to the method-under-test as a block. It acts as a probe that ")['$+']("allows the matcher to detect whether or not the method-under-test ")['$+']("yields, and, if so, how many times, and what the yielded arguments ")['$+']("are."));
          };

          return (Opal.defs(self, '$assert_valid_expect_block!', function(block) {
            var self = this;

            if (block.$arity()['$=='](1)) {
              return nil};
            return self.$raise("Your expect block must accept an argument to be used with this "['$+']("matcher. Pass the argument as a block on to the method you are testing."));
          }), nil) && 'assert_valid_expect_block!';
        })(self, null);

        (function($base, $super) {
          function $YieldControl(){};
          var self = $YieldControl = $klass($base, $super, 'YieldControl', $YieldControl);

          var def = self.$$proto, $scope = self.$$scope;

          def.expectation_type = def.expected_yields_count = nil;
          def.$initialize = function() {
            var self = this;

            self.expectation_type = nil;
            return self.expected_yields_count = nil;
          };

          def['$matches?'] = function(block) {
            var $a, self = this, probe = nil;

            probe = $scope.get('YieldProbe').$probe(block);
            if ((($a = self.expectation_type) !== nil && (!$a.$$is_boolean || $a == true))) {
              return probe.$num_yields().$send(self.expectation_type, self.expected_yields_count)
              } else {
              return probe['$yielded_once?']("yield_control")
            };
          };

          def.$once = function() {
            var self = this;

            self.$exactly(1);
            return self;
          };

          def.$twice = function() {
            var self = this;

            self.$exactly(2);
            return self;
          };

          def.$exactly = function(number) {
            var self = this;

            self.$set_expected_yields_count("==", number);
            return self;
          };

          def.$at_most = function(number) {
            var self = this;

            self.$set_expected_yields_count("<=", number);
            return self;
          };

          def.$at_least = function(number) {
            var self = this;

            self.$set_expected_yields_count(">=", number);
            return self;
          };

          def.$times = function() {
            var self = this;

            return self;
          };

          def.$failure_message_for_should = function() {
            var $a, $b, TMP_3, self = this;

            return ($a = ($b = "expected given block to yield control").$tap, $a.$$p = (TMP_3 = function(failure_message){var self = TMP_3.$$s || this;
if (failure_message == null) failure_message = nil;
            return failure_message['$<<'](self.$relativity_failure_message())}, TMP_3.$$s = self, TMP_3), $a).call($b);
          };

          def.$failure_message_for_should_not = function() {
            var $a, $b, TMP_4, self = this;

            return ($a = ($b = "expected given block not to yield control").$tap, $a.$$p = (TMP_4 = function(failure_message){var self = TMP_4.$$s || this;
if (failure_message == null) failure_message = nil;
            return failure_message['$<<'](self.$relativity_failure_message())}, TMP_4.$$s = self, TMP_4), $a).call($b);
          };

          self.$private();

          def.$set_expected_yields_count = function(relativity, n) {
            var self = this, $case = nil;

            self.expectation_type = relativity;
            return self.expected_yields_count = (function() {$case = n;if ($scope.get('Numeric')['$===']($case)) {return n}else if ("once"['$===']($case)) {return 1}else if ("twice"['$===']($case)) {return 2}else { return nil }})();
          };

          def.$relativity_failure_message = function() {
            var $a, self = this;

            if ((($a = self.expected_yields_count) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              return ""
            };
            return " " + (self.$human_readable_expecation_type()) + (self.$human_readable_count());
          };

          def.$human_readable_expecation_type = function() {
            var self = this, $case = nil;

            return (function() {$case = self.expectation_type;if ("<="['$===']($case)) {return "at most "}else if (">="['$===']($case)) {return "at least "}else {return ""}})();
          };

          return (def.$human_readable_count = function() {
            var self = this, $case = nil;

            return (function() {$case = self.expected_yields_count;if ((1)['$===']($case)) {return "once"}else if ((2)['$===']($case)) {return "twice"}else {return "" + (self.expected_yields_count) + " times"}})();
          }, nil) && 'human_readable_count';
        })(self, $scope.get('BaseMatcher'));

        (function($base, $super) {
          function $YieldWithNoArgs(){};
          var self = $YieldWithNoArgs = $klass($base, $super, 'YieldWithNoArgs', $YieldWithNoArgs);

          var def = self.$$proto, $scope = self.$$scope;

          def.probe = nil;
          def['$matches?'] = function(block) {
            var $a, self = this;

            self.probe = $scope.get('YieldProbe').$probe(block);
            return ($a = self.probe['$yielded_once?']("yield_with_no_args"), $a !== false && $a !== nil ?self.probe.$single_yield_args()['$empty?']() : $a);
          };

          def.$failure_message_for_should = function() {
            var self = this;

            return "expected given block to yield with no arguments, but " + (self.$failure_reason());
          };

          def.$failure_message_for_should_not = function() {
            var self = this;

            return "expected given block not to yield with no arguments, but did";
          };

          self.$private();

          return (def.$failure_reason = function() {
            var $a, self = this;

            if ((($a = self.probe.$num_yields()['$zero?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return "did not yield"
              } else {
              return "yielded with arguments: " + (self.probe.$single_yield_args().$inspect())
            };
          }, nil) && 'failure_reason';
        })(self, $scope.get('BaseMatcher'));

        (function($base, $super) {
          function $YieldWithArgs(){};
          var self = $YieldWithArgs = $klass($base, $super, 'YieldWithArgs', $YieldWithArgs);

          var def = self.$$proto, $scope = self.$$scope;

          def.probe = def.expected = def.positive_args_failure = def.actual = nil;
          def.$initialize = function(args) {
            var self = this;

            args = $slice.call(arguments, 0);
            return self.expected = args;
          };

          def['$matches?'] = function(block) {
            var $a, self = this;

            self.probe = $scope.get('YieldProbe').$probe(block);
            self.actual = self.probe.$single_yield_args();
            return ($a = self.probe['$yielded_once?']("yield_with_args"), $a !== false && $a !== nil ?self['$args_match?']() : $a);
          };

          Opal.defn(self, '$==', def['$matches?']);

          def.$failure_message_for_should = function() {
            var self = this;

            return "expected given block to yield with arguments, but " + (self.$positive_failure_reason());
          };

          def.$failure_message_for_should_not = function() {
            var self = this;

            return "expected given block not to yield with arguments, but " + (self.$negative_failure_reason());
          };

          def.$description = function() {
            var $a, $b, TMP_5, self = this, desc = nil;

            desc = "yield with args";
            if ((($a = self.expected['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              desc['$<<']("("['$+'](($a = ($b = self.expected).$map, $a.$$p = (TMP_5 = function(e){var self = TMP_5.$$s || this;
if (e == null) e = nil;
              return e.$inspect()}, TMP_5.$$s = self, TMP_5), $a).call($b).$join(", "))['$+'](")"))
            };
            return desc;
          };

          self.$private();

          def.$positive_failure_reason = function() {
            var $a, self = this;

            if ((($a = self.probe.$num_yields()['$zero?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return "did not yield"
              } else {
              return self.positive_args_failure
            };
          };

          def.$negative_failure_reason = function() {
            var $a, self = this;

            if ((($a = self['$all_args_match?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return "yielded with expected arguments"['$+']("\nexpected not: " + (self.expected.$inspect()))['$+']("\n         got: " + (self.actual.$inspect()) + " (compared using === and ==)")
              } else {
              return "did"
            };
          };

          def['$args_match?'] = function() {
            var $a, self = this, match = nil;

            if ((($a = self.expected['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              if ((($a = self.actual['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                self.positive_args_failure = "yielded with no arguments"};
              return self.actual['$empty?']()['$!']();};
            if ((($a = match = self['$all_args_match?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.positive_args_failure = "yielded with unexpected arguments"['$+']("\nexpected: " + (self.expected.$inspect()))['$+']("\n     got: " + (self.actual.$inspect()) + " (compared using === and ==)")
            };
            return match;
          };

          return (def['$all_args_match?'] = function() {
            var $a, $b, TMP_6, self = this;

            if ((($a = self.expected.$size()['$=='](self.actual.$size())['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return false};
            return ($a = ($b = self.expected.$zip(self.actual))['$all?'], $a.$$p = (TMP_6 = function(expected, actual){var self = TMP_6.$$s || this, $a;
if (expected == null) expected = nil;if (actual == null) actual = nil;
            return ((($a = expected['$==='](actual)) !== false && $a !== nil) ? $a : actual['$=='](expected))}, TMP_6.$$s = self, TMP_6), $a).call($b);
          }, nil) && 'all_args_match?';
        })(self, null);

        (function($base, $super) {
          function $YieldSuccessiveArgs(){};
          var self = $YieldSuccessiveArgs = $klass($base, $super, 'YieldSuccessiveArgs', $YieldSuccessiveArgs);

          var def = self.$$proto, $scope = self.$$scope;

          def.probe = def.expected = def.actual = nil;
          def.$initialize = function(args) {
            var self = this;

            args = $slice.call(arguments, 0);
            return self.expected = args;
          };

          def['$matches?'] = function(block) {
            var self = this;

            self.probe = $scope.get('YieldProbe').$probe(block);
            self.actual = self.probe.$successive_yield_args();
            return self['$args_match?']();
          };

          Opal.defn(self, '$==', def['$matches?']);

          def.$failure_message_for_should = function() {
            var self = this;

            return "expected given block to yield successively with arguments, but yielded with unexpected arguments"['$+']("\nexpected: " + (self.expected.$inspect()))['$+']("\n     got: " + (self.actual.$inspect()) + " (compared using === and ==)");
          };

          def.$failure_message_for_should_not = function() {
            var self = this;

            return "expected given block not to yield successively with arguments, but yielded with expected arguments"['$+']("\nexpected not: " + (self.expected.$inspect()))['$+']("\n         got: " + (self.actual.$inspect()) + " (compared using === and ==)");
          };

          def.$description = function() {
            var $a, $b, TMP_7, self = this, desc = nil;

            desc = "yield successive args";
            desc['$<<']("("['$+'](($a = ($b = self.expected).$map, $a.$$p = (TMP_7 = function(e){var self = TMP_7.$$s || this;
if (e == null) e = nil;
            return e.$inspect()}, TMP_7.$$s = self, TMP_7), $a).call($b).$join(", "))['$+'](")"));
            return desc;
          };

          self.$private();

          return (def['$args_match?'] = function() {
            var $a, $b, TMP_8, self = this;

            if ((($a = self.expected.$size()['$=='](self.actual.$size())['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return false};
            return ($a = ($b = self.expected.$zip(self.actual))['$all?'], $a.$$p = (TMP_8 = function(expected, actual){var self = TMP_8.$$s || this, $a;
if (expected == null) expected = nil;if (actual == null) actual = nil;
            return ((($a = expected['$==='](actual)) !== false && $a !== nil) ? $a : actual['$=='](expected))}, TMP_8.$$s = self, TMP_8), $a).call($b);
          }, nil) && 'args_match?';
        })(self, null);
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/built_in"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range;

  Opal.add_stubs(['$require', '$autoload', '$respond_to?']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'BuiltIn');

        var def = self.$$proto, $scope = self.$$scope, $a;

        self.$require("rspec/matchers/built_in/base_matcher");

        self.$autoload("BeAnInstanceOf", "rspec/matchers/built_in/be_instance_of");

        self.$autoload("Be", "rspec/matchers/built_in/be");

        self.$autoload("BeTruthy", "rspec/matchers/built_in/be");

        self.$autoload("BeFalsey", "rspec/matchers/built_in/be");

        self.$autoload("BeNil", "rspec/matchers/built_in/be");

        self.$autoload("BeComparedTo", "rspec/matchers/built_in/be");

        self.$autoload("BePredicate", "rspec/matchers/built_in/be");

        self.$autoload("BeAKindOf", "rspec/matchers/built_in/be_kind_of");

        self.$autoload("BeWithin", "rspec/matchers/built_in/be_within");

        self.$autoload("Change", "rspec/matchers/built_in/change");

        if ((($a = ($range(1, 2, false))['$respond_to?']("cover?")) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$autoload("Cover", "rspec/matchers/built_in/cover")};

        self.$autoload("Eq", "rspec/matchers/built_in/eq");

        self.$autoload("Eql", "rspec/matchers/built_in/eql");

        self.$autoload("Equal", "rspec/matchers/built_in/equal");

        self.$autoload("Exist", "rspec/matchers/built_in/exist");

        self.$autoload("Has", "rspec/matchers/built_in/has");

        self.$autoload("Have", "rspec/matchers/built_in/have");

        self.$autoload("Include", "rspec/matchers/built_in/include");

        self.$autoload("Match", "rspec/matchers/built_in/match");

        self.$autoload("MatchArray", "rspec/matchers/built_in/match_array");

        self.$autoload("RaiseError", "rspec/matchers/built_in/raise_error");

        self.$autoload("RespondTo", "rspec/matchers/built_in/respond_to");

        self.$autoload("StartWith", "rspec/matchers/built_in/start_and_end_with");

        self.$autoload("EndWith", "rspec/matchers/built_in/start_and_end_with");

        self.$autoload("Satisfy", "rspec/matchers/built_in/satisfy");

        self.$autoload("ThrowSymbol", "rspec/matchers/built_in/throw_symbol");

        self.$autoload("YieldControl", "rspec/matchers/built_in/yield");

        self.$autoload("YieldWithArgs", "rspec/matchers/built_in/yield");

        self.$autoload("YieldWithNoArgs", "rspec/matchers/built_in/yield");

        self.$autoload("YieldSuccessiveArgs", "rspec/matchers/built_in/yield");
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/matcher"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$define_user_override', '$actual_arg_for', '$define_method', '$to_proc', '$private', '$__send__', '$lambda', '$name_to_sentence', '$expected_to_sentence', '$inspect', '$actual', '$include', '$extend', '$attr_reader', '$attr_accessor', '$class_exec', '$new', '$name', '$class', '$>=', '$to_f', '$respond_to?', '$matcher_execution_context', '$zero?', '$arity']);
  self.$require("set");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'DSL');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base) {
          var self = $module($base, 'Macros');

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_5, TMP_7, TMP_8, TMP_9, TMP_11, TMP_13;

          Opal.defn(self, '$match', TMP_1 = function() {
            var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, match_block = $iter || nil;

            TMP_1.$$p = null;
            return ($a = ($b = self).$define_user_override, $a.$$p = (TMP_2 = function(actual){var self = TMP_2.$$s || this;
if (actual == null) actual = nil;
            try {
              self.actual = actual;
                return Opal.find_iter_super_dispatcher(self, 'match', (TMP_2.$$def || TMP_1), null).apply(self, [].concat(self.$actual_arg_for(match_block)));
              } catch ($err) {if (Opal.rescue($err, [(((($scope.get('RSpec')).$$scope.get('Expectations'))).$$scope.get('ExpectationNotMetError'))])) {
                return false
                }else { throw $err; }
              }}, TMP_2.$$s = self, TMP_2), $a).call($b, "matches?", match_block);
          });

          Opal.defn(self, '$match_for_should', def.$match);

          Opal.defn(self, '$match_for_should_not', TMP_3 = function() {
            var $a, $b, TMP_4, self = this, $iter = TMP_3.$$p, match_block = $iter || nil;

            TMP_3.$$p = null;
            return ($a = ($b = self).$define_user_override, $a.$$p = (TMP_4 = function(actual){var self = TMP_4.$$s || this;
if (actual == null) actual = nil;
            self.actual = actual;
              return Opal.find_iter_super_dispatcher(self, 'match_for_should_not', (TMP_4.$$def || TMP_3), null).apply(self, [].concat(self.$actual_arg_for(match_block)));}, TMP_4.$$s = self, TMP_4), $a).call($b, "does_not_match?", match_block);
          });

          Opal.defn(self, '$match_unless_raises', TMP_5 = function(expected_exception) {
            var $a, $b, TMP_6, self = this, $iter = TMP_5.$$p, match_block = $iter || nil;

            if (expected_exception == null) {
              expected_exception = $scope.get('Exception')
            }
            TMP_5.$$p = null;
            return ($a = ($b = self).$define_user_override, $a.$$p = (TMP_6 = function(actual){var self = TMP_6.$$s || this;
if (actual == null) actual = nil;
            self.actual = actual;
              try {
              return Opal.find_iter_super_dispatcher(self, 'match_unless_raises', (TMP_6.$$def || TMP_5), null).apply(self, [].concat(self.$actual_arg_for(match_block)))
              } catch ($err) {if (Opal.rescue($err, [expected_exception])) {self.rescued_exception = $err;
                return false
                }else true
              };}, TMP_6.$$s = self, TMP_6), $a).call($b, "matches?", match_block);
          });

          Opal.defn(self, '$failure_message_for_should', TMP_7 = function() {
            var self = this, $iter = TMP_7.$$p, definition = $iter || nil;

            TMP_7.$$p = null;
            return self.$define_user_override("failure_message_for_should", definition);
          });

          Opal.defn(self, '$failure_message_for_should_not', TMP_8 = function() {
            var self = this, $iter = TMP_8.$$p, definition = $iter || nil;

            TMP_8.$$p = null;
            return self.$define_user_override("failure_message_for_should_not", definition);
          });

          Opal.defn(self, '$description', TMP_9 = function() {
            var self = this, $iter = TMP_9.$$p, definition = $iter || nil;

            TMP_9.$$p = null;
            return self.$define_user_override("description", definition);
          });

          Opal.defn(self, '$diffable', function() {
            var $a, $b, TMP_10, self = this;

            return ($a = ($b = self).$define_method, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

            return true}, TMP_10.$$s = self, TMP_10), $a).call($b, "diffable?");
          });

          Opal.defn(self, '$chain', TMP_11 = function(name) {
            var $a, $b, TMP_12, self = this, $iter = TMP_11.$$p, definition = $iter || nil;

            TMP_11.$$p = null;
            return ($a = ($b = self).$define_user_override, $a.$$p = (TMP_12 = function(args){var self = TMP_12.$$s || this, block;
args = $slice.call(arguments, 0);
              block = TMP_12.$$p || nil, TMP_12.$$p = null;
            Opal.find_iter_super_dispatcher(self, 'chain', (TMP_12.$$def || TMP_11), null).apply(self, [].concat(args).concat(block.$to_proc()));
              return self;}, TMP_12.$$s = self, TMP_12), $a).call($b, name, definition);
          });

          self.$private();

          Opal.defn(self, '$define_user_override', TMP_13 = function(method_name, user_def) {
            var $a, $b, $c, $d, TMP_14, self = this, $iter = TMP_13.$$p, our_def = $iter || nil;
            if (self.user_method_defs == null) self.user_method_defs = nil;

            TMP_13.$$p = null;
            ($a = ($b = self.user_method_defs).$__send__, $a.$$p = user_def.$to_proc(), $a).call($b, "define_method", method_name);
            ((($a = our_def) !== false && $a !== nil) ? $a : our_def = ($c = ($d = self).$lambda, $c.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

            return Opal.find_iter_super_dispatcher(self, 'define_user_override', (TMP_14.$$def || TMP_13), null).apply(self, [].concat(self.$actual_arg_for(user_def)))}, TMP_14.$$s = self, TMP_14), $c).call($d));
            return ($a = ($c = self).$define_method, $a.$$p = our_def.$to_proc(), $a).call($c, method_name);
          });
        })(self);

        (function($base) {
          var self = $module($base, 'DefaultImplementations');

          var def = self.$$proto, $scope = self.$$scope;

          Opal.defn(self, '$diffable?', function() {
            var self = this;

            return false;
          });

          Opal.defn(self, '$description', function() {
            var self = this;

            return "" + (self.$name_to_sentence()) + (self.$expected_to_sentence());
          });

          Opal.defn(self, '$failure_message_for_should', function() {
            var self = this;

            return "expected " + (self.$actual().$inspect()) + " to " + (self.$name_to_sentence()) + (self.$expected_to_sentence());
          });

          Opal.defn(self, '$failure_message_for_should_not', function() {
            var self = this;

            return "expected " + (self.$actual().$inspect()) + " not to " + (self.$name_to_sentence()) + (self.$expected_to_sentence());
          });
        })(self);

        (function($base, $super) {
          function $Matcher(){};
          var self = $Matcher = $klass($base, $super, 'Matcher', $Matcher);

          var def = self.$$proto, $scope = self.$$scope, TMP_15, TMP_16, TMP_17;

          def.actual = nil;
          self.$include($scope.get('DefaultImplementations'));

          self.$include((($scope.get('RSpec')).$$scope.get('Matchers')));

          self.$include((((($scope.get('RSpec')).$$scope.get('Matchers'))).$$scope.get('Pretty')));

          self.$extend($scope.get('Macros'));

          self.$attr_reader("expected", "actual", "rescued_exception");

          self.$attr_accessor("matcher_execution_context");

          def.$initialize = function(name, declarations, expected) {
            var $a, $b, self = this;

            expected = $slice.call(arguments, 2);
            self.name = name;
            self.actual = nil;
            self.expected = expected;
            return ($a = ($b = (function(self) {
              var $scope = self.$$scope, def = self.$$proto;

              self.$include(self.user_method_defs = $scope.get('Module').$new());
              return self;
            })(self.$singleton_class())).$class_exec, $a.$$p = declarations.$to_proc(), $a).apply($b, [].concat(expected));
          };

          def.$inspect = function() {
            var self = this;

            return "#<" + (self.$class().$name()) + " " + (self.$name()) + ">";
          };

          if ($scope.get('RUBY_VERSION').$to_f()['$>='](1.9)) {
            def['$respond_to_missing?'] = TMP_15 = function(method, include_private) {var $zuper = $slice.call(arguments, 0);
              var $a, self = this, $iter = TMP_15.$$p, $yield = $iter || nil;

              if (include_private == null) {
                include_private = false
              }
              TMP_15.$$p = null;
              return ((($a = Opal.find_super_dispatcher(self, 'respond_to_missing?', TMP_15, $iter).apply(self, $zuper)) !== false && $a !== nil) ? $a : self.$matcher_execution_context()['$respond_to?'](method, include_private));
            }
            } else {
            def['$respond_to?'] = TMP_16 = function(method, include_private) {var $zuper = $slice.call(arguments, 0);
              var $a, self = this, $iter = TMP_16.$$p, $yield = $iter || nil;

              if (include_private == null) {
                include_private = false
              }
              TMP_16.$$p = null;
              return ((($a = Opal.find_super_dispatcher(self, 'respond_to?', TMP_16, $iter).apply(self, $zuper)) !== false && $a !== nil) ? $a : self.$matcher_execution_context()['$respond_to?'](method, include_private));
            }
          };

          self.$private();

          def.$actual_arg_for = function(block) {
            var $a, self = this;

            if ((($a = block.$arity()['$zero?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return []
              } else {
              return [self.actual]
            };
          };

          return (def.$method_missing = TMP_17 = function(method, args) {
            var $a, $b, self = this, $iter = TMP_17.$$p, block = $iter || nil;

            args = $slice.call(arguments, 1);
            TMP_17.$$p = null;
            if ((($a = self.$matcher_execution_context()['$respond_to?'](method)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return ($a = ($b = self.$matcher_execution_context()).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, [method].concat(args))
              } else {
              return Opal.find_super_dispatcher(self, 'method_missing', TMP_17, null).apply(self, [method].concat(args).concat(block.$to_proc()))
            };
          }, nil) && 'method_missing';
        })(self, null);
      })(self)
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/operator_matcher"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$registry', '$[]', '$[]=', '$delete', '$each', '$ancestors', '$define_method', '$uses_generic_implementation_of?', '$get', '$class', '$__send__', '$last_should', '$new', '$eval_match', '$sub', '$!', '$==', '$respond_to?', '$raise', '$+', '$use_custom_matcher_or_delegate', '$fail_with', '$inspect', '$private', '$owner', '$method_handle_for', '$last_matcher=', '$__delegate_operator', '$include?', '$fail_with_message', '$gsub']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $OperatorMatcher(){};
        var self = $OperatorMatcher = $klass($base, $super, 'OperatorMatcher', $OperatorMatcher);

        var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_4;

        def.expected = def.actual = def.operator = nil;
        (function(self) {
          var $scope = self.$$scope, def = self.$$proto;

          self.$$proto.$registry = function() {
            var $a, self = this;
            if (self.registry == null) self.registry = nil;

            return ((($a = self.registry) !== false && $a !== nil) ? $a : self.registry = $hash2([], {}));
          };
          self.$$proto.$register = function(klass, operator, matcher) {
            var $a, $b, $c, self = this;

            ($a = klass, $b = self.$registry(), ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, $hash2([], {}))));
            return self.$registry()['$[]'](klass)['$[]='](operator, matcher);
          };
          self.$$proto.$unregister = function(klass, operator) {
            var $a, self = this;

            return ($a = self.$registry()['$[]'](klass), $a !== false && $a !== nil ?self.$registry()['$[]'](klass).$delete(operator) : $a);
          };
          return (self.$$proto.$get = function(klass, operator) {try {

            var $a, $b, TMP_1, self = this;

            ($a = ($b = klass.$ancestors()).$each, $a.$$p = (TMP_1 = function(ancestor){var self = TMP_1.$$s || this, $a, matcher = nil;
if (ancestor == null) ancestor = nil;
            matcher = ($a = self.$registry()['$[]'](ancestor), $a !== false && $a !== nil ?self.$registry()['$[]'](ancestor)['$[]'](operator) : $a);
              if (matcher !== false && matcher !== nil) {
                Opal.ret(matcher)
                } else {
                return nil
              };}, TMP_1.$$s = self, TMP_1), $a).call($b);
            return nil;
            } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
          }, nil) && 'get';
        })(self.$singleton_class());

        def.$initialize = function(actual) {
          var self = this;

          return self.actual = actual;
        };

        Opal.defs(self, '$use_custom_matcher_or_delegate', function(operator) {
          var $a, $b, TMP_2, $c, TMP_3, self = this, negative_operator = nil;

          ($a = ($b = self).$define_method, $a.$$p = (TMP_2 = function(expected){var self = TMP_2.$$s || this, $a, $b, matcher = nil;
            if (self.actual == null) self.actual = nil;
if (expected == null) expected = nil;
          if ((($a = ($b = self['$uses_generic_implementation_of?'](operator), $b !== false && $b !== nil ?matcher = $scope.get('OperatorMatcher').$get(self.actual.$class(), operator) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.actual.$__send__(((Opal.get('RSpec')).$$scope.get('Matchers')).$last_should(), matcher.$new(expected))
              } else {
              return self.$eval_match(self.actual, operator, expected)
            }}, TMP_2.$$s = self, TMP_2), $a).call($b, operator);
          negative_operator = operator.$sub(/^=/, "!");
          if ((($a = ($c = negative_operator['$=='](operator)['$!'](), $c !== false && $c !== nil ?self['$respond_to?'](negative_operator) : $c)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($c = self).$define_method, $a.$$p = (TMP_3 = function(expected){var self = TMP_3.$$s || this, opposite_should = nil;
if (expected == null) expected = nil;
            opposite_should = (function() {if (((Opal.get('RSpec')).$$scope.get('Matchers')).$last_should()['$==']("should")) {
                return "should_not"
                } else {
                return "should"
              }; return nil; })();
              return self.$raise(((((("RSpec does not support `") + (((Opal.get('RSpec')).$$scope.get('Matchers')).$last_should())) + " ") + (negative_operator)) + " expected`.  ")['$+']("Use `" + (opposite_should) + " " + (operator) + " expected` instead."));}, TMP_3.$$s = self, TMP_3), $a).call($c, negative_operator)
            } else {
            return nil
          };
        });

        ($a = ($b = ["==", "===", "=~", ">", ">=", "<", "<="]).$each, $a.$$p = (TMP_4 = function(operator){var self = TMP_4.$$s || this;
if (operator == null) operator = nil;
        return self.$use_custom_matcher_or_delegate(operator)}, TMP_4.$$s = self, TMP_4), $a).call($b);

        def.$fail_with_message = function(message) {
          var self = this;

          return (($scope.get('RSpec')).$$scope.get('Expectations')).$fail_with(message, self.expected, self.actual);
        };

        def.$description = function() {
          var self = this;

          return "" + (self.operator) + " " + (self.expected.$inspect());
        };

        self.$private();

        def['$uses_generic_implementation_of?'] = function(op) {
          var self = this;

          try {
          return $scope.get('Expectations').$method_handle_for(self.actual, op).$owner()['$=='](Opal.get('Kernel'))
          } catch ($err) {if (Opal.rescue($err, [$scope.get('NameError')])) {
            return false
            }else { throw $err; }
          };
        };

        return (def.$eval_match = function(actual, operator, expected) {
          var $a, $b, self = this;

          (($a = [self]), $b = ((Opal.get('RSpec')).$$scope.get('Matchers')), $b['$last_matcher='].apply($b, $a), $a[$a.length-1]);
          $a = [operator, expected], self.operator = $a[0], self.expected = $a[1];
          return self.$__delegate_operator(actual, operator, expected);
        }, nil) && 'eval_match';
      })(self, null);

      (function($base) {
        var self = $module($base, 'BuiltIn');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $PositiveOperatorMatcher(){};
          var self = $PositiveOperatorMatcher = $klass($base, $super, 'PositiveOperatorMatcher', $PositiveOperatorMatcher);

          var def = self.$$proto, $scope = self.$$scope;

          return (def.$__delegate_operator = function(actual, operator, expected) {
            var $a, self = this;

            if ((($a = actual.$__send__(operator, expected)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return true
            } else if ((($a = ["==", "===", "=~"]['$include?'](operator)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$fail_with_message("expected: " + (expected.$inspect()) + "\n     got: " + (actual.$inspect()) + " (using " + (operator) + ")")
              } else {
              return self.$fail_with_message("expected: " + (operator) + " " + (expected.$inspect()) + "\n     got: " + (operator.$gsub(/./, " ")) + " " + (actual.$inspect()))
            };
          }, nil) && '__delegate_operator'
        })(self, $scope.get('OperatorMatcher'));

        (function($base, $super) {
          function $NegativeOperatorMatcher(){};
          var self = $NegativeOperatorMatcher = $klass($base, $super, 'NegativeOperatorMatcher', $NegativeOperatorMatcher);

          var def = self.$$proto, $scope = self.$$scope;

          return (def.$__delegate_operator = function(actual, operator, expected) {
            var $a, self = this;

            if ((($a = actual.$__send__(operator, expected)) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              return false
            };
            return self.$fail_with_message("expected not: " + (operator) + " " + (expected.$inspect()) + "\n         got: " + (operator.$gsub(/./, " ")) + " " + (actual.$inspect()));
          }, nil) && '__delegate_operator'
        })(self, $scope.get('OperatorMatcher'));
      })(self);
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/generated_descriptions"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$attr_accessor', '$last_matcher=', '$last_should=', '$nil?', '$last_should', '$gsub', '$to_s', '$last_description', '$private', '$respond_to?', '$last_matcher', '$description']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto;

        return self.$attr_accessor("last_matcher", "last_should")
      })(self.$singleton_class());

      Opal.defs(self, '$clear_generated_description', function() {
        var $a, $b, self = this;

        (($a = [nil]), $b = self, $b['$last_matcher='].apply($b, $a), $a[$a.length-1]);
        return (($a = [nil]), $b = self, $b['$last_should='].apply($b, $a), $a[$a.length-1]);
      });

      Opal.defs(self, '$generated_description', function() {
        var $a, self = this;

        if ((($a = self.$last_should()['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil};
        return "" + (self.$last_should().$to_s().$gsub("_", " ")) + " " + (self.$last_description());
      });

      self.$private();

      Opal.defs(self, '$last_description', function() {
        var $a, self = this;

        if ((($a = self.$last_matcher()['$respond_to?']("description")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$last_matcher().$description()
          } else {
          return "When you call a matcher in an example without a String, like this:\n\nspecify { object.should matcher }\n\nor this:\n\nit { should matcher }\n\nRSpec expects the matcher to have a #description method. You should either\nadd a String to the example this matcher is being used in, or give it a\ndescription method. Then you won't have to suffer this lengthy warning again.\n"
        };
      });
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/method_missing"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$private', '$=~', '$to_s', '$new', '$to_proc']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      self.$private();

      Opal.defn(self, '$method_missing', TMP_1 = function(method, args) {var $zuper = $slice.call(arguments, 0);
        var $a, $b, $c, self = this, $iter = TMP_1.$$p, block = $iter || nil;

        args = $slice.call(arguments, 1);
        TMP_1.$$p = null;
        if ((($a = method.$to_s()['$=~'](/^be_/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = (((($scope.get('Matchers')).$$scope.get('BuiltIn'))).$$scope.get('BePredicate'))).$new, $a.$$p = block.$to_proc(), $a).apply($b, [method].concat(args))};
        if ((($a = method.$to_s()['$=~'](/^have_/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($c = (((($scope.get('Matchers')).$$scope.get('BuiltIn'))).$$scope.get('Has'))).$new, $a.$$p = block.$to_proc(), $a).apply($c, [method].concat(args))};
        return Opal.find_super_dispatcher(self, 'method_missing', TMP_1, $iter).apply(self, $zuper);
      });
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/compatibility"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$each', '$===', '$const_get', '$any?', '$include?', '$public_instance_methods', '$class_exec', '$alias_method', '$constants']);
  return ($a = ($b = (($scope.get('RSpec')).$$scope.get('Matchers')).$constants()).$each, $a.$$p = (TMP_1 = function(c){var self = TMP_1.$$s || this, $a, $b, $c, TMP_2, TMP_3, $d, $e, TMP_4, TMP_5, klass = nil;
if (c == null) c = nil;
  if ((($a = $scope.get('Class')['$===']((klass = (($scope.get('RSpec')).$$scope.get('Matchers')).$const_get(c)))) !== nil && (!$a.$$is_boolean || $a == true))) {
      if ((($a = ($b = ($c = klass.$public_instance_methods())['$any?'], $b.$$p = (TMP_2 = function(m){var self = TMP_2.$$s || this;
if (m == null) m = nil;
      return ["failure_message_for_should", "failure_message_for_should"]['$include?'](m)}, TMP_2.$$s = self, TMP_2), $b).call($c)) !== nil && (!$a.$$is_boolean || $a == true))) {
        ($a = ($b = klass).$class_exec, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

        return self.$alias_method("failure_message", "failure_message_for_should")}, TMP_3.$$s = self, TMP_3), $a).call($b)};
      if ((($a = ($d = ($e = klass.$public_instance_methods())['$any?'], $d.$$p = (TMP_4 = function(m){var self = TMP_4.$$s || this;
if (m == null) m = nil;
      return ["failure_message_for_should_not", "failure_message_for_should_not"]['$include?'](m)}, TMP_4.$$s = self, TMP_4), $d).call($e)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($d = klass).$class_exec, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

        return self.$alias_method("negative_failure_message", "failure_message_for_should_not")}, TMP_5.$$s = self, TMP_5), $a).call($d)
        } else {
        return nil
      };
      } else {
      return nil
    }}, TMP_1.$$s = self, TMP_1), $a).call($b)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/test_unit_integration"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$send']);
  if ((($a = (function(){ try { return (((((($scope.get('MiniTest')).$$scope.get('Unit'))).$$scope.get('TestCase'))) != null ? 'constant' : nil); } catch (err) { if (err.$$class === Opal.NameError) { return nil; } else { throw(err); }}; })()) !== nil && (!$a.$$is_boolean || $a == true))) {
    (((($scope.get('MiniTest')).$$scope.get('Unit'))).$$scope.get('TestCase')).$send("include", (($scope.get('RSpec')).$$scope.get('Matchers')))};
  if ((($a = (function(){ try { return (((((($scope.get('Test')).$$scope.get('Unit'))).$$scope.get('TestCase'))) != null ? 'constant' : nil); } catch (err) { if (err.$$class === Opal.NameError) { return nil; } else { throw(err); }}; })()) !== nil && (!$a.$$is_boolean || $a == true))) {
    return (((($scope.get('Test')).$$scope.get('Unit'))).$$scope.get('TestCase')).$send("include", (($scope.get('RSpec')).$$scope.get('Matchers')))
    } else {
    return nil
  };
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range;

  Opal.add_stubs(['$require', '$===', '$respond_to?', '$new', '$alias_method', '$empty?', '$equal', '$be_a_kind_of', '$to_proc', '$register']);
  self.$require("rspec/matchers/pretty");
  self.$require("rspec/matchers/built_in");
  self.$require("rspec/matchers/matcher");
  self.$require("rspec/matchers/operator_matcher");
  self.$require("rspec/matchers/generated_descriptions");
  self.$require("rspec/matchers/method_missing");
  self.$require("rspec/matchers/compatibility");
  self.$require("rspec/matchers/dsl");
  self.$require("rspec/matchers/test_unit_integration");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_2, TMP_3;

      Opal.defs(self, '$is_a_matcher?', function(obj) {
        var $a, self = this;

        if ((($a = ((((((Opal.get('RSpec')).$$scope.get('Matchers'))).$$scope.get('BuiltIn'))).$$scope.get('BaseMatcher'))['$==='](obj)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return true};
        if ((($a = obj['$respond_to?']("i_respond_to_everything_so_im_not_really_a_matcher")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return false};
        if ((($a = obj['$respond_to?']("matches?")) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          return false
        };
        return ((($a = obj['$respond_to?']("failure_message_for_should")) !== false && $a !== nil) ? $a : obj['$respond_to?']("failure_message"));
      });

      Opal.defn(self, '$be_truthy', function() {
        var self = this;

        return (($scope.get('BuiltIn')).$$scope.get('BeTruthy')).$new();
      });

      Opal.defn(self, '$be_falsey', function() {
        var self = this;

        return (($scope.get('BuiltIn')).$$scope.get('BeFalsey')).$new();
      });

      self.$alias_method("be_falsy", "be_falsey");

      Opal.defn(self, '$be_nil', function() {
        var self = this;

        return (($scope.get('BuiltIn')).$$scope.get('BeNil')).$new();
      });

      Opal.defn(self, '$be', function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        if ((($a = args['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return (((($scope.get('Matchers')).$$scope.get('BuiltIn'))).$$scope.get('Be')).$new()
          } else {
          return ($a = self).$equal.apply($a, [].concat(args))
        };
      });

      Opal.defn(self, '$be_a', function(klass) {
        var self = this;

        return self.$be_a_kind_of(klass);
      });

      self.$alias_method("be_an", "be_a");

      Opal.defn(self, '$be_an_instance_of', function(expected) {
        var self = this;

        return (($scope.get('BuiltIn')).$$scope.get('BeAnInstanceOf')).$new(expected);
      });

      self.$alias_method("be_instance_of", "be_an_instance_of");

      Opal.defn(self, '$be_a_kind_of', function(expected) {
        var self = this;

        return (($scope.get('BuiltIn')).$$scope.get('BeAKindOf')).$new(expected);
      });

      self.$alias_method("be_kind_of", "be_a_kind_of");

      Opal.defn(self, '$be_within', function(delta) {
        var self = this;

        return (($scope.get('BuiltIn')).$$scope.get('BeWithin')).$new(delta);
      });

      Opal.defn(self, '$change', TMP_1 = function(receiver, message) {
        var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

        if (receiver == null) {
          receiver = nil
        }
        if (message == null) {
          message = nil
        }
        TMP_1.$$p = null;
        return ($a = ($b = (($scope.get('BuiltIn')).$$scope.get('Change'))).$new, $a.$$p = block.$to_proc(), $a).call($b, receiver, message);
      });

      if ((($a = ($range(1, 2, false))['$respond_to?']("cover?")) !== nil && (!$a.$$is_boolean || $a == true))) {
        Opal.defn(self, '$cover', function(values) {
          var $a, self = this;

          values = $slice.call(arguments, 0);
          return ($a = (($scope.get('BuiltIn')).$$scope.get('Cover'))).$new.apply($a, [].concat(values));
        })};

      Opal.defn(self, '$end_with', function(expected) {
        var $a, self = this;

        expected = $slice.call(arguments, 0);
        return ($a = (($scope.get('BuiltIn')).$$scope.get('EndWith'))).$new.apply($a, [].concat(expected));
      });

      Opal.defn(self, '$eq', function(expected) {
        var self = this;

        return (($scope.get('BuiltIn')).$$scope.get('Eq')).$new(expected);
      });

      Opal.defn(self, '$eql', function(expected) {
        var self = this;

        return (($scope.get('BuiltIn')).$$scope.get('Eql')).$new(expected);
      });

      Opal.defn(self, '$equal', function(expected) {
        var self = this;

        return (($scope.get('BuiltIn')).$$scope.get('Equal')).$new(expected);
      });

      Opal.defn(self, '$exist', function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        return ($a = (($scope.get('BuiltIn')).$$scope.get('Exist'))).$new.apply($a, [].concat(args));
      });

      Opal.defn(self, '$include', function(expected) {
        var $a, self = this;

        expected = $slice.call(arguments, 0);
        return ($a = (($scope.get('BuiltIn')).$$scope.get('Include'))).$new.apply($a, [].concat(expected));
      });

      Opal.defn(self, '$match', function(expected) {
        var self = this;

        return (($scope.get('BuiltIn')).$$scope.get('Match')).$new(expected);
      });

      self.$alias_method("match_regex", "match");

      Opal.defn(self, '$raise_error', TMP_2 = function(error, message) {
        var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

        if (error == null) {
          error = $scope.get('Exception')
        }
        if (message == null) {
          message = nil
        }
        TMP_2.$$p = null;
        return ($a = ($b = (($scope.get('BuiltIn')).$$scope.get('RaiseError'))).$new, $a.$$p = block.$to_proc(), $a).call($b, error, message);
      });

      self.$alias_method("raise_exception", "raise_error");

      Opal.defn(self, '$respond_to', function(names) {
        var $a, self = this;

        names = $slice.call(arguments, 0);
        return ($a = (($scope.get('BuiltIn')).$$scope.get('RespondTo'))).$new.apply($a, [].concat(names));
      });

      Opal.defn(self, '$satisfy', TMP_3 = function() {
        var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil;

        TMP_3.$$p = null;
        return ($a = ($b = (($scope.get('BuiltIn')).$$scope.get('Satisfy'))).$new, $a.$$p = block.$to_proc(), $a).call($b);
      });

      Opal.defn(self, '$start_with', function(expected) {
        var $a, self = this;

        expected = $slice.call(arguments, 0);
        return ($a = (($scope.get('BuiltIn')).$$scope.get('StartWith'))).$new.apply($a, [].concat(expected));
      });

      Opal.defn(self, '$throw_symbol', function(expected_symbol, expected_arg) {
        var self = this;

        if (expected_symbol == null) {
          expected_symbol = nil
        }
        if (expected_arg == null) {
          expected_arg = nil
        }
        return (($scope.get('BuiltIn')).$$scope.get('ThrowSymbol')).$new(expected_symbol, expected_arg);
      });

      Opal.defn(self, '$yield_control', function() {
        var self = this;

        return (($scope.get('BuiltIn')).$$scope.get('YieldControl')).$new();
      });

      Opal.defn(self, '$yield_with_no_args', function() {
        var self = this;

        return (($scope.get('BuiltIn')).$$scope.get('YieldWithNoArgs')).$new();
      });

      Opal.defn(self, '$yield_with_args', function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        return ($a = (($scope.get('BuiltIn')).$$scope.get('YieldWithArgs'))).$new.apply($a, [].concat(args));
      });

      Opal.defn(self, '$yield_successive_args', function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        return ($a = (($scope.get('BuiltIn')).$$scope.get('YieldSuccessiveArgs'))).$new.apply($a, [].concat(args));
      });

      Opal.defn(self, '$match_array', function(array) {
        var self = this;

        return (($scope.get('BuiltIn')).$$scope.get('MatchArray')).$new(array);
      });

      $scope.get('OperatorMatcher').$register($scope.get('Enumerable'), "=~", (($scope.get('BuiltIn')).$$scope.get('MatchArray')));
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/expectations/expectation_target"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_accessor', '$prevent_operator_matchers', '$handle_matcher', '$to_proc', '$deprecated_should_enabled?', '$deprecate', '$should', '$should_not', '$deprecated_should_enabled=', '$remove_method', '$private', '$raise', '$+']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Expectations');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ExpectationTarget(){};
        var self = $ExpectationTarget = $klass($base, $super, 'ExpectationTarget', $ExpectationTarget);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

        def.target = nil;
        (function(self) {
          var $scope = self.$$scope, def = self.$$proto;

          self.$attr_accessor("deprecated_should_enabled");
          return self.$$proto['$deprecated_should_enabled?'] = self.$$proto.$deprecated_should_enabled;
        })(self.$singleton_class());

        def.$initialize = function(target) {
          var self = this;

          return self.target = target;
        };

        def.$to = TMP_1 = function(matcher, message) {
          var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

          if (matcher == null) {
            matcher = nil
          }
          if (message == null) {
            message = nil
          }
          TMP_1.$$p = null;
          self.$prevent_operator_matchers("to", matcher);
          return ($a = ($b = (((($scope.get('RSpec')).$$scope.get('Expectations'))).$$scope.get('PositiveExpectationHandler'))).$handle_matcher, $a.$$p = block.$to_proc(), $a).call($b, self.target, matcher, message);
        };

        def.$not_to = TMP_2 = function(matcher, message) {
          var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

          if (matcher == null) {
            matcher = nil
          }
          if (message == null) {
            message = nil
          }
          TMP_2.$$p = null;
          self.$prevent_operator_matchers("not_to", matcher);
          return ($a = ($b = (((($scope.get('RSpec')).$$scope.get('Expectations'))).$$scope.get('NegativeExpectationHandler'))).$handle_matcher, $a.$$p = block.$to_proc(), $a).call($b, self.target, matcher, message);
        };

        Opal.defn(self, '$to_not', def.$not_to);

        Opal.defs(self, '$enable_deprecated_should', function() {
          var $a, $b, self = this;

          if ((($a = self['$deprecated_should_enabled?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          def.$should = function(args) {
            var $a, self = this;
            if (self.target == null) self.target = nil;

            args = $slice.call(arguments, 0);
            $scope.get('RSpec').$deprecate("`expect { }.should`", $hash2(["replacement"], {"replacement": "`expect { }.to`"}));
            return ($a = self.target).$should.apply($a, [].concat(args));
          };
          def.$should_not = function(args) {
            var $a, self = this;
            if (self.target == null) self.target = nil;

            args = $slice.call(arguments, 0);
            $scope.get('RSpec').$deprecate("`expect { }.should_not`", $hash2(["replacement"], {"replacement": "`expect { }.not_to`"}));
            return ($a = self.target).$should_not.apply($a, [].concat(args));
          };
          return (($a = [true]), $b = self, $b['$deprecated_should_enabled='].apply($b, $a), $a[$a.length-1]);
        });

        Opal.defs(self, '$disable_deprecated_should', function() {
          var $a, $b, self = this;

          if ((($a = self['$deprecated_should_enabled?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil
          };
          self.$remove_method("should");
          self.$remove_method("should_not");
          return (($a = [false]), $b = self, $b['$deprecated_should_enabled='].apply($b, $a), $a[$a.length-1]);
        });

        self.$private();

        return (def.$prevent_operator_matchers = function(verb, matcher) {
          var self = this;

          if (matcher !== false && matcher !== nil) {
            return nil};
          return self.$raise($scope.get('ArgumentError'), "The expect syntax does not support operator matchers, "['$+']("so you must pass a matcher to `#" + (verb) + "`."));
        }, nil) && 'prevent_operator_matchers';
      })(self, null)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/expectations/syntax"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$extend', '$last', '$ancestors', '$deprecate', '$should_enabled?', '$module_exec', '$warn_about_should_unless_configured', '$handle_matcher', '$to_proc', '$expect_enabled?', '$enable_deprecated_should', '$default_should_host', '$disable_deprecated_should', '$<<', '$==', '$size', '$raise', '$new', '$first', '$method_defined?', '$positive_expression', '$expression_generator', '$negative_expression']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Expectations');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Syntax');

        var def = self.$$proto, $scope = self.$$scope;

        self.$extend(self);

        Opal.defn(self, '$default_should_host', function() {
          var $a, self = this;
          if (self.default_should_host == null) self.default_should_host = nil;

          return ((($a = self.default_should_host) !== false && $a !== nil) ? $a : self.default_should_host = Opal.get('Object').$ancestors().$last());
        });

        Opal.defs(self, '$warn_about_should!', function() {
          var self = this;

          return self.warn_about_should = true;
        });

        Opal.defs(self, '$warn_about_should_unless_configured', function(method_name) {
          var $a, self = this;
          if (self.warn_about_should == null) self.warn_about_should = nil;

          if ((($a = self.warn_about_should) !== nil && (!$a.$$is_boolean || $a == true))) {
            $scope.get('RSpec').$deprecate("Using `" + (method_name) + "` from rspec-expectations' old `:should` syntax without explicitly enabling the syntax", $hash2(["replacement"], {"replacement": "the new `:expect` syntax or explicitly enable `:should`"}));
            return self.warn_about_should = false;
            } else {
            return nil
          };
        });

        Opal.defn(self, '$enable_should', function(syntax_host) {
          var $a, $b, TMP_1, self = this;

          if (syntax_host == null) {
            syntax_host = self.$default_should_host()
          }
          self.warn_about_should = false;
          if ((($a = self['$should_enabled?'](syntax_host)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          ($a = ($b = syntax_host).$module_exec, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, TMP_2, TMP_3;

          Opal.defn(self, '$should', TMP_2 = function(matcher, message) {
              var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

              if (matcher == null) {
                matcher = nil
              }
              if (message == null) {
                message = nil
              }
              TMP_2.$$p = null;
              ((((Opal.get('RSpec')).$$scope.get('Expectations'))).$$scope.get('Syntax')).$warn_about_should_unless_configured("should");
              return ($a = ($b = ((((Opal.get('RSpec')).$$scope.get('Expectations'))).$$scope.get('PositiveExpectationHandler'))).$handle_matcher, $a.$$p = block.$to_proc(), $a).call($b, self, matcher, message);
            });
            return (Opal.defn(self, '$should_not', TMP_3 = function(matcher, message) {
              var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil;

              if (matcher == null) {
                matcher = nil
              }
              if (message == null) {
                message = nil
              }
              TMP_3.$$p = null;
              ((((Opal.get('RSpec')).$$scope.get('Expectations'))).$$scope.get('Syntax')).$warn_about_should_unless_configured("should_not");
              return ($a = ($b = ((((Opal.get('RSpec')).$$scope.get('Expectations'))).$$scope.get('NegativeExpectationHandler'))).$handle_matcher, $a.$$p = block.$to_proc(), $a).call($b, self, matcher, message);
            }), nil) && 'should_not';}, TMP_1.$$s = self, TMP_1), $a).call($b);
          if ((($a = self['$expect_enabled?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ((((Opal.get('RSpec')).$$scope.get('Expectations'))).$$scope.get('ExpectationTarget')).$enable_deprecated_should()
            } else {
            return nil
          };
        });

        Opal.defn(self, '$disable_should', function(syntax_host) {
          var $a, $b, TMP_4, self = this;

          if (syntax_host == null) {
            syntax_host = self.$default_should_host()
          }
          if ((($a = self['$should_enabled?'](syntax_host)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil
          };
          ($a = ($b = syntax_host).$module_exec, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

          delete def.$should;
            return delete def.$should_not;}, TMP_4.$$s = self, TMP_4), $a).call($b);
          return ((((Opal.get('RSpec')).$$scope.get('Expectations'))).$$scope.get('ExpectationTarget')).$disable_deprecated_should();
        });

        Opal.defn(self, '$enable_expect', function(syntax_host) {
          var $a, $b, TMP_5, self = this;

          if (syntax_host == null) {
            syntax_host = ((Opal.get('RSpec')).$$scope.get('Matchers'))
          }
          if ((($a = self['$expect_enabled?'](syntax_host)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          ($a = ($b = syntax_host).$module_exec, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, TMP_6;

          return (Opal.defn(self, '$expect', TMP_6 = function(target) {
              var self = this, $iter = TMP_6.$$p, target_block = $iter || nil;

              target = $slice.call(arguments, 0);
              TMP_6.$$p = null;
              if ((target_block !== nil)) {
                target['$<<'](target_block)};
              if (target.$size()['$=='](1)) {
                } else {
                self.$raise($scope.get('ArgumentError').$new("You must pass an argument or a block to #expect but not both."))
              };
              return ((((Opal.get('RSpec')).$$scope.get('Expectations'))).$$scope.get('ExpectationTarget')).$new(target.$first());
            }), nil) && 'expect'}, TMP_5.$$s = self, TMP_5), $a).call($b);
          if ((($a = self['$should_enabled?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ((((Opal.get('RSpec')).$$scope.get('Expectations'))).$$scope.get('ExpectationTarget')).$enable_deprecated_should()
            } else {
            return nil
          };
        });

        Opal.defn(self, '$disable_expect', function(syntax_host) {
          var $a, $b, TMP_7, self = this;

          if (syntax_host == null) {
            syntax_host = ((Opal.get('RSpec')).$$scope.get('Matchers'))
          }
          if ((($a = self['$expect_enabled?'](syntax_host)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil
          };
          ($a = ($b = syntax_host).$module_exec, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

          return delete def.$expect}, TMP_7.$$s = self, TMP_7), $a).call($b);
          return ((((Opal.get('RSpec')).$$scope.get('Expectations'))).$$scope.get('ExpectationTarget')).$disable_deprecated_should();
        });

        Opal.defn(self, '$should_enabled?', function(syntax_host) {
          var self = this;

          if (syntax_host == null) {
            syntax_host = self.$default_should_host()
          }
          return syntax_host['$method_defined?']("should");
        });

        Opal.defn(self, '$expect_enabled?', function(syntax_host) {
          var self = this;

          if (syntax_host == null) {
            syntax_host = ((Opal.get('RSpec')).$$scope.get('Matchers'))
          }
          return syntax_host['$method_defined?']("expect");
        });

        Opal.defn(self, '$positive_expression', function(target_expression, matcher_expression) {
          var self = this;

          return self.$expression_generator().$positive_expression(target_expression, matcher_expression);
        });

        Opal.defn(self, '$negative_expression', function(target_expression, matcher_expression) {
          var self = this;

          return self.$expression_generator().$negative_expression(target_expression, matcher_expression);
        });

        Opal.defn(self, '$expression_generator', function() {
          var $a, self = this;

          if ((($a = self['$expect_enabled?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('ExpectExpressionGenerator')
            } else {
            return $scope.get('ShouldExpressionGenerator')
          };
        });

        (function($base) {
          var self = $module($base, 'ShouldExpressionGenerator');

          var def = self.$$proto, $scope = self.$$scope;

          Opal.defs(self, '$positive_expression', function(target_expression, matcher_expression) {
            var self = this;

            return "" + (target_expression) + ".should " + (matcher_expression);
          });

          Opal.defs(self, '$negative_expression', function(target_expression, matcher_expression) {
            var self = this;

            return "" + (target_expression) + ".should_not " + (matcher_expression);
          });
        })(self);

        (function($base) {
          var self = $module($base, 'ExpectExpressionGenerator');

          var def = self.$$proto, $scope = self.$$scope;

          Opal.defs(self, '$positive_expression', function(target_expression, matcher_expression) {
            var self = this;

            return "expect(" + (target_expression) + ").to " + (matcher_expression);
          });

          Opal.defs(self, '$negative_expression', function(target_expression, matcher_expression) {
            var self = this;

            return "expect(" + (target_expression) + ").not_to " + (matcher_expression);
          });
        })(self);
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/matchers/configuration"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include?', '$Array', '$enable_expect', '$disable_expect', '$enable_should', '$disable_should', '$should_enabled?', '$<<', '$expect_enabled?', '$respond_to?', '$color_enabled?', '$configuration', '$attr_writer', '$each', '$syntax=', '$warn_about_should!', '$new', '$reset_syntaxes_to_default']);
  self.$require("rspec/expectations/syntax");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Configuration(){};
        var self = $Configuration = $klass($base, $super, 'Configuration', $Configuration);

        var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_2;

        def.color = def.backtrace_formatter = nil;
        def['$syntax='] = function(values) {
          var $a, self = this;

          if ((($a = self.$Array(values)['$include?']("expect")) !== nil && (!$a.$$is_boolean || $a == true))) {
            (($scope.get('Expectations')).$$scope.get('Syntax')).$enable_expect()
            } else {
            (($scope.get('Expectations')).$$scope.get('Syntax')).$disable_expect()
          };
          if ((($a = self.$Array(values)['$include?']("should")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return (($scope.get('Expectations')).$$scope.get('Syntax')).$enable_should()
            } else {
            return (($scope.get('Expectations')).$$scope.get('Syntax')).$disable_should()
          };
        };

        def.$syntax = function() {
          var $a, self = this, syntaxes = nil;

          syntaxes = [];
          if ((($a = (($scope.get('Expectations')).$$scope.get('Syntax'))['$should_enabled?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            syntaxes['$<<']("should")};
          if ((($a = (($scope.get('Expectations')).$$scope.get('Syntax'))['$expect_enabled?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            syntaxes['$<<']("expect")};
          return syntaxes;
        };

        if ((($a = Opal.get('RSpec')['$respond_to?']("configuration")) !== nil && (!$a.$$is_boolean || $a == true))) {
          def['$color?'] = function() {
            var self = this;

            return Opal.get('RSpec').$configuration()['$color_enabled?']();
          }
          } else {
          self.$attr_writer("color");

          def['$color?'] = function() {
            var self = this;

            return self.color;
          };
        };

        def.$add_should_and_should_not_to = function(modules) {
          var $a, $b, TMP_1, self = this;

          modules = $slice.call(arguments, 0);
          return ($a = ($b = modules).$each, $a.$$p = (TMP_1 = function(mod){var self = TMP_1.$$s || this;
if (mod == null) mod = nil;
          return (($scope.get('Expectations')).$$scope.get('Syntax')).$enable_should(mod)}, TMP_1.$$s = self, TMP_1), $a).call($b);
        };

        self.$attr_writer("backtrace_formatter");

        def.$backtrace_formatter = function() {
          var $a, $b, self = this;

          return ((($a = self.backtrace_formatter) !== false && $a !== nil) ? $a : self.backtrace_formatter = (function() {if ((($b = (function(){ try { return ((((((Opal.get('RSpec')).$$scope.get('Core'))).$$scope.get('BacktraceFormatter'))) != null ? 'constant' : nil); } catch (err) { if (err.$$class === Opal.NameError) { return nil; } else { throw(err); }}; })()) !== nil && (!$b.$$is_boolean || $b == true))) {
            return ((((Opal.get('RSpec')).$$scope.get('Core'))).$$scope.get('BacktraceFormatter'))
            } else {
            return $scope.get('NullBacktraceFormatter')
          }; return nil; })());
        };

        def.$reset_syntaxes_to_default = function() {
          var $a, $b, self = this;

          (($a = [["should", "expect"]]), $b = self, $b['$syntax='].apply($b, $a), $a[$a.length-1]);
          return (((($scope.get('RSpec')).$$scope.get('Expectations'))).$$scope.get('Syntax'))['$warn_about_should!']();
        };

        return Opal.cdecl($scope, 'NullBacktraceFormatter', ($a = ($b = $scope.get('Module')).$new, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return (Opal.defs(self, '$format_backtrace', function(backtrace) {
            var self = this;

            return backtrace;
          }), nil) && 'format_backtrace'}, TMP_2.$$s = self, TMP_2), $a).call($b));
      })(self, null);

      Opal.defs(self, '$configuration', function() {
        var $a, self = this;
        if (self.configuration == null) self.configuration = nil;

        return ((($a = self.configuration) !== false && $a !== nil) ? $a : self.configuration = $scope.get('Configuration').$new());
      });

      self.$configuration().$reset_syntaxes_to_default();
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/expectations/fail_with"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$new', '$!', '$raise', '$+', '$all_strings?', '$any_multiline_strings?', '$<<', '$diff_as_string', '$differ', '$coerce_to_string', '$no_procs?', '$no_numbers?', '$diff_as_object', '$private', '$none?', '$===', '$flatten', '$all?', '$any?', '$multiline?', '$join', '$diffably_stringify', '$map', '$inspect', '$gsub', '$to_s', '$method_defined?', '$include?', '$encode', '$encoding']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Expectations');

      var def = self.$$proto, $scope = self.$$scope;

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto;

        self.$$proto.$differ = function() {
          var $a, self = this;
          if (self.differ == null) self.differ = nil;

          return ((($a = self.differ) !== false && $a !== nil) ? $a : self.differ = $scope.get('Differ').$new());
        };
        self.$$proto.$fail_with = function(message, expected, actual) {
          var $a, $b, self = this;

          if (expected == null) {
            expected = nil
          }
          if (actual == null) {
            actual = nil
          }
          if ((($a = message['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$raise($scope.get('ArgumentError'), "Failure message is nil. Does your matcher define the "['$+']("appropriate failure_message_for_* method to return a string?"))};
          if ((($a = (($b = actual !== false && actual !== nil) ? expected : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            if ((($a = self['$all_strings?'](actual, expected)) !== nil && (!$a.$$is_boolean || $a == true))) {
              if ((($a = self['$any_multiline_strings?'](actual, expected)) !== nil && (!$a.$$is_boolean || $a == true))) {
                message['$<<']("\nDiff:")['$<<'](self.$differ().$diff_as_string(self.$coerce_to_string(actual), self.$coerce_to_string(expected)))}
            } else if ((($a = ($b = self['$no_procs?'](actual, expected), $b !== false && $b !== nil ?self['$no_numbers?'](actual, expected) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              message['$<<']("\nDiff:")['$<<'](self.$differ().$diff_as_object(actual, expected))}};
          return self.$raise((((($scope.get('RSpec')).$$scope.get('Expectations'))).$$scope.get('ExpectationNotMetError')).$new(message));
        };
        self.$private();
        self.$$proto['$no_procs?'] = function(args) {
          var $a, $b, TMP_1, self = this;

          args = $slice.call(arguments, 0);
          return ($a = ($b = args.$flatten())['$none?'], $a.$$p = (TMP_1 = function(a){var self = TMP_1.$$s || this;
if (a == null) a = nil;
          return $scope.get('Proc')['$==='](a)}, TMP_1.$$s = self, TMP_1), $a).call($b);
        };
        self.$$proto['$all_strings?'] = function(args) {
          var $a, $b, TMP_2, self = this;

          args = $slice.call(arguments, 0);
          return ($a = ($b = args.$flatten())['$all?'], $a.$$p = (TMP_2 = function(a){var self = TMP_2.$$s || this;
if (a == null) a = nil;
          return $scope.get('String')['$==='](a)}, TMP_2.$$s = self, TMP_2), $a).call($b);
        };
        self.$$proto['$any_multiline_strings?'] = function(args) {
          var $a, $b, $c, $d, TMP_3, self = this;

          args = $slice.call(arguments, 0);
          return ($a = ($b = self)['$all_strings?'].apply($b, [].concat(args)), $a !== false && $a !== nil ?($c = ($d = args.$flatten())['$any?'], $c.$$p = (TMP_3 = function(a){var self = TMP_3.$$s || this;
if (a == null) a = nil;
          return self['$multiline?'](a)}, TMP_3.$$s = self, TMP_3), $c).call($d) : $a);
        };
        self.$$proto['$no_numbers?'] = function(args) {
          var $a, $b, TMP_4, self = this;

          args = $slice.call(arguments, 0);
          return ($a = ($b = args.$flatten())['$none?'], $a.$$p = (TMP_4 = function(a){var self = TMP_4.$$s || this;
if (a == null) a = nil;
          return $scope.get('Numeric')['$==='](a)}, TMP_4.$$s = self, TMP_4), $a).call($b);
        };
        self.$$proto.$coerce_to_string = function(string_or_array) {
          var $a, self = this;

          if ((($a = $scope.get('Array')['$==='](string_or_array)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return string_or_array
          };
          return self.$diffably_stringify(string_or_array).$join("\n");
        };
        self.$$proto.$diffably_stringify = function(array) {
          var $a, $b, TMP_5, self = this;

          return ($a = ($b = array).$map, $a.$$p = (TMP_5 = function(entry){var self = TMP_5.$$s || this, $a;
if (entry == null) entry = nil;
          if ((($a = $scope.get('Array')['$==='](entry)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return entry.$inspect()
              } else {
              return entry.$to_s().$gsub("\n", "\\n")
            }}, TMP_5.$$s = self, TMP_5), $a).call($b);
        };
        if ((($a = $scope.get('String')['$method_defined?']("encoding")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return (self.$$proto['$multiline?'] = function(string) {
            var self = this;

            return string['$include?']("\n".$encode(string.$encoding()));
          }, nil) && 'multiline?'
          } else {
          return (self.$$proto['$multiline?'] = function(string) {
            var self = this;

            return string['$include?']("\n");
          }, nil) && 'multiline?'
        };
      })(self.$singleton_class())
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/expectations/errors"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Expectations');

      var def = self.$$proto, $scope = self.$$scope, $a;

      if ((($a = (function(){ try { return (((((($scope.get('Test')).$$scope.get('Unit'))).$$scope.get('AssertionFailedError'))) != null ? 'constant' : nil); } catch (err) { if (err.$$class === Opal.NameError) { return nil; } else { throw(err); }}; })()) !== nil && (!$a.$$is_boolean || $a == true))) {
        (function($base, $super) {
          function $ExpectationNotMetError(){};
          var self = $ExpectationNotMetError = $klass($base, $super, 'ExpectationNotMetError', $ExpectationNotMetError);

          var def = self.$$proto, $scope = self.$$scope;

          return nil;
        })(self, (((($scope.get('Test')).$$scope.get('Unit'))).$$scope.get('AssertionFailedError')))
        } else {
        (function($base, $super) {
          function $ExpectationNotMetError(){};
          var self = $ExpectationNotMetError = $klass($base, $super, 'ExpectationNotMetError', $ExpectationNotMetError);

          var def = self.$$proto, $scope = self.$$scope;

          return nil;
        })(self, Opal.get('StandardError'))
      }
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/expectations/handler"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$nil?', '$respond_to?', '$warn', '$join', '$inspect', '$check_message', '$last_should=', '$last_matcher=', '$new', '$matches?', '$to_proc', '$call', '$failure_message_for_should', '$failure_message', '$diffable?', '$fail_with', '$expected', '$actual', '$!', '$does_not_match?', '$failure_message_for_should_not', '$negative_failure_message']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Expectations');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ExpectationHandler(){};
        var self = $ExpectationHandler = $klass($base, $super, 'ExpectationHandler', $ExpectationHandler);

        var def = self.$$proto, $scope = self.$$scope;

        return (Opal.defs(self, '$check_message', function(msg) {
          var $a, $b, $c, self = this;

          if ((($a = ((($b = ((($c = msg['$nil?']()) !== false && $c !== nil) ? $c : msg['$respond_to?']("to_str"))) !== false && $b !== nil) ? $b : msg['$respond_to?']("call"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return Opal.get('Kernel').$warn(["WARNING: ignoring the provided expectation message argument (", msg.$inspect(), ") since it is not a string or a proc."].$join())
          };
        }), nil) && 'check_message'
      })(self, null);

      (function($base, $super) {
        function $PositiveExpectationHandler(){};
        var self = $PositiveExpectationHandler = $klass($base, $super, 'PositiveExpectationHandler', $PositiveExpectationHandler);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        return (Opal.defs(self, '$handle_matcher', TMP_1 = function(actual, matcher, message) {
          var $a, $b, $c, self = this, $iter = TMP_1.$$p, block = $iter || nil, match = nil;

          if (message == null) {
            message = nil
          }
          TMP_1.$$p = null;
          self.$check_message(message);
          (($a = ["should"]), $b = ((Opal.get('RSpec')).$$scope.get('Matchers')), $b['$last_should='].apply($b, $a), $a[$a.length-1]);
          (($a = [matcher]), $b = ((Opal.get('RSpec')).$$scope.get('Matchers')), $b['$last_matcher='].apply($b, $a), $a[$a.length-1]);
          if ((($a = matcher['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ((((((Opal.get('RSpec')).$$scope.get('Matchers'))).$$scope.get('BuiltIn'))).$$scope.get('PositiveOperatorMatcher')).$new(actual)};
          match = ($a = ($b = matcher)['$matches?'], $a.$$p = block.$to_proc(), $a).call($b, actual);
          if (match !== false && match !== nil) {
            return match};
          if ((($a = message['$respond_to?']("call")) !== nil && (!$a.$$is_boolean || $a == true))) {
            message = message.$call()};
          ((($a = message) !== false && $a !== nil) ? $a : message = (function() {if ((($c = matcher['$respond_to?']("failure_message_for_should")) !== nil && (!$c.$$is_boolean || $c == true))) {
            return matcher.$failure_message_for_should()
            } else {
            return matcher.$failure_message()
          }; return nil; })());
          if ((($a = ($c = matcher['$respond_to?']("diffable?"), $c !== false && $c !== nil ?matcher['$diffable?']() : $c)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ((Opal.get('RSpec')).$$scope.get('Expectations')).$fail_with(message, matcher.$expected(), matcher.$actual())
            } else {
            return ((Opal.get('RSpec')).$$scope.get('Expectations')).$fail_with(message)
          };
        }), nil) && 'handle_matcher'
      })(self, $scope.get('ExpectationHandler'));

      (function($base, $super) {
        function $NegativeExpectationHandler(){};
        var self = $NegativeExpectationHandler = $klass($base, $super, 'NegativeExpectationHandler', $NegativeExpectationHandler);

        var def = self.$$proto, $scope = self.$$scope, TMP_2;

        return (Opal.defs(self, '$handle_matcher', TMP_2 = function(actual, matcher, message) {
          var $a, $b, $c, $d, self = this, $iter = TMP_2.$$p, block = $iter || nil, match = nil;

          if (message == null) {
            message = nil
          }
          TMP_2.$$p = null;
          self.$check_message(message);
          (($a = ["should_not"]), $b = ((Opal.get('RSpec')).$$scope.get('Matchers')), $b['$last_should='].apply($b, $a), $a[$a.length-1]);
          (($a = [matcher]), $b = ((Opal.get('RSpec')).$$scope.get('Matchers')), $b['$last_matcher='].apply($b, $a), $a[$a.length-1]);
          if ((($a = matcher['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ((((((Opal.get('RSpec')).$$scope.get('Matchers'))).$$scope.get('BuiltIn'))).$$scope.get('NegativeOperatorMatcher')).$new(actual)};
          match = (function() {if ((($a = matcher['$respond_to?']("does_not_match?")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = matcher)['$does_not_match?'], $a.$$p = block.$to_proc(), $a).call($b, actual)['$!']()
            } else {
            return ($a = ($c = matcher)['$matches?'], $a.$$p = block.$to_proc(), $a).call($c, actual)
          }; return nil; })();
          if (match !== false && match !== nil) {
            } else {
            return match
          };
          if ((($a = message['$respond_to?']("call")) !== nil && (!$a.$$is_boolean || $a == true))) {
            message = message.$call()};
          ((($a = message) !== false && $a !== nil) ? $a : message = (function() {if ((($d = matcher['$respond_to?']("failure_message_for_should_not")) !== nil && (!$d.$$is_boolean || $d == true))) {
            return matcher.$failure_message_for_should_not()
            } else {
            return matcher.$negative_failure_message()
          }; return nil; })());
          if ((($a = ($d = matcher['$respond_to?']("diffable?"), $d !== false && $d !== nil ?matcher['$diffable?']() : $d)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ((Opal.get('RSpec')).$$scope.get('Expectations')).$fail_with(message, matcher.$expected(), matcher.$actual())
            } else {
            return ((Opal.get('RSpec')).$$scope.get('Expectations')).$fail_with(message)
          };
        }), nil) && 'handle_matcher'
      })(self, $scope.get('ExpectationHandler'));
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/expectations/version"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Expectations');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Version');

        var def = self.$$proto, $scope = self.$$scope;

        Opal.cdecl($scope, 'STRING', "3.0.0.beta1")
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["diff/lcs"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  return nil
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["diff/lcs/hunk"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  return nil
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["pp"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$inspect', '$each', '$<=', '$length', '$[]']);
  return (function($base) {
    var self = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, $a;

    Opal.defn(self, '$pretty_inspect', function() {
      var self = this;

      return self.$inspect();
    });

    if ((($a = (typeof console === "undefined" || typeof console.log === "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      Opal.defn(self, '$pp', def.$p)
      } else {
      Opal.defn(self, '$pp', function(args) {
        var $a, $b, TMP_1, self = this;

        args = $slice.call(arguments, 0);
        ($a = ($b = args).$each, $a.$$p = (TMP_1 = function(obj){var self = TMP_1.$$s || this;
if (obj == null) obj = nil;
        console.log(obj);}, TMP_1.$$s = self, TMP_1), $a).call($b);
        if (args.$length()['$<='](1)) {
          return args['$[]'](0)
          } else {
          return args
        };
      })
    };
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/expectations/differ"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$pick_encoding', '$matching_encoding', '$map!', '$chomp', '$split', '$diff', '$empty?', '$each', '$new', '$context_lines', '$file_length_difference', '$>', '$overlaps?', '$respond_to?', '$merge', '$unshift', '$<<', '$to_s', '$format', '$color_diff', '$!', '$==', '$encoding', '$+', '$object_to_string', '$diff_as_string', '$protected', '$color', '$color?', '$configuration', '$join', '$map', '$chr', '$[]', '$===', '$green', '$red', '$blue', '$lines', '$singleline_pp', '$sort_by', '$keys', '$=~', '$inspect', '$pp', '$private', '$method_defined?', '$compatible?', '$default_external', '$encode']);
  self.$require("diff/lcs");
  self.$require("diff/lcs/hunk");
  self.$require("pp");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Expectations');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Differ(){};
        var self = $Differ = $klass($base, $super, 'Differ', $Differ);

        var def = self.$$proto, $scope = self.$$scope, $a;

        def.$diff_as_string = function(input_data_new, input_data_old) {
          var $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, self = this, encoding = nil, output = nil, data_old = nil, data_new = nil, diffs = nil, oldhunk = nil, hunk = nil, file_length_difference = nil;

          try {
          encoding = self.$pick_encoding(input_data_new, input_data_old);
            output = self.$matching_encoding("", encoding);
            data_old = ($a = ($b = input_data_old.$split(self.$matching_encoding("\n", encoding)))['$map!'], $a.$$p = (TMP_1 = function(e){var self = TMP_1.$$s || this;
if (e == null) e = nil;
            return e.$chomp()}, TMP_1.$$s = self, TMP_1), $a).call($b);
            data_new = ($a = ($c = input_data_new.$split(self.$matching_encoding("\n", encoding)))['$map!'], $a.$$p = (TMP_2 = function(e){var self = TMP_2.$$s || this;
if (e == null) e = nil;
            return e.$chomp()}, TMP_2.$$s = self, TMP_2), $a).call($c);
            diffs = (($scope.get('Diff')).$$scope.get('LCS')).$diff(data_old, data_new);
            if ((($a = diffs['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return output};
            oldhunk = hunk = nil;
            file_length_difference = 0;
            ($a = ($d = diffs).$each, $a.$$p = (TMP_3 = function(piece){var self = TMP_3.$$s || this, $a, $b;
if (piece == null) piece = nil;
            try {
              hunk = (((($scope.get('Diff')).$$scope.get('LCS'))).$$scope.get('Hunk')).$new(data_old, data_new, piece, self.$context_lines(), file_length_difference);
              file_length_difference = hunk.$file_length_difference();
              if (oldhunk !== false && oldhunk !== nil) {
                } else {
                return nil;
              };
              if ((($a = ($b = (self.$context_lines()['$>'](0)), $b !== false && $b !== nil ?hunk['$overlaps?'](oldhunk) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
                if ((($a = hunk['$respond_to?']("merge")) !== nil && (!$a.$$is_boolean || $a == true))) {
                  return hunk.$merge(oldhunk)
                  } else {
                  return hunk.$unshift(oldhunk)
                }
                } else {
                return output['$<<'](self.$matching_encoding(oldhunk.$diff(self.$format()).$to_s(), encoding))
              };
              } finally {
              oldhunk = hunk;
              output['$<<'](self.$matching_encoding("\n", encoding));
              }}, TMP_3.$$s = self, TMP_3), $a).call($d);
            output['$<<'](self.$matching_encoding(oldhunk.$diff(self.$format()).$to_s(), encoding));
            output['$<<'](self.$matching_encoding("\n", encoding));
            return self.$color_diff(output);
          } catch ($err) {if (Opal.rescue($err, [(($scope.get('Encoding')).$$scope.get('CompatibilityError'))])) {
            if ((($a = input_data_new.$encoding()['$=='](input_data_old.$encoding())['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return ((("Could not produce a diff because the encoding of the actual string (") + (input_data_old.$encoding())) + ") ")['$+']("differs from the encoding of the expected string (" + (input_data_new.$encoding()) + ")")
              } else {
              return "Could not produce a diff because of the encoding of the string (" + (input_data_old.$encoding()) + ")"
            }
            }else { throw $err; }
          };
        };

        def.$diff_as_object = function(actual, expected) {
          var $a, self = this, actual_as_string = nil, expected_as_string = nil, diff = nil;

          actual_as_string = self.$object_to_string(actual);
          expected_as_string = self.$object_to_string(expected);
          if ((($a = diff = self.$diff_as_string(actual_as_string, expected_as_string)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$color_diff(diff)
            } else {
            return nil
          };
        };

        self.$protected();

        def.$format = function() {
          var self = this;

          return "unified";
        };

        def.$context_lines = function() {
          var self = this;

          return 3;
        };

        def.$color = function(text, color_code) {
          var self = this;

          return "\e[" + (color_code) + "m" + (text) + "\e[0m";
        };

        def.$red = function(text) {
          var self = this;

          return self.$color(text, 31);
        };

        def.$green = function(text) {
          var self = this;

          return self.$color(text, 32);
        };

        def.$blue = function(text) {
          var self = this;

          return self.$color(text, 34);
        };

        def.$color_diff = function(diff) {
          var $a, $b, TMP_4, self = this;

          if ((($a = (($scope.get('RSpec')).$$scope.get('Matchers')).$configuration()['$color?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return diff
          };
          return ($a = ($b = diff.$lines()).$map, $a.$$p = (TMP_4 = function(line){var self = TMP_4.$$s || this, $case = nil;
if (line == null) line = nil;
          return (function() {$case = line['$[]'](0).$chr();if ("+"['$===']($case)) {return self.$green(line)}else if ("-"['$===']($case)) {return self.$red(line)}else if ("@"['$===']($case)) {if (line['$[]'](1).$chr()['$==']("@")) {
              return self.$blue(line)
              } else {
              return line
            }}else {return line}})()}, TMP_4.$$s = self, TMP_4), $a).call($b).$join();
        };

        def.$object_to_string = function(object) {
          var $a, $b, TMP_5, $c, $d, TMP_6, self = this, $case = nil;

          return (function() {$case = object;if ($scope.get('Hash')['$===']($case)) {return ($a = ($b = ($c = ($d = object.$keys()).$sort_by, $c.$$p = (TMP_6 = function(k){var self = TMP_6.$$s || this;
if (k == null) k = nil;
          return k.$to_s()}, TMP_6.$$s = self, TMP_6), $c).call($d)).$map, $a.$$p = (TMP_5 = function(key){var self = TMP_5.$$s || this, pp_key = nil, pp_value = nil, encoding = nil;
if (key == null) key = nil;
          pp_key = $scope.get('PP').$singleline_pp(key, "");
            pp_value = $scope.get('PP').$singleline_pp(object['$[]'](key), "");
            encoding = self.$pick_encoding(pp_key, pp_value);
            return self.$matching_encoding("" + (pp_key) + " => " + (pp_value), encoding);}, TMP_5.$$s = self, TMP_5), $a).call($b).$join(",\n")}else if ($scope.get('String')['$===']($case)) {if ((($a = object['$=~'](/\n/)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return object
            } else {
            return object.$inspect()
          }}else {return $scope.get('PP').$pp(object, "")}})();
        };

        self.$private();

        if ((($a = $scope.get('String')['$method_defined?']("encoding")) !== nil && (!$a.$$is_boolean || $a == true))) {
          def.$pick_encoding = function(source_a, source_b) {
            var $a, self = this;

            return ((($a = $scope.get('Encoding')['$compatible?'](source_a, source_b)) !== false && $a !== nil) ? $a : $scope.get('Encoding').$default_external());
          };

          return (def.$matching_encoding = function(string, encoding) {
            var self = this;

            try {
            return string.$encode(encoding)
            } catch ($err) {if (Opal.rescue($err, [(($scope.get('Encoding')).$$scope.get('UndefinedConversionError'))])) {
              return string.$encode(encoding, $hash2(["undef"], {"undef": "replace"}))
              }else { throw $err; }
            };
          }, nil) && 'matching_encoding';
          } else {
          def.$pick_encoding = function(source_a, source_b) {
            var self = this;

            return nil;
          };

          return (def.$matching_encoding = function(string, encoding) {
            var self = this;

            return string;
          }, nil) && 'matching_encoding';
        };
      })(self, null)
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/expectations"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$instance_method', '$>=', '$to_i', '$call', '$bind', '$===', '$method']);
  self.$require("rspec/support/caller_filter");
  self.$require("rspec/support/warnings");
  self.$require("rspec/expectations/extensions");
  self.$require("rspec/matchers");
  self.$require("rspec/expectations/expectation_target");
  self.$require("rspec/matchers/configuration");
  self.$require("rspec/expectations/fail_with");
  self.$require("rspec/expectations/errors");
  self.$require("rspec/expectations/handler");
  self.$require("rspec/expectations/version");
  self.$require("rspec/expectations/differ");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Expectations');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.cdecl($scope, 'KERNEL_METHOD_METHOD', Opal.get('Kernel').$instance_method("method"));

      if ($scope.get('RUBY_VERSION').$to_i()['$>='](2)) {
        Opal.defs(self, '$method_handle_for', function(object, method_name) {
          var self = this;

          return $scope.get('KERNEL_METHOD_METHOD').$bind(object).$call(method_name);
        })
        } else {
        Opal.defs(self, '$method_handle_for', function(object, method_name) {
          var $a, self = this;

          if ((($a = Opal.get('Kernel')['$==='](object)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('KERNEL_METHOD_METHOD').$bind(object).$call(method_name)
            } else {
            return object.$method(method_name)
          };
        })
      };
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["test/unit/assertions"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  return nil
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["stringio"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$include', '$new', '$call', '$close', '$attr_accessor', '$length', '$include?', '$!', '$check_readable', '$==', '$===', '$>=', '$raise', '$>', '$+', '$-', '$seek', '$enum_for', '$eof?', '$ord', '$[]', '$check_writable', '$String', '$write', '$closed_write?', '$closed_read?']);
  return (function($base, $super) {
    function $StringIO(){};
    var self = $StringIO = $klass($base, $super, 'StringIO', $StringIO);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

    def.position = def.string = def.closed = nil;
    self.$include((($scope.get('IO')).$$scope.get('Readable')));

    self.$include((($scope.get('IO')).$$scope.get('Writable')));

    Opal.defs(self, '$open', TMP_1 = function(string, mode) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil, io = nil, res = nil;

      if (string == null) {
        string = ""
      }
      if (mode == null) {
        mode = nil
      }
      TMP_1.$$p = null;
      io = self.$new(string, mode);
      res = block.$call(io);
      io.$close();
      return res;
    });

    self.$attr_accessor("string");

    def.$initialize = function(string, mode) {
      var $a, $b, self = this;

      if (string == null) {
        string = ""
      }
      if (mode == null) {
        mode = "rw"
      }
      self.string = string;
      self.position = string.$length();
      if ((($a = ($b = mode['$include?']("r"), $b !== false && $b !== nil ?mode['$include?']("w")['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.closed = "write"
      } else if ((($a = ($b = mode['$include?']("w"), $b !== false && $b !== nil ?mode['$include?']("r")['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.closed = "read"
        } else {
        return nil
      };
    };

    def['$eof?'] = function() {
      var self = this;

      self.$check_readable();
      return self.position['$=='](self.string.$length());
    };

    Opal.defn(self, '$eof', def['$eof?']);

    def.$seek = function(pos, whence) {
      var self = this, $case = nil;

      if (whence == null) {
        whence = (($scope.get('IO')).$$scope.get('SEEK_SET'))
      }
      $case = whence;if ((($scope.get('IO')).$$scope.get('SEEK_SET'))['$===']($case)) {if (pos['$>='](0)) {
        } else {
        self.$raise((($scope.get('Errno')).$$scope.get('EINVAL')))
      };
      self.position = pos;}else if ((($scope.get('IO')).$$scope.get('SEEK_CUR'))['$===']($case)) {if (self.position['$+'](pos)['$>'](self.string.$length())) {
        self.position = self.string.$length()
        } else {
        self.position = self.position['$+'](pos)
      }}else if ((($scope.get('IO')).$$scope.get('SEEK_END'))['$===']($case)) {if (pos['$>'](self.string.$length())) {
        self.position = 0
        } else {
        self.position = self.position['$-'](pos)
      }};
      return 0;
    };

    def.$tell = function() {
      var self = this;

      return self.position;
    };

    Opal.defn(self, '$pos', def.$tell);

    Opal.defn(self, '$pos=', def.$seek);

    def.$rewind = function() {
      var self = this;

      return self.$seek(0);
    };

    def.$each_byte = TMP_2 = function() {
      var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil, i = nil;

      TMP_2.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("each_byte")
      };
      self.$check_readable();
      i = self.position;
      while (!((($b = self['$eof?']()) !== nil && (!$b.$$is_boolean || $b == true)))) {
      block.$call(self.string['$[]'](i).$ord());
      i = i['$+'](1);};
      return self;
    };

    def.$each_char = TMP_3 = function() {
      var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil, i = nil;

      TMP_3.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("each_char")
      };
      self.$check_readable();
      i = self.position;
      while (!((($b = self['$eof?']()) !== nil && (!$b.$$is_boolean || $b == true)))) {
      block.$call(self.string['$[]'](i));
      i = i['$+'](1);};
      return self;
    };

    def.$write = function(string) {
      var self = this, before = nil, after = nil;

      self.$check_writable();
      string = self.$String(string);
      if (self.string.$length()['$=='](self.position)) {
        self.string = self.string['$+'](string);
        return self.position = self.position['$+'](string.$length());
        } else {
        before = self.string['$[]']($range(0, self.position['$-'](1), false));
        after = self.string['$[]']($range(self.position['$+'](string.$length()), -1, false));
        self.string = before['$+'](string)['$+'](after);
        return self.position = self.position['$+'](string.$length());
      };
    };

    def.$read = function(length, outbuf) {
      var $a, self = this, string = nil, str = nil;

      if (length == null) {
        length = nil
      }
      if (outbuf == null) {
        outbuf = nil
      }
      self.$check_readable();
      if ((($a = self['$eof?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil};
      string = (function() {if (length !== false && length !== nil) {
        str = self.string['$[]'](self.position, length);
        self.position = self.position['$+'](length);
        return str;
        } else {
        str = self.string['$[]']($range(self.position, -1, false));
        self.position = self.string.$length();
        return str;
      }; return nil; })();
      if (outbuf !== false && outbuf !== nil) {
        return outbuf.$write(string)
        } else {
        return string
      };
    };

    def.$close = function() {
      var self = this;

      return self.closed = "both";
    };

    def.$close_read = function() {
      var self = this;

      if (self.closed['$==']("write")) {
        return self.closed = "both"
        } else {
        return self.closed = "read"
      };
    };

    def.$close_write = function() {
      var self = this;

      if (self.closed['$==']("read")) {
        return self.closed = "both"
        } else {
        return self.closed = "write"
      };
    };

    def['$closed?'] = function() {
      var self = this;

      return self.closed['$==']("both");
    };

    def['$closed_read?'] = function() {
      var $a, self = this;

      return ((($a = self.closed['$==']("read")) !== false && $a !== nil) ? $a : self.closed['$==']("both"));
    };

    def['$closed_write?'] = function() {
      var $a, self = this;

      return ((($a = self.closed['$==']("write")) !== false && $a !== nil) ? $a : self.closed['$==']("both"));
    };

    def.$check_writable = function() {
      var $a, self = this;

      if ((($a = self['$closed_write?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('IOError'), "not opened for writing")
        } else {
        return nil
      };
    };

    return (def.$check_readable = function() {
      var $a, self = this;

      if ((($a = self['$closed_read?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('IOError'), "not opened for reading")
        } else {
        return nil
      };
    }, nil) && 'check_readable';
  })(self, $scope.get('IO'))
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/formatters/base_formatter"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$attr_accessor', '$attr_reader', '$new', '$start_sync_output', '$<<', '$examples', '$restore_sync_output', '$format_backtrace', '$backtrace_formatter', '$configuration', '$metadata', '$protected', '$find_failed_line', '$backtrace', '$file_path', '$[]', '$match', '$exist?', '$readlines', '$-', '$to_i', '$expand_path', '$detect', '$==', '$downcase', '$output_supports_sync', '$sync', '$output', '$sync=', '$!', '$closed?', '$respond_to?', '$profile_examples', '$fail_fast', '$color_enabled?', '$profile_examples?', '$fail_fast?', '$first', '$reverse', '$sort_by', '$execution_result', '$map', '$inject', '$+', '$each', '$last', '$parent_groups', '$example_group', '$[]=', '$has_key?', '$top_level_description', '$<=', '$length', '$keys', '$each_value', '$/', '$to_f', '$-@']);
  self.$require("rspec/core/formatters/helpers");
  self.$require("stringio");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Formatters');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $BaseFormatter(){};
          var self = $BaseFormatter = $klass($base, $super, 'BaseFormatter', $BaseFormatter);

          var def = self.$$proto, $scope = self.$$scope;

          def.pending_examples = def.failed_examples = def.old_sync = nil;
          self.$include($scope.get('Helpers'));

          self.$attr_accessor("example_group");

          self.$attr_reader("duration", "examples", "output");

          self.$attr_reader("example_count", "pending_count", "failure_count");

          self.$attr_reader("failed_examples", "pending_examples");

          def.$initialize = function(output) {
            var $a, self = this;

            self.output = ((($a = output) !== false && $a !== nil) ? $a : $scope.get('StringIO').$new());
            self.example_count = self.pending_count = self.failure_count = 0;
            self.examples = [];
            self.failed_examples = [];
            self.pending_examples = [];
            return self.example_group = nil;
          };

          def.$start = function(example_count) {
            var self = this;

            self.$start_sync_output();
            return self.example_count = example_count;
          };

          def.$example_group_started = function(example_group) {
            var self = this;

            return self.example_group = example_group;
          };

          def.$example_group_finished = function(example_group) {
            var self = this;

            return nil;
          };

          def.$example_started = function(example) {
            var self = this;

            return self.$examples()['$<<'](example);
          };

          def.$example_passed = function(example) {
            var self = this;

            return nil;
          };

          def.$example_pending = function(example) {
            var self = this;

            return self.pending_examples['$<<'](example);
          };

          def.$example_failed = function(example) {
            var self = this;

            return self.failed_examples['$<<'](example);
          };

          def.$message = function(message) {
            var self = this;

            return nil;
          };

          def.$stop = function() {
            var self = this;

            return nil;
          };

          def.$start_dump = function() {
            var self = this;

            return nil;
          };

          def.$dump_failures = function() {
            var self = this;

            return nil;
          };

          def.$dump_summary = function(duration, example_count, failure_count, pending_count) {
            var self = this;

            self.duration = duration;
            self.example_count = example_count;
            self.failure_count = failure_count;
            return self.pending_count = pending_count;
          };

          def.$dump_pending = function() {
            var self = this;

            return nil;
          };

          def.$dump_profile = function() {
            var self = this;

            return nil;
          };

          def.$seed = function(number) {
            var self = this;

            return nil;
          };

          def.$close = function() {
            var self = this;

            return self.$restore_sync_output();
          };

          def.$format_backtrace = function(backtrace, example) {
            var self = this;

            return self.$configuration().$backtrace_formatter().$format_backtrace(backtrace, example.$metadata());
          };

          self.$protected();

          def.$configuration = function() {
            var self = this;

            return $scope.get('RSpec').$configuration();
          };

          def.$read_failed_line = function(exception, example) {
            var $a, self = this, matching_line = nil, file_path = nil, line_number = nil;

            try {
            if ((($a = matching_line = self.$find_failed_line(exception.$backtrace(), example.$file_path())) !== nil && (!$a.$$is_boolean || $a == true))) {
                } else {
                return "Unable to find matching line from backtrace"
              };
              $a = Opal.to_ary(matching_line.$match(/(.+?):(\d+)(|:\d+)/)['$[]']($range(1, 2, false))), file_path = ($a[0] == null ? nil : $a[0]), line_number = ($a[1] == null ? nil : $a[1]);
              if ((($a = $scope.get('File')['$exist?'](file_path)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return ((($a = $scope.get('File').$readlines(file_path)['$[]'](line_number.$to_i()['$-'](1))) !== false && $a !== nil) ? $a : "Unable to find matching line in " + (file_path))
                } else {
                return "Unable to find " + (file_path) + " to read failed line"
              };
            } catch ($err) {if (Opal.rescue($err, [$scope.get('SecurityError')])) {
              return "Unable to read failed line"
              }else { throw $err; }
            };
          };

          def.$find_failed_line = function(backtrace, path) {
            var $a, $b, TMP_1, self = this;

            path = $scope.get('File').$expand_path(path);
            return ($a = ($b = backtrace).$detect, $a.$$p = (TMP_1 = function(line){var self = TMP_1.$$s || this, $a, match = nil;
if (line == null) line = nil;
            match = line.$match(/(.+?):(\d+)(|:\d+)/);
              return (($a = match !== false && match !== nil) ? match['$[]'](1).$downcase()['$=='](path.$downcase()) : $a);}, TMP_1.$$s = self, TMP_1), $a).call($b);
          };

          def.$start_sync_output = function() {
            var $a, self = this;

            if ((($a = self.$output_supports_sync()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return $a = [self.$output().$sync(), true], self.old_sync = $a[0], self.$output()['$sync=']($a[1])
              } else {
              return nil
            };
          };

          def.$restore_sync_output = function() {
            var $a, $b, self = this;

            if ((($a = ($b = self.$output_supports_sync(), $b !== false && $b !== nil ?self.$output()['$closed?']()['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return (($a = [self.old_sync]), $b = self.$output(), $b['$sync='].apply($b, $a), $a[$a.length-1])
              } else {
              return nil
            };
          };

          def.$output_supports_sync = function() {
            var self = this;

            return self.$output()['$respond_to?']("sync=");
          };

          def['$profile_examples?'] = function() {
            var self = this;

            return self.$configuration().$profile_examples();
          };

          def['$fail_fast?'] = function() {
            var self = this;

            return self.$configuration().$fail_fast();
          };

          def['$color_enabled?'] = function() {
            var self = this;

            return self.$configuration()['$color_enabled?'](self.$output());
          };

          def['$mute_profile_output?'] = function(failure_count) {
            var $a, $b, self = this;

            return ((($a = self['$profile_examples?']()['$!']()) !== false && $a !== nil) ? $a : (($b = self['$fail_fast?'](), $b !== false && $b !== nil ?failure_count['$=='](0)['$!']() : $b)));
          };

          def.$slowest_examples = function() {
            var $a, $b, TMP_2, $c, $d, TMP_3, self = this, number_of_examples = nil, sorted_examples = nil, total = nil, slows = nil;

            number_of_examples = $scope.get('RSpec').$configuration().$profile_examples();
            sorted_examples = ($a = ($b = self.$examples()).$sort_by, $a.$$p = (TMP_2 = function(example){var self = TMP_2.$$s || this;
if (example == null) example = nil;
            return example.$execution_result()['$[]']("run_time")}, TMP_2.$$s = self, TMP_2), $a).call($b).$reverse().$first(number_of_examples);
            $a = Opal.to_ary(($c = ($d = [self.$examples(), sorted_examples]).$map, $c.$$p = (TMP_3 = function(exs){var self = TMP_3.$$s || this, $a, $b, TMP_4;
if (exs == null) exs = nil;
            return ($a = ($b = exs).$inject, $a.$$p = (TMP_4 = function(i, e){var self = TMP_4.$$s || this;
if (i == null) i = nil;if (e == null) e = nil;
              return i['$+'](e.$execution_result()['$[]']("run_time"))}, TMP_4.$$s = self, TMP_4), $a).call($b, 0.0)}, TMP_3.$$s = self, TMP_3), $c).call($d)), total = ($a[0] == null ? nil : $a[0]), slows = ($a[1] == null ? nil : $a[1]);
            return $hash2(["examples", "total", "slows"], {"examples": sorted_examples, "total": total, "slows": slows});
          };

          return (def.$slowest_groups = function() {
            var $a, $b, TMP_5, $c, TMP_6, $d, TMP_7, self = this, number_of_examples = nil, example_groups = nil;

            number_of_examples = $scope.get('RSpec').$configuration().$profile_examples();
            example_groups = $hash2([], {});
            ($a = ($b = self.$examples()).$each, $a.$$p = (TMP_5 = function(example){var self = TMP_5.$$s || this, $a, $b, $c, location = nil;
if (example == null) example = nil;
            location = example.$example_group().$parent_groups().$last().$metadata()['$[]']("example_group")['$[]']("location");
              ($a = location, $b = example_groups, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, $scope.get('Hash').$new(0))));
              ($a = "total_time", $b = example_groups['$[]'](location), $b['$[]=']($a, $b['$[]']($a)['$+'](example.$execution_result()['$[]']("run_time"))));
              ($a = "count", $b = example_groups['$[]'](location), $b['$[]=']($a, $b['$[]']($a)['$+'](1)));
              if ((($a = example_groups['$[]'](location)['$has_key?']("description")) !== nil && (!$a.$$is_boolean || $a == true))) {
                return nil
                } else {
                return example_groups['$[]'](location)['$[]=']("description", example.$example_group().$top_level_description())
              };}, TMP_5.$$s = self, TMP_5), $a).call($b);
            if (example_groups.$keys().$length()['$<='](1)) {
              return $hash2([], {})};
            ($a = ($c = example_groups).$each_value, $a.$$p = (TMP_6 = function(hash){var self = TMP_6.$$s || this;
if (hash == null) hash = nil;
            return hash['$[]=']("average", hash['$[]']("total_time").$to_f()['$/'](hash['$[]']("count")))}, TMP_6.$$s = self, TMP_6), $a).call($c);
            return ($a = ($d = example_groups).$sort_by, $a.$$p = (TMP_7 = function(_, hash){var self = TMP_7.$$s || this;
if (_ == null) _ = nil;if (hash == null) hash = nil;
            return hash['$[]']("average")['$-@']()}, TMP_7.$$s = self, TMP_7), $a).call($d).$first(number_of_examples);
          }, nil) && 'slowest_groups';
        })(self, null)
      })(self)
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/formatters/base_text_formatter"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$puts', '$output', '$empty?', '$failed_examples', '$each_with_index', '$pending_fixed?', '$dump_pending_fixed', '$dump_failure', '$dump_backtrace', '$>', '$failure_count', '$color', '$failure_color', '$configuration', '$pending_count', '$pending_color', '$success_color', '$mute_profile_output?', '$dump_profile', '$format_duration', '$colorise_summary', '$summary_line', '$dump_commands_to_rerun_failed_examples', '$each', '$+', '$relative_path', '$location', '$detail_color', '$full_description', '$dump_profile_slowest_examples', '$dump_profile_slowest_example_groups', '$slowest_examples', '$/', '$[]', '$%', '$*', '$nan?', '$size', '$format_seconds', '$bold', '$execution_result', '$format_caller', '$slowest_groups', '$pluralize', '$<<', '$pending_examples', '$show_failures_in_pending_blocks?', '$dump_failure_info', '$===', '$!', '$==', '$close', '$to_set', '$values', '$include?', '$fetch', '$color_code_for', '$protected', '$color_enabled?', '$colorize', '$fixed_color', '$default_color', '$deprecate', '$private', '$backtrace_line', '$backtrace_formatter', '$first', '$split', '$to_s', '$long_padding', '$format_backtrace', '$backtrace', '$short_padding', '$next', '$metadata', '$exception_class_name_for', '$strip', '$read_failed_line', '$=~', '$message', '$find_shared_group', '$dump_shared_failure_info', '$name', '$class', '$find', '$group_and_parent_groups', '$parent_groups', '$example_group']);
  self.$require("rspec/core/formatters/base_formatter");
  self.$require("set");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Formatters');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $BaseTextFormatter(){};
          var self = $BaseTextFormatter = $klass($base, $super, 'BaseTextFormatter', $BaseTextFormatter);

          var def = self.$$proto, $scope = self.$$scope, TMP_2;

          def.$message = function(message) {
            var self = this;

            return self.$output().$puts(message);
          };

          def.$dump_failures = function() {
            var $a, $b, TMP_1, self = this;

            if ((($a = self.$failed_examples()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil};
            self.$output().$puts();
            self.$output().$puts("Failures:");
            return ($a = ($b = self.$failed_examples()).$each_with_index, $a.$$p = (TMP_1 = function(example, index){var self = TMP_1.$$s || this, $a;
if (example == null) example = nil;if (index == null) index = nil;
            self.$output().$puts();
              if ((($a = self['$pending_fixed?'](example)) !== nil && (!$a.$$is_boolean || $a == true))) {
                self.$dump_pending_fixed(example, index)
                } else {
                self.$dump_failure(example, index)
              };
              return self.$dump_backtrace(example);}, TMP_1.$$s = self, TMP_1), $a).call($b);
          };

          def.$colorise_summary = function(summary) {
            var self = this;

            if (self.$failure_count()['$>'](0)) {
              return self.$color(summary, $scope.get('RSpec').$configuration().$failure_color())
            } else if (self.$pending_count()['$>'](0)) {
              return self.$color(summary, $scope.get('RSpec').$configuration().$pending_color())
              } else {
              return self.$color(summary, $scope.get('RSpec').$configuration().$success_color())
            };
          };

          def.$dump_summary = TMP_2 = function(duration, example_count, failure_count, pending_count) {
            var $a, self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

            TMP_2.$$p = null;
            Opal.find_super_dispatcher(self, 'dump_summary', TMP_2, null).apply(self, [duration, example_count, failure_count, pending_count]);
            if ((($a = self['$mute_profile_output?'](failure_count)) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$dump_profile()
            };
            self.$output().$puts("\nFinished in " + (self.$format_duration(duration)) + "\n");
            self.$output().$puts(self.$colorise_summary(self.$summary_line(example_count, failure_count, pending_count)));
            return self.$dump_commands_to_rerun_failed_examples();
          };

          def.$dump_commands_to_rerun_failed_examples = function() {
            var $a, $b, TMP_3, self = this;

            if ((($a = self.$failed_examples()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil};
            self.$output().$puts();
            self.$output().$puts("Failed examples:");
            self.$output().$puts();
            return ($a = ($b = self.$failed_examples()).$each, $a.$$p = (TMP_3 = function(example){var self = TMP_3.$$s || this;
if (example == null) example = nil;
            return self.$output().$puts(self.$failure_color("rspec " + ((((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('Metadata')).$relative_path(example.$location())))['$+'](" ")['$+'](self.$detail_color("# " + (example.$full_description()))))}, TMP_3.$$s = self, TMP_3), $a).call($b);
          };

          def.$dump_profile = function() {
            var self = this;

            self.$dump_profile_slowest_examples();
            return self.$dump_profile_slowest_example_groups();
          };

          def.$dump_profile_slowest_examples = function() {
            var $a, $b, TMP_4, self = this, sorted_examples = nil, time_taken = nil, percentage = nil;

            sorted_examples = self.$slowest_examples();
            time_taken = sorted_examples['$[]']("slows")['$/'](sorted_examples['$[]']("total"));
            percentage = "%.1f"['$%']((((function() {if ((($a = time_taken['$nan?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return 0.0
              } else {
              return time_taken
            }; return nil; })())['$*'](100)));
            self.$output().$puts("\nTop " + (sorted_examples['$[]']("examples").$size()) + " slowest examples (" + (self.$format_seconds(sorted_examples['$[]']("slows"))) + " seconds, " + (percentage) + "% of total time):\n");
            return ($a = ($b = sorted_examples['$[]']("examples")).$each, $a.$$p = (TMP_4 = function(example){var self = TMP_4.$$s || this;
if (example == null) example = nil;
            self.$output().$puts("  " + (example.$full_description()));
              return self.$output().$puts("    " + (self.$bold(self.$format_seconds(example.$execution_result()['$[]']("run_time")))) + " " + (self.$bold("seconds")) + " " + (self.$format_caller(example.$location())));}, TMP_4.$$s = self, TMP_4), $a).call($b);
          };

          def.$dump_profile_slowest_example_groups = function() {
            var $a, $b, TMP_5, self = this, sorted_groups = nil;

            sorted_groups = self.$slowest_groups();
            if ((($a = sorted_groups['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil};
            self.$output().$puts("\nTop " + (sorted_groups.$size()) + " slowest example groups:");
            return ($a = ($b = self.$slowest_groups()).$each, $a.$$p = (TMP_5 = function(loc, hash){var self = TMP_5.$$s || this, average = nil, total = nil, count = nil;
if (loc == null) loc = nil;if (hash == null) hash = nil;
            average = "" + (self.$bold(self.$format_seconds(hash['$[]']("average")))) + " " + (self.$bold("seconds")) + " average";
              total = "" + (self.$format_seconds(hash['$[]']("total_time"))) + " seconds";
              count = self.$pluralize(hash['$[]']("count"), "example");
              self.$output().$puts("  " + (hash['$[]']("description")));
              return self.$output().$puts("    " + (average) + " (" + (total) + " / " + (count) + ") " + (loc));}, TMP_5.$$s = self, TMP_5), $a).call($b);
          };

          def.$summary_line = function(example_count, failure_count, pending_count) {
            var self = this, summary = nil;

            summary = self.$pluralize(example_count, "example");
            summary['$<<'](", ")['$<<'](self.$pluralize(failure_count, "failure"));
            if (pending_count['$>'](0)) {
              summary['$<<'](", " + (pending_count) + " pending")};
            return summary;
          };

          def.$dump_pending = function() {
            var $a, $b, TMP_6, self = this;

            if ((($a = self.$pending_examples()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              self.$output().$puts();
              self.$output().$puts("Pending:");
              return ($a = ($b = self.$pending_examples()).$each, $a.$$p = (TMP_6 = function(pending_example){var self = TMP_6.$$s || this, $a, $b;
if (pending_example == null) pending_example = nil;
              self.$output().$puts(self.$pending_color("  " + (pending_example.$full_description())));
                self.$output().$puts(self.$detail_color("    # " + (pending_example.$execution_result()['$[]']("pending_message"))));
                self.$output().$puts(self.$detail_color("    # " + (self.$format_caller(pending_example.$location()))));
                if ((($a = ($b = pending_example.$execution_result()['$[]']("exception"), $b !== false && $b !== nil ?$scope.get('RSpec').$configuration()['$show_failures_in_pending_blocks?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
                  self.$dump_failure_info(pending_example);
                  return self.$dump_backtrace(pending_example);
                  } else {
                  return nil
                };}, TMP_6.$$s = self, TMP_6), $a).call($b);
            };
          };

          def.$seed = function(number) {
            var self = this;

            self.$output().$puts();
            self.$output().$puts("Randomized with seed " + (number));
            return self.$output().$puts();
          };

          def.$close = function() {
            var $a, $b, self = this;
            if ($gvars.stdout == null) $gvars.stdout = nil;

            if ((($a = ($b = $scope.get('IO')['$==='](self.$output()), $b !== false && $b !== nil ?self.$output()['$==']($gvars.stdout)['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$output().$close()
              } else {
              return nil
            };
          };

          Opal.cdecl($scope, 'VT100_COLORS', $hash2(["black", "red", "green", "yellow", "blue", "magenta", "cyan", "white"], {"black": 30, "red": 31, "green": 32, "yellow": 33, "blue": 34, "magenta": 35, "cyan": 36, "white": 37}));

          Opal.cdecl($scope, 'VT100_COLOR_CODES', $scope.get('VT100_COLORS').$values().$to_set());

          def.$color_code_for = function(code_or_symbol) {
            var $a, $b, TMP_7, self = this;

            if ((($a = $scope.get('VT100_COLOR_CODES')['$include?'](code_or_symbol)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return code_or_symbol
              } else {
              return ($a = ($b = $scope.get('VT100_COLORS')).$fetch, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

              return self.$color_code_for("white")}, TMP_7.$$s = self, TMP_7), $a).call($b, code_or_symbol)
            };
          };

          def.$colorize = function(text, code_or_symbol) {
            var self = this;

            return "\e[" + (self.$color_code_for(code_or_symbol)) + "m" + (text) + "\e[0m";
          };

          self.$protected();

          def.$bold = function(text) {
            var $a, self = this;

            if ((($a = self['$color_enabled?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return "\e[1m" + (text) + "\e[0m"
              } else {
              return text
            };
          };

          def.$color = function(text, color_code) {
            var $a, self = this;

            if ((($a = self['$color_enabled?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$colorize(text, color_code)
              } else {
              return text
            };
          };

          def.$failure_color = function(text) {
            var self = this;

            return self.$color(text, $scope.get('RSpec').$configuration().$failure_color());
          };

          def.$success_color = function(text) {
            var self = this;

            return self.$color(text, $scope.get('RSpec').$configuration().$success_color());
          };

          def.$pending_color = function(text) {
            var self = this;

            return self.$color(text, $scope.get('RSpec').$configuration().$pending_color());
          };

          def.$fixed_color = function(text) {
            var self = this;

            return self.$color(text, $scope.get('RSpec').$configuration().$fixed_color());
          };

          def.$detail_color = function(text) {
            var self = this;

            return self.$color(text, $scope.get('RSpec').$configuration().$detail_color());
          };

          def.$default_color = function(text) {
            var self = this;

            return self.$color(text, $scope.get('RSpec').$configuration().$default_color());
          };

          def.$red = function(text) {
            var self = this;

            $scope.get('RSpec').$deprecate("RSpec::Core::Formatters::BaseTextFormatter#red", $hash2(["replacement"], {"replacement": "#failure_color"}));
            return self.$color(text, "red");
          };

          def.$green = function(text) {
            var self = this;

            $scope.get('RSpec').$deprecate("RSpec::Core::Formatters::BaseTextFormatter#green", $hash2(["replacement"], {"replacement": "#success_color"}));
            return self.$color(text, "green");
          };

          def.$yellow = function(text) {
            var self = this;

            $scope.get('RSpec').$deprecate("RSpec::Core::Formatters::BaseTextFormatter#yellow", $hash2(["replacement"], {"replacement": "#pending_color"}));
            return self.$color(text, "yellow");
          };

          def.$blue = function(text) {
            var self = this;

            $scope.get('RSpec').$deprecate("RSpec::Core::Formatters::BaseTextFormatter#blue", $hash2(["replacement"], {"replacement": "#fixed_color"}));
            return self.$color(text, "blue");
          };

          def.$magenta = function(text) {
            var self = this;

            $scope.get('RSpec').$deprecate("RSpec::Core::Formatters::BaseTextFormatter#magenta");
            return self.$color(text, "magenta");
          };

          def.$cyan = function(text) {
            var self = this;

            $scope.get('RSpec').$deprecate("RSpec::Core::Formatters::BaseTextFormatter#cyan", $hash2(["replacement"], {"replacement": "#detail_color"}));
            return self.$color(text, "cyan");
          };

          def.$white = function(text) {
            var self = this;

            $scope.get('RSpec').$deprecate("RSpec::Core::Formatters::BaseTextFormatter#white", $hash2(["replacement"], {"replacement": "#default_color"}));
            return self.$color(text, "white");
          };

          def.$short_padding = function() {
            var self = this;

            return "  ";
          };

          def.$long_padding = function() {
            var self = this;

            return "     ";
          };

          self.$private();

          def.$format_caller = function(caller_info) {
            var self = this;

            return self.$configuration().$backtrace_formatter().$backtrace_line(caller_info.$to_s().$split(":in `block").$first());
          };

          def.$dump_backtrace = function(example) {
            var $a, $b, TMP_8, self = this;

            return ($a = ($b = self.$format_backtrace(example.$execution_result()['$[]']("exception").$backtrace(), example)).$each, $a.$$p = (TMP_8 = function(backtrace_info){var self = TMP_8.$$s || this;
if (backtrace_info == null) backtrace_info = nil;
            return self.$output().$puts(self.$detail_color("" + (self.$long_padding()) + "# " + (backtrace_info)))}, TMP_8.$$s = self, TMP_8), $a).call($b);
          };

          def.$dump_pending_fixed = function(example, index) {
            var self = this;

            self.$output().$puts("" + (self.$short_padding()) + (index.$next()) + ") " + (example.$full_description()) + " FIXED");
            return self.$output().$puts(self.$fixed_color("" + (self.$long_padding()) + "Expected pending '" + (example.$metadata()['$[]']("execution_result")['$[]']("pending_message")) + "' to fail. No Error was raised."));
          };

          def['$pending_fixed?'] = function(example) {
            var self = this;

            return example.$execution_result()['$[]']("pending_fixed");
          };

          def.$dump_failure = function(example, index) {
            var self = this;

            self.$output().$puts("" + (self.$short_padding()) + (index.$next()) + ") " + (example.$full_description()));
            return self.$dump_failure_info(example);
          };

          def.$dump_failure_info = function(example) {
            var $a, $b, TMP_9, self = this, exception = nil, exception_class_name = nil, shared_group = nil;

            exception = example.$execution_result()['$[]']("exception");
            exception_class_name = self.$exception_class_name_for(exception);
            self.$output().$puts("" + (self.$long_padding()) + (self.$failure_color("Failure/Error:")) + " " + (self.$failure_color(self.$read_failed_line(exception, example).$strip())));
            if ((($a = exception_class_name['$=~'](/RSpec/)) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$output().$puts("" + (self.$long_padding()) + (self.$failure_color(exception_class_name)) + ":")
            };
            if ((($a = exception.$message()) !== nil && (!$a.$$is_boolean || $a == true))) {
              ($a = ($b = exception.$message().$to_s().$split("\n")).$each, $a.$$p = (TMP_9 = function(line){var self = TMP_9.$$s || this;
if (line == null) line = nil;
              return self.$output().$puts("" + (self.$long_padding()) + "  " + (self.$failure_color(line)))}, TMP_9.$$s = self, TMP_9), $a).call($b)};
            if ((($a = shared_group = self.$find_shared_group(example)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$dump_shared_failure_info(shared_group)
              } else {
              return nil
            };
          };

          def.$exception_class_name_for = function(exception) {
            var self = this, name = nil;

            name = exception.$class().$name().$to_s();
            if (name['$==']("")) {
              name = "(anonymous error class)"};
            return name;
          };

          def.$dump_shared_failure_info = function(group) {
            var self = this;

            return self.$output().$puts(((((("") + (self.$long_padding())) + "Shared Example Group: \"") + (group.$metadata()['$[]']("shared_group_name"))) + "\" called from ")['$+']("" + (self.$configuration().$backtrace_formatter().$backtrace_line(group.$metadata()['$[]']("example_group")['$[]']("location")))));
          };

          def.$find_shared_group = function(example) {
            var $a, $b, TMP_10, self = this;

            return ($a = ($b = self.$group_and_parent_groups(example)).$find, $a.$$p = (TMP_10 = function(group){var self = TMP_10.$$s || this;
if (group == null) group = nil;
            return group.$metadata()['$[]']("shared_group_name")}, TMP_10.$$s = self, TMP_10), $a).call($b);
          };

          return (def.$group_and_parent_groups = function(example) {
            var self = this;

            return example.$example_group().$parent_groups()['$+']([example.$example_group()]);
          }, nil) && 'group_and_parent_groups';
        })(self, $scope.get('BaseFormatter'))
      })(self)
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/formatters/documentation_formatter"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$==', '$puts', '$output', '$current_indentation', '$strip', '$description', '$+', '$-', '$passed_output', '$pending_output', '$[]', '$execution_result', '$failure_output', '$failure_color', '$next_failure_index', '$success_color', '$pending_color', '$*', '$reverse', '$parent_groups', '$example_group']);
  self.$require("rspec/core/formatters/base_text_formatter");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Formatters');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $DocumentationFormatter(){};
          var self = $DocumentationFormatter = $klass($base, $super, 'DocumentationFormatter', $DocumentationFormatter);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

          def.group_level = def.next_failure_index = nil;
          def.$initialize = TMP_1 = function(output) {
            var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

            TMP_1.$$p = null;
            Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [output]);
            return self.group_level = 0;
          };

          def.$example_group_started = TMP_2 = function(example_group) {
            var self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

            TMP_2.$$p = null;
            Opal.find_super_dispatcher(self, 'example_group_started', TMP_2, null).apply(self, [example_group]);
            if (self.group_level['$=='](0)) {
              self.$output().$puts()};
            self.$output().$puts("" + (self.$current_indentation()) + (example_group.$description().$strip()));
            return self.group_level = self.group_level['$+'](1);
          };

          def.$example_group_finished = function(example_group) {
            var self = this;

            return self.group_level = self.group_level['$-'](1);
          };

          def.$example_passed = TMP_3 = function(example) {
            var self = this, $iter = TMP_3.$$p, $yield = $iter || nil;

            TMP_3.$$p = null;
            Opal.find_super_dispatcher(self, 'example_passed', TMP_3, null).apply(self, [example]);
            return self.$output().$puts(self.$passed_output(example));
          };

          def.$example_pending = TMP_4 = function(example) {
            var self = this, $iter = TMP_4.$$p, $yield = $iter || nil;

            TMP_4.$$p = null;
            Opal.find_super_dispatcher(self, 'example_pending', TMP_4, null).apply(self, [example]);
            return self.$output().$puts(self.$pending_output(example, example.$execution_result()['$[]']("pending_message")));
          };

          def.$example_failed = TMP_5 = function(example) {
            var self = this, $iter = TMP_5.$$p, $yield = $iter || nil;

            TMP_5.$$p = null;
            Opal.find_super_dispatcher(self, 'example_failed', TMP_5, null).apply(self, [example]);
            return self.$output().$puts(self.$failure_output(example, example.$execution_result()['$[]']("exception")));
          };

          def.$failure_output = function(example, exception) {
            var self = this;

            return self.$failure_color("" + (self.$current_indentation()) + (example.$description().$strip()) + " (FAILED - " + (self.$next_failure_index()) + ")");
          };

          def.$next_failure_index = function() {
            var $a, self = this;

            ((($a = self.next_failure_index) !== false && $a !== nil) ? $a : self.next_failure_index = 0);
            return self.next_failure_index = self.next_failure_index['$+'](1);
          };

          def.$passed_output = function(example) {
            var self = this;

            return self.$success_color("" + (self.$current_indentation()) + (example.$description().$strip()));
          };

          def.$pending_output = function(example, message) {
            var self = this;

            return self.$pending_color("" + (self.$current_indentation()) + (example.$description().$strip()) + " (PENDING: " + (message) + ")");
          };

          def.$current_indentation = function() {
            var self = this;

            return "  "['$*'](self.group_level);
          };

          return (def.$example_group_chain = function() {
            var self = this;

            return self.$example_group().$parent_groups().$reverse();
          }, nil) && 'example_group_chain';
        })(self, $scope.get('BaseTextFormatter'))
      })(self)
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["template"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$[]', '$[]=', '$keys', '$attr_reader', '$instance_exec', '$to_proc', '$new', '$<<', '$join']);
  return (function($base, $super) {
    function $Template(){};
    var self = $Template = $klass($base, $super, 'Template', $Template);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    def.name = def.body = nil;
    self._cache = $hash2([], {});

    Opal.defs(self, '$[]', function(name) {
      var $a, self = this;
      if (self._cache == null) self._cache = nil;

      return ((($a = self._cache['$[]'](name)) !== false && $a !== nil) ? $a : self._cache['$[]']("templates/" + (name)));
    });

    Opal.defs(self, '$[]=', function(name, instance) {
      var self = this;
      if (self._cache == null) self._cache = nil;

      return self._cache['$[]='](name, instance);
    });

    Opal.defs(self, '$paths', function() {
      var self = this;
      if (self._cache == null) self._cache = nil;

      return self._cache.$keys();
    });

    self.$attr_reader("body");

    def.$initialize = TMP_1 = function(name) {
      var $a, self = this, $iter = TMP_1.$$p, body = $iter || nil;

      TMP_1.$$p = null;
      $a = [name, body], self.name = $a[0], self.body = $a[1];
      return $scope.get('Template')['$[]='](name, self);
    };

    def.$inspect = function() {
      var self = this;

      return "#<Template: '" + (self.name) + "'>";
    };

    def.$render = function(ctx) {
      var $a, $b, self = this;

      if (ctx == null) {
        ctx = self
      }
      return ($a = ($b = ctx).$instance_exec, $a.$$p = self.body.$to_proc(), $a).call($b, $scope.get('OutputBuffer').$new());
    };

    return (function($base, $super) {
      function $OutputBuffer(){};
      var self = $OutputBuffer = $klass($base, $super, 'OutputBuffer', $OutputBuffer);

      var def = self.$$proto, $scope = self.$$scope;

      def.buffer = nil;
      def.$initialize = function() {
        var self = this;

        return self.buffer = [];
      };

      def.$append = function(str) {
        var self = this;

        return self.buffer['$<<'](str);
      };

      Opal.defn(self, '$append=', def.$append);

      return (def.$join = function() {
        var self = this;

        return self.buffer.$join();
      }, nil) && 'join';
    })(self, null);
  })(self, null)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["erb"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$require', '$module_function']);
  self.$require("template");
  return (function($base, $super) {
    function $ERB(){};
    var self = $ERB = $klass($base, $super, 'ERB', $ERB);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base) {
      var self = $module($base, 'Util');

      var def = self.$$proto, $scope = self.$$scope;

      var escapes = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;'};

      var escape_regexp = /[&<>"']/g;

      Opal.defn(self, '$html_escape', function(str) {
        var self = this;

        return ("" + str).replace(escape_regexp, function (m) { return escapes[m] });
      });

      Opal.defn(self, '$h', def.$html_escape);

      self.$module_function("h");

      self.$module_function("html_escape");
    })(self)
  })(self, null);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/formatters/html_printer"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$puts', '$indentation_style', '$h', '$sprintf', '$[]', '$==', '$<<', '$>', '$flush', '$private', '$*', '$-']);
  self.$require("erb");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Formatters');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $HtmlPrinter(){};
          var self = $HtmlPrinter = $klass($base, $super, 'HtmlPrinter', $HtmlPrinter);

          var def = self.$$proto, $scope = self.$$scope;

          def.output = nil;
          self.$include((($scope.get('ERB')).$$scope.get('Util')));

          def.$initialize = function(output) {
            var self = this;

            return self.output = output;
          };

          def.$print_html_start = function() {
            var self = this;

            self.output.$puts($scope.get('HTML_HEADER'));
            return self.output.$puts($scope.get('REPORT_HEADER'));
          };

          def.$print_example_group_end = function() {
            var self = this;

            self.output.$puts("  </dl>");
            return self.output.$puts("</div>");
          };

          def.$print_example_group_start = function(group_id, description, number_of_parents) {
            var self = this;

            self.output.$puts("<div id=\"div_group_" + (group_id) + "\" class=\"example_group passed\">");
            self.output.$puts("  <dl " + (self.$indentation_style(number_of_parents)) + ">");
            return self.output.$puts("  <dt id=\"example_group_" + (group_id) + "\" class=\"passed\">" + (self.$h(description)) + "</dt>");
          };

          def.$print_example_passed = function(description, run_time) {
            var self = this, formatted_run_time = nil;

            formatted_run_time = self.$sprintf("%.5f", run_time);
            return self.output.$puts("    <dd class=\"example passed\"><span class=\"passed_spec_name\">" + (self.$h(description)) + "</span><span class='duration'>" + (formatted_run_time) + "s</span></dd>");
          };

          def.$print_example_failed = function(pending_fixed, description, run_time, failure_id, exception, extra_content, escape_backtrace) {
            var self = this, formatted_run_time = nil;

            if (escape_backtrace == null) {
              escape_backtrace = false
            }
            formatted_run_time = self.$sprintf("%.5f", run_time);
            self.output.$puts("    <dd class=\"example " + ((function() {if (pending_fixed !== false && pending_fixed !== nil) {
              return "pending_fixed"
              } else {
              return "failed"
            }; return nil; })()) + "\">");
            self.output.$puts("      <span class=\"failed_spec_name\">" + (self.$h(description)) + "</span>");
            self.output.$puts("      <span class=\"duration\">" + (formatted_run_time) + "s</span>");
            self.output.$puts("      <div class=\"failure\" id=\"failure_" + (failure_id) + "\">");
            if (exception !== false && exception !== nil) {
              self.output.$puts("        <div class=\"message\"><pre>" + (self.$h(exception['$[]']("message"))) + "</pre></div>");
              if (escape_backtrace !== false && escape_backtrace !== nil) {
                self.output.$puts("        <div class=\"backtrace\"><pre>" + (self.$h(exception['$[]']("backtrace"))) + "</pre></div>")
                } else {
                self.output.$puts("        <div class=\"backtrace\"><pre>" + (exception['$[]']("backtrace")) + "</pre></div>")
              };};
            if (extra_content !== false && extra_content !== nil) {
              self.output.$puts(extra_content)};
            self.output.$puts("      </div>");
            return self.output.$puts("    </dd>");
          };

          def.$print_example_pending = function(description, pending_message) {
            var self = this;

            return self.output.$puts("    <dd class=\"example not_implemented\"><span class=\"not_implemented_spec_name\">" + (self.$h(description)) + " (PENDING: " + (self.$h(pending_message)) + ")</span></dd>");
          };

          def.$print_summary = function(was_dry_run, duration, example_count, failure_count, pending_count) {
            var self = this, totals = nil, formatted_duration = nil;

            if (was_dry_run !== false && was_dry_run !== nil) {
              totals = "This was a dry-run"
              } else {
              totals = "" + (example_count) + " example" + ((function() {if (example_count['$=='](1)) {
                return nil
                } else {
                return "s"
              }; return nil; })()) + ", ";
              totals['$<<']("" + (failure_count) + " failure" + ((function() {if (failure_count['$=='](1)) {
                return nil
                } else {
                return "s"
              }; return nil; })()));
              if (pending_count['$>'](0)) {
                totals['$<<'](", " + (pending_count) + " pending")};
            };
            formatted_duration = self.$sprintf("%.5f", duration);
            self.output.$puts("<script type=\"text/javascript\">document.getElementById('duration').innerHTML = \"Finished in <strong>" + (formatted_duration) + " seconds</strong>\";</script>");
            self.output.$puts("<script type=\"text/javascript\">document.getElementById('totals').innerHTML = \"" + (totals) + "\";</script>");
            self.output.$puts("</div>");
            self.output.$puts("</div>");
            self.output.$puts("</body>");
            return self.output.$puts("</html>");
          };

          def.$flush = function() {
            var self = this;

            return self.output.$flush();
          };

          def.$move_progress = function(percent_done) {
            var self = this;

            self.output.$puts("    <script type=\"text/javascript\">moveProgressBar('" + (percent_done) + "');</script>");
            return self.output.$flush();
          };

          def.$make_header_red = function() {
            var self = this;

            return self.output.$puts("    <script type=\"text/javascript\">makeRed('rspec-header');</script>");
          };

          def.$make_header_yellow = function() {
            var self = this;

            return self.output.$puts("    <script type=\"text/javascript\">makeYellow('rspec-header');</script>");
          };

          def.$make_example_group_header_red = function(group_id) {
            var self = this;

            self.output.$puts("    <script type=\"text/javascript\">makeRed('div_group_" + (group_id) + "');</script>");
            return self.output.$puts("    <script type=\"text/javascript\">makeRed('example_group_" + (group_id) + "');</script>");
          };

          def.$make_example_group_header_yellow = function(group_id) {
            var self = this;

            self.output.$puts("    <script type=\"text/javascript\">makeYellow('div_group_" + (group_id) + "');</script>");
            return self.output.$puts("    <script type=\"text/javascript\">makeYellow('example_group_" + (group_id) + "');</script>");
          };

          self.$private();

          def.$indentation_style = function(number_of_parents) {
            var self = this;

            return "style=\"margin-left: " + ((number_of_parents['$-'](1))['$*'](15)) + "px;\"";
          };

          Opal.cdecl($scope, 'REPORT_HEADER', "<div class=\"rspec-report\">\n\n<div id=\"rspec-header\">\n  <div id=\"label\">\n    <h1>RSpec Code Examples</h1>\n  </div>\n\n  <div id=\"display-filters\">\n    <input id=\"passed_checkbox\"  name=\"passed_checkbox\"  type=\"checkbox\" checked=\"checked\" onchange=\"apply_filters()\" value=\"1\" /> <label for=\"passed_checkbox\">Passed</label>\n    <input id=\"failed_checkbox\"  name=\"failed_checkbox\"  type=\"checkbox\" checked=\"checked\" onchange=\"apply_filters()\" value=\"2\" /> <label for=\"failed_checkbox\">Failed</label>\n    <input id=\"pending_checkbox\" name=\"pending_checkbox\" type=\"checkbox\" checked=\"checked\" onchange=\"apply_filters()\" value=\"3\" /> <label for=\"pending_checkbox\">Pending</label>\n  </div>\n\n  <div id=\"summary\">\n    <p id=\"totals\">&#160;</p>\n    <p id=\"duration\">&#160;</p>\n  </div>\n</div>\n\n\n<div class=\"results\">\n");

          Opal.cdecl($scope, 'GLOBAL_SCRIPTS', "\nfunction addClass(element_id, classname) {\n  document.getElementById(element_id).className += (\" \" + classname);\n}\n\nfunction removeClass(element_id, classname) {\n  var elem = document.getElementById(element_id);\n  var classlist = elem.className.replace(classname,'');\n  elem.className = classlist;\n}\n\nfunction moveProgressBar(percentDone) {\n  document.getElementById(\"rspec-header\").style.width = percentDone +\"%\";\n}\n\nfunction makeRed(element_id) {\n  removeClass(element_id, 'passed');\n  removeClass(element_id, 'not_implemented');\n  addClass(element_id,'failed');\n}\n\nfunction makeYellow(element_id) {\n  var elem = document.getElementById(element_id);\n  if (elem.className.indexOf(\"failed\") == -1) {  // class doesn't includes failed\n    if (elem.className.indexOf(\"not_implemented\") == -1) { // class doesn't include not_implemented\n      removeClass(element_id, 'passed');\n      addClass(element_id,'not_implemented');\n    }\n  }\n}\n\nfunction apply_filters() {\n  var passed_filter = document.getElementById('passed_checkbox').checked;\n  var failed_filter = document.getElementById('failed_checkbox').checked;\n  var pending_filter = document.getElementById('pending_checkbox').checked;\n\n  assign_display_style(\"example passed\", passed_filter);\n  assign_display_style(\"example failed\", failed_filter);\n  assign_display_style(\"example not_implemented\", pending_filter);\n\n  assign_display_style_for_group(\"example_group passed\", passed_filter);\n  assign_display_style_for_group(\"example_group not_implemented\", pending_filter, pending_filter || passed_filter);\n  assign_display_style_for_group(\"example_group failed\", failed_filter, failed_filter || pending_filter || passed_filter);\n}\n\nfunction get_display_style(display_flag) {\n  var style_mode = 'none';\n  if (display_flag == true) {\n    style_mode = 'block';\n  }\n  return style_mode;\n}\n\nfunction assign_display_style(classname, display_flag) {\n  var style_mode = get_display_style(display_flag);\n  var elems = document.getElementsByClassName(classname)\n  for (var i=0; i<elems.length;i++) {\n    elems[i].style.display = style_mode;\n  }\n}\n\nfunction assign_display_style_for_group(classname, display_flag, subgroup_flag) {\n  var display_style_mode = get_display_style(display_flag);\n  var subgroup_style_mode = get_display_style(subgroup_flag);\n  var elems = document.getElementsByClassName(classname)\n  for (var i=0; i<elems.length;i++) {\n    var style_mode = display_style_mode;\n    if ((display_flag != subgroup_flag) && (elems[i].getElementsByTagName('dt')[0].innerHTML.indexOf(\", \") != -1)) {\n      elems[i].style.display = subgroup_style_mode;\n    } else {\n      elems[i].style.display = display_style_mode;\n    }\n  }\n}\n");

          Opal.cdecl($scope, 'GLOBAL_STYLES', "#rspec-header {\n  background: #65C400; color: #fff; height: 4em;\n}\n\n.rspec-report h1 {\n  margin: 0px 10px 0px 10px;\n  padding: 10px;\n  font-family: \"Lucida Grande\", Helvetica, sans-serif;\n  font-size: 1.8em;\n  position: absolute;\n}\n\n#label {\n  float:left;\n}\n\n#display-filters {\n  float:left;\n  padding: 28px 0 0 40%;\n  font-family: \"Lucida Grande\", Helvetica, sans-serif;\n}\n\n#summary {\n  float:right;\n  padding: 5px 10px;\n  font-family: \"Lucida Grande\", Helvetica, sans-serif;\n  text-align: right;\n}\n\n#summary p {\n  margin: 0 0 0 2px;\n}\n\n#summary #totals {\n  font-size: 1.2em;\n}\n\n.example_group {\n  margin: 0 10px 5px;\n  background: #fff;\n}\n\ndl {\n  margin: 0; padding: 0 0 5px;\n  font: normal 11px \"Lucida Grande\", Helvetica, sans-serif;\n}\n\ndt {\n  padding: 3px;\n  background: #65C400;\n  color: #fff;\n  font-weight: bold;\n}\n\ndd {\n  margin: 5px 0 5px 5px;\n  padding: 3px 3px 3px 18px;\n}\n\ndd .duration {\n  padding-left: 5px;\n  text-align: right;\n  right: 0px;\n  float:right;\n}\n\ndd.example.passed {\n  border-left: 5px solid #65C400;\n  border-bottom: 1px solid #65C400;\n  background: #DBFFB4; color: #3D7700;\n}\n\ndd.example.not_implemented {\n  border-left: 5px solid #FAF834;\n  border-bottom: 1px solid #FAF834;\n  background: #FCFB98; color: #131313;\n}\n\ndd.example.pending_fixed {\n  border-left: 5px solid #0000C2;\n  border-bottom: 1px solid #0000C2;\n  color: #0000C2; background: #D3FBFF;\n}\n\ndd.example.failed {\n  border-left: 5px solid #C20000;\n  border-bottom: 1px solid #C20000;\n  color: #C20000; background: #FFFBD3;\n}\n\n\ndt.not_implemented {\n  color: #000000; background: #FAF834;\n}\n\ndt.pending_fixed {\n  color: #FFFFFF; background: #C40D0D;\n}\n\ndt.failed {\n  color: #FFFFFF; background: #C40D0D;\n}\n\n\n#rspec-header.not_implemented {\n  color: #000000; background: #FAF834;\n}\n\n#rspec-header.pending_fixed {\n  color: #FFFFFF; background: #C40D0D;\n}\n\n#rspec-header.failed {\n  color: #FFFFFF; background: #C40D0D;\n}\n\n\n.backtrace {\n  color: #000;\n  font-size: 12px;\n}\n\na {\n  color: #BE5C00;\n}\n\n/* Ruby code, style similar to vibrant ink */\n.ruby {\n  font-size: 12px;\n  font-family: monospace;\n  color: white;\n  background-color: black;\n  padding: 0.1em 0 0.2em 0;\n}\n\n.ruby .keyword { color: #FF6600; }\n.ruby .constant { color: #339999; }\n.ruby .attribute { color: white; }\n.ruby .global { color: white; }\n.ruby .module { color: white; }\n.ruby .class { color: white; }\n.ruby .string { color: #66FF00; }\n.ruby .ident { color: white; }\n.ruby .method { color: #FFCC00; }\n.ruby .number { color: white; }\n.ruby .char { color: white; }\n.ruby .comment { color: #9933CC; }\n.ruby .symbol { color: white; }\n.ruby .regex { color: #44B4CC; }\n.ruby .punct { color: white; }\n.ruby .escape { color: white; }\n.ruby .interp { color: white; }\n.ruby .expr { color: white; }\n\n.ruby .offending { background-color: gray; }\n.ruby .linenum {\n  width: 75px;\n  padding: 0.1em 1em 0.2em 0;\n  color: #000000;\n  background-color: #FFFBD3;\n}\n");

          return Opal.cdecl($scope, 'HTML_HEADER', "<!DOCTYPE html>\n<html lang='en'>\n<head>\n  <title>RSpec results</title>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n  <meta http-equiv=\"Expires\" content=\"-1\" />\n  <meta http-equiv=\"Pragma\" content=\"no-cache\" />\n  <style type=\"text/css\">\n  body {\n    margin: 0;\n    padding: 0;\n    background: #fff;\n    font-size: 80%;\n  }\n  </style>\n  <script type=\"text/javascript\">\n    // <![CDATA[\n" + ($scope.get('GLOBAL_SCRIPTS')) + "\n    // ]]>\n  </script>\n  <style type=\"text/css\">\n" + ($scope.get('GLOBAL_STYLES')) + "\n  </style>\n</head>\n<body>\n");
        })(self, null)
      })(self)
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["coderay"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  return nil
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/formatters/snippet_extractor"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars, $range = Opal.range;

  Opal.add_stubs(['$html', '$scan', '$require', '$new', '$snippet_for', '$[]', '$convert', '$post_process', '$=~', '$to_i', '$lines_around', '$file?', '$split', '$read', '$max', '$-', '$min', '$+', '$length', '$join', '$each_with_index', '$==', '$<<']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Formatters');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $SnippetExtractor(){};
          var self = $SnippetExtractor = $klass($base, $super, 'SnippetExtractor', $SnippetExtractor);

          var def = self.$$proto, $scope = self.$$scope;

          (function($base, $super) {
            function $NullConverter(){};
            var self = $NullConverter = $klass($base, $super, 'NullConverter', $NullConverter);

            var def = self.$$proto, $scope = self.$$scope;

            return (def.$convert = function(code) {
              var self = this;

              return "" + (code) + "\n<span class=\"comment\"># Install the coderay gem to get syntax highlighting</span>";
            }, nil) && 'convert'
          })(self, null);

          (function($base, $super) {
            function $CoderayConverter(){};
            var self = $CoderayConverter = $klass($base, $super, 'CoderayConverter', $CoderayConverter);

            var def = self.$$proto, $scope = self.$$scope;

            return (def.$convert = function(code) {
              var self = this;

              return $scope.get('CodeRay').$scan(code, "ruby").$html($hash2(["line_numbers"], {"line_numbers": false}));
            }, nil) && 'convert'
          })(self, null);

          try {
          self.$require("coderay");

            (Opal.cvars['@@converter'] = $scope.get('CoderayConverter').$new());
          } catch ($err) {if (Opal.rescue($err, [$scope.get('LoadError')])) {
            (Opal.cvars['@@converter'] = $scope.get('NullConverter').$new())
            }else { throw $err; }
          };

          def.$snippet = function(backtrace) {
            var $a, self = this, raw_code = nil, line = nil, highlighted = nil;

            $a = Opal.to_ary(self.$snippet_for(backtrace['$[]'](0))), raw_code = ($a[0] == null ? nil : $a[0]), line = ($a[1] == null ? nil : $a[1]);
            highlighted = (($a = Opal.cvars['@@converter']) == null ? nil : $a).$convert(raw_code);
            return self.$post_process(highlighted, line);
          };

          def.$snippet_for = function(error_line) {
            var $a, self = this, file = nil, line = nil;

            if ((($a = error_line['$=~'](/(.*):(\d+)/)) !== nil && (!$a.$$is_boolean || $a == true))) {
              file = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1));
              line = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$to_i();
              return [self.$lines_around(file, line), line];
              } else {
              return ["# Couldn't get snippet for " + (error_line), 1]
            };
          };

          def.$lines_around = function(file, line) {
            var $a, self = this, lines = nil, min = nil, max = nil, selected_lines = nil;

            try {
            if ((($a = $scope.get('File')['$file?'](file)) !== nil && (!$a.$$is_boolean || $a == true))) {
                lines = $scope.get('File').$read(file).$split("\n");
                min = [0, line['$-'](3)].$max();
                max = [line['$+'](1), lines.$length()['$-'](1)].$min();
                selected_lines = [];
                selected_lines.$join("\n");
                return lines['$[]']($range(min, max, false)).$join("\n");
                } else {
                return "# Couldn't get snippet for " + (file)
              }
            } catch ($err) {if (Opal.rescue($err, [$scope.get('SecurityError')])) {
              return "# Couldn't get snippet for " + (file)
              }else { throw $err; }
            };
          };

          return (def.$post_process = function(highlighted, offending_line) {
            var $a, $b, TMP_1, self = this, new_lines = nil;

            new_lines = [];
            ($a = ($b = highlighted.$split("\n")).$each_with_index, $a.$$p = (TMP_1 = function(line, i){var self = TMP_1.$$s || this, new_line = nil;
if (line == null) line = nil;if (i == null) i = nil;
            new_line = "<span class=\"linenum\">" + (offending_line['$+'](i)['$-'](2)) + "</span>" + (line);
              if (i['$=='](2)) {
                new_line = "<span class=\"offending\">" + (new_line) + "</span>"};
              return new_lines['$<<'](new_line);}, TMP_1.$$s = self, TMP_1), $a).call($b);
            return new_lines.$join("\n");
          }, nil) && 'post_process';
        })(self, null)
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/formatters/html_formatter"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$new', '$private', '$public', '$print_html_start', '$flush', '$+', '$==', '$example_group_number', '$print_example_group_end', '$print_example_group_start', '$description', '$size', '$parent_groups', '$move_progress', '$percent_done', '$print_example_passed', '$[]', '$execution_result', '$make_header_red', '$make_example_group_header_red', '$metadata', '$message', '$join', '$format_backtrace', '$backtrace', '$extra_failure_content', '$print_example_failed', '$make_header_yellow', '$make_example_group_header_yellow', '$print_example_pending', '$map', '$backtrace_line', '$backtrace_formatter', '$configuration', '$compact!', '$snippet', '$>', '$to_f', '$/', '$to_i', '$*', '$example_number', '$print_summary', '$dry_run?']);
  self.$require("rspec/core/formatters/base_text_formatter");
  self.$require("rspec/core/formatters/html_printer");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Formatters');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $HtmlFormatter(){};
          var self = $HtmlFormatter = $klass($base, $super, 'HtmlFormatter', $HtmlFormatter);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6;

          def.example_group_number = def.example_number = def.printer = def.header_red = def.example_group_red = def.failed_examples = def.snippet_extractor = def.example_count = nil;
          def.$initialize = TMP_1 = function(output) {
            var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

            TMP_1.$$p = null;
            Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [output]);
            self.example_group_number = 0;
            self.example_number = 0;
            self.header_red = nil;
            return self.printer = $scope.get('HtmlPrinter').$new(output);
          };

          self.$private();

          def.$method_missing = TMP_2 = function(m, a) {
            var self = this, $iter = TMP_2.$$p, b = $iter || nil;

            a = $slice.call(arguments, 1);
            TMP_2.$$p = null;
            return nil;
          };

          self.$public();

          def.$message = function(message) {
            var self = this;

            return nil;
          };

          def.$example_group_number = function() {
            var self = this;

            return self.example_group_number;
          };

          def.$example_number = function() {
            var self = this;

            return self.example_number;
          };

          def.$start = TMP_3 = function(example_count) {
            var self = this, $iter = TMP_3.$$p, $yield = $iter || nil;

            TMP_3.$$p = null;
            Opal.find_super_dispatcher(self, 'start', TMP_3, null).apply(self, [example_count]);
            self.printer.$print_html_start();
            return self.printer.$flush();
          };

          def.$example_group_started = TMP_4 = function(example_group) {
            var self = this, $iter = TMP_4.$$p, $yield = $iter || nil;

            TMP_4.$$p = null;
            Opal.find_super_dispatcher(self, 'example_group_started', TMP_4, null).apply(self, [example_group]);
            self.example_group_red = false;
            self.example_group_number = self.example_group_number['$+'](1);
            if (self.$example_group_number()['$=='](1)) {
              } else {
              self.printer.$print_example_group_end()
            };
            self.printer.$print_example_group_start(self.$example_group_number(), example_group.$description(), example_group.$parent_groups().$size());
            return self.printer.$flush();
          };

          def.$start_dump = function() {
            var self = this;

            self.printer.$print_example_group_end();
            return self.printer.$flush();
          };

          def.$example_started = TMP_5 = function(example) {
            var self = this, $iter = TMP_5.$$p, $yield = $iter || nil;

            TMP_5.$$p = null;
            Opal.find_super_dispatcher(self, 'example_started', TMP_5, null).apply(self, [example]);
            return self.example_number = self.example_number['$+'](1);
          };

          def.$example_passed = function(example) {
            var self = this;

            self.printer.$move_progress(self.$percent_done());
            self.printer.$print_example_passed(example.$description(), example.$execution_result()['$[]']("run_time"));
            return self.printer.$flush();
          };

          def.$example_failed = TMP_6 = function(example) {
            var $a, self = this, $iter = TMP_6.$$p, $yield = $iter || nil, exception = nil, exception_details = nil, extra = nil;

            TMP_6.$$p = null;
            Opal.find_super_dispatcher(self, 'example_failed', TMP_6, null).apply(self, [example]);
            if ((($a = self.header_red) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.header_red = true;
              self.printer.$make_header_red();
            };
            if ((($a = self.example_group_red) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.example_group_red = true;
              self.printer.$make_example_group_header_red(self.$example_group_number());
            };
            self.printer.$move_progress(self.$percent_done());
            exception = example.$metadata()['$[]']("execution_result")['$[]']("exception");
            exception_details = (function() {if (exception !== false && exception !== nil) {
              return $hash2(["message", "backtrace"], {"message": exception.$message(), "backtrace": self.$format_backtrace(exception.$backtrace(), example).$join("\n")})
              } else {
              return false
            }; return nil; })();
            extra = self.$extra_failure_content(exception);
            self.printer.$print_example_failed(example.$execution_result()['$[]']("pending_fixed"), example.$description(), example.$execution_result()['$[]']("run_time"), self.failed_examples.$size(), exception_details, (function() {if ((($a = (extra['$=='](""))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return false
              } else {
              return extra
            }; return nil; })(), true);
            return self.printer.$flush();
          };

          def.$example_pending = function(example) {
            var $a, self = this;

            if ((($a = self.header_red) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.printer.$make_header_yellow()
            };
            if ((($a = self.example_group_red) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.printer.$make_example_group_header_yellow(self.$example_group_number())
            };
            self.printer.$move_progress(self.$percent_done());
            self.printer.$print_example_pending(example.$description(), example.$metadata()['$[]']("execution_result")['$[]']("pending_message"));
            return self.printer.$flush();
          };

          def.$extra_failure_content = function(exception) {
            var $a, $b, TMP_7, self = this, backtrace = nil;

            self.$require("rspec/core/formatters/snippet_extractor");
            backtrace = ($a = ($b = exception.$backtrace()).$map, $a.$$p = (TMP_7 = function(line){var self = TMP_7.$$s || this;
if (line == null) line = nil;
            return self.$configuration().$backtrace_formatter().$backtrace_line(line)}, TMP_7.$$s = self, TMP_7), $a).call($b);
            backtrace['$compact!']();
            ((($a = self.snippet_extractor) !== false && $a !== nil) ? $a : self.snippet_extractor = $scope.get('SnippetExtractor').$new());
            return "    <pre class=\"ruby\"><code>" + (self.snippet_extractor.$snippet(backtrace)) + "</code></pre>";
          };

          def.$percent_done = function() {
            var self = this, result = nil;

            result = 100.0;
            if (self.example_count['$>'](0)) {
              result = (((self.$example_number()).$to_f()['$/'](self.example_count.$to_f())['$*'](1000)).$to_i()['$/'](10.0)).$to_f()};
            return result;
          };

          def.$dump_failures = function() {
            var self = this;

            return nil;
          };

          def.$dump_pending = function() {
            var self = this;

            return nil;
          };

          return (def.$dump_summary = function(duration, example_count, failure_count, pending_count) {
            var self = this;

            self.printer.$print_summary(self['$dry_run?'](), duration, example_count, failure_count, pending_count);
            return self.printer.$flush();
          }, nil) && 'dump_summary';
        })(self, $scope.get('BaseTextFormatter'))
      })(self)
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/formatters/progress_formatter"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$print', '$output', '$success_color', '$pending_color', '$failure_color', '$puts']);
  self.$require("rspec/core/formatters/base_text_formatter");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Formatters');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $ProgressFormatter(){};
          var self = $ProgressFormatter = $klass($base, $super, 'ProgressFormatter', $ProgressFormatter);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

          def.$example_passed = TMP_1 = function(example) {
            var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

            TMP_1.$$p = null;
            Opal.find_super_dispatcher(self, 'example_passed', TMP_1, null).apply(self, [example]);
            return self.$output().$print(self.$success_color("."));
          };

          def.$example_pending = TMP_2 = function(example) {
            var self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

            TMP_2.$$p = null;
            Opal.find_super_dispatcher(self, 'example_pending', TMP_2, null).apply(self, [example]);
            return self.$output().$print(self.$pending_color("*"));
          };

          def.$example_failed = TMP_3 = function(example) {
            var self = this, $iter = TMP_3.$$p, $yield = $iter || nil;

            TMP_3.$$p = null;
            Opal.find_super_dispatcher(self, 'example_failed', TMP_3, null).apply(self, [example]);
            return self.$output().$print(self.$failure_color("F"));
          };

          return (def.$start_dump = TMP_4 = function() {
            var self = this, $iter = TMP_4.$$p, $yield = $iter || nil;

            TMP_4.$$p = null;
            Opal.find_super_dispatcher(self, 'start_dump', TMP_4, null).apply(self, []);
            return self.$output().$puts();
          }, nil) && 'start_dump';
        })(self, $scope.get('BaseTextFormatter'))
      })(self)
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["json"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $klass = Opal.klass;

  Opal.add_stubs(['$new', '$push', '$[]=', '$[]', '$create_id', '$json_create', '$attr_accessor', '$create_id=', '$===', '$parse', '$generate', '$from_object', '$to_json', '$responds_to?', '$to_io', '$write', '$to_s', '$to_a', '$strftime']);
  (function($base) {
    var self = $module($base, 'JSON');

    var def = self.$$proto, $scope = self.$$scope, $a, $b;

    
    var $parse  = JSON.parse,
        $hasOwn = Opal.hasOwnProperty;

    function to_opal(value, options) {
      switch (typeof value) {
        case 'string':
          return value;

        case 'number':
          return value;

        case 'boolean':
          return !!value;

        case 'null':
          return nil;

        case 'object':
          if (!value) return nil;

          if (value.$$is_array) {
            var arr = (options.array_class).$new();

            for (var i = 0, ii = value.length; i < ii; i++) {
              (arr).$push(to_opal(value[i], options));
            }

            return arr;
          }
          else {
            var hash = (options.object_class).$new();

            for (var k in value) {
              if ($hasOwn.call(value, k)) {
                (hash)['$[]='](k, to_opal(value[k], options));
              }
            }

            var klass;
            if ((klass = (hash)['$[]']($scope.get('JSON').$create_id())) != nil) {
              klass = Opal.cget(klass);
              return (klass).$json_create(hash);
            }
            else {
              return hash;
            }
          }
      }
    };
  

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return self.$attr_accessor("create_id")
    })(self.$singleton_class());

    (($a = ["json_class"]), $b = self, $b['$create_id='].apply($b, $a), $a[$a.length-1]);

    Opal.defs(self, '$[]', function(value, options) {
      var $a, self = this;

      if (options == null) {
        options = $hash2([], {})
      }
      if ((($a = $scope.get('String')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$parse(value, options)
        } else {
        return self.$generate(value, options)
      };
    });

    Opal.defs(self, '$parse', function(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {})
      }
      return self.$from_object($parse(source), options);
    });

    Opal.defs(self, '$parse!', function(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {})
      }
      return self.$parse(source, options);
    });

    Opal.defs(self, '$from_object', function(js_object, options) {
      var $a, $b, $c, self = this;

      if (options == null) {
        options = $hash2([], {})
      }
      ($a = "object_class", $b = options, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, $scope.get('Hash'))));
      ($a = "array_class", $b = options, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, $scope.get('Array'))));
      return to_opal(js_object, options.smap);
    });

    Opal.defs(self, '$generate', function(obj, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {})
      }
      return obj.$to_json(options);
    });

    Opal.defs(self, '$dump', function(obj, io, limit) {
      var $a, self = this, string = nil;

      if (io == null) {
        io = nil
      }
      if (limit == null) {
        limit = nil
      }
      string = self.$generate(obj);
      if (io !== false && io !== nil) {
        if ((($a = io['$responds_to?']("to_io")) !== nil && (!$a.$$is_boolean || $a == true))) {
          io = io.$to_io()};
        io.$write(string);
        return io;
        } else {
        return string
      };
    });
  })(self);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$to_json', function() {
      var self = this;

      return self.$to_s().$to_json();
    }), nil) && 'to_json'
  })(self, null);
  (function($base) {
    var self = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$to_json', function() {
      var self = this;

      return self.$to_a().$to_json();
    })
  })(self);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_json = function() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        result.push((self[i]).$to_json());
      }

      return '[' + result.join(', ') + ']';
    
    }, nil) && 'to_json'
  })(self, null);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_json = function() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    }, nil) && 'to_json'
  })(self, null);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_json = function() {
      var self = this;

      
      var inspect = [],
          keys = self.keys,
          _map = self.map,
          smap = self.smap,
          map, khash;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i];

        if (key.$$is_string) {
          map = smap;
          khash = key;
        } else {
          map = _map;
          khash = key.$hash();
        }

        inspect.push((key).$to_s().$to_json() + ':' + (map[khash]).$to_json());
      }

      return '{' + inspect.join(', ') + '}';
    ;
    }, nil) && 'to_json'
  })(self, null);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_json = function() {
      var self = this;

      return "null";
    }, nil) && 'to_json'
  })(self, null);
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_json = function() {
      var self = this;

      return self.toString();
    }, nil) && 'to_json'
  })(self, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    return Opal.defn(self, '$to_json', def.$inspect)
  })(self, null);
  (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_json = function() {
      var self = this;

      return self.$strftime("%FT%T%z").$to_json();
    }, nil) && 'to_json'
  })(self, null);
  return (function($base, $super) {
    function $Date(){};
    var self = $Date = $klass($base, $super, 'Date', $Date);

    var def = self.$$proto, $scope = self.$$scope;

    def.$to_json = function() {
      var self = this;

      return self.$to_s().$to_json();
    };

    return (def.$as_json = function() {
      var self = this;

      return self.$to_s();
    }, nil) && 'as_json';
  })(self, null);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/formatters/json_formatter"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$attr_reader', '$<<', '$[]', '$[]=', '$summary_line', '$mute_profile_output?', '$dump_profile', '$pluralize', '$>', '$map', '$tap', '$exception', '$name', '$class', '$message', '$backtrace', '$format_example', '$examples', '$write', '$output', '$to_json', '$===', '$!', '$==', '$close', '$dump_profile_slowest_examples', '$dump_profile_slowest_example_groups', '$slowest_examples', '$execution_result', '$update', '$slowest_groups', '$private', '$description', '$full_description', '$metadata']);
  self.$require("rspec/core/formatters/base_formatter");
  self.$require("json");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Formatters');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $JsonFormatter(){};
          var self = $JsonFormatter = $klass($base, $super, 'JsonFormatter', $JsonFormatter);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

          def.output_hash = nil;
          self.$attr_reader("output_hash");

          def.$initialize = TMP_1 = function(output) {var $zuper = $slice.call(arguments, 0);
            var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

            TMP_1.$$p = null;
            Opal.find_super_dispatcher(self, 'initialize', TMP_1, $iter).apply(self, $zuper);
            return self.output_hash = $hash2([], {});
          };

          def.$message = function(message) {
            var $a, $b, $c, self = this;

            return (($a = "messages", $b = self.output_hash, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, []))))['$<<'](message);
          };

          def.$dump_summary = TMP_2 = function(duration, example_count, failure_count, pending_count) {
            var $a, self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

            TMP_2.$$p = null;
            Opal.find_super_dispatcher(self, 'dump_summary', TMP_2, null).apply(self, [duration, example_count, failure_count, pending_count]);
            self.output_hash['$[]=']("summary", $hash2(["duration", "example_count", "failure_count", "pending_count"], {"duration": duration, "example_count": example_count, "failure_count": failure_count, "pending_count": pending_count}));
            self.output_hash['$[]=']("summary_line", self.$summary_line(example_count, failure_count, pending_count));
            if ((($a = self['$mute_profile_output?'](failure_count)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$dump_profile()
            };
          };

          def.$summary_line = function(example_count, failure_count, pending_count) {
            var self = this, summary = nil;

            summary = self.$pluralize(example_count, "example");
            summary['$<<'](", ")['$<<'](self.$pluralize(failure_count, "failure"));
            if (pending_count['$>'](0)) {
              summary['$<<'](", " + (pending_count) + " pending")};
            return summary;
          };

          def.$stop = TMP_3 = function() {var $zuper = $slice.call(arguments, 0);
            var $a, $b, TMP_4, self = this, $iter = TMP_3.$$p, $yield = $iter || nil;

            TMP_3.$$p = null;
            Opal.find_super_dispatcher(self, 'stop', TMP_3, $iter).apply(self, $zuper);
            return self.output_hash['$[]=']("examples", ($a = ($b = self.$examples()).$map, $a.$$p = (TMP_4 = function(example){var self = TMP_4.$$s || this, $a, $b, TMP_5;
if (example == null) example = nil;
            return ($a = ($b = self.$format_example(example)).$tap, $a.$$p = (TMP_5 = function(hash){var self = TMP_5.$$s || this, $a, e = nil;
if (hash == null) hash = nil;
              if ((($a = e = example.$exception()) !== nil && (!$a.$$is_boolean || $a == true))) {
                  return hash['$[]=']("exception", $hash2(["class", "message", "backtrace"], {"class": e.$class().$name(), "message": e.$message(), "backtrace": e.$backtrace()}))
                  } else {
                  return nil
                }}, TMP_5.$$s = self, TMP_5), $a).call($b)}, TMP_4.$$s = self, TMP_4), $a).call($b));
          };

          def.$close = function() {
            var $a, $b, self = this;
            if ($gvars.stdout == null) $gvars.stdout = nil;

            self.$output().$write(self.output_hash.$to_json());
            if ((($a = ($b = $scope.get('IO')['$==='](self.$output()), $b !== false && $b !== nil ?self.$output()['$==']($gvars.stdout)['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$output().$close()
              } else {
              return nil
            };
          };

          def.$dump_profile = function() {
            var self = this;

            self.output_hash['$[]=']("profile", $hash2([], {}));
            self.$dump_profile_slowest_examples();
            return self.$dump_profile_slowest_example_groups();
          };

          def.$dump_profile_slowest_examples = function() {
            var $a, $b, TMP_6, self = this, sorted_examples = nil;

            self.output_hash['$[]=']("profile", $hash2([], {}));
            sorted_examples = self.$slowest_examples();
            self.output_hash['$[]']("profile")['$[]=']("examples", ($a = ($b = sorted_examples['$[]']("examples")).$map, $a.$$p = (TMP_6 = function(example){var self = TMP_6.$$s || this, $a, $b, TMP_7;
if (example == null) example = nil;
            return ($a = ($b = self.$format_example(example)).$tap, $a.$$p = (TMP_7 = function(hash){var self = TMP_7.$$s || this;
if (hash == null) hash = nil;
              return hash['$[]=']("run_time", example.$execution_result()['$[]']("run_time"))}, TMP_7.$$s = self, TMP_7), $a).call($b)}, TMP_6.$$s = self, TMP_6), $a).call($b));
            self.output_hash['$[]']("profile")['$[]=']("slowest", sorted_examples['$[]']("slows"));
            return self.output_hash['$[]']("profile")['$[]=']("total", sorted_examples['$[]']("total"));
          };

          def.$dump_profile_slowest_example_groups = function() {
            var $a, $b, $c, TMP_8, self = this;

            ($a = "profile", $b = self.output_hash, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, $hash2([], {}))));
            return self.output_hash['$[]']("profile")['$[]=']("groups", ($a = ($b = self.$slowest_groups()).$map, $a.$$p = (TMP_8 = function(loc, hash){var self = TMP_8.$$s || this;
if (loc == null) loc = nil;if (hash == null) hash = nil;
            return hash.$update($hash2(["location"], {"location": loc}))}, TMP_8.$$s = self, TMP_8), $a).call($b));
          };

          self.$private();

          return (def.$format_example = function(example) {
            var self = this;

            return $hash2(["description", "full_description", "status", "file_path", "line_number"], {"description": example.$description(), "full_description": example.$full_description(), "status": example.$execution_result()['$[]']("status"), "file_path": example.$metadata()['$[]']("file_path"), "line_number": example.$metadata()['$[]']("line_number")});
          }, nil) && 'format_example';
        })(self, $scope.get('BaseFormatter'))
      })(self)
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/configuration"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars, $range = Opal.range;

  Opal.add_stubs(['$require', '$include', '$define_method', '$instance_variable_defined?', '$instance_variable_get', '$value_for', '$deprecate', '$alias_method', '$define_predicate_for', '$each', '$has_key?', '$raise', '$[]', '$deprecate_alias_key', '$define_aliases', '$attr_writer', '$define_reader', '$Array', '$add_setting', '$!', '$equal?', '$warn', '$+', '$inspect', '$output_stream', '$first_non_rspec_line', '$warning', '$attr_accessor', '$attr_reader', '$new', '$force', '$ordering_manager', '$merge!', '$warnings=', '$clear', '$delete', '$class_eval', '$send', '$mock_with', '$exclusion_patterns', '$exclusion_patterns=', '$inclusion_patterns', '$inclusion_patterns=', '$===', '$to_s', '$map', '$respond_to?', '$framework_name', '$==', '$assert_no_example_groups_defined', '$configuration', '$empty?', '$expect_with', '$expecting_with_rspec=', '$any?', '$-', '$>', '$length', '$first', '$push', '$full_backtrace?', '$full_backtrace=', '$output_to_tty?', '$windows_os?', '$unshift', '$filter_run', '$to_i', '$fetch', '$filter', '$union', '$built_in_formatter', '$custom_formatter', '$<<', '$formatters', '$file_at', '$add_formatter', '$deprecation_stream', '$is_a?', '$flatten', '$command', '$running_in_drb?', '$default_path', '$files_to_run=', '$get_files_to_run', '$build_hash_from', '$alias_example_to', '$alias_it_behaves_like_to', '$include_with_low_priority', '$filter_manager', '$include!', '$inclusions', '$exclude_with_low_priority', '$exclude!', '$exclusions', '$include_or_extend_modules', '$any_apply?', '$<', '$select', '$directory?', '$add_to_load_path', '$>=', '$to_f', '$extend', '$include?', '$included_modules', '$mock_framework', '$expectation_frameworks', '$load', '$expand_path', '$uniq', '$files_to_run', '$lambda', '$__send__', '$to_proc', '$delegate_to_ordering_manager', '$module_eval', '$let', '$deprecation_stream=', '$private', '$sort', '$flat_map', '$gsub', '$gather_directories', '$extract_location', '$pattern', '$=~', '$escape', '$split', '$add_location', '$last', '$example_groups', '$world', '$tty?', '$string_const?', '$inject', '$const_get', '$path_for', '$retry', '$underscore_with_fix_for_non_standard_rspec_naming', '$sub', '$underscore', '$dup', '$gsub!', '$tr!', '$downcase!', '$mkdir_p', '$dirname']);
  self.$require("fileutils");
  self.$require("rspec/core/backtrace_formatter");
  self.$require("rspec/core/ruby_project");
  self.$require("rspec/core/formatters/deprecation_formatter");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Configuration(){};
        var self = $Configuration = $klass($base, $super, 'Configuration', $Configuration);

        var def = self.$$proto, $scope = self.$$scope, TMP_6, TMP_8, $a, $b, TMP_19, TMP_20;

        def.reporter = def.output_stream = def.spec_files_loaded = def.preferred_options = def.formatters = def.mock_framework = def.backtrace_formatter = def.expectation_frameworks = def.color = def.requires = def.profile_examples = def.format_docstrings_block = nil;
        self.$include((((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('Hooks')));

        (function($base, $super) {
          function $MustBeConfiguredBeforeExampleGroupsError(){};
          var self = $MustBeConfiguredBeforeExampleGroupsError = $klass($base, $super, 'MustBeConfiguredBeforeExampleGroupsError', $MustBeConfiguredBeforeExampleGroupsError);

          var def = self.$$proto, $scope = self.$$scope;

          return nil;
        })(self, $scope.get('StandardError'));

        Opal.defs(self, '$define_reader', function(name) {
          var $a, $b, TMP_1, self = this;

          return ($a = ($b = self).$define_method, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, variable = nil;

          variable = (function() {if ((($a = self['$instance_variable_defined?']("@" + (name))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$instance_variable_get("@" + (name))
              } else {
              return nil
            }; return nil; })();
            return self.$value_for(name, variable);}, TMP_1.$$s = self, TMP_1), $a).call($b, name);
        });

        Opal.defs(self, '$deprecate_alias_key', function() {
          var self = this;

          return $scope.get('RSpec').$deprecate("add_setting with :alias option", $hash2(["replacement"], {"replacement": ":alias_with"}));
        });

        Opal.defs(self, '$define_aliases', function(name, alias_name) {
          var self = this;

          self.$alias_method(alias_name, name);
          self.$alias_method("" + (alias_name) + "=", "" + (name) + "=");
          return self.$define_predicate_for(alias_name);
        });

        Opal.defs(self, '$define_predicate_for', function(names) {
          var $a, $b, TMP_2, self = this;

          names = $slice.call(arguments, 0);
          return ($a = ($b = names).$each, $a.$$p = (TMP_2 = function(name){var self = TMP_2.$$s || this;
if (name == null) name = nil;
          return self.$alias_method("" + (name) + "?", name)}, TMP_2.$$s = self, TMP_2), $a).call($b);
        });

        Opal.defs(self, '$add_setting', function(name, opts) {
          var $a, $b, TMP_3, self = this;

          if (opts == null) {
            opts = $hash2([], {})
          }
          if ((($a = opts['$has_key?']("default")) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$raise("Use the instance add_setting method if you want to set a default")};
          if ((($a = opts['$[]']("alias")) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$deprecate_alias_key();
            self.$define_aliases(opts['$[]']("alias"), name);
            } else {
            self.$attr_writer(name);
            self.$define_reader(name);
            self.$define_predicate_for(name);
          };
          return ($a = ($b = self.$Array(opts['$[]']("alias_with"))).$each, $a.$$p = (TMP_3 = function(alias_name){var self = TMP_3.$$s || this;
if (alias_name == null) alias_name = nil;
          return self.$define_aliases(name, alias_name)}, TMP_3.$$s = self, TMP_3), $a).call($b);
        });

        self.$add_setting("default_path");

        self.$add_setting("drb");

        self.$add_setting("drb_port");

        self.$add_setting("error_stream");

        self.$add_setting("deprecation_stream");

        self.$add_setting("fail_fast");

        self.$add_setting("dry_run");

        self.$add_setting("failure_exit_code");

        self.$define_reader("requires");

        self.$define_reader("libs");

        self.$define_reader("output_stream");

        def['$output_stream='] = function(value) {
          var $a, $b, self = this;

          if ((($a = ($b = self.reporter, $b !== false && $b !== nil ?value['$equal?'](self.output_stream)['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$warn("RSpec's reporter has already been initialized with "['$+']("" + (self.$output_stream().$inspect()) + " as the output stream, so your change to ")['$+']("`output_stream` will be ignored. You should configure it earlier for ")['$+']("it to take effect. (Called from " + ($scope.get('CallerFilter').$first_non_rspec_line()) + ")"))
            } else {
            return self.output_stream = value
          };
        };

        self.$add_setting("pattern", $hash2(["alias_with"], {"alias_with": "filename_pattern"}));

        def['$pattern='] = function(value) {
          var $a, self = this;

          if ((($a = self.spec_files_loaded) !== nil && (!$a.$$is_boolean || $a == true))) {
            $scope.get('RSpec').$warning("Configuring `pattern` to " + (value) + " has no effect since RSpec has already loaded the spec files.")};
          return self.pattern = value;
        };

        Opal.defn(self, '$filename_pattern=', def['$pattern=']);

        self.$add_setting("profile_examples");

        self.$add_setting("run_all_when_everything_filtered");

        self.$add_setting("success_color");

        self.$add_setting("pending_color");

        self.$add_setting("failure_color");

        self.$add_setting("default_color");

        self.$add_setting("fixed_color");

        self.$add_setting("detail_color");

        self.$add_setting("show_failures_in_pending_blocks");

        def['$treat_symbols_as_metadata_keys_with_true_values='] = function(value) {
          var self = this;

          return $scope.get('RSpec').$deprecate("RSpec::Core::Configuration#treat_symbols_as_metadata_keys_with_true_values=");
        };

        self.$add_setting("tty");

        self.$add_setting("include_or_extend_modules");

        self.$add_setting("files_to_run");

        self.$add_setting("expecting_with_rspec");

        self.$attr_accessor("filter_manager");

        self.$attr_reader("backtrace_formatter", "ordering_manager");

        Opal.defn(self, '$backtrace_cleaner', def.$backtrace_formatter);

        def.$initialize = function() {
          var self = this;
          if ($gvars.stderr == null) $gvars.stderr = nil;
          if ($gvars.stdout == null) $gvars.stdout = nil;

          self.expectation_frameworks = [];
          self.include_or_extend_modules = [];
          self.mock_framework = nil;
          self.files_to_run = [];
          self.formatters = [];
          self.color = false;
          self.pattern = "**/*_spec.rb";
          self.failure_exit_code = 1;
          self.spec_files_loaded = false;
          self.backtrace_formatter = $scope.get('BacktraceFormatter').$new();
          self.default_path = "spec";
          self.deprecation_stream = $gvars.stderr;
          self.output_stream = $gvars.stdout;
          self.reporter = nil;
          self.filter_manager = $scope.get('FilterManager').$new();
          self.ordering_manager = (($scope.get('Ordering')).$$scope.get('ConfigurationManager')).$new();
          self.preferred_options = $hash2([], {});
          self.failure_color = "red";
          self.success_color = "green";
          self.pending_color = "yellow";
          self.default_color = "white";
          self.fixed_color = "blue";
          self.detail_color = "cyan";
          self.profile_examples = false;
          self.requires = [];
          return self.libs = [];
        };

        def.$force = function(hash) {
          var $a, $b, self = this;

          self.$ordering_manager().$force(hash);
          self.preferred_options['$merge!'](hash);
          return (($a = [self.$value_for("warnings", nil)]), $b = self, $b['$warnings='].apply($b, $a), $a[$a.length-1]);
        };

        def.$reset = function() {
          var self = this;

          self.spec_files_loaded = false;
          self.reporter = nil;
          return self.formatters.$clear();
        };

        def.$add_setting = function(name, opts) {
          var $a, $b, TMP_4, self = this, default$ = nil;

          if (opts == null) {
            opts = $hash2([], {})
          }
          default$ = opts.$delete("default");
          ($a = ($b = ((function(self) {
            var $scope = self.$$scope, def = self.$$proto;

            return self
          })(self.$singleton_class()))).$class_eval, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

          return self.$add_setting(name, opts)}, TMP_4.$$s = self, TMP_4), $a).call($b);
          if (default$ !== false && default$ !== nil) {
            return self.$send("" + (name) + "=", default$)
            } else {
            return nil
          };
        };

        def.$mock_framework = function() {
          var $a, self = this;

          if ((($a = self.mock_framework) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$mock_with("rspec")
          };
          return self.mock_framework;
        };

        def['$mock_framework='] = function(framework) {
          var self = this;

          return self.$mock_with(framework);
        };

        def.$backtrace_exclusion_patterns = function() {
          var self = this;

          return self.backtrace_formatter.$exclusion_patterns();
        };

        def['$backtrace_exclusion_patterns='] = function(patterns) {
          var $a, $b, self = this;

          return (($a = [patterns]), $b = self.backtrace_formatter, $b['$exclusion_patterns='].apply($b, $a), $a[$a.length-1]);
        };

        def.$backtrace_inclusion_patterns = function() {
          var self = this;

          return self.backtrace_formatter.$inclusion_patterns();
        };

        def['$backtrace_inclusion_patterns='] = function(patterns) {
          var $a, $b, self = this;

          return (($a = [patterns]), $b = self.backtrace_formatter, $b['$inclusion_patterns='].apply($b, $a), $a[$a.length-1]);
        };

        def.$mock_with = TMP_6 = function(framework) {
          var $a, $b, $c, TMP_5, self = this, $iter = TMP_6.$$p, $yield = $iter || nil, framework_module = nil, $case = nil, new_name = nil, old_name = nil;

          TMP_6.$$p = null;
          framework_module = (function() {$case = framework;if ($scope.get('Module')['$===']($case)) {return framework}else if ($scope.get('String')['$===']($case) || $scope.get('Symbol')['$===']($case)) {self.$require((function() {$case = framework.$to_s();if (/rspec/i['$===']($case)) {return "rspec/core/mocking/with_rspec"}else if (/mocha/i['$===']($case)) {return "rspec/core/mocking/with_mocha"}else if (/rr/i['$===']($case)) {return "rspec/core/mocking/with_rr"}else if (/flexmock/i['$===']($case)) {return "rspec/core/mocking/with_flexmock"}else {return "rspec/core/mocking/with_absolutely_nothing"}})());
          return (((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('MockFrameworkAdapter'));}else { return nil }})();
          $a = Opal.to_ary(($b = ($c = [framework_module, self.mock_framework]).$map, $b.$$p = (TMP_5 = function(mod){var self = TMP_5.$$s || this, $a;
if (mod == null) mod = nil;
          if ((($a = mod['$respond_to?']("framework_name")) !== nil && (!$a.$$is_boolean || $a == true))) {
              return mod.$framework_name()
              } else {
              return "unnamed"
            }}, TMP_5.$$s = self, TMP_5), $b).call($c)), new_name = ($a[0] == null ? nil : $a[0]), old_name = ($a[1] == null ? nil : $a[1]);
          if (new_name['$=='](old_name)) {
            } else {
            self.$assert_no_example_groups_defined("mock_framework")
          };
          if (($yield !== nil)) {
            if ((($a = framework_module['$respond_to?']("configuration")) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$raise("" + (framework_module) + " must respond to `configuration` so that mock_with can yield it.")
            };
            if (Opal.yield1($yield, framework_module.$configuration()) === $breaker) return $breaker.$v;};
          return self.mock_framework = framework_module;
        };

        def.$expectation_frameworks = function() {
          var $a, self = this;

          if ((($a = self.expectation_frameworks['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$expect_with("rspec")};
          return self.expectation_frameworks;
        };

        def['$expectation_framework='] = function(framework) {
          var self = this;

          return self.$expect_with(framework);
        };

        def.$expect_with = TMP_8 = function(frameworks) {
          var $a, $b, TMP_7, self = this, $iter = TMP_8.$$p, $yield = $iter || nil, modules = nil;

          frameworks = $slice.call(arguments, 0);
          TMP_8.$$p = null;
          modules = ($a = ($b = frameworks).$map, $a.$$p = (TMP_7 = function(framework){var self = TMP_7.$$s || this, $a, $b, $case = nil;
if (framework == null) framework = nil;
          return (function() {$case = framework;if ($scope.get('Module')['$===']($case)) {return framework}else if ("rspec"['$===']($case)) {self.$require("rspec/expectations");
            (($a = [true]), $b = self, $b['$expecting_with_rspec='].apply($b, $a), $a[$a.length-1]);
            return ((Opal.get('RSpec')).$$scope.get('Matchers'));}else if ("stdlib"['$===']($case)) {self.$require("test/unit/assertions");
            return ((((Opal.get('Test')).$$scope.get('Unit'))).$$scope.get('Assertions'));}else {return self.$raise($scope.get('ArgumentError'), "" + (framework.$inspect()) + " is not supported")}})()}, TMP_7.$$s = self, TMP_7), $a).call($b);
          if ((($a = (modules['$-'](self.expectation_frameworks))['$any?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$assert_no_example_groups_defined("expect_with")};
          if (($yield !== nil)) {
            if (modules.$length()['$>'](1)) {
              self.$raise("expect_with only accepts a block with a single argument. Call expect_with " + (modules.$length()) + " times, once with each argument, instead.")};
            if ((($a = modules.$first()['$respond_to?']("configuration")) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$raise("" + (modules.$first()) + " must respond to `configuration` so that expect_with can yield it.")
            };
            if (Opal.yield1($yield, modules.$first().$configuration()) === $breaker) return $breaker.$v;};
          return ($a = self.expectation_frameworks).$push.apply($a, [].concat(modules));
        };

        def['$full_backtrace?'] = function() {
          var self = this;

          return self.backtrace_formatter['$full_backtrace?']();
        };

        def['$full_backtrace='] = function(true_or_false) {
          var $a, $b, self = this;

          return (($a = [true_or_false]), $b = self.backtrace_formatter, $b['$full_backtrace='].apply($b, $a), $a[$a.length-1]);
        };

        def.$color = function(output) {
          var $a, self = this;

          if (output == null) {
            output = self.$output_stream()
          }
          if ((($a = self['$output_to_tty?'](output)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return false
          };
          return self.$value_for("color", self.color);
        };

        def['$color='] = function(bool) {
          var $a, $b, self = this;

          if (bool !== false && bool !== nil) {
            if ((($a = ($b = $scope.get('RSpec')['$windows_os?'](), $b !== false && $b !== nil ?$scope.get('ENV')['$[]']("ANSICON")['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              $scope.get('RSpec').$warning("You must use ANSICON 1.31 or later (http://adoxa.3eeweb.com/ansicon/) to use colour on Windows");
              return self.color = false;
              } else {
              return self.color = true
            }
            } else {
            return nil
          };
        };

        self.$alias_method("color_enabled", "color");

        self.$alias_method("color_enabled=", "color=");

        self.$define_predicate_for("color_enabled", "color");

        def['$libs='] = function(libs) {
          var $a, $b, TMP_9, self = this;

          return ($a = ($b = libs).$map, $a.$$p = (TMP_9 = function(lib){var self = TMP_9.$$s || this;
            if (self.libs == null) self.libs = nil;
            if ($gvars.LOAD_PATH == null) $gvars.LOAD_PATH = nil;
if (lib == null) lib = nil;
          self.libs.$unshift(lib);
            return $gvars.LOAD_PATH.$unshift(lib);}, TMP_9.$$s = self, TMP_9), $a).call($b);
        };

        def['$requires='] = function(paths) {
          var $a, $b, TMP_10, self = this;

          $scope.get('RSpec').$deprecate("RSpec::Core::Configuration#requires=(paths)", $hash2(["replacement"], {"replacement": "paths.each {|path| require path}"}));
          ($a = ($b = paths).$map, $a.$$p = (TMP_10 = function(path){var self = TMP_10.$$s || this;
if (path == null) path = nil;
          return self.$require(path)}, TMP_10.$$s = self, TMP_10), $a).call($b);
          return self.requires = self.requires['$+'](paths);
        };

        def['$line_numbers='] = function(line_numbers) {
          var $a, $b, TMP_11, self = this;

          return self.$filter_run($hash2(["line_numbers"], {"line_numbers": ($a = ($b = line_numbers).$map, $a.$$p = (TMP_11 = function(l){var self = TMP_11.$$s || this;
if (l == null) l = nil;
          return l.$to_i()}, TMP_11.$$s = self, TMP_11), $a).call($b)}));
        };

        def.$line_numbers = function() {
          var self = this;

          return self.$filter().$fetch("line_numbers", []);
        };

        def['$full_description='] = function(description) {
          var $a, $b, $c, TMP_12, self = this;

          return self.$filter_run($hash2(["full_description"], {"full_description": ($a = $scope.get('Regexp')).$union.apply($a, [].concat(($b = ($c = self.$Array(description)).$map, $b.$$p = (TMP_12 = function(d){var self = TMP_12.$$s || this;
if (d == null) d = nil;
          return $scope.get('Regexp').$new(d)}, TMP_12.$$s = self, TMP_12), $b).call($c)))}));
        };

        def.$full_description = function() {
          var self = this;

          return self.$filter().$fetch("full_description", nil);
        };

        def.$add_formatter = function(formatter_to_use, paths) {
          var $a, $b, $c, TMP_13, self = this, formatter_class = nil;

          paths = $slice.call(arguments, 1);
          formatter_class = ((($a = ((($b = self.$built_in_formatter(formatter_to_use)) !== false && $b !== nil) ? $b : self.$custom_formatter(formatter_to_use))) !== false && $a !== nil) ? $a : (self.$raise($scope.get('ArgumentError'), "Formatter '" + (formatter_to_use) + "' unknown - maybe you meant 'documentation' or 'progress'?.")));
          if ((($a = paths['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            paths['$<<'](self.$output_stream())};
          return self.$formatters()['$<<'](($a = formatter_class).$new.apply($a, [].concat(($b = ($c = paths).$map, $b.$$p = (TMP_13 = function(p){var self = TMP_13.$$s || this, $a;
if (p == null) p = nil;
          if ((($a = $scope.get('String')['$==='](p)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$file_at(p)
              } else {
              return p
            }}, TMP_13.$$s = self, TMP_13), $b).call($c))));
        };

        self.$alias_method("formatter=", "add_formatter");

        def.$formatters = function() {
          var $a, self = this;

          return ((($a = self.formatters) !== false && $a !== nil) ? $a : self.formatters = []);
        };

        def.$reporter = function() {
          var $a, $b, self = this;

          return ((($a = self.reporter) !== false && $a !== nil) ? $a : self.reporter = (function() {if ((($b = self.$formatters()['$empty?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.$add_formatter("progress")};
          self.$add_formatter((((((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('Formatters'))).$$scope.get('DeprecationFormatter')), self.$deprecation_stream(), self.$output_stream());
          return ($b = $scope.get('Reporter')).$new.apply($b, [self].concat(self.$formatters()));})());
        };

        def.$profile_examples = function() {
          var $a, $b, self = this, profile = nil;

          profile = self.$value_for("profile_examples", self.profile_examples);
          if ((($a = (($b = profile !== false && profile !== nil) ? profile['$is_a?']($scope.get('Integer'))['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return 10
            } else {
            return profile
          };
        };

        def['$files_or_directories_to_run='] = function(files) {
          var $a, $b, $c, $d, self = this;

          files = $slice.call(arguments, 0);
          files = files.$flatten();
          if ((($a = ($b = ($c = (((($d = self.$command()['$==']("rspec")) !== false && $d !== nil) ? $d : $scope.get('Runner')['$running_in_drb?']())), $c !== false && $c !== nil ?self.$default_path() : $c), $b !== false && $b !== nil ?files['$empty?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            files['$<<'](self.$default_path())};
          return (($a = [self.$get_files_to_run(files)]), $b = self, $b['$files_to_run='].apply($b, $a), $a[$a.length-1]);
        };

        def.$alias_example_to = function(new_name, args) {
          var self = this, extra_options = nil;

          args = $slice.call(arguments, 1);
          extra_options = $scope.get('Metadata').$build_hash_from(args);
          return (((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('ExampleGroup')).$alias_example_to(new_name, extra_options);
        };

        def.$alias_it_behaves_like_to = function(new_name, report_label) {
          var self = this;

          if (report_label == null) {
            report_label = ""
          }
          return (((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('ExampleGroup')).$alias_it_behaves_like_to(new_name, report_label);
        };

        self.$alias_method("alias_it_should_behave_like_to", "alias_it_behaves_like_to");

        def.$filter_run_including = function(args) {
          var self = this;

          args = $slice.call(arguments, 0);
          return self.$filter_manager().$include_with_low_priority($scope.get('Metadata').$build_hash_from(args));
        };

        self.$alias_method("filter_run", "filter_run_including");

        def['$inclusion_filter='] = function(filter) {
          var self = this;

          return self.$filter_manager()['$include!']($scope.get('Metadata').$build_hash_from([filter]));
        };

        self.$alias_method("filter=", "inclusion_filter=");

        def.$inclusion_filter = function() {
          var self = this;

          return self.$filter_manager().$inclusions();
        };

        self.$alias_method("filter", "inclusion_filter");

        def.$filter_run_excluding = function(args) {
          var self = this;

          args = $slice.call(arguments, 0);
          return self.$filter_manager().$exclude_with_low_priority($scope.get('Metadata').$build_hash_from(args));
        };

        def['$exclusion_filter='] = function(filter) {
          var self = this;

          return self.$filter_manager()['$exclude!']($scope.get('Metadata').$build_hash_from([filter]));
        };

        def.$exclusion_filter = function() {
          var self = this;

          return self.$filter_manager().$exclusions();
        };

        def.$include = function(mod, filters) {
          var self = this;

          filters = $slice.call(arguments, 1);
          return self.$include_or_extend_modules()['$<<'](["include", mod, $scope.get('Metadata').$build_hash_from(filters)]);
        };

        def.$extend = function(mod, filters) {
          var self = this;

          filters = $slice.call(arguments, 1);
          return self.$include_or_extend_modules()['$<<'](["extend", mod, $scope.get('Metadata').$build_hash_from(filters)]);
        };

        def.$configure_group = function(group) {
          var $a, $b, TMP_14, self = this;

          return ($a = ($b = self.$include_or_extend_modules()).$each, $a.$$p = (TMP_14 = function(include_or_extend, mod, filters){var self = TMP_14.$$s || this, $a, $b;
if (include_or_extend == null) include_or_extend = nil;if (mod == null) mod = nil;if (filters == null) filters = nil;
          if ((($a = ((($b = filters['$empty?']()) !== false && $b !== nil) ? $b : group['$any_apply?'](filters))) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              return nil;
            };
            return self.$send("safe_" + (include_or_extend), mod, group);}, TMP_14.$$s = self, TMP_14), $a).call($b);
        };

        def.$safe_include = function(mod, host) {
          var self = this;

          if (host['$<'](mod)) {
            return nil
            } else {
            return host.$send("include", mod)
          };
        };

        def.$setup_load_path_and_require = function(paths) {
          var $a, $b, TMP_15, $c, $d, TMP_16, self = this, directories = nil;

          directories = ($a = ($b = ["lib", self.$default_path()]).$select, $a.$$p = (TMP_15 = function(p){var self = TMP_15.$$s || this;
if (p == null) p = nil;
          return $scope.get('File')['$directory?'](p)}, TMP_15.$$s = self, TMP_15), $a).call($b);
          ($a = (((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('RubyProject'))).$add_to_load_path.apply($a, [].concat(directories));
          ($c = ($d = paths).$each, $c.$$p = (TMP_16 = function(path){var self = TMP_16.$$s || this;
if (path == null) path = nil;
          return self.$require(path)}, TMP_16.$$s = self, TMP_16), $c).call($d);
          return self.requires = self.requires['$+'](paths);
        };

        if ($scope.get('RUBY_VERSION').$to_f()['$>='](1.9)) {
          def.$safe_extend = function(mod, host) {
            var self = this;

            if (((function(self) {
              var $scope = self.$$scope, def = self.$$proto;

              return self
            })(host.$singleton_class()))['$<'](mod)) {
              return nil
              } else {
              return host.$extend(mod)
            };
          }
          } else {
          def.$safe_extend = function(mod, host) {
            var $a, self = this;

            if ((($a = ((function(self) {
              var $scope = self.$$scope, def = self.$$proto;

              return self
            })(host.$singleton_class())).$included_modules()['$include?'](mod)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return host.$extend(mod)
            };
          }
        };

        def.$configure_mock_framework = function() {
          var self = this;

          return (((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('ExampleGroup')).$send("include", self.$mock_framework());
        };

        def.$configure_expectation_framework = function() {
          var $a, $b, TMP_17, self = this;

          return ($a = ($b = self.$expectation_frameworks()).$each, $a.$$p = (TMP_17 = function(framework){var self = TMP_17.$$s || this;
if (framework == null) framework = nil;
          return (((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('ExampleGroup')).$send("include", framework)}, TMP_17.$$s = self, TMP_17), $a).call($b);
        };

        def.$load_spec_files = function() {
          var $a, $b, TMP_18, self = this;

          ($a = ($b = self.$files_to_run().$uniq()).$each, $a.$$p = (TMP_18 = function(f){var self = TMP_18.$$s || this;
if (f == null) f = nil;
          return self.$load($scope.get('File').$expand_path(f))}, TMP_18.$$s = self, TMP_18), $a).call($b);
          return self.spec_files_loaded = true;
        };

        Opal.cdecl($scope, 'DEFAULT_FORMATTER', ($a = ($b = self).$lambda, $a.$$p = (TMP_19 = function(string){var self = TMP_19.$$s || this;
if (string == null) string = nil;
        return string}, TMP_19.$$s = self, TMP_19), $a).call($b));

        def.$format_docstrings = TMP_20 = function() {
          var self = this, $iter = TMP_20.$$p, block = $iter || nil;

          TMP_20.$$p = null;
          return self.format_docstrings_block = (function() {if ((block !== nil)) {
            return block
            } else {
            return $scope.get('DEFAULT_FORMATTER')
          }; return nil; })();
        };

        def.$format_docstrings_block = function() {
          var $a, self = this;

          return ((($a = self.format_docstrings_block) !== false && $a !== nil) ? $a : self.format_docstrings_block = $scope.get('DEFAULT_FORMATTER'));
        };

        Opal.defs(self, '$delegate_to_ordering_manager', function(methods) {
          var $a, $b, TMP_21, self = this;

          methods = $slice.call(arguments, 0);
          return ($a = ($b = methods).$each, $a.$$p = (TMP_21 = function(method){var self = TMP_21.$$s || this, $a, $b, TMP_22;
if (method == null) method = nil;
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_22 = function(args){var self = TMP_22.$$s || this, block, $a, $b;
args = $slice.call(arguments, 0);
              block = TMP_22.$$p || nil, TMP_22.$$p = null;
            return ($a = ($b = self.$ordering_manager()).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, [method].concat(args))}, TMP_22.$$s = self, TMP_22), $a).call($b, method)}, TMP_21.$$s = self, TMP_21), $a).call($b);
        });

        self.$delegate_to_ordering_manager("seed=");

        self.$delegate_to_ordering_manager("seed");

        self.$delegate_to_ordering_manager("order=");

        self.$delegate_to_ordering_manager("register_ordering");

        self.$delegate_to_ordering_manager("seed_used?", "ordering_registry");

        def['$warnings='] = function(value) {
          var self = this;

          return $gvars.VERBOSE = value['$!']()['$!']();
        };

        def.$warnings = function() {
          var self = this;
          if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;

          return $gvars.VERBOSE;
        };

        def.$expose_current_running_example_as = function(method_name) {
          var $a, $b, TMP_23, self = this;

          ($a = ($b = $scope.get('ExposeCurrentExample')).$module_eval, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this, $a, $b, TMP_24;

          self.$extend((($scope.get('RSpec')).$$scope.get('SharedContext')));
            return ($a = ($b = self).$let, $a.$$p = (TMP_24 = function(ex){var self = TMP_24.$$s || this;
if (ex == null) ex = nil;
            return ex}, TMP_24.$$s = self, TMP_24), $a).call($b, method_name);}, TMP_23.$$s = self, TMP_23), $a).call($b);
          return self.$include($scope.get('ExposeCurrentExample'));
        };

        (function($base) {
          var self = $module($base, 'ExposeCurrentExample');

          var def = self.$$proto, $scope = self.$$scope;

          nil
        })(self);

        def['$raise_errors_for_deprecations!'] = function() {
          var $a, $b, self = this;

          return (($a = [(((($scope.get('Formatters')).$$scope.get('DeprecationFormatter'))).$$scope.get('RaiseErrorStream')).$new()]), $b = self, $b['$deprecation_stream='].apply($b, $a), $a[$a.length-1]);
        };

        self.$private();

        def.$get_files_to_run = function(paths) {
          var $a, $b, TMP_25, self = this;

          return ($a = ($b = $scope.get('FlatMap')).$flat_map, $a.$$p = (TMP_25 = function(path){var self = TMP_25.$$s || this, $a;
if (path == null) path = nil;
          if ((($a = (($scope.get('File')).$$scope.get('ALT_SEPARATOR'))) !== nil && (!$a.$$is_boolean || $a == true))) {
              path = path.$gsub((($scope.get('File')).$$scope.get('ALT_SEPARATOR')), (($scope.get('File')).$$scope.get('SEPARATOR')))};
            if ((($a = $scope.get('File')['$directory?'](path)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$gather_directories(path)
              } else {
              return self.$extract_location(path)
            };}, TMP_25.$$s = self, TMP_25), $a).call($b, paths).$sort();
        };

        def.$gather_directories = function(path) {
          var $a, self = this, stripped = nil, files = nil;

          stripped = "{" + (self.$pattern().$gsub(/\s*,\s*/, ",")) + "}";
          files = (function() {if ((($a = self.$pattern()['$=~']((new RegExp("^" + $scope.get('Regexp').$escape(path))))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Dir')['$[]'](stripped)
            } else {
            return $scope.get('Dir')['$[]']("" + (path) + "/" + (stripped))
          }; return nil; })();
          return files.$sort();
        };

        def.$extract_location = function(path) {
          var $a, $b, $c, TMP_26, $d, self = this, lines = nil;

          if ((($a = path['$=~'](/^(.*?)((?:\:\d+)+)$/)) !== nil && (!$a.$$is_boolean || $a == true))) {
            $a = [(($b = $gvars['~']) === nil ? nil : $b['$[]'](1)), ($b = ($c = (($d = $gvars['~']) === nil ? nil : $d['$[]'](2))['$[]']($range(1, -1, false)).$split(":")).$map, $b.$$p = (TMP_26 = function(n){var self = TMP_26.$$s || this;
if (n == null) n = nil;
            return n.$to_i()}, TMP_26.$$s = self, TMP_26), $b).call($c)], path = $a[0], lines = $a[1];
            self.$filter_manager().$add_location(path, lines);};
          return path;
        };

        def.$command = function() {
          var self = this;
          if ($gvars["0"] == null) $gvars["0"] = nil;

          return $gvars["0"].$split((($scope.get('File')).$$scope.get('SEPARATOR'))).$last();
        };

        def.$value_for = function(key, default$) {
          var $a, self = this;

          if (default$ == null) {
            default$ = nil
          }
          if ((($a = self.preferred_options['$has_key?'](key)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.preferred_options['$[]'](key)
            } else {
            return default$
          };
        };

        def.$assert_no_example_groups_defined = function(config_option) {
          var $a, self = this;

          if ((($a = $scope.get('RSpec').$world().$example_groups()['$any?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$raise($scope.get('MustBeConfiguredBeforeExampleGroupsError').$new(((("RSpec's ") + (config_option)) + " configuration option must be configured before ")['$+']("any example groups are defined, but you have already defined a group.")))
            } else {
            return nil
          };
        };

        def['$output_to_tty?'] = function(output) {
          var $a, $b, self = this;

          if (output == null) {
            output = self.$output_stream()
          }
          return ((($a = self['$tty?']()) !== false && $a !== nil) ? $a : (($b = output['$respond_to?']("tty?"), $b !== false && $b !== nil ?output['$tty?']() : $b)));
        };

        def.$built_in_formatter = function(key) {
          var self = this, $case = nil;

          return (function() {$case = key.$to_s();if ("d"['$===']($case) || "doc"['$===']($case) || "documentation"['$===']($case) || "s"['$===']($case) || "n"['$===']($case) || "spec"['$===']($case) || "nested"['$===']($case)) {self.$require("rspec/core/formatters/documentation_formatter");
          return (((((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('Formatters'))).$$scope.get('DocumentationFormatter'));}else if ("h"['$===']($case) || "html"['$===']($case)) {self.$require("rspec/core/formatters/html_formatter");
          return (((((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('Formatters'))).$$scope.get('HtmlFormatter'));}else if ("p"['$===']($case) || "progress"['$===']($case)) {self.$require("rspec/core/formatters/progress_formatter");
          return (((((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('Formatters'))).$$scope.get('ProgressFormatter'));}else if ("j"['$===']($case) || "json"['$===']($case)) {self.$require("rspec/core/formatters/json_formatter");
          return (((((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('Formatters'))).$$scope.get('JsonFormatter'));}else { return nil }})();
        };

        def.$custom_formatter = function(formatter_ref) {
          var $a, $b, TMP_27, self = this;

          if ((($a = $scope.get('Class')['$==='](formatter_ref)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return formatter_ref
          } else if ((($a = self['$string_const?'](formatter_ref)) !== nil && (!$a.$$is_boolean || $a == true))) {
            try {
            return ($a = ($b = formatter_ref.$gsub(/^::/, "").$split("::")).$inject, $a.$$p = (TMP_27 = function(const$, string){var self = TMP_27.$$s || this;
if (const$ == null) const$ = nil;if (string == null) string = nil;
              return const$.$const_get(string)}, TMP_27.$$s = self, TMP_27), $a).call($b, $scope.get('Object'))
            } catch ($err) {if (Opal.rescue($err, [$scope.get('NameError')])) {
              if ((($a = self.$require(self.$path_for(formatter_ref))) !== nil && (!$a.$$is_boolean || $a == true))) {
                return self.$retry()
                } else {
                return self.$raise()
              }
              }else { throw $err; }
            }
            } else {
            return nil
          };
        };

        def['$string_const?'] = function(str) {
          var $a, self = this;

          return ($a = str['$is_a?']($scope.get('String')), $a !== false && $a !== nil ?/\A[A-Z][a-zA-Z0-9_:]*\z/['$=~'](str) : $a);
        };

        def.$path_for = function(const_ref) {
          var self = this;

          return self.$underscore_with_fix_for_non_standard_rspec_naming(const_ref);
        };

        def.$underscore_with_fix_for_non_standard_rspec_naming = function(string) {
          var self = this;

          return self.$underscore(string).$sub(/(^|\/)r_spec($|\/)/, "\\1rspec\\2");
        };

        def.$underscore = function(camel_cased_word) {
          var self = this, word = nil;

          word = camel_cased_word.$to_s().$dup();
          word['$gsub!'](/::/, "/");
          word['$gsub!'](/([A-Z]+)([A-Z][a-z])/, "\\1_\\2");
          word['$gsub!'](/([a-z\d])([A-Z])/, "\\1_\\2");
          word['$tr!']("-", "_");
          word['$downcase!']();
          return word;
        };

        return (def.$file_at = function(path) {
          var self = this;

          $scope.get('FileUtils').$mkdir_p($scope.get('File').$dirname(path));
          return $scope.get('File').$new(path, "w");
        }, nil) && 'file_at';
      })(self, null)
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["optparse"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  return nil
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/project_initializer"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$create_spec_helper_file', '$create_dot_rspec_file', '$delete_if_confirmed', '$exist?', '$report_exists', '$report_creating', '$open', '$write', '$mkdir_p', '$puts', '$=~', '$gets', '$rm_rf']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ProjectInitializer(){};
        var self = $ProjectInitializer = $klass($base, $super, 'ProjectInitializer', $ProjectInitializer);

        var def = self.$$proto, $scope = self.$$scope;

        def.$initialize = function(arg) {
          var self = this;

          if (arg == null) {
            arg = nil
          }
          return self.arg = arg;
        };

        def.$run = function() {
          var self = this;

          self.$create_spec_helper_file();
          self.$create_dot_rspec_file();
          return self.$delete_if_confirmed("lib/tasks/rspec.rake", "  If the file in lib/tasks/rspec.rake is the one generated by rspec-rails-1x,\n  you can get rid of it, as it is no longer needed with rspec-2.\n");
        };

        def.$create_dot_rspec_file = function() {
          var $a, $b, TMP_1, self = this;

          if ((($a = $scope.get('File')['$exist?'](".rspec")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$report_exists(".rspec")
            } else {
            self.$report_creating(".rspec");
            return ($a = ($b = $scope.get('File')).$open, $a.$$p = (TMP_1 = function(f){var self = TMP_1.$$s || this;
if (f == null) f = nil;
            return f.$write("--color\n--format progress\n")}, TMP_1.$$s = self, TMP_1), $a).call($b, ".rspec", "w");
          };
        };

        def.$create_spec_helper_file = function() {
          var $a, $b, TMP_2, self = this;

          if ((($a = $scope.get('File')['$exist?']("spec/spec_helper.rb")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$report_exists("spec/spec_helper.rb")
            } else {
            self.$report_creating("spec/spec_helper.rb");
            $scope.get('FileUtils').$mkdir_p("spec");
            return ($a = ($b = $scope.get('File')).$open, $a.$$p = (TMP_2 = function(f){var self = TMP_2.$$s || this;
if (f == null) f = nil;
            return f.$write("# This file was generated by the `rspec --init` command. Conventionally, all\n# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.\n# Require this file using `require \"spec_helper\"` to ensure that it is only\n# loaded once.\n#\n# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration\nRSpec.configure do |config|\n  # Limit the spec run to only specs with the focus metadata. If no specs have\n  # the filtering metadata and `run_all_when_everything_filtered = true` then\n  # all specs will run.\n  #config.filter_run :focus\n\n  # Run all specs when none match the provided filter. This works well in\n  # conjunction with `config.filter_run :focus`, as it will run the entire\n  # suite when no specs have `:filter` metadata.\n  #config.run_all_when_everything_filtered = true\n\n  # Run specs in random order to surface order dependencies. If you find an\n  # order dependency and want to debug it, you can fix the order by providing\n  # the seed, which is printed after each run.\n  #     --seed 1234\n  #config.order = 'random'\nend\n")}, TMP_2.$$s = self, TMP_2), $a).call($b, "spec/spec_helper.rb", "w");
          };
        };

        def.$delete_if_confirmed = function(path, message) {
          var $a, self = this;

          if ((($a = $scope.get('File')['$exist?'](path)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$puts();
            self.$puts(message);
            self.$puts();
            self.$puts("  delete   " + (path) + "? [y/n]");
            if ((($a = self.$gets()['$=~'](/y/i)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return $scope.get('FileUtils').$rm_rf(path)
              } else {
              return nil
            };
            } else {
            return nil
          };
        };

        def.$report_exists = function(file) {
          var self = this;

          return self.$puts("   exist   " + (file));
        };

        return (def.$report_creating = function(file) {
          var self = this;

          return self.$puts("  create   " + (file));
        }, nil) && 'report_creating';
      })(self, null)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/option_parser"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$parse!', '$new', '$alias_method', '$empty?', '$convert_deprecated_args', '$delete', '$parser', '$abort', '$message', '$map!', '$===', '$deprecate', '$banner=', '$on', '$[]', '$[]=', '$<<', '$to_i', '$run', '$exit', '$warning', '$separator', '$last', '$nil?', '$==', '$Integer', '$+', '$compile', '$escape', '$=~', '$split', '$gsub', '$to_sym', '$Float', '$puts', '$on_tail']);
  self.$require("optparse");
  return (function($base) {
    var self = $module($base, 'Core');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Parser(){};
      var self = $Parser = $klass($base, $super, 'Parser', $Parser);

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defs(self, '$parse!', function(args) {
        var self = this;

        return self.$new()['$parse!'](args);
      });

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto;

        return self.$alias_method("parse", "parse!")
      })(self.$singleton_class());

      def['$parse!'] = function(args) {
        var $a, self = this, options = nil, e = nil;

        if ((($a = args['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return $hash2([], {})};
        self.$convert_deprecated_args(args);
        options = (function() {if ((($a = args.$delete("--tty")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return $hash2(["tty"], {"tty": true})
          } else {
          return $hash2([], {})
        }; return nil; })();
        try {
        self.$parser(options)['$parse!'](args)
        } catch ($err) {if (Opal.rescue($err, [(($scope.get('OptionParser')).$$scope.get('InvalidOption'))])) {e = $err;
          self.$abort("" + (e.$message()) + "\n\nPlease use --help for a listing of valid options")
          }else { throw $err; }
        };
        return options;
      };

      def.$convert_deprecated_args = function(args) {
        var $a, $b, TMP_1, self = this;

        return ($a = ($b = args)['$map!'], $a.$$p = (TMP_1 = function(arg){var self = TMP_1.$$s || this, $case = nil;
if (arg == null) arg = nil;
        return (function() {$case = arg;if ("--formatter"['$===']($case)) {$scope.get('RSpec').$deprecate("the --formatter option", $hash2(["replacement"], {"replacement": "-f or --format"}));
          return "--format";}else if ("--default_path"['$===']($case)) {return "--default-path"}else if ("--line_number"['$===']($case)) {return "--line-number"}else {return arg}})()}, TMP_1.$$s = self, TMP_1), $a).call($b);
      };

      self.$alias_method("parse", "parse!");

      return (def.$parser = function(options) {
        var $a, $b, TMP_2, self = this;

        return ($a = ($b = $scope.get('OptionParser')).$new, $a.$$p = (TMP_2 = function(parser){var self = TMP_2.$$s || this, $a, $b, TMP_3, $c, TMP_4, $d, TMP_5, $e, TMP_6, $f, TMP_7, $g, TMP_8, $h, TMP_9, $i, TMP_10, $j, TMP_11, $k, TMP_12, $l, TMP_13, $m, TMP_14, $n, TMP_15, $o, TMP_16, $p, TMP_17, $q, TMP_18, $r, TMP_19, $s, TMP_20, $t, TMP_21, $u, TMP_22, $v, TMP_23, $w, TMP_24, $x, TMP_25, $y, TMP_26, $z, TMP_27, $aa, TMP_28;
if (parser == null) parser = nil;
        (($a = ["Usage: rspec [options] [files or directories]\n\n"]), $b = parser, $b['$banner='].apply($b, $a), $a[$a.length-1]);
          ($a = ($b = parser).$on, $a.$$p = (TMP_3 = function(dir){var self = TMP_3.$$s || this, $a, $b, $c;
if (dir == null) dir = nil;
          ($a = "libs", $b = options, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, [])));
            return options['$[]']("libs")['$<<'](dir);}, TMP_3.$$s = self, TMP_3), $a).call($b, "-I PATH", "Specify PATH to add to $LOAD_PATH (may be used more than once).");
          ($a = ($c = parser).$on, $a.$$p = (TMP_4 = function(path){var self = TMP_4.$$s || this, $a, $b, $c;
if (path == null) path = nil;
          ($a = "requires", $b = options, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, [])));
            return options['$[]']("requires")['$<<'](path);}, TMP_4.$$s = self, TMP_4), $a).call($c, "-r", "--require PATH", "Require a file.");
          ($a = ($d = parser).$on, $a.$$p = (TMP_5 = function(path){var self = TMP_5.$$s || this;
if (path == null) path = nil;
          return options['$[]=']("custom_options_file", path)}, TMP_5.$$s = self, TMP_5), $a).call($d, "-O", "--options PATH", "Specify the path to a custom options file.");
          ($a = ($e = parser).$on, $a.$$p = (TMP_6 = function(o){var self = TMP_6.$$s || this;
if (o == null) o = nil;
          return options['$[]=']("order", o)}, TMP_6.$$s = self, TMP_6), $a).call($e, "--order TYPE[:SEED]", "Run examples by the specified order type.", "  [defined] examples and groups are run in the order they are defined", "  [rand]    randomize the order of groups and examples", "  [random]  alias for rand", "  [random:SEED] e.g. --order random:123");
          ($a = ($f = parser).$on, $a.$$p = (TMP_7 = function(seed){var self = TMP_7.$$s || this;
if (seed == null) seed = nil;
          return options['$[]=']("order", "rand:" + (seed))}, TMP_7.$$s = self, TMP_7), $a).call($f, "--seed SEED", $scope.get('Integer'), "Equivalent of --order rand:SEED.");
          ($a = ($g = parser).$on, $a.$$p = (TMP_8 = function(o){var self = TMP_8.$$s || this;
if (o == null) o = nil;
          return options['$[]=']("fail_fast", true)}, TMP_8.$$s = self, TMP_8), $a).call($g, "--fail-fast", "Abort the run on first failure.");
          ($a = ($h = parser).$on, $a.$$p = (TMP_9 = function(o){var self = TMP_9.$$s || this;
if (o == null) o = nil;
          return options['$[]=']("fail_fast", false)}, TMP_9.$$s = self, TMP_9), $a).call($h, "--no-fail-fast", "Do not abort the run on first failure.");
          ($a = ($i = parser).$on, $a.$$p = (TMP_10 = function(code){var self = TMP_10.$$s || this;
if (code == null) code = nil;
          return options['$[]=']("failure_exit_code", code)}, TMP_10.$$s = self, TMP_10), $a).call($i, "--failure-exit-code CODE", $scope.get('Integer'), "Override the exit code used when there are failing specs.");
          ($a = ($j = parser).$on, $a.$$p = (TMP_11 = function(o){var self = TMP_11.$$s || this;
if (o == null) o = nil;
          return options['$[]=']("dry_run", true)}, TMP_11.$$s = self, TMP_11), $a).call($j, "--dry-run", "Print the formatter output of your suite without", "  running any examples or hooks");
          ($a = ($k = parser).$on, $a.$$p = (TMP_12 = function(o){var self = TMP_12.$$s || this;
if (o == null) o = nil;
          return options['$[]=']("drb", o)}, TMP_12.$$s = self, TMP_12), $a).call($k, "-X", "--[no-]drb", "Run examples via DRb.");
          ($a = ($l = parser).$on, $a.$$p = (TMP_13 = function(o){var self = TMP_13.$$s || this;
if (o == null) o = nil;
          return options['$[]=']("drb_port", o.$to_i())}, TMP_13.$$s = self, TMP_13), $a).call($l, "--drb-port PORT", "Port to connect to the DRb server.");
          ($a = ($m = parser).$on, $a.$$p = (TMP_14 = function(cmd){var self = TMP_14.$$s || this;
if (cmd == null) cmd = nil;
          self.$require("rspec/core/project_initializer");
            $scope.get('ProjectInitializer').$new(cmd).$run();
            return self.$exit();}, TMP_14.$$s = self, TMP_14), $a).call($m, "--init", "Initialize your project with RSpec.");
          ($a = ($n = parser).$on, $a.$$p = (TMP_15 = function(cmd){var self = TMP_15.$$s || this;
if (cmd == null) cmd = nil;
          $scope.get('RSpec').$warning("--configure is deprecated with no effect. Use --init instead.", $hash2(["call_site"], {"call_site": nil}));
            return self.$exit();}, TMP_15.$$s = self, TMP_15), $a).call($n, "--configure", "Deprecated. Use --init instead.");
          parser.$separator("\n  **** Output ****\n\n");
          ($a = ($o = parser).$on, $a.$$p = (TMP_16 = function(o){var self = TMP_16.$$s || this, $a, $b, $c;
if (o == null) o = nil;
          ($a = "formatters", $b = options, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, [])));
            return options['$[]']("formatters")['$<<']([o]);}, TMP_16.$$s = self, TMP_16), $a).call($o, "-f", "--format FORMATTER", "Choose a formatter.", "  [p]rogress (default - dots)", "  [d]ocumentation (group and example names)", "  [h]tml", "  [j]son", "  custom formatter class name");
          ($a = ($p = parser).$on, $a.$$p = (TMP_17 = function(o){var self = TMP_17.$$s || this, $a, $b, $c;
if (o == null) o = nil;
          ($a = "formatters", $b = options, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, [["progress"]])));
            return options['$[]']("formatters").$last()['$<<'](o);}, TMP_17.$$s = self, TMP_17), $a).call($p, "-o", "--out FILE", "Write output to a file instead of $stdout. This option applies", "  to the previously specified --format, or the default format", "  if no format is specified.");
          ($a = ($q = parser).$on, $a.$$p = (TMP_18 = function(o){var self = TMP_18.$$s || this;
if (o == null) o = nil;
          return options['$[]=']("full_backtrace", true)}, TMP_18.$$s = self, TMP_18), $a).call($q, "-b", "--backtrace", "Enable full backtrace.");
          ($a = ($r = parser).$on, $a.$$p = (TMP_19 = function(o){var self = TMP_19.$$s || this;
if (o == null) o = nil;
          return options['$[]=']("color", o)}, TMP_19.$$s = self, TMP_19), $a).call($r, "-c", "--[no-]color", "--[no-]colour", "Enable color in the output.");
          ($a = ($s = parser).$on, $a.$$p = (TMP_20 = function(argument){var self = TMP_20.$$s || this, $a;
if (argument == null) argument = nil;
          return options['$[]=']("profile_examples", (function() {if ((($a = argument['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return true
            } else if (argument['$=='](false)) {
              return false
              } else {
              try {
              return self.$Integer(argument)
              } catch ($err) {if (Opal.rescue($err, [$scope.get('ArgumentError')])) {
                $scope.get('RSpec').$warning("Non integer specified as profile count, seperate "['$+']("your path from options with -- e.g. ")['$+']("`rspec --profile -- " + (argument) + "`"), $hash2(["call_site"], {"call_site": nil}));
                return true;
                }else { throw $err; }
              }
            }; return nil; })())}, TMP_20.$$s = self, TMP_20), $a).call($s, "-p", "--[no-]profile [COUNT]", "Enable profiling of examples and list the slowest examples (default: 10).");
          ($a = ($t = parser).$on, $a.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;

          return options['$[]=']("warnings", true)}, TMP_21.$$s = self, TMP_21), $a).call($t, "-w", "--warnings", "Enable ruby warnings");
          parser.$separator("\n  **** Filtering/tags ****\n\n    In addition to the following options for selecting specific files, groups,\n    or examples, you can select a single example by appending the line number to\n    the filename:\n\n      rspec path/to/a_spec.rb:37\n\n");
          ($a = ($u = parser).$on, $a.$$p = (TMP_22 = function(o){var self = TMP_22.$$s || this;
if (o == null) o = nil;
          return options['$[]=']("pattern", o)}, TMP_22.$$s = self, TMP_22), $a).call($u, "-P", "--pattern PATTERN", "Load files matching pattern (default: \"spec/**/*_spec.rb\").");
          ($a = ($v = parser).$on, $a.$$p = (TMP_23 = function(o){var self = TMP_23.$$s || this, $a, $b, $c;
if (o == null) o = nil;
          return (($a = "full_description", $b = options, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, []))))['$<<']($scope.get('Regexp').$compile($scope.get('Regexp').$escape(o)))}, TMP_23.$$s = self, TMP_23), $a).call($v, "-e", "--example STRING", "Run examples whose full nested names include STRING (may be", "  used more than once)");
          ($a = ($w = parser).$on, $a.$$p = (TMP_24 = function(o){var self = TMP_24.$$s || this, $a, $b, $c;
if (o == null) o = nil;
          return (($a = "line_numbers", $b = options, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, []))))['$<<'](o)}, TMP_24.$$s = self, TMP_24), $a).call($w, "-l", "--line-number LINE", "Specify line number of an example or group (may be", "  used more than once).");
          ($a = ($x = parser).$on, $a.$$p = (TMP_25 = function(tag){var self = TMP_25.$$s || this, $a, $b, $c, filter_type = nil, name = nil, value = nil, $case = nil;
if (tag == null) tag = nil;
          filter_type = (function() {if ((($a = tag['$=~'](/^~/)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return "exclusion_filter"
              } else {
              return "inclusion_filter"
            }; return nil; })();
            $a = Opal.to_ary(tag.$gsub(/^(~@|~|@)/, "").$split(":", 2)), name = ($a[0] == null ? nil : $a[0]), value = ($a[1] == null ? nil : $a[1]);
            name = name.$to_sym();
            ($a = filter_type, $b = options, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, $hash2([], {}))));
            return options['$[]'](filter_type)['$[]='](name, (function() {$case = value;if (nil['$===']($case)) {return true}else if ("true"['$===']($case)) {return true}else if ("false"['$===']($case)) {return false}else if ("nil"['$===']($case)) {return nil}else if (/^:/['$===']($case)) {return value['$[]']($range(1, -1, false)).$to_sym()}else if (/^\d+$/['$===']($case)) {return self.$Integer(value)}else if (/^\d+.\d+$/['$===']($case)) {return self.$Float(value)}else {return value}})());}, TMP_25.$$s = self, TMP_25), $a).call($x, "-t", "--tag TAG[:VALUE]", "Run examples with the specified tag, or exclude examples", "by adding ~ before the tag.", "  - e.g. ~slow", "  - TAG is always converted to a symbol");
          ($a = ($y = parser).$on, $a.$$p = (TMP_26 = function(path){var self = TMP_26.$$s || this;
if (path == null) path = nil;
          return options['$[]=']("default_path", path)}, TMP_26.$$s = self, TMP_26), $a).call($y, "--default-path PATH", "Set the default path where RSpec looks for examples (can", "  be a path to a file or a directory).");
          parser.$separator("\n  **** Utility ****\n\n");
          ($a = ($z = parser).$on, $a.$$p = (TMP_27 = function(){var self = TMP_27.$$s || this;

          self.$puts((((((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('Version'))).$$scope.get('STRING')));
            return self.$exit();}, TMP_27.$$s = self, TMP_27), $a).call($z, "-v", "--version", "Display the version.");
          return ($a = ($aa = parser).$on_tail, $a.$$p = (TMP_28 = function(){var self = TMP_28.$$s || this;

          self.$puts(parser);
            return self.$exit();}, TMP_28.$$s = self, TMP_28), $a).call($aa, "-h", "--help", "You're looking at it.");}, TMP_2.$$s = self, TMP_2), $a).call($b);
      }, nil) && 'parser';
    })(self, null)
  })($scope.get('RSpec'));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["shellwords"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  return nil
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/configuration_options"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash = Opal.hash, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$attr_reader', '$map', '$sub', '$filter_manager=', '$filter_manager', '$libs=', '$[]', '$options', '$setup_load_path_and_require', '$process_options_into', '$load_formatters_into', '$inject', '$merge', '$include?', '$+', '$each', '$has_key?', '$include', '$delete', '$exclude', '$<<', '$file_options', '$command_line_options', '$env_options', '$new', '$configuration', '$private', '$to_set', '$!', '$unshift', '$reverse', '$reject', '$force?', '$force', '$send', '$order', '$keys', '$add_formatter', '$custom_options_file', '$custom_options', '$global_options', '$project_options', '$local_options', '$parse!', '$split', '$options_from', '$local_options_file', '$project_options_file', '$global_options_file', '$parse', '$args_from_options_file', '$exist?', '$options_file_as_erb_string', '$flat_map', '$to_proc', '$result', '$read', '$binding', '$join', '$expand_path', '$warning']);
  self.$require("erb");
  self.$require("shellwords");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ConfigurationOptions(){};
        var self = $ConfigurationOptions = $klass($base, $super, 'ConfigurationOptions', $ConfigurationOptions);

        var def = self.$$proto, $scope = self.$$scope;

        def.filter_manager = def.command_line_options = def.args = def.local_options = def.project_options = def.global_options = nil;
        self.$attr_reader("options");

        def.$initialize = function(args) {
          var $a, $b, TMP_1, self = this;

          return self.args = ($a = ($b = args).$map, $a.$$p = (TMP_1 = function(a){var self = TMP_1.$$s || this;
if (a == null) a = nil;
          return a.$sub("default_path", "default-path").$sub("line_number", "line-number")}, TMP_1.$$s = self, TMP_1), $a).call($b);
        };

        def.$configure = function(config) {
          var $a, $b, $c, self = this;

          (($a = [self.$filter_manager()]), $b = config, $b['$filter_manager='].apply($b, $a), $a[$a.length-1]);
          (($a = [((($c = self.$options()['$[]']("libs")) !== false && $c !== nil) ? $c : [])]), $b = config, $b['$libs='].apply($b, $a), $a[$a.length-1]);
          config.$setup_load_path_and_require(((($a = self.$options()['$[]']("requires")) !== false && $a !== nil) ? $a : []));
          self.$process_options_into(config);
          return self.$load_formatters_into(config);
        };

        def.$parse_options = function() {
          var $a, $b, TMP_2, $c, $d, TMP_4, self = this;

          return self.options = ($a = ($b = ($c = ($d = (self.$file_options()['$<<'](self.$command_line_options())['$<<'](self.$env_options()))).$each, $c.$$p = (TMP_4 = function(opts){var self = TMP_4.$$s || this, $a;
if (opts == null) opts = nil;
          if ((($a = opts['$has_key?']("inclusion_filter")) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$filter_manager().$include(opts.$delete("inclusion_filter"))};
            if ((($a = opts['$has_key?']("exclusion_filter")) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$filter_manager().$exclude(opts.$delete("exclusion_filter"))
              } else {
              return nil
            };}, TMP_4.$$s = self, TMP_4), $c).call($d)).$inject, $a.$$p = (TMP_2 = function(h, opts){var self = TMP_2.$$s || this, $a, $b, TMP_3;
if (h == null) h = nil;if (opts == null) opts = nil;
          return ($a = ($b = h).$merge, $a.$$p = (TMP_3 = function(k, oldval, newval){var self = TMP_3.$$s || this, $a;
if (k == null) k = nil;if (oldval == null) oldval = nil;if (newval == null) newval = nil;
            if ((($a = ["libs", "requires"]['$include?'](k)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return oldval['$+'](newval)
                } else {
                return newval
              }}, TMP_3.$$s = self, TMP_3), $a).call($b, opts)}, TMP_2.$$s = self, TMP_2), $a).call($b);
        };

        def.$drb_argv = function() {
          var self = this;

          return $scope.get('DrbOptions').$new(self.$options(), self.$filter_manager()).$options();
        };

        def.$filter_manager = function() {
          var $a, self = this;

          return ((($a = self.filter_manager) !== false && $a !== nil) ? $a : self.filter_manager = $scope.get('RSpec').$configuration().$filter_manager());
        };

        self.$private();

        Opal.cdecl($scope, 'UNFORCED_OPTIONS', ["requires", "profile", "drb", "libs", "files_or_directories_to_run", "line_numbers", "full_description", "full_backtrace", "tty"].$to_set());

        Opal.cdecl($scope, 'UNPROCESSABLE_OPTIONS', ["libs", "formatters", "requires"].$to_set());

        def['$force?'] = function(key) {
          var self = this;

          return $scope.get('UNFORCED_OPTIONS')['$include?'](key)['$!']();
        };

        def.$order = function(keys, ordered) {
          var $a, $b, TMP_5, self = this;

          ordered = $slice.call(arguments, 1);
          ($a = ($b = ordered.$reverse()).$each, $a.$$p = (TMP_5 = function(key){var self = TMP_5.$$s || this, $a;
if (key == null) key = nil;
          if ((($a = keys.$delete(key)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return keys.$unshift(key)
              } else {
              return nil
            }}, TMP_5.$$s = self, TMP_5), $a).call($b);
          return keys;
        };

        def.$process_options_into = function(config) {
          var $a, $b, TMP_6, $c, TMP_7, self = this, opts = nil;

          opts = ($a = ($b = self.$options()).$reject, $a.$$p = (TMP_6 = function(k, _){var self = TMP_6.$$s || this;
if (k == null) k = nil;if (_ == null) _ = nil;
          return $scope.get('UNPROCESSABLE_OPTIONS')['$include?'](k)}, TMP_6.$$s = self, TMP_6), $a).call($b);
          return ($a = ($c = self.$order(opts.$keys(), "default_path", "pattern")).$each, $a.$$p = (TMP_7 = function(key){var self = TMP_7.$$s || this, $a;
if (key == null) key = nil;
          if ((($a = self['$force?'](key)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return config.$force($hash(key, opts['$[]'](key)))
              } else {
              return config.$send("" + (key) + "=", opts['$[]'](key))
            }}, TMP_7.$$s = self, TMP_7), $a).call($c);
        };

        def.$load_formatters_into = function(config) {
          var $a, $b, TMP_8, self = this;

          if ((($a = self.$options()['$[]']("formatters")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = self.$options()['$[]']("formatters")).$each, $a.$$p = (TMP_8 = function(pair){var self = TMP_8.$$s || this, $a;
if (pair == null) pair = nil;
            return ($a = config).$add_formatter.apply($a, [].concat(pair))}, TMP_8.$$s = self, TMP_8), $a).call($b)
            } else {
            return nil
          };
        };

        def.$file_options = function() {
          var $a, self = this;

          if ((($a = self.$custom_options_file()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return [self.$custom_options()]
            } else {
            return [self.$global_options(), self.$project_options(), self.$local_options()]
          };
        };

        def.$env_options = function() {
          var $a, self = this;

          if ((($a = $scope.get('ENV')['$[]']("SPEC_OPTS")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Parser')['$parse!']($scope.get('Shellwords').$split($scope.get('ENV')['$[]']("SPEC_OPTS")))
            } else {
            return $hash2([], {})
          };
        };

        def.$command_line_options = function() {
          var $a, self = this;

          return ((($a = self.command_line_options) !== false && $a !== nil) ? $a : self.command_line_options = $scope.get('Parser')['$parse!'](self.args).$merge($hash2(["files_or_directories_to_run"], {"files_or_directories_to_run": self.args})));
        };

        def.$custom_options = function() {
          var self = this;

          return self.$options_from(self.$custom_options_file());
        };

        def.$local_options = function() {
          var $a, self = this;

          return ((($a = self.local_options) !== false && $a !== nil) ? $a : self.local_options = self.$options_from(self.$local_options_file()));
        };

        def.$project_options = function() {
          var $a, self = this;

          return ((($a = self.project_options) !== false && $a !== nil) ? $a : self.project_options = self.$options_from(self.$project_options_file()));
        };

        def.$global_options = function() {
          var $a, self = this;

          return ((($a = self.global_options) !== false && $a !== nil) ? $a : self.global_options = self.$options_from(self.$global_options_file()));
        };

        def.$options_from = function(path) {
          var self = this;

          return $scope.get('Parser').$parse(self.$args_from_options_file(path));
        };

        def.$args_from_options_file = function(path) {
          var $a, $b, self = this, config_string = nil;

          if ((($a = (($b = path !== false && path !== nil) ? $scope.get('File')['$exist?'](path) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return []
          };
          config_string = self.$options_file_as_erb_string(path);
          return ($a = ($b = $scope.get('FlatMap')).$flat_map, $a.$$p = "shellsplit".$to_proc(), $a).call($b, config_string.$split(/\n+/));
        };

        def.$options_file_as_erb_string = function(path) {
          var self = this;

          return $scope.get('ERB').$new($scope.get('File').$read(path), nil, "-").$result(self.$binding());
        };

        def.$custom_options_file = function() {
          var self = this;

          return self.$command_line_options()['$[]']("custom_options_file");
        };

        def.$project_options_file = function() {
          var self = this;

          return ".rspec";
        };

        def.$local_options_file = function() {
          var self = this;

          return ".rspec-local";
        };

        return (def.$global_options_file = function() {
          var self = this;

          try {
          return $scope.get('File').$join($scope.get('File').$expand_path("~"), ".rspec")
          } catch ($err) {if (Opal.rescue($err, [$scope.get('ArgumentError')])) {
            $scope.get('RSpec').$warning("Unable to find ~/.rspec because the HOME environment variable is not set");
            return nil;
            }else { throw $err; }
          };
        }, nil) && 'global_options_file';
      })(self, null)
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/command_line"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$===', '$new', '$parse_options', '$configuration', '$world', '$error_stream=', '$==', '$output_stream', '$output_stream=', '$configure', '$load_spec_files', '$announce_filters', '$report', '$run_hook', '$all?', '$map', '$run', '$ordered_example_groups', '$failure_exit_code', '$reporter', '$example_count']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $CommandLine(){};
        var self = $CommandLine = $klass($base, $super, 'CommandLine', $CommandLine);

        var def = self.$$proto, $scope = self.$$scope;

        def.configuration = def.options = def.world = nil;
        def.$initialize = function(options, configuration, world) {
          var $a, self = this;

          if (configuration == null) {
            configuration = $scope.get('RSpec').$configuration()
          }
          if (world == null) {
            world = $scope.get('RSpec').$world()
          }
          if ((($a = $scope.get('Array')['$==='](options)) !== nil && (!$a.$$is_boolean || $a == true))) {
            options = $scope.get('ConfigurationOptions').$new(options);
            options.$parse_options();};
          self.options = options;
          self.configuration = configuration;
          return self.world = world;
        };

        return (def.$run = function(err, out) {
          var $a, $b, TMP_1, self = this;
          if ($gvars.stdout == null) $gvars.stdout = nil;

          (($a = [err]), $b = self.configuration, $b['$error_stream='].apply($b, $a), $a[$a.length-1]);
          if (self.configuration.$output_stream()['$==']($gvars.stdout)) {
            (($a = [out]), $b = self.configuration, $b['$output_stream='].apply($b, $a), $a[$a.length-1])};
          self.options.$configure(self.configuration);
          self.configuration.$load_spec_files();
          self.world.$announce_filters();
          return ($a = ($b = self.configuration.$reporter()).$report, $a.$$p = (TMP_1 = function(reporter){var self = TMP_1.$$s || this, $a, $b, $c, TMP_2;
            if (self.configuration == null) self.configuration = nil;
            if (self.world == null) self.world = nil;
if (reporter == null) reporter = nil;
          try {
            self.configuration.$run_hook("before", "suite");
            if ((($a = ($b = ($c = self.world.$ordered_example_groups()).$map, $b.$$p = (TMP_2 = function(g){var self = TMP_2.$$s || this;
if (g == null) g = nil;
            return g.$run(reporter)}, TMP_2.$$s = self, TMP_2), $b).call($c)['$all?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return 0
              } else {
              return self.configuration.$failure_exit_code()
            };
            } finally {
            self.configuration.$run_hook("after", "suite")
            }}, TMP_1.$$s = self, TMP_1), $a).call($b, self.world.$example_count());
        }, nil) && 'run';
      })(self, null)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["socket"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  return nil
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["uri"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  return nil
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["drb/drb"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  return nil
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/drb_options"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$[]', '$<<', '$add_failure_exit_code', '$add_full_description', '$add_line_numbers', '$add_filter', '$inclusions', '$exclusions', '$add_formatters', '$add_libs', '$add_requires', '$+', '$to_s', '$each', '$delete', '$source', '$push', '$inject', '$empty?', '$each_pair', '$include?', '$==', '$is_a?']);
  return (function($base) {
    var self = $module($base, 'Core');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $DrbOptions(){};
      var self = $DrbOptions = $klass($base, $super, 'DrbOptions', $DrbOptions);

      var def = self.$$proto, $scope = self.$$scope;

      def.submitted_options = def.filter_manager = nil;
      def.$initialize = function(submitted_options, filter_manager) {
        var self = this;

        self.submitted_options = submitted_options;
        return self.filter_manager = filter_manager;
      };

      def.$options = function() {
        var $a, self = this, argv = nil;

        argv = [];
        if ((($a = self.submitted_options['$[]']("color")) !== nil && (!$a.$$is_boolean || $a == true))) {
          argv['$<<']("--color")};
        if ((($a = self.submitted_options['$[]']("profile_examples")) !== nil && (!$a.$$is_boolean || $a == true))) {
          argv['$<<']("--profile")};
        if ((($a = self.submitted_options['$[]']("full_backtrace")) !== nil && (!$a.$$is_boolean || $a == true))) {
          argv['$<<']("--backtrace")};
        if ((($a = self.submitted_options['$[]']("tty")) !== nil && (!$a.$$is_boolean || $a == true))) {
          argv['$<<']("--tty")};
        if ((($a = self.submitted_options['$[]']("fail_fast")) !== nil && (!$a.$$is_boolean || $a == true))) {
          argv['$<<']("--fail-fast")};
        if ((($a = self.submitted_options['$[]']("custom_options_file")) !== nil && (!$a.$$is_boolean || $a == true))) {
          argv['$<<']("--options")['$<<'](self.submitted_options['$[]']("custom_options_file"))};
        if ((($a = self.submitted_options['$[]']("order")) !== nil && (!$a.$$is_boolean || $a == true))) {
          argv['$<<']("--order")['$<<'](self.submitted_options['$[]']("order"))};
        self.$add_failure_exit_code(argv);
        self.$add_full_description(argv);
        self.$add_line_numbers(argv);
        self.$add_filter(argv, "inclusion", self.filter_manager.$inclusions());
        self.$add_filter(argv, "exclusion", self.filter_manager.$exclusions());
        self.$add_formatters(argv);
        self.$add_libs(argv);
        self.$add_requires(argv);
        return argv['$+'](self.submitted_options['$[]']("files_or_directories_to_run"));
      };

      def.$add_failure_exit_code = function(argv) {
        var $a, self = this;

        if ((($a = self.submitted_options['$[]']("failure_exit_code")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return argv['$<<']("--failure-exit-code")['$<<'](self.submitted_options['$[]']("failure_exit_code").$to_s())
          } else {
          return nil
        };
      };

      def.$add_full_description = function(argv) {
        var $a, $b, TMP_1, self = this;

        if ((($a = self.submitted_options['$[]']("full_description")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self.submitted_options['$[]']("full_description")).$each, $a.$$p = (TMP_1 = function(description){var self = TMP_1.$$s || this;
if (description == null) description = nil;
          return argv['$<<']("--example")['$<<'](description.$source().$delete("\\"))}, TMP_1.$$s = self, TMP_1), $a).call($b)
          } else {
          return nil
        };
      };

      def.$add_line_numbers = function(argv) {
        var $a, $b, $c, TMP_2, self = this;

        if ((($a = self.submitted_options['$[]']("line_numbers")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = argv).$push.apply($a, [].concat(($b = ($c = self.submitted_options['$[]']("line_numbers")).$inject, $b.$$p = (TMP_2 = function(a, l){var self = TMP_2.$$s || this;
if (a == null) a = nil;if (l == null) l = nil;
          return a['$<<']("--line_number")['$<<'](l)}, TMP_2.$$s = self, TMP_2), $b).call($c, [])))
          } else {
          return nil
        };
      };

      Opal.cdecl($scope, 'CONDITIONAL_FILTERS', ["if", "unless"]);

      def.$add_filter = function(argv, name, hash) {
        var $a, $b, TMP_3, self = this;

        if ((($a = hash['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return ($a = ($b = hash).$each_pair, $a.$$p = (TMP_3 = function(k, v){var self = TMP_3.$$s || this, $a, tag = nil;
if (k == null) k = nil;if (v == null) v = nil;
          if ((($a = $scope.get('CONDITIONAL_FILTERS')['$include?'](k)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil;};
            tag = (function() {if (name['$==']("inclusion")) {
              return k.$to_s()
              } else {
              return "~" + (k)
            }; return nil; })();
            if ((($a = v['$is_a?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
              tag['$<<'](":" + (v))};
            return argv['$<<']("--tag")['$<<'](tag);}, TMP_3.$$s = self, TMP_3), $a).call($b)
        };
      };

      def.$add_formatters = function(argv) {
        var $a, $b, TMP_4, self = this;

        if ((($a = self.submitted_options['$[]']("formatters")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self.submitted_options['$[]']("formatters")).$each, $a.$$p = (TMP_4 = function(pair){var self = TMP_4.$$s || this, $a;
if (pair == null) pair = nil;
          argv['$<<']("--format")['$<<'](pair['$[]'](0));
            if ((($a = pair['$[]'](1)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return argv['$<<']("--out")['$<<'](pair['$[]'](1))
              } else {
              return nil
            };}, TMP_4.$$s = self, TMP_4), $a).call($b)
          } else {
          return nil
        };
      };

      def.$add_libs = function(argv) {
        var $a, $b, TMP_5, self = this;

        if ((($a = self.submitted_options['$[]']("libs")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self.submitted_options['$[]']("libs")).$each, $a.$$p = (TMP_5 = function(path){var self = TMP_5.$$s || this;
if (path == null) path = nil;
          return argv['$<<']("-I")['$<<'](path)}, TMP_5.$$s = self, TMP_5), $a).call($b)
          } else {
          return nil
        };
      };

      return (def.$add_requires = function(argv) {
        var $a, $b, TMP_6, self = this;

        if ((($a = self.submitted_options['$[]']("requires")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self.submitted_options['$[]']("requires")).$each, $a.$$p = (TMP_6 = function(path){var self = TMP_6.$$s || this;
if (path == null) path = nil;
          return argv['$<<']("--require")['$<<'](path)}, TMP_6.$$s = self, TMP_6), $a).call($b)
          } else {
          return nil
        };
      }, nil) && 'add_requires';
    })(self, null)
  })($scope.get('RSpec'))
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/drb_command_line"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$[]', '$options', '$start_service', '$new_with_uri', '$drb_port', '$run', '$drb_argv']);
  self.$require("drb/drb");
  self.$require("rspec/core/drb_options");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $DRbCommandLine(){};
        var self = $DRbCommandLine = $klass($base, $super, 'DRbCommandLine', $DRbCommandLine);

        var def = self.$$proto, $scope = self.$$scope;

        def.options = nil;
        def.$initialize = function(options) {
          var self = this;

          return self.options = options;
        };

        def.$drb_port = function() {
          var $a, $b, self = this;

          return ((($a = ((($b = self.options.$options()['$[]']("drb_port")) !== false && $b !== nil) ? $b : $scope.get('ENV')['$[]']("RSPEC_DRB"))) !== false && $a !== nil) ? $a : 8989);
        };

        return (def.$run = function(err, out) {
          var self = this, spec_server = nil;

          try {
          $scope.get('DRb').$start_service("druby://localhost:0")
          } catch ($err) {if (Opal.rescue($err, [$scope.get('SocketError'), (($scope.get('Errno')).$$scope.get('EADDRNOTAVAIL'))])) {
            $scope.get('DRb').$start_service("druby://:0")
            }else { throw $err; }
          };
          spec_server = $scope.get('DRbObject').$new_with_uri("druby://127.0.0.1:" + (self.$drb_port()));
          return spec_server.$run(self.options.$drb_argv(), err, out);
        }, nil) && 'run';
      })(self, null)
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/runner"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$autorun_disabled?', '$installed_at_exit?', '$running_in_drb?', '$at_exit', '$nil?', '$kind_of?', '$to_i', '$run', '$!', '$==', '$exit', '$-', '$current_server', '$require', '$getaddress', '$gethostname', '$any?', '$host', '$URI', '$uri', '$trap', '$wants_to_quit', '$exit!', '$wants_to_quit=', '$puts', '$trap_interrupt', '$new', '$parse_options', '$[]', '$options', '$reset']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Runner(){};
        var self = $Runner = $klass($base, $super, 'Runner', $Runner);

        var def = self.$$proto, $scope = self.$$scope;

        Opal.defs(self, '$autorun', function() {
          var $a, $b, $c, TMP_1, self = this;

          if ((($a = ((($b = ((($c = self['$autorun_disabled?']()) !== false && $c !== nil) ? $c : self['$installed_at_exit?']())) !== false && $b !== nil) ? $b : self['$running_in_drb?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          ($a = ($b = self).$at_exit, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, status = nil;
            if ($gvars["!"] == null) $gvars["!"] = nil;
            if ($gvars.stderr == null) $gvars.stderr = nil;
            if ($gvars.stdout == null) $gvars.stdout = nil;

          if ((($a = ((($b = $gvars["!"]['$nil?']()) !== false && $b !== nil) ? $b : $gvars["!"]['$kind_of?']($scope.get('SystemExit')))) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              return nil;
            };
            status = self.$run($scope.get('ARGV'), $gvars.stderr, $gvars.stdout).$to_i();
            if ((($a = status['$=='](0)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$exit(status)
              } else {
              return nil
            };}, TMP_1.$$s = self, TMP_1), $a).call($b);
          return self.installed_at_exit = true;
        });

        Opal.cdecl($scope, 'AT_EXIT_HOOK_BACKTRACE_LINE', "" + ("rspec/core/runner") + ":" + ((22)['$-'](2)) + ":in `autorun'");

        Opal.defs(self, '$disable_autorun!', function() {
          var self = this;

          return self.autorun_disabled = true;
        });

        Opal.defs(self, '$autorun_disabled?', function() {
          var $a, self = this;
          if (self.autorun_disabled == null) self.autorun_disabled = nil;

          return ((($a = self.autorun_disabled) !== false && $a !== nil) ? $a : self.autorun_disabled = false);
        });

        Opal.defs(self, '$installed_at_exit?', function() {
          var $a, self = this;
          if (self.installed_at_exit == null) self.installed_at_exit = nil;

          return ((($a = self.installed_at_exit) !== false && $a !== nil) ? $a : self.installed_at_exit = false);
        });

        Opal.defs(self, '$running_in_drb?', function() {
          var $a, $b, TMP_2, self = this, local_ipv4 = nil, local_drb = nil;

          try {
          try {
          if ((($a = ($b = ($scope.DRb != null), $b !== false && $b !== nil ?$scope.get('DRb').$current_server() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$require("socket");
              self.$require("uri");
              local_ipv4 = $scope.get('IPSocket').$getaddress($scope.get('Socket').$gethostname());
              return local_drb = ($a = ($b = ["127.0.0.1", "localhost", local_ipv4])['$any?'], $a.$$p = (TMP_2 = function(addr){var self = TMP_2.$$s || this;
if (addr == null) addr = nil;
              return addr['$=='](self.$URI($scope.get('DRb').$current_server().$uri()).$host())}, TMP_2.$$s = self, TMP_2), $a).call($b);
              } else {
              return nil
            }
          } catch ($err) {if (Opal.rescue($err, [(($scope.get('DRb')).$$scope.get('DRbServerNotFound'))])) {
            return nil
            }else { throw $err; }
          }
          } finally {
          return ((($a = local_drb) !== false && $a !== nil) ? $a : false)
          };
        });

        Opal.defs(self, '$trap_interrupt', function() {
          var $a, $b, TMP_3, self = this;

          return ($a = ($b = self).$trap, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $a, $b;

          if ((($a = $scope.get('RSpec').$wants_to_quit()) !== nil && (!$a.$$is_boolean || $a == true))) {
              self['$exit!'](1)};
            (($a = [true]), $b = $scope.get('RSpec'), $b['$wants_to_quit='].apply($b, $a), $a[$a.length-1]);
            return $scope.get('STDERR').$puts("\nExiting... Interrupt again to exit immediately.");}, TMP_3.$$s = self, TMP_3), $a).call($b, "INT");
        });

        return (Opal.defs(self, '$run', function(args, err, out) {
          var $a, self = this, options = nil;
          if ($gvars.stderr == null) $gvars.stderr = nil;
          if ($gvars.stdout == null) $gvars.stdout = nil;

          if (err == null) {
            err = $gvars.stderr
          }
          if (out == null) {
            out = $gvars.stdout
          }
          try {
          self.$trap_interrupt();
          options = $scope.get('ConfigurationOptions').$new(args);
          options.$parse_options();
          if ((($a = options.$options()['$[]']("drb")) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$require("rspec/core/drb_command_line");
            try {
            return $scope.get('DRbCommandLine').$new(options).$run(err, out)
            } catch ($err) {if (Opal.rescue($err, [(($scope.get('DRb')).$$scope.get('DRbConnError'))])) {
              err.$puts("No DRb server is running. Running in local process instead ...");
              return $scope.get('CommandLine').$new(options).$run(err, out);
              }else { throw $err; }
            };
            } else {
            return $scope.get('CommandLine').$new(options).$run(err, out)
          };
          } finally {
          $scope.get('RSpec').$reset()
          };
        }), nil) && 'run';
      })(self, null)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/example"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$define_method', '$[]', '$delegate_to_metadata', '$empty?', '$to_s', '$metadata', '$location', '$call', '$format_docstrings_block', '$configuration', '$attr_reader', '$for_example', '$alias_method', '$current_example=', '$start', '$pending', '$dry_run?', '$with_around_each_hooks', '$run_before_each', '$instance_exec', '$to_proc', '$message', '$set_exception', '$run_after_each', '$instance_variable_set', '$instance_variables', '$assign_generated_description', '$finish', '$__send__', '$public_instance_methods', '$new', '$class', '$any_apply?', '$all_apply?', '$around_each_hooks_for', '$example_group', '$!', '$==', '$first', '$backtrace', '$reporter', '$instance_exec_with_rescue', '$private', '$around_each_hooks', '$run_around_each_hooks', '$example_started', '$record', '$now', '$record_finished', '$example_failed', '$example_pending', '$===', '$example_passed', '$merge', '$to_f', '$-', '$execution_result', '$setup_mocks_for_rspec', '$run_before_each_hooks', '$run_after_each_hooks', '$verify_mocks', '$teardown_mocks_for_rspec', '$verify_mocks_for_rspec', '$expecting_with_rspec?', '$pending?', '$<<', '$generated_description', '$clear_generated_description', '$update']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Example(){};
        var self = $Example = $klass($base, $super, 'Example', $Example);

        var def = self.$$proto, $scope = self.$$scope, TMP_9, TMP_10, TMP_11;

        def.example_group_class = def.options = def.example_group_instance = def.metadata = def.around_each_hooks = def.exception = def.pending_declared_in_example = nil;
        Opal.defs(self, '$delegate_to_metadata', function(keys) {
          var $a, $b, TMP_1, self = this;

          keys = $slice.call(arguments, 0);
          return ($a = ($b = keys).$each, $a.$$p = (TMP_1 = function(key){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (key == null) key = nil;
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;
              if (self.metadata == null) self.metadata = nil;

            return self.metadata['$[]'](key)}, TMP_2.$$s = self, TMP_2), $a).call($b, key)}, TMP_1.$$s = self, TMP_1), $a).call($b);
        });

        self.$delegate_to_metadata("full_description", "execution_result", "file_path", "pending", "location");

        def.$description = function() {
          var $a, self = this, description = nil;

          description = (function() {if ((($a = self.$metadata()['$[]']("description").$to_s()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "example at " + (self.$location())
            } else {
            return self.$metadata()['$[]']("description")
          }; return nil; })();
          return $scope.get('RSpec').$configuration().$format_docstrings_block().$call(description);
        };

        self.$attr_reader("exception");

        self.$attr_reader("metadata");

        self.$attr_reader("example_group_instance");

        def.$initialize = function(example_group_class, description, metadata, example_block) {
          var $a, self = this;

          if (example_block == null) {
            example_block = nil
          }
          $a = [example_group_class, metadata, example_block], self.example_group_class = $a[0], self.options = $a[1], self.example_block = $a[2];
          self.metadata = self.example_group_class.$metadata().$for_example(description, metadata);
          self.example_group_instance = self.exception = nil;
          return self.pending_declared_in_example = false;
        };

        def.$options = function() {
          var self = this;

          return self.options;
        };

        def.$example_group = function() {
          var self = this;

          return self.example_group_class;
        };

        self.$alias_method("pending?", "pending");

        def.$run = function(example_group_instance, reporter) {
          var $a, $b, TMP_3, $c, TMP_4, $d, self = this, e = nil;

          try {
          self.example_group_instance = example_group_instance;
          (($a = [self]), $b = $scope.get('RSpec'), $b['$current_example='].apply($b, $a), $a[$a.length-1]);
          self.$start(reporter);
          try {
          try {
          if ((($a = ((($b = self.$pending()) !== false && $b !== nil) ? $b : $scope.get('RSpec').$configuration()['$dry_run?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              ($a = ($b = self).$with_around_each_hooks, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $a, $b, e = nil;
                if (self.example_block == null) self.example_block = nil;
                if (self.example_group_instance == null) self.example_group_instance = nil;

              try {
                try {
                self.$run_before_each();
                  return ($a = ($b = self.example_group_instance).$instance_exec, $a.$$p = self.example_block.$to_proc(), $a).call($b, self);
                } catch ($err) {if (Opal.rescue($err, [(($scope.get('Pending')).$$scope.get('PendingDeclaredInExample'))])) {e = $err;
                  return self.pending_declared_in_example = e.$message()
                  }else if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                  self.$set_exception(e)
                  }else { throw $err; }
                }
                } finally {
                self.$run_after_each()
                }}, TMP_3.$$s = self, TMP_3), $a).call($b)
            }
          } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
            self.$set_exception(e)
            }else { throw $err; }
          }
          } finally {
          ($a = ($c = self.example_group_instance.$instance_variables()).$each, $a.$$p = (TMP_4 = function(ivar){var self = TMP_4.$$s || this;
            if (self.example_group_instance == null) self.example_group_instance = nil;
if (ivar == null) ivar = nil;
          return self.example_group_instance.$instance_variable_set(ivar, nil)}, TMP_4.$$s = self, TMP_4), $a).call($c);
          self.example_group_instance = nil;
          try {
          self.$assign_generated_description()
          } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
            self.$set_exception(e, "while assigning the example description")
            }else { throw $err; }
          };
          };
          return self.$finish(reporter);
          } finally {
          (($a = [nil]), $d = $scope.get('RSpec'), $d['$current_example='].apply($d, $a), $a[$a.length-1])
          };
        };

        (function($base, $super) {
          function $Procsy(){};
          var self = $Procsy = $klass($base, $super, 'Procsy', $Procsy);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_5, TMP_7, TMP_8;

          self.$attr_reader("metadata");

          ($a = ($b = $scope.get('Proc').$public_instance_methods(false)).$each, $a.$$p = (TMP_5 = function(name){var self = TMP_5.$$s || this, $a, $b, TMP_6;
if (name == null) name = nil;
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_6 = function(a){var self = TMP_6.$$s || this, b, $a, $b;
              if (self.proc == null) self.proc = nil;
a = $slice.call(arguments, 0);
              b = TMP_6.$$p || nil, TMP_6.$$p = null;
            return ($a = ($b = self.proc).$__send__, $a.$$p = b.$to_proc(), $a).apply($b, [name].concat(a))}, TMP_6.$$s = self, TMP_6), $a).call($b, name)}, TMP_5.$$s = self, TMP_5), $a).call($b);

          Opal.defn(self, '$run', def.$call);

          def.$initialize = TMP_7 = function(metadata) {
            var self = this, $iter = TMP_7.$$p, block = $iter || nil;

            TMP_7.$$p = null;
            self.metadata = metadata;
            return self.proc = block;
          };

          return (def.$wrap = TMP_8 = function() {
            var $a, $b, self = this, $iter = TMP_8.$$p, block = $iter || nil;

            TMP_8.$$p = null;
            return ($a = ($b = self.$class()).$new, $a.$$p = block.$to_proc(), $a).call($b, self.$metadata());
          }, nil) && 'wrap';
        })(self, null);

        def['$any_apply?'] = function(filters) {
          var self = this;

          return self.$metadata()['$any_apply?'](filters);
        };

        def['$all_apply?'] = function(filters) {
          var $a, self = this;

          return ((($a = self.metadata['$all_apply?'](filters)) !== false && $a !== nil) ? $a : self.example_group_class['$all_apply?'](filters));
        };

        def.$around_each_hooks = function() {
          var $a, self = this;

          return ((($a = self.around_each_hooks) !== false && $a !== nil) ? $a : self.around_each_hooks = self.$example_group().$around_each_hooks_for(self));
        };

        def.$set_exception = function(exception, context) {
          var $a, $b, self = this, msg = nil;

          if (context == null) {
            context = nil
          }
          if ((($a = ($b = self.exception, $b !== false && $b !== nil ?context['$==']("dont_print")['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            msg = "\nAn error occurred " + (context) + "\n  " + (exception.$class()) + ": " + (exception.$message()) + "\n  occurred at " + (exception.$backtrace().$first()) + "\n\n";
            $scope.get('RSpec').$configuration().$reporter().$message(msg);};
          return ((($a = self.exception) !== false && $a !== nil) ? $a : self.exception = exception);
        };

        def.$fail_with_exception = function(reporter, exception) {
          var self = this;

          self.$start(reporter);
          self.$set_exception(exception);
          return self.$finish(reporter);
        };

        def.$instance_exec_with_rescue = TMP_9 = function(context) {
          var $a, $b, self = this, $iter = TMP_9.$$p, block = $iter || nil;

          if (context == null) {
            context = nil
          }
          TMP_9.$$p = null;
          return ($a = ($b = self.example_group_instance).$instance_exec_with_rescue, $a.$$p = block.$to_proc(), $a).call($b, self, context);
        };

        def.$instance_exec = TMP_10 = function(args) {
          var $a, $b, self = this, $iter = TMP_10.$$p, block = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_10.$$p = null;
          return ($a = ($b = self.example_group_instance).$instance_exec, $a.$$p = block.$to_proc(), $a).apply($b, [].concat(args));
        };

        self.$private();

        def.$with_around_each_hooks = TMP_11 = function() {
          var $a, $b, self = this, $iter = TMP_11.$$p, block = $iter || nil, e = nil;

          TMP_11.$$p = null;
          try {
          if ((($a = self.$around_each_hooks()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return $a = Opal.yieldX(block, []), $a === $breaker ? $a : $a
              } else {
              return self.example_group_class.$run_around_each_hooks(self, ($a = ($b = $scope.get('Procsy')).$new, $a.$$p = block.$to_proc(), $a).call($b, self.$metadata()))
            }
          } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
            return self.$set_exception(e, "in an around(:each) hook")
            }else { throw $err; }
          };
        };

        def.$start = function(reporter) {
          var self = this;

          reporter.$example_started(self);
          return self.$record($hash2(["started_at"], {"started_at": (((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('Time')).$now()}));
        };

        def.$finish = function(reporter) {
          var $a, self = this;

          if ((($a = self.exception) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$record_finished("failed", $hash2(["exception"], {"exception": self.exception}));
            reporter.$example_failed(self);
            return false;
          } else if ((($a = self.pending_declared_in_example) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$record_finished("pending", $hash2(["pending_message"], {"pending_message": self.pending_declared_in_example}));
            reporter.$example_pending(self);
            return true;
          } else if ((($a = self.$pending()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$record_finished("pending", $hash2(["pending_message"], {"pending_message": (function() {if ((($a = $scope.get('String')['$==='](self.$pending())) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$pending()
              } else {
              return (($scope.get('Pending')).$$scope.get('NO_REASON_GIVEN'))
            }; return nil; })()}));
            reporter.$example_pending(self);
            return true;
            } else {
            self.$record_finished("passed");
            reporter.$example_passed(self);
            return true;
          };
        };

        def.$record_finished = function(status, results) {
          var self = this, finished_at = nil;

          if (results == null) {
            results = $hash2([], {})
          }
          finished_at = (((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('Time')).$now();
          return self.$record(results.$merge($hash2(["status", "finished_at", "run_time"], {"status": status, "finished_at": finished_at, "run_time": (finished_at['$-'](self.$execution_result()['$[]']("started_at"))).$to_f()})));
        };

        def.$run_before_each = function() {
          var self = this;

          self.example_group_instance.$setup_mocks_for_rspec();
          return self.example_group_class.$run_before_each_hooks(self);
        };

        def.$run_after_each = function() {
          var self = this, e = nil;

          try {
          try {
          self.example_group_class.$run_after_each_hooks(self);
            return self.$verify_mocks();
          } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
            return self.$set_exception(e, "in an after(:each) hook")
            }else { throw $err; }
          }
          } finally {
          self.example_group_instance.$teardown_mocks_for_rspec()
          };
        };

        def.$verify_mocks = function() {
          var self = this, e = nil;

          try {
          return self.example_group_instance.$verify_mocks_for_rspec()
          } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
            return self.$set_exception(e, "dont_print")
            }else { throw $err; }
          };
        };

        def.$assign_generated_description = function() {
          var $a, $b, self = this;

          if ((($a = $scope.get('RSpec').$configuration()['$expecting_with_rspec?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil
          };
          if ((($a = ($b = self.$metadata()['$[]']("description_args")['$empty?'](), $b !== false && $b !== nil ?self['$pending?']()['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$metadata()['$[]']("description_args")['$<<']((($scope.get('RSpec')).$$scope.get('Matchers')).$generated_description())};
          return (($scope.get('RSpec')).$$scope.get('Matchers')).$clear_generated_description();
        };

        return (def.$record = function(results) {
          var self = this;

          if (results == null) {
            results = $hash2([], {})
          }
          return self.$execution_result().$update(results);
        }, nil) && 'record';
      })(self, null)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/shared_example_group/collection"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$fetch_examples', '$private', '$[]', '$source_for', '$find', '$has_key?', '$reverse']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'SharedExampleGroup');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Collection(){};
          var self = $Collection = $klass($base, $super, 'Collection', $Collection);

          var def = self.$$proto, $scope = self.$$scope;

          def.examples = def.sources = nil;
          def.$initialize = function(sources, examples) {
            var $a, self = this;

            return $a = [sources, examples], self.sources = $a[0], self.examples = $a[1];
          };

          def['$[]'] = function(key) {
            var self = this;

            return self.$fetch_examples(key);
          };

          self.$private();

          def.$fetch_examples = function(key) {
            var self = this;

            return self.examples['$[]'](self.$source_for(key))['$[]'](key);
          };

          return (def.$source_for = function(key) {
            var $a, $b, TMP_1, self = this;

            return ($a = ($b = self.sources.$reverse()).$find, $a.$$p = (TMP_1 = function(source){var self = TMP_1.$$s || this;
              if (self.examples == null) self.examples = nil;
if (source == null) source = nil;
            return self.examples['$[]'](source)['$has_key?'](key)}, TMP_1.$$s = self, TMP_1), $a).call($b);
          }, nil) && 'source_for';
        })(self, null)
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/shared_example_group"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$add_group', '$to_proc', '$registry', '$alias_method', '$shared_example_groups_for', '$[]', '$ancestors', '$new', '$ensure_block_has_source_location', '$first_non_rspec_line', '$key?', '$first', '$shift', '$warn_if_key_taken', '$add_shared_example_group', '$empty?', '$send', '$class_eval', '$extend', '$configuration', '$shared_example_groups', '$[]=', '$clear', '$private', '$any?', '$===', '$example_block_for', '$warn_with', '$gsub', '$formatted_location', '$join', '$source_location', '$method_defined?', '$define_method', '$split']);
  (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'SharedExampleGroup');

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        Opal.defn(self, '$shared_examples', TMP_1 = function(args) {
          var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_1.$$p = null;
          return ($a = ($b = $scope.get('SharedExampleGroup').$registry()).$add_group, $a.$$p = block.$to_proc(), $a).apply($b, [self].concat(args));
        });

        self.$alias_method("shared_context", "shared_examples");

        self.$alias_method("share_examples_for", "shared_examples");

        self.$alias_method("shared_examples_for", "shared_examples");

        Opal.defn(self, '$shared_example_groups', function() {
          var $a, self = this;

          return ($a = $scope.get('SharedExampleGroup').$registry()).$shared_example_groups_for.apply($a, ["main"].concat(self.$ancestors()['$[]']($range(0, -1, false))));
        });

        (function($base) {
          var self = $module($base, 'TopLevelDSL');

          var def = self.$$proto, $scope = self.$$scope, TMP_2;

          Opal.defn(self, '$shared_examples', TMP_2 = function(args) {
            var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

            args = $slice.call(arguments, 0);
            TMP_2.$$p = null;
            return ($a = ($b = $scope.get('SharedExampleGroup').$registry()).$add_group, $a.$$p = block.$to_proc(), $a).apply($b, ["main"].concat(args));
          });

          self.$alias_method("shared_context", "shared_examples");

          self.$alias_method("share_examples_for", "shared_examples");

          self.$alias_method("shared_examples_for", "shared_examples");

          Opal.defn(self, '$shared_example_groups', function() {
            var self = this;

            return $scope.get('SharedExampleGroup').$registry().$shared_example_groups_for("main");
          });
        })(self);

        Opal.defs(self, '$registry', function() {
          var $a, self = this;
          if (self.registry == null) self.registry = nil;

          return ((($a = self.registry) !== false && $a !== nil) ? $a : self.registry = $scope.get('Registry').$new());
        });

        (function($base, $super) {
          function $Registry(){};
          var self = $Registry = $klass($base, $super, 'Registry', $Registry);

          var def = self.$$proto, $scope = self.$$scope, TMP_3, $a;

          def.shared_example_groups = nil;
          def.$add_group = TMP_3 = function(source, args) {
            var $a, $b, TMP_4, self = this, $iter = TMP_3.$$p, block = $iter || nil, key = nil, mod = nil;

            args = $slice.call(arguments, 1);
            TMP_3.$$p = null;
            self.$ensure_block_has_source_location(block, $scope.get('CallerFilter').$first_non_rspec_line());
            if ((($a = self['$key?'](args.$first())) !== nil && (!$a.$$is_boolean || $a == true))) {
              key = args.$shift();
              self.$warn_if_key_taken(source, key, block);
              self.$add_shared_example_group(source, key, block);};
            if ((($a = args['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              mod = $scope.get('Module').$new();
              ($a = ($b = ((function(self) {
                var $scope = self.$$scope, def = self.$$proto;

                return self
              })(mod.$singleton_class()))).$send, $a.$$p = (TMP_4 = function(host){var self = TMP_4.$$s || this, $a, $b;
if (host == null) host = nil;
              return ($a = ($b = host).$class_eval, $a.$$p = block.$to_proc(), $a).call($b)}, TMP_4.$$s = self, TMP_4), $a).call($b, "define_method", "extended");
              return ($a = $scope.get('RSpec').$configuration()).$extend.apply($a, [mod].concat(args));
            };
          };

          def.$shared_example_groups_for = function(sources) {
            var self = this;

            sources = $slice.call(arguments, 0);
            return $scope.get('Collection').$new(sources, self.$shared_example_groups());
          };

          def.$shared_example_groups = function() {
            var $a, $b, $c, TMP_5, self = this;

            return ((($a = self.shared_example_groups) !== false && $a !== nil) ? $a : self.shared_example_groups = ($b = ($c = $scope.get('Hash')).$new, $b.$$p = (TMP_5 = function(hash, key){var self = TMP_5.$$s || this;
if (hash == null) hash = nil;if (key == null) key = nil;
            return hash['$[]='](key, $scope.get('Hash').$new())}, TMP_5.$$s = self, TMP_5), $b).call($c));
          };

          def.$clear = function() {
            var self = this;

            return self.$shared_example_groups().$clear();
          };

          self.$private();

          def.$add_shared_example_group = function(source, key, block) {
            var self = this;

            return self.$shared_example_groups()['$[]'](source)['$[]='](key, block);
          };

          def['$key?'] = function(candidate) {
            var $a, $b, TMP_6, self = this;

            return ($a = ($b = [$scope.get('String'), $scope.get('Symbol'), $scope.get('Module')])['$any?'], $a.$$p = (TMP_6 = function(cls){var self = TMP_6.$$s || this;
if (cls == null) cls = nil;
            return cls['$==='](candidate)}, TMP_6.$$s = self, TMP_6), $a).call($b);
          };

          def.$warn_if_key_taken = function(source, key, new_block) {
            var $a, self = this, existing_block = nil;

            if ((($a = existing_block = self.$example_block_for(source, key)) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              return nil
            };
            return $scope.get('RSpec').$warn_with(((((((("            |WARNING: Shared example group '") + (key)) + "' has been previously defined at:\n            |  ") + (self.$formatted_location(existing_block))) + "\n            |...and you are now defining it at:\n            |  ") + (self.$formatted_location(new_block))) + "\n            |The new definition will overwrite the original one.\n").$gsub(/^ +\|/, ""), $hash2(["call_site"], {"call_site": nil}));
          };

          def.$formatted_location = function(block) {
            var self = this;

            return block.$source_location().$join(":");
          };

          def.$example_block_for = function(source, key) {
            var self = this;

            return self.$shared_example_groups()['$[]'](source)['$[]'](key);
          };

          if ((($a = $scope.get('Proc')['$method_defined?']("source_location")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return (def.$ensure_block_has_source_location = function(block, caller_line) {
              var self = this;

              return nil;
            }, nil) && 'ensure_block_has_source_location'
            } else {
            return (def.$ensure_block_has_source_location = function(block, caller_line) {
              var $a, $b, TMP_7, self = this;

              return block.$extend(($a = ($b = $scope.get('Module')).$new, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $a, $b, TMP_8;

              return ($a = ($b = self).$define_method, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

                return caller_line.$split(":")}, TMP_8.$$s = self, TMP_8), $a).call($b, "source_location")}, TMP_7.$$s = self, TMP_7), $a).call($b));
            }, nil) && 'ensure_block_has_source_location'
          };
        })(self, null);
      })(self)
    })(self)
  })(self);
  self.$extend((((((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('SharedExampleGroup'))).$$scope.get('TopLevelDSL')));
  return $scope.get('Module').$send("include", (((((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('SharedExampleGroup'))).$$scope.get('TopLevelDSL')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/example_group"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$extend', '$include', '$world', '$register', '$each', '$define_method', '$[]', '$metadata', '$call', '$format_docstrings_block', '$configuration', '$delegate_to_metadata', '$alias_method', '$build_hash_from', '$update', '$<<', '$examples', '$new', '$last', '$define_example_method', '$describe', '$find_and_eval_shared', '$to_proc', '$[]=', '$define_nested_shared_group_method', '$shared_example_groups', '$raise', '$inspect', '$module_exec', '$module_eval', '$filtered_examples', '$+', '$inject', '$descendant_filtered_examples', '$children', '$respond_to?', '$superclass', '$is_a?', '$subclass', '$set_it_up', '$assign_const', '$define_helpers_on', '$descendants', '$select', '$<', '$ancestors', '$==', '$configure_mock_framework', '$configure_expectation_framework', '$ensure_example_groups_are_configured', '$first', '$shift', '$unshift', '$process', '$superclass_metadata', '$register_globals', '$hooks', '$configure_group', '$empty?', '$instance_variables', '$before_all_ivars', '$instance_variable_get', '$instance_variable_set', '$assign_before_all_ivars', '$isolate_for_all_hook', '$run_hook', '$store_before_all_ivars', '$wants_to_quit', '$top_level?', '$clear_remaining_example_groups', '$example_group_started', '$run_before_all_hooks', '$run_examples', '$all?', '$map', '$run', '$order', '$ordering_strategy', '$fail_fast?', '$wants_to_quit=', '$fail_filtered_examples', '$run_after_all_hooks', '$clear', '$example_group_finished', '$fetch', '$ordering_registry', '$warn', '$gsub', '$set_ivars', '$!', '$fail_with_exception', '$any_apply?', '$all_apply?', '$collect', '$declaration_line_numbers', '$description', '$parent_groups', '$described_class', '$class', '$instance_exec', '$current_example', '$set_exception', '$base_name_for', '$constant_scope_for', '$disambiguate', '$const_set', '$gsub!', '$upcase', '$lstrip!', '$const_defined?', '$next!']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ExampleGroup(){};
        var self = $ExampleGroup = $klass($base, $super, 'ExampleGroup', $ExampleGroup);

        var def = self.$$proto, $scope = self.$$scope, TMP_7, TMP_8, TMP_9, TMP_11, TMP_12, TMP_27;

        self.$extend($scope.get('Hooks'));

        self.$include($scope.get('MemoizedHelpers'));

        self.$include($scope.get('Pending'));

        self.$extend($scope.get('SharedExampleGroup'));

        Opal.defs(self, '$world', function() {
          var self = this;

          return $scope.get('RSpec').$world();
        });

        Opal.defs(self, '$register', function() {
          var self = this;

          return self.$world().$register(self);
        });

        (function(self) {
          var $scope = self.$$scope, def = self.$$proto;

          Opal.defs(self, '$delegate_to_metadata', function(names) {
            var $a, $b, TMP_1, self = this;

            names = $slice.call(arguments, 0);
            return ($a = ($b = names).$each, $a.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (name == null) name = nil;
            return ($a = ($b = self).$define_method, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

              return self.$metadata()['$[]']("example_group")['$[]'](name)}, TMP_2.$$s = self, TMP_2), $a).call($b, name)}, TMP_1.$$s = self, TMP_1), $a).call($b);
          });
          self.$$proto.$description = function() {
            var self = this, description = nil;

            description = self.$metadata()['$[]']("example_group")['$[]']("description");
            return $scope.get('RSpec').$configuration().$format_docstrings_block().$call(description);
          };
          self.$delegate_to_metadata("described_class", "file_path");
          self.$alias_method("display_name", "description");
          self.$alias_method("describes", "described_class");
          Opal.defs(self, '$define_example_method', function(name, extra_options) {
            var $a, $b, TMP_3, self = this;

            if (extra_options == null) {
              extra_options = $hash2([], {})
            }
            return ($a = ($b = self).$define_method, $a.$$p = (TMP_3 = function(all_args){var self = TMP_3.$$s || this, block, $a, desc = nil, args = nil, options = nil;
all_args = $slice.call(arguments, 0);
              block = TMP_3.$$p || nil, TMP_3.$$p = null;
            ($a = all_args)['$to_a'] && !$a['$to_a'].$$stub ? ($a = $a['$to_a']()) : ($a).$$is_array ? $a : ($a = [$a]), desc = ($a[0] == null ? nil : $a[0]), args = $slice.call($a, 1);
              options = $scope.get('Metadata').$build_hash_from(args);
              if (block !== false && block !== nil) {
                } else {
                options.$update($hash2(["pending"], {"pending": (((((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('Pending'))).$$scope.get('NOT_YET_IMPLEMENTED'))}))
              };
              options.$update(extra_options);
              self.$examples()['$<<']((((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('Example')).$new(self, desc, options, block));
              return self.$examples().$last();}, TMP_3.$$s = self, TMP_3), $a).call($b, name);
          });
          self.$define_example_method("example");
          self.$define_example_method("it");
          self.$define_example_method("specify");
          self.$define_example_method("focus", $hash2(["focused", "focus"], {"focused": true, "focus": true}));
          self.$define_example_method("focused", $hash2(["focused", "focus"], {"focused": true, "focus": true}));
          self.$define_example_method("fit", $hash2(["focused", "focus"], {"focused": true, "focus": true}));
          self.$define_example_method("pending", $hash2(["pending"], {"pending": true}));
          self.$define_example_method("xexample", $hash2(["pending"], {"pending": "Temporarily disabled with xexample"}));
          self.$define_example_method("xit", $hash2(["pending"], {"pending": "Temporarily disabled with xit"}));
          self.$define_example_method("xspecify", $hash2(["pending"], {"pending": "Temporarily disabled with xspecify"}));
          self.$$proto.$alias_example_to = function(name, extra) {
            var self = this;

            if (extra == null) {
              extra = $hash2([], {})
            }
            return ((function(self) {
              var $scope = self.$$scope, def = self.$$proto;

              return self
            })(self.$singleton_class())).$define_example_method(name, extra);
          };
          Opal.defs(self, '$define_nested_shared_group_method', function(new_name, report_label) {
            var $a, $b, TMP_4, self = this;

            if (report_label == null) {
              report_label = "it should behave like"
            }
            return ($a = ($b = self).$define_method, $a.$$p = (TMP_4 = function(name, args){var self = TMP_4.$$s || this, customization_block, $a, $b, TMP_5, group = nil;
if (name == null) name = nil;args = $slice.call(arguments, 1);
              customization_block = TMP_4.$$p || nil, TMP_4.$$p = null;
            group = ($a = ($b = self).$describe, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $a, $b;

              return ($a = ($b = self).$find_and_eval_shared, $a.$$p = customization_block.$to_proc(), $a).apply($b, ["examples", name].concat(args))}, TMP_5.$$s = self, TMP_5), $a).call($b, "" + (report_label) + " " + (name));
              group.$metadata()['$[]=']("shared_group_name", name);
              return group;}, TMP_4.$$s = self, TMP_4), $a).call($b, new_name);
          });
          self.$define_nested_shared_group_method("it_behaves_like", "behaves like");
          self.$define_nested_shared_group_method("it_should_behave_like");
          return (self.$$proto.$alias_it_behaves_like_to = TMP_6 = function(name, args) {
            var $a, $b, self = this, $iter = TMP_6.$$p, block = $iter || nil;

            args = $slice.call(arguments, 1);
            TMP_6.$$p = null;
            return ($a = ($b = ((function(self) {
              var $scope = self.$$scope, def = self.$$proto;

              return self
            })(self.$singleton_class()))).$define_nested_shared_group_method, $a.$$p = block.$to_proc(), $a).apply($b, [name].concat(args));
          }, nil) && 'alias_it_behaves_like_to';
        })(self.$singleton_class());

        Opal.defs(self, '$include_context', TMP_7 = function(name, args) {
          var $a, $b, self = this, $iter = TMP_7.$$p, block = $iter || nil;

          args = $slice.call(arguments, 1);
          TMP_7.$$p = null;
          return ($a = ($b = self).$find_and_eval_shared, $a.$$p = block.$to_proc(), $a).apply($b, ["context", name].concat(args));
        });

        Opal.defs(self, '$include_examples', TMP_8 = function(name, args) {
          var $a, $b, self = this, $iter = TMP_8.$$p, block = $iter || nil;

          args = $slice.call(arguments, 1);
          TMP_8.$$p = null;
          return ($a = ($b = self).$find_and_eval_shared, $a.$$p = block.$to_proc(), $a).apply($b, ["examples", name].concat(args));
        });

        Opal.defs(self, '$find_and_eval_shared', TMP_9 = function(label, name, args) {
          var $a, $b, $c, self = this, $iter = TMP_9.$$p, customization_block = $iter || nil, shared_block = nil;

          args = $slice.call(arguments, 2);
          TMP_9.$$p = null;
          if ((($a = shared_block = self.$shared_example_groups()['$[]'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise($scope.get('ArgumentError'), "Could not find shared " + (label) + " " + (name.$inspect()))
          };
          ($a = ($b = self).$module_exec, $a.$$p = shared_block.$to_proc(), $a).apply($b, [].concat(args));
          if (customization_block !== false && customization_block !== nil) {
            return ($a = ($c = self).$module_eval, $a.$$p = customization_block.$to_proc(), $a).call($c)
            } else {
            return nil
          };
        });

        Opal.defs(self, '$examples', function() {
          var $a, self = this;
          if (self.examples == null) self.examples = nil;

          return ((($a = self.examples) !== false && $a !== nil) ? $a : self.examples = []);
        });

        Opal.defs(self, '$filtered_examples', function() {
          var self = this;

          return self.$world().$filtered_examples()['$[]'](self);
        });

        Opal.defs(self, '$descendant_filtered_examples', function() {
          var $a, $b, $c, TMP_10, self = this;
          if (self.descendant_filtered_examples == null) self.descendant_filtered_examples = nil;

          return ((($a = self.descendant_filtered_examples) !== false && $a !== nil) ? $a : self.descendant_filtered_examples = self.$filtered_examples()['$+'](($b = ($c = self.$children()).$inject, $b.$$p = (TMP_10 = function(l, c){var self = TMP_10.$$s || this;
if (l == null) l = nil;if (c == null) c = nil;
          return l['$+'](c.$descendant_filtered_examples())}, TMP_10.$$s = self, TMP_10), $b).call($c, [])));
        });

        Opal.defs(self, '$metadata', function() {
          var $a, $b, self = this;
          if (self.metadata == null) self.metadata = nil;

          if ((($a = (($b = self['metadata'], $b != null && $b !== nil) ? 'instance-variable' : nil)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.metadata
            } else {
            return nil
          };
        });

        Opal.defs(self, '$superclass_metadata', function() {
          var $a, $b, self = this;
          if (self.superclass_metadata == null) self.superclass_metadata = nil;

          return ((($a = self.superclass_metadata) !== false && $a !== nil) ? $a : self.superclass_metadata = (function() {if ((($b = self.$superclass()['$respond_to?']("metadata")) !== nil && (!$b.$$is_boolean || $b == true))) {
            return self.$superclass().$metadata()
            } else {
            return nil
          }; return nil; })());
        });

        Opal.defs(self, '$describe', TMP_11 = function(args) {
          var $a, $b, self = this, $iter = TMP_11.$$p, example_group_block = $iter || nil, child = nil;

          args = $slice.call(arguments, 0);
          TMP_11.$$p = null;
          if ((($a = args.$last()['$is_a?']($scope.get('Hash'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            args['$<<']($hash2([], {}))
          };
          args.$last().$update($hash2(["example_group_block"], {"example_group_block": example_group_block}));
          child = ($a = ($b = self).$subclass, $a.$$p = example_group_block.$to_proc(), $a).call($b, self, args);
          self.$children()['$<<'](child);
          return child;
        });

        (function(self) {
          var $scope = self.$$scope, def = self.$$proto;

          return self.$alias_method("context", "describe")
        })(self.$singleton_class());

        Opal.defs(self, '$subclass', TMP_12 = function(parent, args) {
          var $a, $b, $c, self = this, $iter = TMP_12.$$p, example_group_block = $iter || nil, subclass = nil;

          TMP_12.$$p = null;
          subclass = $scope.get('Class').$new(parent);
          ($a = subclass).$set_it_up.apply($a, [].concat(args));
          $scope.get('ExampleGroups').$assign_const(subclass);
          if (example_group_block !== false && example_group_block !== nil) {
            ($b = ($c = subclass).$module_eval, $b.$$p = example_group_block.$to_proc(), $b).call($c)};
          $scope.get('MemoizedHelpers').$define_helpers_on(subclass);
          return subclass;
        });

        Opal.defs(self, '$children', function() {
          var $a, self = this;
          if (self.children == null) self.children = nil;

          return ((($a = self.children) !== false && $a !== nil) ? $a : self.children = []);
        });

        Opal.defs(self, '$descendants', function() {
          var $a, $b, $c, TMP_13, self = this;
          if (self._descendants == null) self._descendants = nil;

          return ((($a = self._descendants) !== false && $a !== nil) ? $a : self._descendants = [self]['$+'](($b = ($c = self.$children()).$inject, $b.$$p = (TMP_13 = function(list, c){var self = TMP_13.$$s || this;
if (list == null) list = nil;if (c == null) c = nil;
          return list['$+'](c.$descendants())}, TMP_13.$$s = self, TMP_13), $b).call($c, [])));
        });

        Opal.defs(self, '$parent_groups', function() {
          var $a, $b, $c, TMP_14, self = this;
          if (self.parent_groups == null) self.parent_groups = nil;

          return ((($a = self.parent_groups) !== false && $a !== nil) ? $a : self.parent_groups = ($b = ($c = self.$ancestors()).$select, $b.$$p = (TMP_14 = function(a){var self = TMP_14.$$s || this;
if (a == null) a = nil;
          return a['$<']((((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('ExampleGroup')))}, TMP_14.$$s = self, TMP_14), $b).call($c));
        });

        Opal.defs(self, '$top_level?', function() {
          var $a, self = this;
          if (self.top_level == null) self.top_level = nil;

          return ((($a = self.top_level) !== false && $a !== nil) ? $a : self.top_level = self.$superclass()['$==']($scope.get('ExampleGroup')));
        });

        Opal.defs(self, '$ensure_example_groups_are_configured', function() {
          var $a, self = this;

          if ((($a = (Opal.cvars['@@example_groups_configured'] != null ? 'class variable' : nil)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            $scope.get('RSpec').$configuration().$configure_mock_framework();
            $scope.get('RSpec').$configuration().$configure_expectation_framework();
            return (Opal.cvars['@@example_groups_configured'] = true);
          };
        });

        Opal.defs(self, '$set_it_up', function(args) {
          var $a, self = this, symbol_description = nil;

          args = $slice.call(arguments, 0);
          self.$ensure_example_groups_are_configured();
          if ((($a = args.$first()['$is_a?']($scope.get('Symbol'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            symbol_description = args.$shift()};
          args['$<<']($scope.get('Metadata').$build_hash_from(args));
          if (symbol_description !== false && symbol_description !== nil) {
            args.$unshift(symbol_description)};
          self.metadata = ($a = (((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('Metadata')).$new(self.$superclass_metadata())).$process.apply($a, [].concat(args));
          self.order = nil;
          self.$hooks().$register_globals(self, $scope.get('RSpec').$configuration().$hooks());
          return self.$world().$configure_group(self);
        });

        Opal.defs(self, '$before_all_ivars', function() {
          var $a, self = this;
          if (self.before_all_ivars == null) self.before_all_ivars = nil;

          return ((($a = self.before_all_ivars) !== false && $a !== nil) ? $a : self.before_all_ivars = $hash2([], {}));
        });

        Opal.defs(self, '$store_before_all_ivars', function(example_group_instance) {
          var $a, $b, TMP_15, self = this;

          if ((($a = example_group_instance.$instance_variables()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          return ($a = ($b = example_group_instance.$instance_variables()).$each, $a.$$p = (TMP_15 = function(ivar){var self = TMP_15.$$s || this;
if (ivar == null) ivar = nil;
          return self.$before_all_ivars()['$[]='](ivar, example_group_instance.$instance_variable_get(ivar))}, TMP_15.$$s = self, TMP_15), $a).call($b);
        });

        Opal.defs(self, '$assign_before_all_ivars', function(ivars, example_group_instance) {
          var $a, $b, TMP_16, self = this;

          return ($a = ($b = ivars).$each, $a.$$p = (TMP_16 = function(ivar, val){var self = TMP_16.$$s || this;
if (ivar == null) ivar = nil;if (val == null) val = nil;
          return example_group_instance.$instance_variable_set(ivar, val)}, TMP_16.$$s = self, TMP_16), $a).call($b);
        });

        Opal.defs(self, '$run_before_all_hooks', function(example_group_instance) {
          var $a, $b, TMP_17, self = this;

          if ((($a = self.$descendant_filtered_examples()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          try {
          self.$assign_before_all_ivars(self.$superclass().$before_all_ivars(), example_group_instance);
          return ($a = ($b = (($scope.get('AllHookMemoizedHash')).$$scope.get('Before'))).$isolate_for_all_hook, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this;

          return self.$run_hook("before", "all", example_group_instance)}, TMP_17.$$s = self, TMP_17), $a).call($b, example_group_instance);
          } finally {
          self.$store_before_all_ivars(example_group_instance)
          };
        });

        Opal.defs(self, '$run_around_each_hooks', function(example, initial_procsy) {
          var self = this;

          return self.$run_hook("around", "each", example, initial_procsy);
        });

        Opal.defs(self, '$run_before_each_hooks', function(example) {
          var self = this;

          return self.$run_hook("before", "each", example);
        });

        Opal.defs(self, '$run_after_each_hooks', function(example) {
          var self = this;

          return self.$run_hook("after", "each", example);
        });

        Opal.defs(self, '$run_after_all_hooks', function(example_group_instance) {
          var $a, $b, TMP_18, self = this;

          if ((($a = self.$descendant_filtered_examples()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          self.$assign_before_all_ivars(self.$before_all_ivars(), example_group_instance);
          return ($a = ($b = (($scope.get('AllHookMemoizedHash')).$$scope.get('After'))).$isolate_for_all_hook, $a.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this;

          return self.$run_hook("after", "all", example_group_instance)}, TMP_18.$$s = self, TMP_18), $a).call($b, example_group_instance);
        });

        Opal.defs(self, '$run', function(reporter) {
          var $a, $b, TMP_19, $c, self = this, result_for_this_group = nil, results_for_descendants = nil, ex = nil;

          if ((($a = $scope.get('RSpec').$wants_to_quit()) !== nil && (!$a.$$is_boolean || $a == true))) {
            if ((($a = self['$top_level?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              $scope.get('RSpec').$clear_remaining_example_groups()};
            return nil;};
          reporter.$example_group_started(self);
          try {
          try {
          self.$run_before_all_hooks(self.$new());
            result_for_this_group = self.$run_examples(reporter);
            results_for_descendants = ($a = ($b = self.$ordering_strategy().$order(self.$children())).$map, $a.$$p = (TMP_19 = function(child){var self = TMP_19.$$s || this;
if (child == null) child = nil;
            return child.$run(reporter)}, TMP_19.$$s = self, TMP_19), $a).call($b)['$all?']();
            return (($a = result_for_this_group !== false && result_for_this_group !== nil) ? results_for_descendants : $a);
          } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {ex = $err;
            if ((($a = self['$fail_fast?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              (($a = [true]), $c = $scope.get('RSpec'), $c['$wants_to_quit='].apply($c, $a), $a[$a.length-1])};
            return self.$fail_filtered_examples(ex, reporter);
            }else { throw $err; }
          }
          } finally {
          self.$run_after_all_hooks(self.$new());
          self.$before_all_ivars().$clear();
          reporter.$example_group_finished(self);
          };
        });

        Opal.defs(self, '$ordering_strategy', function() {
          var $a, $b, TMP_20, self = this, order = nil, registry = nil;

          order = self.$metadata().$fetch("order", "global");
          registry = $scope.get('RSpec').$configuration().$ordering_registry();
          return ($a = ($b = registry).$fetch, $a.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this;

          self.$warn(((((("            |WARNING: Ignoring unknown ordering specified using `:order => ") + (order.$inspect())) + "` metadata.\n            |         Falling back to configured global ordering.\n            |         Unrecognized ordering specified at: ") + (self.$metadata()['$[]']("example_group")['$[]']("location"))) + "\n").$gsub(/^ +\|/, ""));
            return registry.$fetch("global");}, TMP_20.$$s = self, TMP_20), $a).call($b, order);
        });

        Opal.defs(self, '$run_examples', function(reporter) {
          var $a, $b, TMP_21, self = this;

          return ($a = ($b = self.$ordering_strategy().$order(self.$filtered_examples())).$map, $a.$$p = (TMP_21 = function(example){var self = TMP_21.$$s || this, $a, $b, instance = nil, succeeded = nil;
if (example == null) example = nil;
          if ((($a = $scope.get('RSpec').$wants_to_quit()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil;};
            instance = self.$new();
            self.$set_ivars(instance, self.$before_all_ivars());
            succeeded = example.$run(instance, reporter);
            if ((($a = ($b = self['$fail_fast?'](), $b !== false && $b !== nil ?succeeded['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              (($a = [true]), $b = $scope.get('RSpec'), $b['$wants_to_quit='].apply($b, $a), $a[$a.length-1])};
            return succeeded;}, TMP_21.$$s = self, TMP_21), $a).call($b)['$all?']();
        });

        Opal.defs(self, '$fail_filtered_examples', function(exception, reporter) {
          var $a, $b, TMP_22, $c, TMP_23, self = this;

          ($a = ($b = self.$filtered_examples()).$each, $a.$$p = (TMP_22 = function(example){var self = TMP_22.$$s || this;
if (example == null) example = nil;
          return example.$fail_with_exception(reporter, exception)}, TMP_22.$$s = self, TMP_22), $a).call($b);
          ($a = ($c = self.$children()).$each, $a.$$p = (TMP_23 = function(child){var self = TMP_23.$$s || this;
if (child == null) child = nil;
          reporter.$example_group_started(child);
            child.$fail_filtered_examples(exception, reporter);
            return reporter.$example_group_finished(child);}, TMP_23.$$s = self, TMP_23), $a).call($c);
          return false;
        });

        Opal.defs(self, '$fail_fast?', function() {
          var self = this;

          return $scope.get('RSpec').$configuration()['$fail_fast?']();
        });

        Opal.defs(self, '$any_apply?', function(filters) {
          var self = this;

          return self.$metadata()['$any_apply?'](filters);
        });

        Opal.defs(self, '$all_apply?', function(filters) {
          var self = this;

          return self.$metadata()['$all_apply?'](filters);
        });

        Opal.defs(self, '$declaration_line_numbers', function() {
          var $a, $b, $c, TMP_24, $d, TMP_25, self = this;
          if (self.declaration_line_numbers == null) self.declaration_line_numbers = nil;

          return ((($a = self.declaration_line_numbers) !== false && $a !== nil) ? $a : self.declaration_line_numbers = [self.$metadata()['$[]']("example_group")['$[]']("line_number")]['$+'](($b = ($c = self.$examples()).$collect, $b.$$p = (TMP_24 = function(e){var self = TMP_24.$$s || this;
if (e == null) e = nil;
          return e.$metadata()['$[]']("line_number")}, TMP_24.$$s = self, TMP_24), $b).call($c))['$+'](($b = ($d = self.$children()).$inject, $b.$$p = (TMP_25 = function(l, c){var self = TMP_25.$$s || this;
if (l == null) l = nil;if (c == null) c = nil;
          return l['$+'](c.$declaration_line_numbers())}, TMP_25.$$s = self, TMP_25), $b).call($d, [])));
        });

        Opal.defs(self, '$top_level_description', function() {
          var self = this;

          return self.$parent_groups().$last().$description();
        });

        Opal.defs(self, '$set_ivars', function(instance, ivars) {
          var $a, $b, TMP_26, self = this;

          return ($a = ($b = ivars).$each, $a.$$p = (TMP_26 = function(name, value){var self = TMP_26.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
          return instance.$instance_variable_set(name, value)}, TMP_26.$$s = self, TMP_26), $a).call($b);
        });

        def.$described_class = function() {
          var self = this;

          return self.$class().$described_class();
        };

        return (def.$instance_exec_with_rescue = TMP_27 = function(example, context) {
          var $a, $b, self = this, $iter = TMP_27.$$p, hook = $iter || nil, e = nil;

          if (context == null) {
            context = nil
          }
          TMP_27.$$p = null;
          try {
          return ($a = ($b = self).$instance_exec, $a.$$p = hook.$to_proc(), $a).call($b, example)
          } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
            if ((($a = $scope.get('RSpec').$current_example()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return $scope.get('RSpec').$current_example().$set_exception(e, context)
              } else {
              return self.$raise()
            }
            }else { throw $err; }
          };
        }, nil) && 'instance_exec_with_rescue';
      })(self, null)
    })(self);

    (function($base) {
      var self = $module($base, 'ExampleGroups');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defs(self, '$assign_const', function(group) {
        var self = this, base_name = nil, const_scope = nil, name = nil;

        base_name = self.$base_name_for(group);
        const_scope = self.$constant_scope_for(group);
        name = self.$disambiguate(base_name, const_scope);
        return const_scope.$const_set(name, group);
      });

      Opal.defs(self, '$constant_scope_for', function(group) {
        var self = this, const_scope = nil;

        const_scope = group.$superclass();
        if (const_scope['$==']((($scope.get('Core')).$$scope.get('ExampleGroup')))) {
          const_scope = self};
        return const_scope;
      });

      Opal.defs(self, '$base_name_for', function(group) {
        var $a, $b, TMP_28, self = this, name = nil;

        if ((($a = group.$description()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "Anonymous"};
        name = " "['$+'](group.$description());
        ($a = ($b = name)['$gsub!'], $a.$$p = (TMP_28 = function(){var self = TMP_28.$$s || this, $a;

        return (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$upcase()}, TMP_28.$$s = self, TMP_28), $a).call($b, /[^0-9a-zA-Z]+([0-9a-zA-Z])/);
        name['$lstrip!']();
        name['$gsub!'](/\W/, "");
        name['$gsub!'](/\A([^A-Z]|\z)/, "Nested\\1");
        return name;
      });

      Opal.defs(self, '$disambiguate', function(name, const_scope) {
        var $a, $b, self = this;

        if ((($a = const_scope['$const_defined?'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          return name
        };
        name['$<<']("_2");
        while ((($b = const_scope['$const_defined?'](name)) !== nil && (!$b.$$is_boolean || $b == true))) {
        name['$next!']()};
        return name;
      });
    })(self);
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/instance_method_stasher"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$<', '$to_f', '$!', '$method_defined_directly_on_klass?', '$__send__', '$stashed_method_name', '$private', '$method_handle_for', '$method_defined_on_klass?', '$method_owned_by_klass?', '$method_defined?', '$private_method_defined?', '$owner', '$instance_method', '$===', '$class', '$==']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $InstanceMethodStasher(){};
        var self = $InstanceMethodStasher = $klass($base, $super, 'InstanceMethodStasher', $InstanceMethodStasher);

        var def = self.$$proto, $scope = self.$$scope;

        def.method_is_stashed = def.klass = def.method = def.original_method = def.object = nil;
        def.$initialize = function(object, method) {
          var self = this;

          self.object = object;
          self.method = method;
          self.klass = ((function(self) {
            var $scope = self.$$scope, def = self.$$proto;

            return self
          })(object.$singleton_class()));
          self.original_method = nil;
          return self.method_is_stashed = false;
        };

        self.$attr_reader("original_method");

        if ($scope.get('RUBY_VERSION').$to_f()['$<'](1.9)) {
          def['$method_is_stashed?'] = function() {
            var self = this;

            return self.method_is_stashed;
          };

          def.$stash = function() {
            var $a, $b, self = this;

            if ((($a = ((($b = self['$method_defined_directly_on_klass?']()['$!']()) !== false && $b !== nil) ? $b : self.method_is_stashed)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil};
            self.klass.$__send__("alias_method", self.$stashed_method_name(), self.method);
            return self.method_is_stashed = true;
          };

          def.$stashed_method_name = function() {
            var self = this;

            return "obfuscated_by_rspec_mocks__" + (self.method);
          };

          self.$private("stashed_method_name");

          def.$restore = function() {
            var $a, self = this;

            if ((($a = self.method_is_stashed) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              return nil
            };
            if ((($a = self.klass.$__send__("method_defined?", self.method)) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.klass.$__send__("undef_method", self.method)};
            self.klass.$__send__("alias_method", self.method, self.$stashed_method_name());
            self.klass.$__send__("remove_method", self.$stashed_method_name());
            return self.method_is_stashed = false;
          };
          } else {
          def['$method_is_stashed?'] = function() {
            var self = this;

            return self.original_method['$!']()['$!']();
          };

          def.$stash = function() {
            var $a, self = this;

            if ((($a = self['$method_defined_directly_on_klass?']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil};
            return ((($a = self.original_method) !== false && $a !== nil) ? $a : self.original_method = ((Opal.get('RSpec')).$$scope.get('Mocks')).$method_handle_for(self.object, self.method));
          };

          def.$restore = function() {
            var $a, self = this;

            if ((($a = self.original_method) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              return nil
            };
            if ((($a = self.klass.$__send__("method_defined?", self.method)) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.klass.$__send__("undef_method", self.method)};
            self.klass.$__send__("define_method", self.method, self.original_method);
            return self.original_method = nil;
          };
        };

        self.$private();

        def['$method_defined_directly_on_klass?'] = function() {
          var $a, self = this;

          return ($a = self['$method_defined_on_klass?'](), $a !== false && $a !== nil ?self['$method_owned_by_klass?']() : $a);
        };

        def['$method_defined_on_klass?'] = function(klass) {
          var $a, self = this;

          if (klass == null) {
            klass = self.klass
          }
          return ((($a = klass['$method_defined?'](self.method)) !== false && $a !== nil) ? $a : klass['$private_method_defined?'](self.method));
        };

        return (def['$method_owned_by_klass?'] = function() {
          var $a, self = this, owner = nil;

          owner = self.klass.$instance_method(self.method).$owner();
          if ((($a = $scope.get('Module')['$==='](owner)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            owner = owner.$class()
          };
          return ((($a = owner['$=='](self.klass)) !== false && $a !== nil) ? $a : (self['$method_defined_on_klass?'](owner))['$!']());
        }, nil) && 'method_owned_by_klass?';
      })(self, null)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/method_double"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$new', '$original_method', '$method_handle_for', '$method_name', '$__send__', '$to_proc', '$alias_method', '$===', '$private_method_defined?', '$object_singleton_class', '$protected_method_defined?', '$visibility', '$stash', '$define_proxy_method', '$save_original_method!', '$class_exec', '$define_method', '$proxy_method_invoked', '$message_received', '$method_is_stashed?', '$restore', '$restore_original_visibility', '$method_defined?', '$each', '$verify_messages_received', '$expectations', '$restore_original_method', '$clear', '$stubs', '$configure_method', '$message_expectation_class', '$<<', '$unshift', '$setup_simple_method_double', '$any?', '$add_stub', '$empty?', '$raise_method_not_stubbed_error', '$reset', '$delete', '$raise']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $MethodDouble(){};
        var self = $MethodDouble = $klass($base, $super, 'MethodDouble', $MethodDouble);

        var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_6, TMP_7, TMP_8;

        def.original_method = def.method_stasher = def.proxy = def.object = def.method_name = def.method_is_proxied = def.original_visibility = nil;
        self.$attr_reader("method_name", "object", "expectations", "stubs");

        def.$initialize = function(object, method_name, proxy) {
          var self = this;

          self.method_name = method_name;
          self.object = object;
          self.proxy = proxy;
          self.original_visibility = nil;
          self.method_stasher = $scope.get('InstanceMethodStasher').$new(object, method_name);
          self.method_is_proxied = false;
          self.expectations = [];
          return self.stubs = [];
        };

        def.$original_method = function() {
          var $a, $b, $c, $d, TMP_1, self = this;

          return ((($a = self.original_method) !== false && $a !== nil) ? $a : self.original_method = ((($b = ((($c = self.method_stasher.$original_method()) !== false && $c !== nil) ? $c : self.proxy.$method_handle_for(self.$method_name()))) !== false && $b !== nil) ? $b : ($c = ($d = $scope.get('Proc')).$new, $c.$$p = (TMP_1 = function(args){var self = TMP_1.$$s || this, block, $a, $b;
            if (self.object == null) self.object = nil;
            if (self.method_name == null) self.method_name = nil;
args = $slice.call(arguments, 0);
            block = TMP_1.$$p || nil, TMP_1.$$p = null;
          return ($a = ($b = self.object).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, ["method_missing", self.method_name].concat(args))}, TMP_1.$$s = self, TMP_1), $c).call($d)));
        };

        self.$alias_method("save_original_method!", "original_method");

        def.$visibility = function() {
          var $a, self = this;

          if ((($a = $scope.get('TestDouble')['$==='](self.object)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "public"
          } else if ((($a = self.$object_singleton_class()['$private_method_defined?'](self.method_name)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "private"
          } else if ((($a = self.$object_singleton_class()['$protected_method_defined?'](self.method_name)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "protected"
            } else {
            return "public"
          };
        };

        def.$object_singleton_class = function() {
          var self = this;

          return (function(self) {
            var $scope = self.$$scope, def = self.$$proto;

            return self
          })(self.object.$singleton_class());
        };

        def.$configure_method = function() {
          var $a, self = this;

          self.original_visibility = [self.$visibility(), self.$method_name()];
          if ((($a = self.method_is_proxied) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.method_stasher.$stash()
          };
          return self.$define_proxy_method();
        };

        def.$define_proxy_method = function() {
          var $a, $b, TMP_2, self = this;

          if ((($a = self.method_is_proxied) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          self['$save_original_method!']();
          ($a = ($b = self.$object_singleton_class()).$class_exec, $a.$$p = (TMP_2 = function(method_double, method_name, visibility){var self = TMP_2.$$s || this, $a, $b, TMP_3;
if (method_double == null) method_double = nil;if (method_name == null) method_name = nil;if (visibility == null) visibility = nil;
          ($a = ($b = self).$define_method, $a.$$p = (TMP_3 = function(args){var self = TMP_3.$$s || this, block, $a, $b;
args = $slice.call(arguments, 0);
              block = TMP_3.$$p || nil, TMP_3.$$p = null;
            return ($a = ($b = method_double).$proxy_method_invoked, $a.$$p = block.$to_proc(), $a).apply($b, [self].concat(args))}, TMP_3.$$s = self, TMP_3), $a).call($b, method_name);
            return self.$__send__(visibility, method_name);}, TMP_2.$$s = self, TMP_2), $a).call($b, self, self.$method_name(), self.$visibility());
          return self.method_is_proxied = true;
        };

        def.$proxy_method_invoked = TMP_4 = function(obj, args) {
          var $a, $b, self = this, $iter = TMP_4.$$p, block = $iter || nil;

          args = $slice.call(arguments, 1);
          TMP_4.$$p = null;
          return ($a = ($b = self.proxy).$message_received, $a.$$p = block.$to_proc(), $a).apply($b, [self.$method_name()].concat(args));
        };

        def.$restore_original_method = function() {
          var $a, self = this;

          if ((($a = self.method_is_proxied) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil
          };
          self.$object_singleton_class().$__send__("remove_method", self.method_name);
          if ((($a = self.method_stasher['$method_is_stashed?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.method_stasher.$restore()};
          self.$restore_original_visibility();
          return self.method_is_proxied = false;
        };

        def.$restore_original_visibility = function() {
          var $a, $b, $c, self = this;

          if ((($a = ($b = self.original_visibility, $b !== false && $b !== nil ?(((($c = self.$object_singleton_class()['$method_defined?'](self.method_name)) !== false && $c !== nil) ? $c : self.$object_singleton_class()['$private_method_defined?'](self.method_name))) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil
          };
          return ($a = self.$object_singleton_class()).$__send__.apply($a, [].concat(self.original_visibility));
        };

        def.$verify = function() {
          var $a, $b, TMP_5, self = this;

          return ($a = ($b = self.$expectations()).$each, $a.$$p = (TMP_5 = function(e){var self = TMP_5.$$s || this;
if (e == null) e = nil;
          return e.$verify_messages_received()}, TMP_5.$$s = self, TMP_5), $a).call($b);
        };

        def.$reset = function() {
          var self = this;

          self.$restore_original_method();
          return self.$clear();
        };

        def.$clear = function() {
          var self = this;

          self.$expectations().$clear();
          return self.$stubs().$clear();
        };

        def.$message_expectation_class = function() {
          var self = this;

          return $scope.get('MessageExpectation');
        };

        def.$add_expectation = TMP_6 = function(error_generator, expectation_ordering, expected_from, opts) {
          var $a, $b, self = this, $iter = TMP_6.$$p, implementation = $iter || nil, expectation = nil;

          TMP_6.$$p = null;
          self.$configure_method();
          expectation = ($a = ($b = self.$message_expectation_class()).$new, $a.$$p = implementation.$to_proc(), $a).call($b, error_generator, expectation_ordering, expected_from, self, 1, opts);
          self.$expectations()['$<<'](expectation);
          return expectation;
        };

        def.$build_expectation = function(error_generator, expectation_ordering) {
          var self = this, expected_from = nil;

          expected_from = $scope.get('IGNORED_BACKTRACE_LINE');
          return self.$message_expectation_class().$new(error_generator, expectation_ordering, expected_from, self);
        };

        def.$add_stub = TMP_7 = function(error_generator, expectation_ordering, expected_from, opts) {
          var $a, $b, self = this, $iter = TMP_7.$$p, implementation = $iter || nil, stub = nil;

          if (opts == null) {
            opts = $hash2([], {})
          }
          TMP_7.$$p = null;
          self.$configure_method();
          stub = ($a = ($b = self.$message_expectation_class()).$new, $a.$$p = implementation.$to_proc(), $a).call($b, error_generator, expectation_ordering, expected_from, self, "any", opts);
          self.$stubs().$unshift(stub);
          return stub;
        };

        def.$add_simple_stub = function(method_name, response) {
          var self = this;

          return self.$setup_simple_method_double(method_name, response, self.$stubs());
        };

        def.$add_simple_expectation = function(method_name, response, error_generator, backtrace_line) {
          var self = this;

          return self.$setup_simple_method_double(method_name, response, self.$expectations(), error_generator, backtrace_line);
        };

        def.$setup_simple_method_double = function(method_name, response, collection, error_generator, backtrace_line) {
          var self = this, me = nil;

          if (error_generator == null) {
            error_generator = nil
          }
          if (backtrace_line == null) {
            backtrace_line = nil
          }
          self.$define_proxy_method();
          me = $scope.get('SimpleMessageExpectation').$new(method_name, response, error_generator, backtrace_line);
          collection.$unshift(me);
          return me;
        };

        def.$add_default_stub = TMP_8 = function(args) {
          var $a, $b, self = this, $iter = TMP_8.$$p, implementation = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_8.$$p = null;
          if ((($a = self.$stubs()['$any?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          return ($a = ($b = self).$add_stub, $a.$$p = implementation.$to_proc(), $a).apply($b, [].concat(args));
        };

        def.$remove_stub = function() {
          var $a, self = this;

          if ((($a = self.$stubs()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$raise_method_not_stubbed_error()};
          if ((($a = self.$expectations()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$reset()
            } else {
            return self.$stubs().$clear()
          };
        };

        def.$remove_single_stub = function(stub) {
          var $a, $b, self = this;

          self.$stubs().$delete(stub);
          if ((($a = ($b = self.$stubs()['$empty?'](), $b !== false && $b !== nil ?self.$expectations()['$empty?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$restore_original_method()
            } else {
            return nil
          };
        };

        def.$raise_method_not_stubbed_error = function() {
          var self = this;

          return self.$raise($scope.get('MockExpectationError'), "The method `" + (self.$method_name()) + "` was not stubbed or was already unstubbed");
        };

        return Opal.cdecl($scope, 'IGNORED_BACKTRACE_LINE', "this backtrace line is ignored");
      })(self, null)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/argument_matchers"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$===', '$==', '$=~', '$include?', '$all?', '$has_key?', '$[]', '$sub', '$inspect', '$none?', '$superset?', '$new', '$join', '$respond_to?', '$matches?', '$instance_of?', '$kind_of?', '$anythingize_lonely_keys', '$first', '$count', '$alias_method', '$private', '$class', '$last', '$delete_at', '$each', '$[]=', '$anything']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'ArgumentMatchers');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $AnyArgsMatcher(){};
          var self = $AnyArgsMatcher = $klass($base, $super, 'AnyArgsMatcher', $AnyArgsMatcher);

          var def = self.$$proto, $scope = self.$$scope;

          return (def.$description = function() {
            var self = this;

            return "any args";
          }, nil) && 'description'
        })(self, null);

        (function($base, $super) {
          function $AnyArgMatcher(){};
          var self = $AnyArgMatcher = $klass($base, $super, 'AnyArgMatcher', $AnyArgMatcher);

          var def = self.$$proto, $scope = self.$$scope;

          def.$initialize = function(ignore) {
            var self = this;

            return nil;
          };

          return (def['$=='] = function(other) {
            var self = this;

            return true;
          }, nil) && '==';
        })(self, null);

        (function($base, $super) {
          function $NoArgsMatcher(){};
          var self = $NoArgsMatcher = $klass($base, $super, 'NoArgsMatcher', $NoArgsMatcher);

          var def = self.$$proto, $scope = self.$$scope;

          return (def.$description = function() {
            var self = this;

            return "no args";
          }, nil) && 'description'
        })(self, null);

        (function($base, $super) {
          function $RegexpMatcher(){};
          var self = $RegexpMatcher = $klass($base, $super, 'RegexpMatcher', $RegexpMatcher);

          var def = self.$$proto, $scope = self.$$scope;

          def.regexp = nil;
          def.$initialize = function(regexp) {
            var self = this;

            return self.regexp = regexp;
          };

          return (def['$=='] = function(value) {
            var $a, self = this;

            if ((($a = $scope.get('Regexp')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return value['$=='](self.regexp)
              } else {
              return value['$=~'](self.regexp)
            };
          }, nil) && '==';
        })(self, null);

        (function($base, $super) {
          function $BooleanMatcher(){};
          var self = $BooleanMatcher = $klass($base, $super, 'BooleanMatcher', $BooleanMatcher);

          var def = self.$$proto, $scope = self.$$scope;

          def.$initialize = function(ignore) {
            var self = this;

            return nil;
          };

          return (def['$=='] = function(value) {
            var self = this;

            return [true, false]['$include?'](value);
          }, nil) && '==';
        })(self, null);

        (function($base, $super) {
          function $HashIncludingMatcher(){};
          var self = $HashIncludingMatcher = $klass($base, $super, 'HashIncludingMatcher', $HashIncludingMatcher);

          var def = self.$$proto, $scope = self.$$scope;

          def.expected = nil;
          def.$initialize = function(expected) {
            var self = this;

            return self.expected = expected;
          };

          def['$=='] = function(actual) {
            var $a, $b, TMP_1, self = this;

            try {
            return ($a = ($b = self.expected)['$all?'], $a.$$p = (TMP_1 = function(k, v){var self = TMP_1.$$s || this, $a;
if (k == null) k = nil;if (v == null) v = nil;
              return ($a = actual['$has_key?'](k), $a !== false && $a !== nil ?v['$=='](actual['$[]'](k)) : $a)}, TMP_1.$$s = self, TMP_1), $a).call($b)
            } catch ($err) {if (Opal.rescue($err, [$scope.get('NoMethodError')])) {
              return false
              }else { throw $err; }
            };
          };

          return (def.$description = function() {
            var self = this;

            return "hash_including(" + (self.expected.$inspect().$sub(/^\{/, "").$sub(/\}$/, "")) + ")";
          }, nil) && 'description';
        })(self, null);

        (function($base, $super) {
          function $HashExcludingMatcher(){};
          var self = $HashExcludingMatcher = $klass($base, $super, 'HashExcludingMatcher', $HashExcludingMatcher);

          var def = self.$$proto, $scope = self.$$scope;

          def.expected = nil;
          def.$initialize = function(expected) {
            var self = this;

            return self.expected = expected;
          };

          def['$=='] = function(actual) {
            var $a, $b, TMP_2, self = this;

            try {
            return ($a = ($b = self.expected)['$none?'], $a.$$p = (TMP_2 = function(k, v){var self = TMP_2.$$s || this, $a;
if (k == null) k = nil;if (v == null) v = nil;
              return ($a = actual['$has_key?'](k), $a !== false && $a !== nil ?v['$=='](actual['$[]'](k)) : $a)}, TMP_2.$$s = self, TMP_2), $a).call($b)
            } catch ($err) {if (Opal.rescue($err, [$scope.get('NoMethodError')])) {
              return false
              }else { throw $err; }
            };
          };

          return (def.$description = function() {
            var self = this;

            return "hash_not_including(" + (self.expected.$inspect().$sub(/^\{/, "").$sub(/\}$/, "")) + ")";
          }, nil) && 'description';
        })(self, null);

        (function($base, $super) {
          function $ArrayIncludingMatcher(){};
          var self = $ArrayIncludingMatcher = $klass($base, $super, 'ArrayIncludingMatcher', $ArrayIncludingMatcher);

          var def = self.$$proto, $scope = self.$$scope;

          def.expected = nil;
          def.$initialize = function(expected) {
            var self = this;

            return self.expected = expected;
          };

          def['$=='] = function(actual) {
            var self = this;

            return $scope.get('Set').$new(actual)['$superset?']($scope.get('Set').$new(self.expected));
          };

          return (def.$description = function() {
            var self = this;

            return "array_including(" + (self.expected.$join(",")) + ")";
          }, nil) && 'description';
        })(self, null);

        (function($base, $super) {
          function $DuckTypeMatcher(){};
          var self = $DuckTypeMatcher = $klass($base, $super, 'DuckTypeMatcher', $DuckTypeMatcher);

          var def = self.$$proto, $scope = self.$$scope;

          def.methods_to_respond_to = nil;
          def.$initialize = function(methods_to_respond_to) {
            var self = this;

            methods_to_respond_to = $slice.call(arguments, 0);
            return self.methods_to_respond_to = methods_to_respond_to;
          };

          return (def['$=='] = function(value) {
            var $a, $b, TMP_3, self = this;

            return ($a = ($b = self.methods_to_respond_to)['$all?'], $a.$$p = (TMP_3 = function(message){var self = TMP_3.$$s || this;
if (message == null) message = nil;
            return value['$respond_to?'](message)}, TMP_3.$$s = self, TMP_3), $a).call($b);
          }, nil) && '==';
        })(self, null);

        (function($base, $super) {
          function $MatcherMatcher(){};
          var self = $MatcherMatcher = $klass($base, $super, 'MatcherMatcher', $MatcherMatcher);

          var def = self.$$proto, $scope = self.$$scope;

          def.matcher = nil;
          def.$initialize = function(matcher) {
            var self = this;

            return self.matcher = matcher;
          };

          return (def['$=='] = function(value) {
            var self = this;

            return self.matcher['$matches?'](value);
          }, nil) && '==';
        })(self, null);

        (function($base, $super) {
          function $EqualityProxy(){};
          var self = $EqualityProxy = $klass($base, $super, 'EqualityProxy', $EqualityProxy);

          var def = self.$$proto, $scope = self.$$scope;

          def.given = nil;
          def.$initialize = function(given) {
            var self = this;

            return self.given = given;
          };

          return (def['$=='] = function(expected) {
            var self = this;

            return self.given['$=='](expected);
          }, nil) && '==';
        })(self, null);

        (function($base, $super) {
          function $InstanceOf(){};
          var self = $InstanceOf = $klass($base, $super, 'InstanceOf', $InstanceOf);

          var def = self.$$proto, $scope = self.$$scope;

          def.klass = nil;
          def.$initialize = function(klass) {
            var self = this;

            return self.klass = klass;
          };

          return (def['$=='] = function(actual) {
            var self = this;

            return actual['$instance_of?'](self.klass);
          }, nil) && '==';
        })(self, null);

        (function($base, $super) {
          function $KindOf(){};
          var self = $KindOf = $klass($base, $super, 'KindOf', $KindOf);

          var def = self.$$proto, $scope = self.$$scope;

          def.klass = nil;
          def.$initialize = function(klass) {
            var self = this;

            return self.klass = klass;
          };

          return (def['$=='] = function(actual) {
            var self = this;

            return actual['$kind_of?'](self.klass);
          }, nil) && '==';
        })(self, null);

        Opal.defn(self, '$any_args', function() {
          var self = this;

          return $scope.get('AnyArgsMatcher').$new();
        });

        Opal.defn(self, '$anything', function() {
          var self = this;

          return $scope.get('AnyArgMatcher').$new(nil);
        });

        Opal.defn(self, '$no_args', function() {
          var self = this;

          return $scope.get('NoArgsMatcher').$new();
        });

        Opal.defn(self, '$duck_type', function(args) {
          var $a, self = this;

          args = $slice.call(arguments, 0);
          return ($a = $scope.get('DuckTypeMatcher')).$new.apply($a, [].concat(args));
        });

        Opal.defn(self, '$boolean', function() {
          var self = this;

          return $scope.get('BooleanMatcher').$new(nil);
        });

        Opal.defn(self, '$hash_including', function(args) {
          var $a, self = this;

          args = $slice.call(arguments, 0);
          return $scope.get('HashIncludingMatcher').$new(($a = self).$anythingize_lonely_keys.apply($a, [].concat(args)));
        });

        Opal.defn(self, '$array_including', function(args) {
          var $a, $b, self = this, actually_an_array = nil;

          args = $slice.call(arguments, 0);
          actually_an_array = (function() {if ((($a = ($b = $scope.get('Array')['$==='](args.$first()), $b !== false && $b !== nil ?args.$count()['$=='](1) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return args.$first()
            } else {
            return args
          }; return nil; })();
          return $scope.get('ArrayIncludingMatcher').$new(actually_an_array);
        });

        Opal.defn(self, '$hash_excluding', function(args) {
          var $a, self = this;

          args = $slice.call(arguments, 0);
          return $scope.get('HashExcludingMatcher').$new(($a = self).$anythingize_lonely_keys.apply($a, [].concat(args)));
        });

        self.$alias_method("hash_not_including", "hash_excluding");

        Opal.defn(self, '$instance_of', function(klass) {
          var self = this;

          return $scope.get('InstanceOf').$new(klass);
        });

        self.$alias_method("an_instance_of", "instance_of");

        Opal.defn(self, '$kind_of', function(klass) {
          var self = this;

          return $scope.get('KindOf').$new(klass);
        });

        self.$alias_method("a_kind_of", "kind_of");

        self.$private();

        Opal.defn(self, '$anythingize_lonely_keys', function(args) {
          var $a, $b, TMP_4, self = this, hash = nil;

          args = $slice.call(arguments, 0);
          hash = (function() {if (args.$last().$class()['$==']($scope.get('Hash'))) {
            return args.$delete_at(-1)
            } else {
            return $hash2([], {})
          }; return nil; })();
          ($a = ($b = args).$each, $a.$$p = (TMP_4 = function(arg){var self = TMP_4.$$s || this;
if (arg == null) arg = nil;
          return hash['$[]='](arg, self.$anything())}, TMP_4.$$s = self, TMP_4), $a).call($b);
          return hash;
        });
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/object_reference"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$===', '$new', '$raise', '$inspect', '$name', '$!', '$object', '$private', '$original_value', '$original']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ObjectReference(){};
        var self = $ObjectReference = $klass($base, $super, 'ObjectReference', $ObjectReference);

        var def = self.$$proto, $scope = self.$$scope;

        return (Opal.defs(self, '$for', function(object_module_or_name, allow_direct_object_refs) {
          var self = this, $case = nil;

          if (allow_direct_object_refs == null) {
            allow_direct_object_refs = false
          }
          return (function() {$case = object_module_or_name;if ($scope.get('Module')['$===']($case)) {return $scope.get('DirectModuleReference').$new(object_module_or_name)}else if ($scope.get('String')['$===']($case)) {return $scope.get('NamedObjectReference').$new(object_module_or_name)}else {if (allow_direct_object_refs !== false && allow_direct_object_refs !== nil) {
            return $scope.get('DirectObjectReference').$new(object_module_or_name)
            } else {
            return self.$raise($scope.get('ArgumentError'), "Module or String expected, got " + (object_module_or_name.$inspect()))
          }}})();
        }), nil) && 'for'
      })(self, null);

      (function($base, $super) {
        function $DirectObjectReference(){};
        var self = $DirectObjectReference = $klass($base, $super, 'DirectObjectReference', $DirectObjectReference);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        def.object = nil;
        def.$initialize = function(object) {
          var self = this;

          return self.object = object;
        };

        def.$description = function() {
          var self = this;

          return self.object.$inspect();
        };

        def.$const_to_replace = function() {
          var self = this;

          return self.$raise($scope.get('ArgumentError'), "Can not perform constant replacement with an object.");
        };

        def['$defined?'] = function() {
          var self = this;

          return true;
        };

        return (def.$when_loaded = TMP_1 = function() {
          var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

          TMP_1.$$p = null;
          return $a = Opal.yield1($yield, self.object), $a === $breaker ? $a : $a;
        }, nil) && 'when_loaded';
      })(self, null);

      (function($base, $super) {
        function $DirectModuleReference(){};
        var self = $DirectModuleReference = $klass($base, $super, 'DirectModuleReference', $DirectModuleReference);

        var def = self.$$proto, $scope = self.$$scope;

        def.object = nil;
        def.$const_to_replace = function() {
          var self = this;

          return self.object.$name();
        };

        return Opal.defn(self, '$description', def.$const_to_replace);
      })(self, $scope.get('DirectObjectReference'));

      (function($base, $super) {
        function $NamedObjectReference(){};
        var self = $NamedObjectReference = $klass($base, $super, 'NamedObjectReference', $NamedObjectReference);

        var def = self.$$proto, $scope = self.$$scope, TMP_2;

        def.const_name = def.object = nil;
        def.$initialize = function(const_name) {
          var self = this;

          return self.const_name = const_name;
        };

        def['$defined?'] = function() {
          var self = this;

          return self.$object()['$!']()['$!']();
        };

        def.$const_to_replace = function() {
          var self = this;

          return self.const_name;
        };

        Opal.defn(self, '$description', def.$const_to_replace);

        def.$when_loaded = TMP_2 = function() {
          var $a, self = this, $iter = TMP_2.$$p, block = $iter || nil;

          TMP_2.$$p = null;
          if ((($a = self.$object()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $a = Opal.yield1(block, self.$object()), $a === $breaker ? $a : $a
            } else {
            return nil
          };
        };

        self.$private();

        return (def.$object = function() {
          var $a, self = this;

          return ((($a = self.object) !== false && $a !== nil) ? $a : self.object = $scope.get('Constant').$original(self.const_name).$original_value());
        }, nil) && 'object';
      })(self, null);
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/example_methods"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$declare_double', '$for', '$declare_verifying_double', '$warn_about_expectations=', '$proxy_for', '$space', '$stub', '$hide', '$new', '$to_proc', '$class_exec', '$method_defined?', '$private', '$verify_doubled_constant_names?', '$configuration', '$!', '$defined?', '$raise', '$+', '$name', '$===', '$last', '$<<']);
  self.$require("rspec/mocks/object_reference");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'ExampleMethods');

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        self.$include((((($scope.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('ArgumentMatchers')));

        Opal.defn(self, '$double', function(args) {
          var $a, self = this;

          args = $slice.call(arguments, 0);
          return ($a = self).$declare_double.apply($a, [$scope.get('Mock')].concat(args));
        });

        Opal.defn(self, '$instance_double', function(doubled_class, args) {
          var $a, self = this, ref = nil;

          args = $slice.call(arguments, 1);
          ref = $scope.get('ObjectReference').$for(doubled_class);
          return ($a = self).$declare_verifying_double.apply($a, [$scope.get('InstanceVerifyingDouble'), ref].concat(args));
        });

        Opal.defn(self, '$class_double', function(doubled_class, args) {
          var $a, self = this, ref = nil;

          args = $slice.call(arguments, 1);
          ref = $scope.get('ObjectReference').$for(doubled_class);
          return ($a = self).$declare_verifying_double.apply($a, [$scope.get('ClassVerifyingDouble'), ref].concat(args));
        });

        Opal.defn(self, '$object_double', function(object_or_name, args) {
          var $a, self = this, ref = nil;

          args = $slice.call(arguments, 1);
          ref = $scope.get('ObjectReference').$for(object_or_name, "allow_direct_object_refs");
          return ($a = self).$declare_verifying_double.apply($a, [$scope.get('ObjectVerifyingDouble'), ref].concat(args));
        });

        Opal.defn(self, '$allow_message_expectations_on_nil', function() {
          var $a, $b, self = this;

          return (($a = [false]), $b = (($scope.get('RSpec')).$$scope.get('Mocks')).$space().$proxy_for(nil), $b['$warn_about_expectations='].apply($b, $a), $a[$a.length-1]);
        });

        Opal.defn(self, '$stub_const', function(constant_name, value, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {})
          }
          return $scope.get('ConstantMutator').$stub(constant_name, value, options);
        });

        Opal.defn(self, '$hide_const', function(constant_name) {
          var self = this;

          return $scope.get('ConstantMutator').$hide(constant_name);
        });

        Opal.defn(self, '$have_received', TMP_1 = function(method_name) {
          var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

          TMP_1.$$p = null;
          return ($a = ($b = (($scope.get('Matchers')).$$scope.get('HaveReceived'))).$new, $a.$$p = block.$to_proc(), $a).call($b, method_name);
        });

        Opal.defs(self, '$included', function(klass) {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = klass).$class_exec, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a;

          if ((($a = self['$method_defined?']("expect")) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$include($scope.get('ExpectHost'))
            }}, TMP_2.$$s = self, TMP_2), $a).call($b);
        });

        self.$private();

        Opal.defn(self, '$declare_verifying_double', function(type, ref, args) {
          var $a, $b, self = this;

          args = $slice.call(arguments, 2);
          if ((($a = ($b = (($scope.get('RSpec')).$$scope.get('Mocks')).$configuration()['$verify_doubled_constant_names?'](), $b !== false && $b !== nil ?ref['$defined?']()['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$raise($scope.get('NameError'), ((("") + (ref.$name())) + " is not a defined constant. ")['$+']("Perhaps you misspelt it? ")['$+']("Disable check with verify_doubled_constant_names configuration option."))};
          return ($a = self).$declare_double.apply($a, [type, ref].concat(args));
        });

        Opal.defn(self, '$declare_double', function(type, args) {
          var $a, self = this;

          args = $slice.call(arguments, 1);
          if ((($a = $scope.get('Hash')['$==='](args.$last())) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            args['$<<']($hash2([], {}))
          };
          return ($a = type).$new.apply($a, [].concat(args));
        });

        (function($base) {
          var self = $module($base, 'ExpectHost');

          var def = self.$$proto, $scope = self.$$scope;

          nil
        })(self);
      })(self)
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/proxy"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$==', '$orig_object', '$object', '$message', '$expectation_ordering', '$space', '$[]=', '$attr_reader', '$method_double_for', '$null_object?', '$!', '$add_default_stub', '$add_expectation', '$to_proc', '$add_simple_expectation', '$build_expectation', '$any?', '$expectations', '$raise_expectation_on_mocked_method', '$stubs', '$raise_expectation_on_unstubbed_method', '$each', '$matches?', '$invoke', '$call', '$matches_name_but_not_args', '$raise_unexpected_message_args_error', '$add_stub', '$add_simple_stub', '$remove_stub', '$remove_single_stub', '$each_value', '$verify', '$reset', '$clear', '$detect', '$negative_expectation_for?', '$invoked', '$<<', '$record_message_received', '$find_matching_expectation', '$find_matching_method_stub', '$called_max_times?', '$actual_received_count_matters?', '$increase_actual_received_count!', '$find_almost_matching_expectation', '$expected_messages_received?', '$advise', '$has_negative_expectation?', '$find_almost_matching_stub', '$raise_missing_default_stub_error', '$===', '$__send__', '$superclass', '$raise_unexpected_message_error', '$private', '$[]', '$to_sym', '$find_best_matching_expectation_for', '$find', '$any_instance_class_recorder_observing_method?', '$class', '$build_alias_method_name', '$any_instance_recorder_for', '$method_handle_for', '$configure_method', '$already_observing?', '$nil?']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Proxy(){};
        var self = $Proxy = $klass($base, $super, 'Proxy', $Proxy);

        var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, TMP_3, TMP_5, TMP_8, TMP_11, TMP_14, TMP_15, TMP_19;

        def.null_object = def.object = def.error_generator = def.expectation_ordering = def.messages_received = def.method_doubles = def.order_group = nil;
        Opal.cdecl($scope, 'SpecificMessage', ($a = ($b = $scope.get('Struct')).$new, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

        return (Opal.defn(self, '$==', function(expectation) {
            var $a, self = this;

            return (($a = expectation.$orig_object()['$=='](self.$object())) ? expectation.$message()['$=='](self.$message()) : $a);
          }), nil) && '=='}, TMP_1.$$s = self, TMP_1), $a).call($b, "object", "message"));

        def.$initialize = function(object, order_group, name, options) {
          var $a, $b, TMP_2, self = this;

          if (name == null) {
            name = nil
          }
          if (options == null) {
            options = $hash2([], {})
          }
          self.object = object;
          self.order_group = order_group;
          self.name = name;
          self.error_generator = $scope.get('ErrorGenerator').$new(object, name);
          self.expectation_ordering = (($scope.get('RSpec')).$$scope.get('Mocks')).$space().$expectation_ordering();
          self.messages_received = [];
          self.options = options;
          self.null_object = false;
          return self.method_doubles = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_2 = function(h, k){var self = TMP_2.$$s || this;
            if (self.object == null) self.object = nil;
if (h == null) h = nil;if (k == null) k = nil;
          return h['$[]='](k, $scope.get('MethodDouble').$new(self.object, k, self))}, TMP_2.$$s = self, TMP_2), $a).call($b);
        };

        self.$attr_reader("object");

        def['$null_object?'] = function() {
          var self = this;

          return self.null_object;
        };

        def.$as_null_object = function() {
          var self = this;

          self.null_object = true;
          return self.object;
        };

        def.$method_handle_for = function(message) {
          var self = this;

          return nil;
        };

        def.$add_message_expectation = TMP_3 = function(location, method_name, opts) {
          var $a, $b, TMP_4, $c, self = this, $iter = TMP_3.$$p, block = $iter || nil, meth_double = nil;

          if (opts == null) {
            opts = $hash2([], {})
          }
          TMP_3.$$p = null;
          meth_double = self.$method_double_for(method_name);
          if ((($a = ($b = self['$null_object?'](), $b !== false && $b !== nil ?block['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            ($a = ($b = meth_double).$add_default_stub, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;
              if (self.object == null) self.object = nil;

            return self.object}, TMP_4.$$s = self, TMP_4), $a).call($b, self.error_generator, self.expectation_ordering, location, opts)};
          return ($a = ($c = meth_double).$add_expectation, $a.$$p = block.$to_proc(), $a).call($c, self.error_generator, self.expectation_ordering, location, opts);
        };

        def.$add_simple_expectation = function(method_name, response, location) {
          var self = this;

          return self.$method_double_for(method_name).$add_simple_expectation(method_name, response, self.error_generator, location);
        };

        def.$build_expectation = function(method_name) {
          var self = this, meth_double = nil;

          meth_double = self.$method_double_for(method_name);
          return meth_double.$build_expectation(self.error_generator, self.expectation_ordering);
        };

        def.$replay_received_message_on = TMP_5 = function(expectation) {
          var $a, $b, TMP_6, self = this, $iter = TMP_5.$$p, block = $iter || nil, expected_method_name = nil, meth_double = nil;

          TMP_5.$$p = null;
          expected_method_name = expectation.$message();
          meth_double = self.$method_double_for(expected_method_name);
          if ((($a = meth_double.$expectations()['$any?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.error_generator.$raise_expectation_on_mocked_method(expected_method_name)};
          if ((($a = ((($b = self['$null_object?']()) !== false && $b !== nil) ? $b : meth_double.$stubs()['$any?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.error_generator.$raise_expectation_on_unstubbed_method(expected_method_name)
          };
          return ($a = ($b = self.messages_received).$each, $a.$$p = (TMP_6 = function(actual_method_name, args, _){var self = TMP_6.$$s || this, $a, $b;
if (actual_method_name == null) actual_method_name = nil;if (args == null) args = nil;if (_ == null) _ = nil;
          if ((($a = ($b = expectation)['$matches?'].apply($b, [actual_method_name].concat(args))) !== nil && (!$a.$$is_boolean || $a == true))) {
              expectation.$invoke(nil);
              if (block !== false && block !== nil) {
                return ($a = block).$call.apply($a, [].concat(args))
                } else {
                return nil
              };
              } else {
              return nil
            }}, TMP_6.$$s = self, TMP_6), $a).call($b);
        };

        def.$check_for_unexpected_arguments = function(expectation) {
          var $a, $b, TMP_7, self = this;

          return ($a = ($b = self.messages_received).$each, $a.$$p = (TMP_7 = function(method_name, args, _){var self = TMP_7.$$s || this, $a, $b;
if (method_name == null) method_name = nil;if (args == null) args = nil;if (_ == null) _ = nil;
          if ((($a = ($b = expectation).$matches_name_but_not_args.apply($b, [method_name].concat(args))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return ($a = self).$raise_unexpected_message_args_error.apply($a, [expectation].concat(args))
              } else {
              return nil
            }}, TMP_7.$$s = self, TMP_7), $a).call($b);
        };

        def.$add_stub = TMP_8 = function(location, method_name, opts) {
          var $a, $b, self = this, $iter = TMP_8.$$p, implementation = $iter || nil;

          if (opts == null) {
            opts = $hash2([], {})
          }
          TMP_8.$$p = null;
          return ($a = ($b = self.$method_double_for(method_name)).$add_stub, $a.$$p = implementation.$to_proc(), $a).call($b, self.error_generator, self.expectation_ordering, location, opts);
        };

        def.$add_simple_stub = function(method_name, response) {
          var self = this;

          return self.$method_double_for(method_name).$add_simple_stub(method_name, response);
        };

        def.$remove_stub = function(method_name) {
          var self = this;

          return self.$method_double_for(method_name).$remove_stub();
        };

        def.$remove_single_stub = function(method_name, stub) {
          var self = this;

          return self.$method_double_for(method_name).$remove_single_stub(stub);
        };

        def.$verify = function() {
          var $a, $b, TMP_9, self = this;

          try {
          return ($a = ($b = self.method_doubles).$each_value, $a.$$p = (TMP_9 = function(d){var self = TMP_9.$$s || this;
if (d == null) d = nil;
          return d.$verify()}, TMP_9.$$s = self, TMP_9), $a).call($b)
          } finally {
          self.$reset()
          };
        };

        def.$reset = function() {
          var $a, $b, TMP_10, self = this;

          ($a = ($b = self.method_doubles).$each_value, $a.$$p = (TMP_10 = function(d){var self = TMP_10.$$s || this;
if (d == null) d = nil;
          return d.$reset()}, TMP_10.$$s = self, TMP_10), $a).call($b);
          return self.messages_received.$clear();
        };

        def['$received_message?'] = TMP_11 = function(method_name, args) {
          var $a, $b, TMP_12, self = this, $iter = TMP_11.$$p, block = $iter || nil;

          args = $slice.call(arguments, 1);
          TMP_11.$$p = null;
          return ($a = ($b = self.messages_received)['$any?'], $a.$$p = (TMP_12 = function(array){var self = TMP_12.$$s || this;
if (array == null) array = nil;
          return array['$==']([method_name, args, block])}, TMP_12.$$s = self, TMP_12), $a).call($b);
        };

        def['$has_negative_expectation?'] = function(message) {
          var $a, $b, TMP_13, self = this;

          return ($a = ($b = self.$method_double_for(message).$expectations()).$detect, $a.$$p = (TMP_13 = function(expectation){var self = TMP_13.$$s || this;
if (expectation == null) expectation = nil;
          return expectation['$negative_expectation_for?'](message)}, TMP_13.$$s = self, TMP_13), $a).call($b);
        };

        def.$record_message_received = TMP_14 = function(message, args) {
          var self = this, $iter = TMP_14.$$p, block = $iter || nil;

          args = $slice.call(arguments, 1);
          TMP_14.$$p = null;
          self.order_group.$invoked($scope.get('SpecificMessage').$new(self.$object(), message));
          return self.messages_received['$<<']([message, args, block]);
        };

        def.$message_received = TMP_15 = function(message, args) {
          var $a, $b, $c, $d, $e, $f, $g, $h, $i, $j, $k, $l, $m, $n, $o, $p, self = this, $iter = TMP_15.$$p, block = $iter || nil, expectation = nil, stub = nil;

          args = $slice.call(arguments, 1);
          TMP_15.$$p = null;
          ($a = ($b = self).$record_message_received, $a.$$p = block.$to_proc(), $a).apply($b, [message].concat(args));
          expectation = ($a = self).$find_matching_expectation.apply($a, [message].concat(args));
          stub = ($c = self).$find_matching_method_stub.apply($c, [message].concat(args));
          if ((($d = ((($e = (($f = (($g = stub !== false && stub !== nil) ? expectation : $g), $f !== false && $f !== nil ?expectation['$called_max_times?']() : $f))) !== false && $e !== nil) ? $e : ((($f = stub !== false && stub !== nil) ? expectation['$!']() : $f)))) !== nil && (!$d.$$is_boolean || $d == true))) {
            if ((($d = (($e = expectation !== false && expectation !== nil) ? expectation['$actual_received_count_matters?']() : $e)) !== nil && (!$d.$$is_boolean || $d == true))) {
              expectation['$increase_actual_received_count!']()};
            if ((($d = expectation = ($e = self).$find_almost_matching_expectation.apply($e, [message].concat(args))) !== nil && (!$d.$$is_boolean || $d == true))) {
              if ((($d = expectation['$expected_messages_received?']()) !== nil && (!$d.$$is_boolean || $d == true))) {
                } else {
                ($d = expectation).$advise.apply($d, [].concat(args))
              }};
            return ($f = ($g = stub).$invoke, $f.$$p = block.$to_proc(), $f).apply($g, [nil].concat(args));
          } else if (expectation !== false && expectation !== nil) {
            return ($f = ($h = expectation).$invoke, $f.$$p = block.$to_proc(), $f).apply($h, [stub].concat(args))
          } else if ((($f = expectation = ($i = self).$find_almost_matching_expectation.apply($i, [message].concat(args))) !== nil && (!$f.$$is_boolean || $f == true))) {
            if ((($f = expectation['$expected_messages_received?']()) !== nil && (!$f.$$is_boolean || $f == true))) {
            } else if ((($f = self['$null_object?']()) !== nil && (!$f.$$is_boolean || $f == true))) {
              ($f = expectation).$advise.apply($f, [].concat(args))};
            if ((($j = (((($k = self['$has_negative_expectation?'](message)) !== false && $k !== nil) ? $k : self['$null_object?']()))) !== nil && (!$j.$$is_boolean || $j == true))) {
              return nil
              } else {
              return ($j = self).$raise_unexpected_message_args_error.apply($j, [expectation].concat(args))
            };
          } else if ((($k = stub = ($l = self).$find_almost_matching_stub.apply($l, [message].concat(args))) !== nil && (!$k.$$is_boolean || $k == true))) {
            ($k = stub).$advise.apply($k, [].concat(args));
            return ($m = self).$raise_missing_default_stub_error.apply($m, [stub].concat(args));
          } else if ((($n = $scope.get('Class')['$==='](self.object)) !== nil && (!$n.$$is_boolean || $n == true))) {
            return ($n = ($o = self.object.$superclass()).$__send__, $n.$$p = block.$to_proc(), $n).apply($o, [message].concat(args))
            } else {
            return ($n = ($p = self.object).$__send__, $n.$$p = block.$to_proc(), $n).apply($p, ["method_missing", message].concat(args))
          };
        };

        def.$raise_unexpected_message_error = function(method_name, args) {
          var $a, self = this;

          args = $slice.call(arguments, 1);
          return ($a = self.error_generator).$raise_unexpected_message_error.apply($a, [method_name].concat(args));
        };

        def.$raise_unexpected_message_args_error = function(expectation, args) {
          var $a, self = this;

          args = $slice.call(arguments, 1);
          return ($a = self.error_generator).$raise_unexpected_message_args_error.apply($a, [expectation].concat(args));
        };

        def.$raise_missing_default_stub_error = function(expectation, args) {
          var $a, self = this;

          args = $slice.call(arguments, 1);
          return ($a = self.error_generator).$raise_missing_default_stub_error.apply($a, [expectation].concat(args));
        };

        self.$private();

        def.$method_double_for = function(message) {
          var self = this;

          return self.method_doubles['$[]'](message.$to_sym());
        };

        def.$find_matching_expectation = function(method_name, args) {
          var $a, $b, TMP_16, self = this;

          args = $slice.call(arguments, 1);
          return ($a = ($b = self).$find_best_matching_expectation_for, $a.$$p = (TMP_16 = function(expectation){var self = TMP_16.$$s || this, $a;
if (expectation == null) expectation = nil;
          return ($a = expectation)['$matches?'].apply($a, [method_name].concat(args))}, TMP_16.$$s = self, TMP_16), $a).call($b, method_name);
        };

        def.$find_almost_matching_expectation = function(method_name, args) {
          var $a, $b, TMP_17, self = this;

          args = $slice.call(arguments, 1);
          return ($a = ($b = self).$find_best_matching_expectation_for, $a.$$p = (TMP_17 = function(expectation){var self = TMP_17.$$s || this, $a;
if (expectation == null) expectation = nil;
          return ($a = expectation).$matches_name_but_not_args.apply($a, [method_name].concat(args))}, TMP_17.$$s = self, TMP_17), $a).call($b, method_name);
        };

        def.$find_best_matching_expectation_for = TMP_19 = function(method_name) {try {

          var $a, $b, TMP_18, self = this, $iter = TMP_19.$$p, $yield = $iter || nil, first_match = nil;

          TMP_19.$$p = null;
          first_match = nil;
          ($a = ($b = self.$method_double_for(method_name).$expectations()).$each, $a.$$p = (TMP_18 = function(expectation){var self = TMP_18.$$s || this, $a, $b;
if (expectation == null) expectation = nil;
          if ((($a = ((($b = Opal.yield1($yield, expectation)) === $breaker) ? $breaker.$v : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              return nil;
            };
            if ((($a = expectation['$called_max_times?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              Opal.ret(expectation)
            };
            return ((($a = first_match) !== false && $a !== nil) ? $a : first_match = expectation);}, TMP_18.$$s = self, TMP_18), $a).call($b);
          return first_match;
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        };

        def.$find_matching_method_stub = function(method_name, args) {
          var $a, $b, TMP_20, self = this;

          args = $slice.call(arguments, 1);
          return ($a = ($b = self.$method_double_for(method_name).$stubs()).$find, $a.$$p = (TMP_20 = function(stub){var self = TMP_20.$$s || this, $a;
if (stub == null) stub = nil;
          return ($a = stub)['$matches?'].apply($a, [method_name].concat(args))}, TMP_20.$$s = self, TMP_20), $a).call($b);
        };

        return (def.$find_almost_matching_stub = function(method_name, args) {
          var $a, $b, TMP_21, self = this;

          args = $slice.call(arguments, 1);
          return ($a = ($b = self.$method_double_for(method_name).$stubs()).$find, $a.$$p = (TMP_21 = function(stub){var self = TMP_21.$$s || this, $a;
if (stub == null) stub = nil;
          return ($a = stub).$matches_name_but_not_args.apply($a, [method_name].concat(args))}, TMP_21.$$s = self, TMP_21), $a).call($b);
        }, nil) && 'find_almost_matching_stub';
      })(self, null);

      (function($base, $super) {
        function $PartialMockProxy(){};
        var self = $PartialMockProxy = $klass($base, $super, 'PartialMockProxy', $PartialMockProxy);

        var def = self.$$proto, $scope = self.$$scope, TMP_22, TMP_23;

        def.object = nil;
        def.$method_handle_for = function(message) {
          var $a, self = this;

          try {
          if ((($a = self['$any_instance_class_recorder_observing_method?'](self.object.$class(), message)) !== nil && (!$a.$$is_boolean || $a == true))) {
              message = ((Opal.get('RSpec')).$$scope.get('Mocks')).$any_instance_recorder_for(self.object.$class()).$build_alias_method_name(message)};
            return ((Opal.get('RSpec')).$$scope.get('Mocks')).$method_handle_for(self.object, message);
          } catch ($err) {if (Opal.rescue($err, [$scope.get('NameError')])) {
            return nil
            }else { throw $err; }
          };
        };

        def.$add_simple_expectation = TMP_22 = function(method_name, response, location) {var $zuper = $slice.call(arguments, 0);
          var self = this, $iter = TMP_22.$$p, $yield = $iter || nil;

          TMP_22.$$p = null;
          self.$method_double_for(method_name).$configure_method();
          return Opal.find_super_dispatcher(self, 'add_simple_expectation', TMP_22, $iter).apply(self, $zuper);
        };

        def.$add_simple_stub = TMP_23 = function(method_name, response) {var $zuper = $slice.call(arguments, 0);
          var self = this, $iter = TMP_23.$$p, $yield = $iter || nil;

          TMP_23.$$p = null;
          self.$method_double_for(method_name).$configure_method();
          return Opal.find_super_dispatcher(self, 'add_simple_stub', TMP_23, $iter).apply(self, $zuper);
        };

        self.$private();

        return (def['$any_instance_class_recorder_observing_method?'] = function(klass, method_name) {
          var $a, self = this, superklass = nil;

          if ((($a = ((Opal.get('RSpec')).$$scope.get('Mocks')).$any_instance_recorder_for(klass)['$already_observing?'](method_name)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return true};
          superklass = klass.$superclass();
          if ((($a = superklass['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return false};
          return self['$any_instance_class_recorder_observing_method?'](superklass, method_name);
        }, nil) && 'any_instance_class_recorder_observing_method?';
      })(self, $scope.get('Proxy'));
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/proxy_for_nil"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_accessor', '$warn_about_expectations?', '$warn', '$private', '$first_non_rspec_line']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ProxyForNil(){};
        var self = $ProxyForNil = $klass($base, $super, 'ProxyForNil', $ProxyForNil);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

        def.$initialize = TMP_1 = function(order_group) {
          var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

          TMP_1.$$p = null;
          self.warn_about_expectations = true;
          return Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [nil, order_group]);
        };

        self.$attr_accessor("warn_about_expectations");

        Opal.defn(self, '$warn_about_expectations?', def.$warn_about_expectations);

        def.$add_message_expectation = TMP_2 = function(location, method_name, opts) {var $zuper = $slice.call(arguments, 0);
          var $a, self = this, $iter = TMP_2.$$p, block = $iter || nil;

          if (opts == null) {
            opts = $hash2([], {})
          }
          TMP_2.$$p = null;
          if ((($a = self['$warn_about_expectations?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$warn(method_name)};
          return Opal.find_super_dispatcher(self, 'add_message_expectation', TMP_2, $iter).apply(self, $zuper);
        };

        def.$add_negative_message_expectation = TMP_3 = function(location, method_name) {var $zuper = $slice.call(arguments, 0);
          var $a, self = this, $iter = TMP_3.$$p, implementation = $iter || nil;

          TMP_3.$$p = null;
          if ((($a = self['$warn_about_expectations?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$warn(method_name)};
          return Opal.find_super_dispatcher(self, 'add_negative_message_expectation', TMP_3, $iter).apply(self, $zuper);
        };

        def.$add_stub = TMP_4 = function(location, method_name, opts) {var $zuper = $slice.call(arguments, 0);
          var $a, self = this, $iter = TMP_4.$$p, implementation = $iter || nil;

          if (opts == null) {
            opts = $hash2([], {})
          }
          TMP_4.$$p = null;
          if ((($a = self['$warn_about_expectations?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$warn(method_name)};
          return Opal.find_super_dispatcher(self, 'add_stub', TMP_4, $iter).apply(self, $zuper);
        };

        self.$private();

        return (def.$warn = function(method_name) {
          var self = this, source = nil;

          source = $scope.get('CallerFilter').$first_non_rspec_line();
          return $scope.get('Kernel').$warn("An expectation of :" + (method_name) + " was set on nil. Called from " + (source) + ". Use allow_message_expectations_on_nil to disable warnings.");
        }, nil) && 'warn';
      })(self, $scope.get('Proxy'))
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/test_double"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$extend', '$send', '$__initialize_as_test_double', '$as_null_object', '$__mock_proxy', '$null_object?', '$==', '$class', '$sprintf', '$object_id', '$inspect', '$gsub', '$alias_method', '$new', '$private', '$===', '$empty?', '$assign_stubs', '$record_message_received', '$to_proc', '$include?', '$raise', '$raise_unexpected_message_error', '$each_pair', '$add_simple_stub', '$proxy_for']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'TestDouble');

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

        Opal.defs(self, '$extend_onto', function(object, name, stubs) {
          var self = this;

          if (name == null) {
            name = nil
          }
          if (stubs == null) {
            stubs = $hash2([], {})
          }
          object.$extend(self);
          return object.$send("__initialize_as_test_double", name, stubs);
        });

        Opal.defn(self, '$initialize', function(name, stubs) {
          var self = this;

          if (name == null) {
            name = nil
          }
          if (stubs == null) {
            stubs = $hash2([], {})
          }
          return self.$__initialize_as_test_double(name, stubs);
        });

        Opal.defn(self, '$as_null_object', function() {
          var self = this;

          return self.$__mock_proxy().$as_null_object();
        });

        Opal.defn(self, '$null_object?', function() {
          var self = this;

          return self.$__mock_proxy()['$null_object?']();
        });

        Opal.defn(self, '$==', function(other) {
          var self = this;

          return other['$=='](self.$__mock_proxy());
        });

        Opal.defn(self, '$inspect', function() {
          var self = this;
          if (self.name == null) self.name = nil;

          return "#<" + (self.$class()) + ":" + (self.$sprintf("0x%x", self.$object_id())) + " @name=" + (self.name.$inspect()) + ">";
        });

        Opal.defn(self, '$to_s', function() {
          var self = this;

          return self.$inspect().$gsub("<", "[").$gsub(">", "]");
        });

        self.$alias_method("to_str", "to_s");

        Opal.defn(self, '$respond_to?', TMP_1 = function(message, incl_private) {var $zuper = $slice.call(arguments, 0);
          var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

          if (incl_private == null) {
            incl_private = false
          }
          TMP_1.$$p = null;
          if ((($a = self.$__mock_proxy()['$null_object?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return true
            } else {
            return Opal.find_super_dispatcher(self, 'respond_to?', TMP_1, $iter).apply(self, $zuper)
          };
        });

        Opal.defn(self, '$__build_mock_proxy', function(order_group) {
          var self = this;
          if (self.name == null) self.name = nil;

          return $scope.get('Proxy').$new(self, order_group, self.name);
        });

        self.$private();

        Opal.defn(self, '$__initialize_as_test_double', function(name, stubs) {
          var $a, $b, self = this;

          if (name == null) {
            name = nil
          }
          if (stubs == null) {
            stubs = $hash2([], {})
          }
          if ((($a = ($b = $scope.get('Hash')['$==='](name), $b !== false && $b !== nil ?stubs['$empty?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            stubs = name;
            self.name = nil;
            } else {
            self.name = name
          };
          return self.$assign_stubs(stubs);
        });

        Opal.defn(self, '$method_missing', TMP_2 = function(message, args) {var $zuper = $slice.call(arguments, 0);
          var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil, $case = nil;

          args = $slice.call(arguments, 1);
          TMP_2.$$p = null;
          if ((($a = self.$__mock_proxy()['$null_object?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            $case = message;if ("to_int"['$===']($case)) {return 0}else if ("to_a"['$===']($case) || "to_ary"['$===']($case)) {return nil}};
          ($a = ($b = self.$__mock_proxy()).$record_message_received, $a.$$p = block.$to_proc(), $a).apply($b, [message].concat(args));
          try {
          if ((($a = self.$__mock_proxy()['$null_object?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self
              } else {
              return Opal.find_super_dispatcher(self, 'method_missing', TMP_2, $iter).apply(self, $zuper)
            }
          } catch ($err) {if (Opal.rescue($err, [$scope.get('NameError')])) {
            if ((($a = ["to_a", "to_ary"]['$include?'](message)) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$raise($scope.get('NoMethodError'))};
            return ($a = self.$__mock_proxy()).$raise_unexpected_message_error.apply($a, [message].concat(args));
            }else { throw $err; }
          };
        });

        Opal.defn(self, '$assign_stubs', function(stubs) {
          var $a, $b, TMP_3, self = this;

          return ($a = ($b = stubs).$each_pair, $a.$$p = (TMP_3 = function(message, response){var self = TMP_3.$$s || this;
if (message == null) message = nil;if (response == null) response = nil;
          return self.$__mock_proxy().$add_simple_stub(message, response)}, TMP_3.$$s = self, TMP_3), $a).call($b);
        });

        Opal.defn(self, '$__mock_proxy', function() {
          var self = this;

          return ((Opal.get('RSpec')).$$scope.get('Mocks')).$proxy_for(self);
        });
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/mock"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Mock(){};
        var self = $Mock = $klass($base, $super, 'Mock', $Mock);

        var def = self.$$proto, $scope = self.$$scope;

        return self.$include($scope.get('TestDouble'))
      })(self, null)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/argument_list_matcher"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$attr_reader', '$empty?', '$first', '$===', '$collect', '$matcher_for', '$match_any_args?', '$block_passes?', '$matchers_match?', '$private', '$is_matcher?', '$new', '$respond_to?', '$any?', '$call', '$==']);
  self.$require("rspec/mocks/argument_matchers");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ArgumentListMatcher(){};
        var self = $ArgumentListMatcher = $klass($base, $super, 'ArgumentListMatcher', $ArgumentListMatcher);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        def.block = def.matchers = def.match_any_args = nil;
        self.$attr_reader("expected_args");

        def.$initialize = TMP_1 = function(expected_args) {
          var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil, $case = nil;

          expected_args = $slice.call(arguments, 0);
          TMP_1.$$p = null;
          self.expected_args = expected_args;
          self.block = (function() {if ((($a = expected_args['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return block
            } else {
            return nil
          }; return nil; })();
          self.match_any_args = false;
          self.matchers = nil;
          return (function() {$case = expected_args.$first();if ((($scope.get('ArgumentMatchers')).$$scope.get('AnyArgsMatcher'))['$===']($case)) {return self.match_any_args = true}else if ((($scope.get('ArgumentMatchers')).$$scope.get('NoArgsMatcher'))['$===']($case)) {return self.matchers = []}else {return self.matchers = ($a = ($b = expected_args).$collect, $a.$$p = (TMP_2 = function(arg){var self = TMP_2.$$s || this;
if (arg == null) arg = nil;
          return self.$matcher_for(arg)}, TMP_2.$$s = self, TMP_2), $a).call($b)}})();
        };

        def['$args_match?'] = function(args) {
          var $a, $b, $c, self = this;

          args = $slice.call(arguments, 0);
          return ((($a = ((($b = self['$match_any_args?']()) !== false && $b !== nil) ? $b : ($c = self)['$block_passes?'].apply($c, [].concat(args)))) !== false && $a !== nil) ? $a : ($b = self)['$matchers_match?'].apply($b, [].concat(args)));
        };

        self.$private();

        def.$matcher_for = function(arg) {
          var $a, self = this;

          if ((($a = self['$is_matcher?'](arg)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return (($scope.get('ArgumentMatchers')).$$scope.get('MatcherMatcher')).$new(arg)};
          if ((($a = $scope.get('Regexp')['$==='](arg)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return (($scope.get('ArgumentMatchers')).$$scope.get('RegexpMatcher')).$new(arg)};
          return (($scope.get('ArgumentMatchers')).$$scope.get('EqualityProxy')).$new(arg);
        };

        def['$is_matcher?'] = function(object) {
          var $a, $b, $c, TMP_3, self = this;

          if ((($a = object['$respond_to?']("i_respond_to_everything_so_im_not_really_a_matcher")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return false};
          return ($a = ($b = ($c = ["failure_message_for_should", "failure_message"])['$any?'], $b.$$p = (TMP_3 = function(msg){var self = TMP_3.$$s || this;
if (msg == null) msg = nil;
          return object['$respond_to?'](msg)}, TMP_3.$$s = self, TMP_3), $b).call($c), $a !== false && $a !== nil ?object['$respond_to?']("matches?") : $a);
        };

        def['$block_passes?'] = function(args) {
          var $a, self = this;

          args = $slice.call(arguments, 0);
          if ((($a = self.block) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($a = self.block).$call.apply($a, [].concat(args))
            } else {
            return nil
          };
        };

        def['$matchers_match?'] = function(args) {
          var self = this;

          args = $slice.call(arguments, 0);
          return self.matchers['$=='](args);
        };

        def['$match_any_args?'] = function() {
          var self = this;

          return self.match_any_args;
        };

        return Opal.cdecl($scope, 'MATCH_ALL', self.$new((($scope.get('ArgumentMatchers')).$$scope.get('AnyArgsMatcher')).$new()));
      })(self, null)
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/message_expectation"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$line', '$raise_expectation_error', '$attr_accessor', '$attr_reader', '$attr_writer', '$protected', '$opts=', '$object', '$method_name', '$register', '$new', '$inner_implementation_action=', '$expected_args', '$negative?', '$raise', '$ignoring_args?', '$max', '$size', '$terminal_implementation_action=', '$===', '$raise_only_valid_on_a_partial_mock', '$inner_action', '$implementation', '$warning', '$original_method', '$respond_to?', '$exception', '$throw', '$<<', '$initial_implementation_action=', '$args_match?', '$yield_receiver_to_implementation_block?', '$unshift', '$orig_object', '$+', '$expectation_count_type', '$handle_order_constraint', '$present?', '$call', '$to_proc', '$invoke', '$!', '$>', '$>=', '$expected_messages_received?', '$failed_fast?', '$generate_error', '$matches_exact_count?', '$matches_at_least_count?', '$matches_at_most_count?', '$verify_invocation_order', '$<=', '$similar_messages', '$empty?', '$raise_similar_message_args_error', '$describe_expectation', '$raise_out_of_order_error', '$set_expected_received_count', '$raise_double_negation_error', '$private', '$initial_action=', '$inner_action=', '$terminal_action=', '$nil?', '$raise_missing_block_error', '$each', '$arity', '$length', '$raise_wrong_arity_error', '$instance_exec', '$shift', '$first', '$last', '$map', '$actions', '$any?', '$compact', '$initial_action', '$terminal_action', '$cannot_modify_further_error', '$insert', '$backtrace']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $SimpleMessageExpectation(){};
        var self = $SimpleMessageExpectation = $klass($base, $super, 'SimpleMessageExpectation', $SimpleMessageExpectation);

        var def = self.$$proto, $scope = self.$$scope;

        def.response = def.message = def.backtrace_line = nil;
        def.$initialize = function(message, response, error_generator, backtrace_line) {
          var $a, self = this;

          if (backtrace_line == null) {
            backtrace_line = nil
          }
          $a = [message, response, error_generator, backtrace_line], self.message = $a[0], self.response = $a[1], self.error_generator = $a[2], self.backtrace_line = $a[3];
          return self.received = false;
        };

        def.$invoke = function(_) {
          var self = this;

          _ = $slice.call(arguments, 0);
          self.received = true;
          return self.response;
        };

        def['$matches?'] = function(message, _) {
          var self = this;

          _ = $slice.call(arguments, 1);
          return self.message['$=='](message);
        };

        def['$called_max_times?'] = function() {
          var self = this;

          return false;
        };

        return (def.$verify_messages_received = function() {
          var $a, $b, TMP_1, self = this;

          return ($a = ($b = $scope.get('InsertOntoBacktrace')).$line, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a;
            if (self.received == null) self.received = nil;
            if (self.error_generator == null) self.error_generator = nil;
            if (self.message == null) self.message = nil;

          if ((($a = self.received) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.error_generator.$raise_expectation_error(self.message, 1, (($scope.get('ArgumentListMatcher')).$$scope.get('MATCH_ALL')), 0, nil)
            }}, TMP_1.$$s = self, TMP_1), $a).call($b, self.backtrace_line);
        }, nil) && 'verify_messages_received';
      })(self, null);

      (function($base, $super) {
        function $MessageExpectation(){};
        var self = $MessageExpectation = $klass($base, $super, 'MessageExpectation', $MessageExpectation);

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_6, TMP_7, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16;

        def.error_generator = def.method_double = def.order_group = def.argument_list_matcher = def.expected_received_count = def.at_least = def.yield_receiver_to_implementation_block = def.args_to_yield = def.eval_context = def.message = def.exactly = def.at_most = def.actual_received_count = def.expected_from = def.ordered = def.similar_messages = def.failed_fast = nil;
        self.$attr_accessor("error_generator", "implementation");

        self.$attr_reader("message");

        self.$attr_reader("orig_object");

        self.$attr_writer("expected_received_count", "expected_from", "argument_list_matcher");

        self.$protected("expected_received_count=", "expected_from=", "error_generator", "error_generator=", "implementation=");

        def.$initialize = TMP_2 = function(error_generator, expectation_ordering, expected_from, method_double, expected_received_count, opts) {
          var $a, $b, self = this, $iter = TMP_2.$$p, implementation_block = $iter || nil;

          if (expected_received_count == null) {
            expected_received_count = 1
          }
          if (opts == null) {
            opts = $hash2([], {})
          }
          TMP_2.$$p = null;
          self.error_generator = error_generator;
          (($a = [opts]), $b = self.error_generator, $b['$opts='].apply($b, $a), $a[$a.length-1]);
          self.expected_from = expected_from;
          self.method_double = method_double;
          self.orig_object = self.method_double.$object();
          self.message = self.method_double.$method_name();
          self.actual_received_count = 0;
          self.expected_received_count = expected_received_count;
          self.argument_list_matcher = (($scope.get('ArgumentListMatcher')).$$scope.get('MATCH_ALL'));
          self.order_group = expectation_ordering;
          self.order_group.$register(self);
          self.ordered = false;
          self.at_least = self.at_most = self.exactly = nil;
          self.args_to_yield = [];
          self.failed_fast = nil;
          self.eval_context = nil;
          self.yield_receiver_to_implementation_block = false;
          self.implementation = $scope.get('Implementation').$new();
          return (($a = [implementation_block]), $b = self, $b['$inner_implementation_action='].apply($b, $a), $a[$a.length-1]);
        };

        def.$expected_args = function() {
          var self = this;

          return self.argument_list_matcher.$expected_args();
        };

        def.$and_return = TMP_3 = function(values) {
          var $a, $b, $c, self = this, $iter = TMP_3.$$p, implementation = $iter || nil;

          values = $slice.call(arguments, 0);
          TMP_3.$$p = null;
          if ((($a = self['$negative?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$raise("`and_return` is not supported with negative message expectations")
            } else {
            if ((($a = ((($b = self['$ignoring_args?']()) !== false && $b !== nil) ? $b : ((($c = self.expected_received_count['$=='](0)) ? self.at_least : $c)))) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.expected_received_count = [self.expected_received_count, values.$size()].$max()
            };
            if (implementation !== false && implementation !== nil) {
              (($a = [implementation]), $b = self, $b['$inner_implementation_action='].apply($b, $a), $a[$a.length-1])
              } else {
              (($a = [$scope.get('AndReturnImplementation').$new(values)]), $b = self, $b['$terminal_implementation_action='].apply($b, $a), $a[$a.length-1])
            };
            return nil;
          };
        };

        def.$and_yield_receiver_to_implementation = function() {
          var self = this;

          self.yield_receiver_to_implementation_block = true;
          return self;
        };

        def['$yield_receiver_to_implementation_block?'] = function() {
          var self = this;

          return self.yield_receiver_to_implementation_block;
        };

        def.$and_call_original = function() {
          var $a, self = this;

          if ((($a = (((($scope.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('TestDouble'))['$==='](self.method_double.$object())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.error_generator.$raise_only_valid_on_a_partial_mock("and_call_original")
            } else {
            if ((($a = self.$implementation().$inner_action()) !== nil && (!$a.$$is_boolean || $a == true))) {
              $scope.get('RSpec').$warning("You're overriding a previous implementation for this stub")};
            self.implementation = $scope.get('AndCallOriginalImplementation').$new(self.method_double.$original_method());
            return self.yield_receiver_to_implementation_block = false;
          };
        };

        def.$and_raise = function(exception, message) {
          var $a, $b, $c, $d, TMP_4, self = this;

          if (exception == null) {
            exception = $scope.get('RuntimeError')
          }
          if (message == null) {
            message = nil
          }
          if ((($a = exception['$respond_to?']("exception")) !== nil && (!$a.$$is_boolean || $a == true))) {
            exception = (function() {if (message !== false && message !== nil) {
              return exception.$exception(message)
              } else {
              return exception.$exception()
            }; return nil; })()};
          (($a = [($c = ($d = $scope.get('Proc')).$new, $c.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

          return self.$raise(exception)}, TMP_4.$$s = self, TMP_4), $c).call($d)]), $b = self, $b['$terminal_implementation_action='].apply($b, $a), $a[$a.length-1]);
          return nil;
        };

        def.$and_throw = function(args) {
          var $a, $b, $c, $d, TMP_5, self = this;

          args = $slice.call(arguments, 0);
          (($a = [($c = ($d = $scope.get('Proc')).$new, $c.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $a;

          return ($a = self).$throw.apply($a, [].concat(args))}, TMP_5.$$s = self, TMP_5), $c).call($d)]), $b = self, $b['$terminal_implementation_action='].apply($b, $a), $a[$a.length-1]);
          return nil;
        };

        def.$and_yield = TMP_6 = function(args) {
          var $a, $b, self = this, $iter = TMP_6.$$p, block = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_6.$$p = null;
          if (block !== false && block !== nil) {
            if (Opal.yield1(block, self.eval_context = $scope.get('Object').$new()) === $breaker) return $breaker.$v};
          self.args_to_yield['$<<'](args);
          (($a = [$scope.get('AndYieldImplementation').$new(self.args_to_yield, self.eval_context, self.error_generator)]), $b = self, $b['$initial_implementation_action='].apply($b, $a), $a[$a.length-1]);
          return self;
        };

        def['$matches?'] = function(message, args) {
          var $a, $b, self = this;

          args = $slice.call(arguments, 1);
          return (($a = self.message['$=='](message)) ? ($b = self.argument_list_matcher)['$args_match?'].apply($b, [].concat(args)) : $a);
        };

        def.$invoke = TMP_7 = function(parent_stub, args) {
          var $a, $b, $c, $d, self = this, $iter = TMP_7.$$p, block = $iter || nil;

          args = $slice.call(arguments, 1);
          TMP_7.$$p = null;
          if ((($a = self['$yield_receiver_to_implementation_block?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            args.$unshift(self.$orig_object())};
          if ((($a = ((($b = self['$negative?']()) !== false && $b !== nil) ? $b : (($c = (((($d = self.exactly) !== false && $d !== nil) ? $d : self.at_most)), $c !== false && $c !== nil ?(self.actual_received_count['$=='](self.expected_received_count)) : $c)))) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.actual_received_count = self.actual_received_count['$+'](1);
            self.failed_fast = true;
            ($a = self.error_generator).$raise_expectation_error.apply($a, [self.message, self.expected_received_count, self.argument_list_matcher, self.actual_received_count, self.$expectation_count_type()].concat(args));};
          self.order_group.$handle_order_constraint(self);
          try {
          if ((($b = self.$implementation()['$present?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            return ($b = ($c = self.$implementation()).$call, $b.$$p = block.$to_proc(), $b).apply($c, [].concat(args))
          } else if (parent_stub !== false && parent_stub !== nil) {
            return ($b = ($d = parent_stub).$invoke, $b.$$p = block.$to_proc(), $b).apply($d, [nil].concat(args))
            } else {
            return nil
          }
          } finally {
          self.actual_received_count = self.actual_received_count['$+'](1)
          };
        };

        def['$negative?'] = function() {
          var $a, self = this;

          return (($a = self.expected_received_count['$=='](0)) ? self.at_least['$!']() : $a);
        };

        def['$called_max_times?'] = function() {
          var $a, $b, $c, self = this;

          return ($a = ($b = ($c = self.expected_received_count['$==']("any")['$!'](), $c !== false && $c !== nil ?self.at_least['$!']() : $c), $b !== false && $b !== nil ?self.expected_received_count['$>'](0) : $b), $a !== false && $a !== nil ?self.actual_received_count['$>='](self.expected_received_count) : $a);
        };

        def.$matches_name_but_not_args = function(message, args) {
          var $a, $b, self = this;

          args = $slice.call(arguments, 1);
          return (($a = self.message['$=='](message)) ? ($b = self.argument_list_matcher)['$args_match?'].apply($b, [].concat(args))['$!']() : $a);
        };

        def.$verify_messages_received = function() {
          var $a, $b, TMP_8, self = this;

          return ($a = ($b = $scope.get('InsertOntoBacktrace')).$line, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $a, $b;

          if ((($a = ((($b = self['$expected_messages_received?']()) !== false && $b !== nil) ? $b : self['$failed_fast?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$generate_error()
            }}, TMP_8.$$s = self, TMP_8), $a).call($b, self.expected_from);
        };

        def['$expected_messages_received?'] = function() {
          var $a, $b, $c, self = this;

          return ((($a = ((($b = ((($c = self['$ignoring_args?']()) !== false && $c !== nil) ? $c : self['$matches_exact_count?']())) !== false && $b !== nil) ? $b : self['$matches_at_least_count?']())) !== false && $a !== nil) ? $a : self['$matches_at_most_count?']());
        };

        def['$ensure_expected_ordering_received!'] = function() {
          var $a, self = this;

          if ((($a = self.ordered) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.order_group.$verify_invocation_order(self)};
          return true;
        };

        def['$ignoring_args?'] = function() {
          var self = this;

          return self.expected_received_count['$==']("any");
        };

        def['$matches_at_least_count?'] = function() {
          var $a, self = this;

          return ($a = self.at_least, $a !== false && $a !== nil ?self.actual_received_count['$>='](self.expected_received_count) : $a);
        };

        def['$matches_at_most_count?'] = function() {
          var $a, self = this;

          return ($a = self.at_most, $a !== false && $a !== nil ?self.actual_received_count['$<='](self.expected_received_count) : $a);
        };

        def['$matches_exact_count?'] = function() {
          var self = this;

          return self.expected_received_count['$=='](self.actual_received_count);
        };

        def.$similar_messages = function() {
          var $a, self = this;

          return ((($a = self.similar_messages) !== false && $a !== nil) ? $a : self.similar_messages = []);
        };

        def.$advise = function(args) {
          var self = this;

          args = $slice.call(arguments, 0);
          return self.$similar_messages()['$<<'](args);
        };

        def.$generate_error = function() {
          var $a, $b, self = this;

          if ((($a = self.$similar_messages()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($a = self.error_generator).$raise_expectation_error.apply($a, [self.message, self.expected_received_count, self.argument_list_matcher, self.actual_received_count, self.$expectation_count_type()].concat(self.$expected_args()))
            } else {
            return ($b = self.error_generator).$raise_similar_message_args_error.apply($b, [self].concat(self.similar_messages))
          };
        };

        def.$expectation_count_type = function() {
          var $a, self = this;

          if ((($a = self.at_least) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "at_least"};
          if ((($a = self.at_most) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "at_most"};
          return nil;
        };

        def.$description = function() {
          var $a, self = this;

          return ($a = self.error_generator).$describe_expectation.apply($a, [self.message, self.expected_received_count, self.actual_received_count].concat(self.$expected_args()));
        };

        def.$raise_out_of_order_error = function() {
          var self = this;

          return self.error_generator.$raise_out_of_order_error(self.message);
        };

        def.$with = TMP_9 = function(args) {
          var $a, $b, self = this, $iter = TMP_9.$$p, block = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_9.$$p = null;
          if ((($a = args['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$raise($scope.get('ArgumentError'), "`with` must have at least one argument. Use `no_args` matcher to set the expectation of receiving no arguments.")};
          (($a = [block]), $b = self, $b['$inner_implementation_action='].apply($b, $a), $a[$a.length-1]);
          self.argument_list_matcher = ($a = $scope.get('ArgumentListMatcher')).$new.apply($a, [].concat(args));
          return self;
        };

        def.$exactly = TMP_10 = function(n) {
          var $a, $b, self = this, $iter = TMP_10.$$p, block = $iter || nil;

          TMP_10.$$p = null;
          (($a = [block]), $b = self, $b['$inner_implementation_action='].apply($b, $a), $a[$a.length-1]);
          self.$set_expected_received_count("exactly", n);
          return self;
        };

        def.$at_least = TMP_11 = function(n) {
          var $a, $b, self = this, $iter = TMP_11.$$p, block = $iter || nil;

          TMP_11.$$p = null;
          self.$set_expected_received_count("at_least", n);
          if (n['$=='](0)) {
            self.$raise("at_least(0) has been removed, use allow(...).to receive(:message) instead")};
          (($a = [block]), $b = self, $b['$inner_implementation_action='].apply($b, $a), $a[$a.length-1]);
          return self;
        };

        def.$at_most = TMP_12 = function(n) {
          var $a, $b, self = this, $iter = TMP_12.$$p, block = $iter || nil;

          TMP_12.$$p = null;
          (($a = [block]), $b = self, $b['$inner_implementation_action='].apply($b, $a), $a[$a.length-1]);
          self.$set_expected_received_count("at_most", n);
          return self;
        };

        def.$times = TMP_13 = function() {
          var $a, $b, self = this, $iter = TMP_13.$$p, block = $iter || nil;

          TMP_13.$$p = null;
          (($a = [block]), $b = self, $b['$inner_implementation_action='].apply($b, $a), $a[$a.length-1]);
          return self;
        };

        def.$never = function() {
          var $a, self = this;

          if ((($a = self['$negative?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            $scope.get('ErrorGenerator').$raise_double_negation_error("expect(obj)")};
          self.expected_received_count = 0;
          return self;
        };

        def.$once = TMP_14 = function() {
          var $a, $b, self = this, $iter = TMP_14.$$p, block = $iter || nil;

          TMP_14.$$p = null;
          (($a = [block]), $b = self, $b['$inner_implementation_action='].apply($b, $a), $a[$a.length-1]);
          self.$set_expected_received_count("exactly", 1);
          return self;
        };

        def.$twice = TMP_15 = function() {
          var $a, $b, self = this, $iter = TMP_15.$$p, block = $iter || nil;

          TMP_15.$$p = null;
          (($a = [block]), $b = self, $b['$inner_implementation_action='].apply($b, $a), $a[$a.length-1]);
          self.$set_expected_received_count("exactly", 2);
          return self;
        };

        def.$ordered = TMP_16 = function() {
          var $a, $b, self = this, $iter = TMP_16.$$p, block = $iter || nil;

          TMP_16.$$p = null;
          (($a = [block]), $b = self, $b['$inner_implementation_action='].apply($b, $a), $a[$a.length-1]);
          self.ordered = true;
          return self;
        };

        def['$ordered?'] = function() {
          var self = this;

          return self.ordered;
        };

        def['$negative_expectation_for?'] = function(message) {
          var $a, self = this;

          return (($a = self.message['$=='](message)) ? self['$negative?']() : $a);
        };

        def['$actual_received_count_matters?'] = function() {
          var $a, $b, self = this;

          return ((($a = ((($b = self.at_least) !== false && $b !== nil) ? $b : self.at_most)) !== false && $a !== nil) ? $a : self.exactly);
        };

        def['$increase_actual_received_count!'] = function() {
          var self = this;

          return self.actual_received_count = self.actual_received_count['$+'](1);
        };

        self.$private();

        def['$failed_fast?'] = function() {
          var self = this;

          return self.failed_fast;
        };

        def.$set_expected_received_count = function(relativity, n) {
          var self = this, $case = nil;

          self.at_least = (relativity['$==']("at_least"));
          self.at_most = (relativity['$==']("at_most"));
          self.exactly = (relativity['$==']("exactly"));
          return self.expected_received_count = (function() {$case = n;if ($scope.get('Numeric')['$===']($case)) {return n}else if ("once"['$===']($case)) {return 1}else if ("twice"['$===']($case)) {return 2}else { return nil }})();
        };

        def['$initial_implementation_action='] = function(action) {
          var $a, $b, self = this;

          return (($a = [action]), $b = self.$implementation(), $b['$initial_action='].apply($b, $a), $a[$a.length-1]);
        };

        def['$inner_implementation_action='] = function(action) {
          var $a, $b, self = this;

          if ((($a = self.$implementation().$inner_action()) !== nil && (!$a.$$is_boolean || $a == true))) {
            $scope.get('RSpec').$warning("You're overriding a previous implementation for this stub")};
          if (action !== false && action !== nil) {
            return (($a = [action]), $b = self.$implementation(), $b['$inner_action='].apply($b, $a), $a[$a.length-1])
            } else {
            return nil
          };
        };

        return (def['$terminal_implementation_action='] = function(action) {
          var $a, $b, self = this;

          return (($a = [action]), $b = self.$implementation(), $b['$terminal_action='].apply($b, $a), $a[$a.length-1]);
        }, nil) && 'terminal_implementation_action=';
      })(self, null);

      (function($base, $super) {
        function $AndYieldImplementation(){};
        var self = $AndYieldImplementation = $klass($base, $super, 'AndYieldImplementation', $AndYieldImplementation);

        var def = self.$$proto, $scope = self.$$scope, TMP_17;

        def.args_to_yield = def.eval_context = def.error_generator = nil;
        def.$initialize = function(args_to_yield, eval_context, error_generator) {
          var self = this;

          self.args_to_yield = args_to_yield;
          self.eval_context = eval_context;
          return self.error_generator = error_generator;
        };

        return (def.$call = TMP_17 = function(args_to_ignore) {
          var $a, $b, TMP_18, self = this, $iter = TMP_17.$$p, block = $iter || nil, value = nil;

          args_to_ignore = $slice.call(arguments, 0);
          TMP_17.$$p = null;
          if ((($a = ($b = self.args_to_yield['$empty?'](), $b !== false && $b !== nil ?self.eval_context['$nil?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          if (block !== false && block !== nil) {
            } else {
            self.error_generator.$raise_missing_block_error(self.args_to_yield)
          };
          value = nil;
          ($a = ($b = self.args_to_yield).$each, $a.$$p = (TMP_18 = function(args){var self = TMP_18.$$s || this, $a, $b;
            if (self.error_generator == null) self.error_generator = nil;
            if (self.eval_context == null) self.eval_context = nil;
if (args == null) args = nil;
          if ((($a = (($b = block.$arity()['$>'](-1)) ? args.$length()['$=='](block.$arity())['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.error_generator.$raise_wrong_arity_error(args, block.$arity())};
            return value = (function() {if ((($a = self.eval_context) !== nil && (!$a.$$is_boolean || $a == true))) {
              return ($a = ($b = self.eval_context).$instance_exec, $a.$$p = block.$to_proc(), $a).apply($b, [].concat(args))
              } else {
              return ($a = block).$call.apply($a, [].concat(args))
            }; return nil; })();}, TMP_18.$$s = self, TMP_18), $a).call($b);
          return value;
        }, nil) && 'call';
      })(self, null);

      (function($base, $super) {
        function $AndReturnImplementation(){};
        var self = $AndReturnImplementation = $klass($base, $super, 'AndReturnImplementation', $AndReturnImplementation);

        var def = self.$$proto, $scope = self.$$scope, TMP_19;

        def.values_to_return = nil;
        def.$initialize = function(values_to_return) {
          var self = this;

          return self.values_to_return = values_to_return;
        };

        return (def.$call = TMP_19 = function(args_to_ignore) {
          var self = this, $iter = TMP_19.$$p, block = $iter || nil;

          args_to_ignore = $slice.call(arguments, 0);
          TMP_19.$$p = null;
          if (self.values_to_return.$size()['$>'](1)) {
            return self.values_to_return.$shift()
            } else {
            return self.values_to_return.$first()
          };
        }, nil) && 'call';
      })(self, null);

      (function($base, $super) {
        function $Implementation(){};
        var self = $Implementation = $klass($base, $super, 'Implementation', $Implementation);

        var def = self.$$proto, $scope = self.$$scope, TMP_20;

        self.$attr_accessor("initial_action", "inner_action", "terminal_action");

        def.$call = TMP_20 = function(args) {
          var $a, $b, TMP_21, self = this, $iter = TMP_20.$$p, block = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_20.$$p = null;
          return ($a = ($b = self.$actions()).$map, $a.$$p = (TMP_21 = function(action){var self = TMP_21.$$s || this, $a, $b;
if (action == null) action = nil;
          return ($a = ($b = action).$call, $a.$$p = block.$to_proc(), $a).apply($b, [].concat(args))}, TMP_21.$$s = self, TMP_21), $a).call($b).$last();
        };

        def['$present?'] = function() {
          var self = this;

          return self.$actions()['$any?']();
        };

        self.$private();

        return (def.$actions = function() {
          var self = this;

          return [self.$initial_action(), self.$inner_action(), self.$terminal_action()].$compact();
        }, nil) && 'actions';
      })(self, null);

      (function($base, $super) {
        function $AndCallOriginalImplementation(){};
        var self = $AndCallOriginalImplementation = $klass($base, $super, 'AndCallOriginalImplementation', $AndCallOriginalImplementation);

        var def = self.$$proto, $scope = self.$$scope, TMP_22;

        def.method = nil;
        def.$initialize = function(method) {
          var self = this;

          return self.method = method;
        };

        Opal.cdecl($scope, 'CannotModifyFurtherError', $scope.get('Class').$new($scope.get('StandardError')));

        def['$initial_action='] = function(value) {
          var self = this;

          return self.$raise(self.$cannot_modify_further_error());
        };

        def['$inner_action='] = function(value) {
          var self = this;

          return self.$raise(self.$cannot_modify_further_error());
        };

        def['$terminal_action='] = function(value) {
          var self = this;

          return self.$raise(self.$cannot_modify_further_error());
        };

        def['$present?'] = function() {
          var self = this;

          return true;
        };

        def.$inner_action = function() {
          var self = this;

          return true;
        };

        def.$call = TMP_22 = function(args) {
          var $a, $b, self = this, $iter = TMP_22.$$p, block = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_22.$$p = null;
          return ($a = ($b = self.method).$call, $a.$$p = block.$to_proc(), $a).apply($b, [].concat(args));
        };

        self.$private();

        return (def.$cannot_modify_further_error = function() {
          var self = this;

          return $scope.get('CannotModifyFurtherError').$new("This method has already been configured "['$+']("to call the original implementation, and cannot be modified further."));
        }, nil) && 'cannot_modify_further_error';
      })(self, null);

      (function($base, $super) {
        function $InsertOntoBacktrace(){};
        var self = $InsertOntoBacktrace = $klass($base, $super, 'InsertOntoBacktrace', $InsertOntoBacktrace);

        var def = self.$$proto, $scope = self.$$scope, TMP_23;

        return (Opal.defs(self, '$line', TMP_23 = function(location) {
          var $a, self = this, $iter = TMP_23.$$p, $yield = $iter || nil, error = nil;

          TMP_23.$$p = null;
          try {
          return $a = Opal.yieldX($yield, []), $a === $breaker ? $a : $a
          } catch ($err) {if (Opal.rescue($err, [(((($scope.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('MockExpectationError'))])) {error = $err;
            error.$backtrace().$insert(0, location);
            return $scope.get('Kernel').$raise(error);
            }else { throw $err; }
          };
        }), nil) && 'line'
      })(self, null);
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/order_group"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$<<', '$==', '$find', '$to_proc', '$remaining_expectations', '$each_with_index', '$ordered?', '$+', '$include?', '$ready_for?', '$consume', '$raise_out_of_order_error', '$expectations_invoked_in_order?', '$clear', '$empty?', '$private', '$[]', '$invoked_expectations', '$expected_invocations', '$select', '$compact', '$map', '$expectation_for']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $OrderGroup(){};
        var self = $OrderGroup = $klass($base, $super, 'OrderGroup', $OrderGroup);

        var def = self.$$proto, $scope = self.$$scope;

        def.expectations = def.invocation_order = def.index = nil;
        def.$initialize = function() {
          var self = this;

          self.expectations = [];
          self.invocation_order = [];
          return self.index = 0;
        };

        def.$register = function(expectation) {
          var self = this;

          return self.expectations['$<<'](expectation);
        };

        def.$invoked = function(message) {
          var self = this;

          return self.invocation_order['$<<'](message);
        };

        def['$ready_for?'] = function(expectation) {
          var $a, $b, self = this;

          return ($a = ($b = self.$remaining_expectations()).$find, $a.$$p = "ordered?".$to_proc(), $a).call($b)['$=='](expectation);
        };

        def.$consume = function() {try {

          var $a, $b, TMP_1, self = this;

          ($a = ($b = self.$remaining_expectations()).$each_with_index, $a.$$p = (TMP_1 = function(expectation, index){var self = TMP_1.$$s || this, $a;
            if (self.index == null) self.index = nil;
if (expectation == null) expectation = nil;if (index == null) index = nil;
          if ((($a = expectation['$ordered?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.index = self.index['$+'](index['$+'](1));
              Opal.ret(expectation);
              } else {
              return nil
            }}, TMP_1.$$s = self, TMP_1), $a).call($b);
          return nil;
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        };

        def.$handle_order_constraint = function(expectation) {
          var $a, $b, self = this;

          if ((($a = ($b = expectation['$ordered?'](), $b !== false && $b !== nil ?self.$remaining_expectations()['$include?'](expectation) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil
          };
          if ((($a = self['$ready_for?'](expectation)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$consume()};
          return expectation.$raise_out_of_order_error();
        };

        def.$verify_invocation_order = function(expectation) {
          var $a, self = this;

          if ((($a = self['$expectations_invoked_in_order?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            expectation.$raise_out_of_order_error()
          };
          return true;
        };

        def.$clear = function() {
          var self = this;

          self.index = 0;
          self.invocation_order.$clear();
          return self.expectations.$clear();
        };

        def['$empty?'] = function() {
          var self = this;

          return self.expectations['$empty?']();
        };

        self.$private();

        def.$remaining_expectations = function() {
          var $a, self = this;

          return ((($a = self.expectations['$[]']($range(self.index, -1, false))) !== false && $a !== nil) ? $a : []);
        };

        def['$expectations_invoked_in_order?'] = function() {
          var self = this;

          return self.$invoked_expectations()['$=='](self.$expected_invocations());
        };

        def.$invoked_expectations = function() {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = self.expectations).$select, $a.$$p = (TMP_2 = function(e){var self = TMP_2.$$s || this, $a;
            if (self.invocation_order == null) self.invocation_order = nil;
if (e == null) e = nil;
          return ($a = e['$ordered?'](), $a !== false && $a !== nil ?self.invocation_order['$include?'](e) : $a)}, TMP_2.$$s = self, TMP_2), $a).call($b);
        };

        def.$expected_invocations = function() {
          var $a, $b, TMP_3, self = this;

          return ($a = ($b = self.invocation_order).$map, $a.$$p = (TMP_3 = function(invocation){var self = TMP_3.$$s || this;
if (invocation == null) invocation = nil;
          return self.$expectation_for(invocation)}, TMP_3.$$s = self, TMP_3), $a).call($b).$compact();
        };

        return (def.$expectation_for = function(message) {
          var $a, $b, TMP_4, self = this;

          return ($a = ($b = self.expectations).$find, $a.$$p = (TMP_4 = function(e){var self = TMP_4.$$s || this;
if (e == null) e = nil;
          return message['$=='](e)}, TMP_4.$$s = self, TMP_4), $a).call($b);
        }, nil) && 'expectation_for';
      })(self, null)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/errors"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $MockExpectationError(){};
        var self = $MockExpectationError = $klass($base, $super, 'MockExpectationError', $MockExpectationError);

        var def = self.$$proto, $scope = self.$$scope;

        return nil;
      })(self, $scope.get('Exception'));

      (function($base, $super) {
        function $AmbiguousReturnError(){};
        var self = $AmbiguousReturnError = $klass($base, $super, 'AmbiguousReturnError', $AmbiguousReturnError);

        var def = self.$$proto, $scope = self.$$scope;

        return nil;
      })(self, $scope.get('StandardError'));
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/error_generator"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_writer', '$__raise', '$intro', '$arg_message', '$format_args', '$expected_args', '$format_received_args', '$inspect', '$message', '$join', '$collect', '$expected_part_of_expectation_error', '$received_part_of_expectation_error', '$%', '$description', '$range_description', '$+', '$count_message', '$method_call_args_description', '$first', '$===', '$>', '$length', '$gsub', '$arg_list', '$raise', '$private', '$nil?', '$[]', '$opts', '$empty?', '$arg_has_valid_description', '$respond_to?', '$!', '$received_arg_list', '$to_proc', '$<', '$==', '$pretty_print', '$abs']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ErrorGenerator(){};
        var self = $ErrorGenerator = $klass($base, $super, 'ErrorGenerator', $ErrorGenerator);

        var def = self.$$proto, $scope = self.$$scope;

        def.opts = def.name = def.target = nil;
        self.$attr_writer("opts");

        def.$initialize = function(target, name) {
          var self = this;

          self.target = target;
          return self.name = name;
        };

        def.$opts = function() {
          var $a, self = this;

          return ((($a = self.opts) !== false && $a !== nil) ? $a : self.opts = $hash2([], {}));
        };

        def.$raise_unexpected_message_error = function(message, args) {
          var $a, self = this;

          args = $slice.call(arguments, 1);
          return self.$__raise("" + (self.$intro()) + " received unexpected message :" + (message) + (($a = self).$arg_message.apply($a, [].concat(args))));
        };

        def.$raise_unexpected_message_args_error = function(expectation, args) {
          var $a, $b, self = this, expected_args = nil, actual_args = nil;

          args = $slice.call(arguments, 1);
          expected_args = ($a = self).$format_args.apply($a, [].concat(expectation.$expected_args()));
          actual_args = ($b = self).$format_received_args.apply($b, [].concat(args));
          return self.$__raise("" + (self.$intro()) + " received " + (expectation.$message().$inspect()) + " with unexpected arguments\n  expected: " + (expected_args) + "\n       got: " + (actual_args));
        };

        def.$raise_missing_default_stub_error = function(expectation, args) {
          var $a, $b, self = this, expected_args = nil, actual_args = nil;

          args = $slice.call(arguments, 1);
          expected_args = ($a = self).$format_args.apply($a, [].concat(expectation.$expected_args()));
          actual_args = ($b = self).$format_received_args.apply($b, [].concat(args));
          return self.$__raise("" + (self.$intro()) + " received " + (expectation.$message().$inspect()) + " with unexpected arguments\n  expected: " + (expected_args) + "\n       got: " + (actual_args) + "\n Please stub a default value first if message might be received with other args as well. \n");
        };

        def.$raise_similar_message_args_error = function(expectation, args_for_multiple_calls) {
          var $a, $b, $c, TMP_1, self = this, expected_args = nil, actual_args = nil;

          args_for_multiple_calls = $slice.call(arguments, 1);
          expected_args = ($a = self).$format_args.apply($a, [].concat(expectation.$expected_args()));
          actual_args = ($b = ($c = args_for_multiple_calls).$collect, $b.$$p = (TMP_1 = function(a){var self = TMP_1.$$s || this, $a;
if (a == null) a = nil;
          return ($a = self).$format_received_args.apply($a, [].concat(a))}, TMP_1.$$s = self, TMP_1), $b).call($c).$join(", ");
          return self.$__raise("" + (self.$intro()) + " received " + (expectation.$message().$inspect()) + " with unexpected arguments\n  expected: " + (expected_args) + "\n       got: " + (actual_args));
        };

        def.$raise_expectation_error = function(message, expected_received_count, argument_list_matcher, actual_received_count, expectation_count_type, args) {
          var $a, $b, self = this, expected_part = nil, received_part = nil;

          args = $slice.call(arguments, 5);
          expected_part = self.$expected_part_of_expectation_error(expected_received_count, expectation_count_type, argument_list_matcher);
          received_part = ($a = self).$received_part_of_expectation_error.apply($a, [actual_received_count].concat(args));
          return self.$__raise("(" + (self.$intro()) + ")." + (message) + (($b = self).$format_args.apply($b, [].concat(args))) + "\n    " + (expected_part) + "\n    " + (received_part));
        };

        def.$raise_unimplemented_error = function(doubled_module, method_name) {
          var self = this;

          return self.$__raise("%s does not implement:\n  %s"['$%']([doubled_module.$description(), method_name]));
        };

        def.$raise_arity_error = function(calculator, actual) {
          var self = this;

          return self.$__raise("Wrong number of arguments. Expected %s, got %s."['$%']([calculator.$range_description(), actual]));
        };

        def.$received_part_of_expectation_error = function(actual_received_count, args) {
          var self = this;

          args = $slice.call(arguments, 1);
          return (("received: ") + (self.$count_message(actual_received_count)))['$+'](self.$method_call_args_description(args));
        };

        def.$expected_part_of_expectation_error = function(expected_received_count, expectation_count_type, argument_list_matcher) {
          var self = this;

          return (("expected: ") + (self.$count_message(expected_received_count, expectation_count_type)))['$+'](self.$method_call_args_description(argument_list_matcher.$expected_args()));
        };

        def.$method_call_args_description = function(args) {
          var self = this, $case = nil;

          $case = args.$first();if ((($scope.get('ArgumentMatchers')).$$scope.get('AnyArgsMatcher'))['$===']($case)) {return " with any arguments"}else if ((($scope.get('ArgumentMatchers')).$$scope.get('NoArgsMatcher'))['$===']($case)) {return " with no arguments"};
          if (args.$length()['$>'](0)) {
            return " with arguments: " + (args.$inspect().$gsub(/\A\[(.+)\]\z/, "(\\1)"))
            } else {
            return ""
          };
        };

        def.$describe_expectation = function(message, expected_received_count, actual_received_count, args) {
          var $a, self = this;

          args = $slice.call(arguments, 3);
          return "have received " + (message) + (($a = self).$format_args.apply($a, [].concat(args))) + " " + (self.$count_message(expected_received_count));
        };

        def.$raise_out_of_order_error = function(message) {
          var self = this;

          return self.$__raise("" + (self.$intro()) + " received :" + (message) + " out of order");
        };

        def.$raise_block_failed_error = function(message, detail) {
          var self = this;

          return self.$__raise("" + (self.$intro()) + " received :" + (message) + " but passed block failed with: " + (detail));
        };

        def.$raise_missing_block_error = function(args_to_yield) {
          var $a, self = this;

          return self.$__raise("" + (self.$intro()) + " asked to yield |" + (($a = self).$arg_list.apply($a, [].concat(args_to_yield))) + "| but no block was passed");
        };

        def.$raise_wrong_arity_error = function(args_to_yield, arity) {
          var $a, self = this;

          return self.$__raise("" + (self.$intro()) + " yielded |" + (($a = self).$arg_list.apply($a, [].concat(args_to_yield))) + "| to block with arity of " + (arity));
        };

        def.$raise_only_valid_on_a_partial_mock = function(method) {
          var self = this;

          return self.$__raise(((((("") + (self.$intro())) + " is a pure mock object. `") + (method)) + "` is only ")['$+']("available on a partial mock object."));
        };

        def.$raise_expectation_on_unstubbed_method = function(method) {
          var self = this;

          return self.$__raise(((((("") + (self.$intro())) + " expected to have received ") + (method)) + ", but that ")['$+']("method has not been stubbed."));
        };

        def.$raise_expectation_on_mocked_method = function(method) {
          var self = this;

          return self.$__raise(((((("") + (self.$intro())) + " expected to have received ") + (method)) + ", but that ")['$+']("method has been mocked instead of stubbed."));
        };

        Opal.defs(self, '$raise_double_negation_error', function(wrapped_expression) {
          var self = this;

          return self.$raise("Isn't life confusing enough? You've already set a "['$+']("negative message expectation and now you are trying to ")['$+']("negate it again with `never`. What does an expression like ")['$+']("`" + (wrapped_expression) + ".not_to receive(:msg).never` even mean?"));
        });

        self.$private();

        def.$intro = function() {
          var $a, self = this;

          if ((($a = self.name) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "Double " + (self.name.$inspect())
          } else if ((($a = $scope.get('TestDouble')['$==='](self.target)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "Double"
          } else if ((($a = $scope.get('Class')['$==='](self.target)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "<" + (self.target.$inspect()) + " (class)>"
          } else if ((($a = self.target) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.target
            } else {
            return "nil"
          };
        };

        def.$__raise = function(message) {
          var $a, self = this;

          if ((($a = self.$opts()['$[]']("message")['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            message = self.$opts()['$[]']("message")
          };
          return $scope.get('Kernel').$raise((((($scope.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('MockExpectationError')), message);
        };

        def.$arg_message = function(args) {
          var $a, self = this;

          args = $slice.call(arguments, 0);
          return " with "['$+'](($a = self).$format_args.apply($a, [].concat(args)));
        };

        def.$format_args = function(args) {
          var $a, self = this;

          args = $slice.call(arguments, 0);
          if ((($a = args['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "(no args)"
            } else {
            return "("['$+'](($a = self).$arg_list.apply($a, [].concat(args)))['$+'](")")
          };
        };

        def.$arg_list = function(args) {
          var $a, $b, TMP_2, self = this;

          args = $slice.call(arguments, 0);
          return ($a = ($b = args).$collect, $a.$$p = (TMP_2 = function(arg){var self = TMP_2.$$s || this, $a;
if (arg == null) arg = nil;
          if ((($a = self.$arg_has_valid_description(arg)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return arg.$description()
              } else {
              return arg.$inspect()
            }}, TMP_2.$$s = self, TMP_2), $a).call($b).$join(", ");
        };

        def.$arg_has_valid_description = function(arg) {
          var $a, self = this;

          if ((($a = arg['$respond_to?']("description")) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return false
          };
          return ($a = arg.$description()['$nil?']()['$!'](), $a !== false && $a !== nil ?arg.$description()['$empty?']()['$!']() : $a);
        };

        def.$format_received_args = function(args) {
          var $a, self = this;

          args = $slice.call(arguments, 0);
          if ((($a = args['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "(no args)"
            } else {
            return "("['$+'](($a = self).$received_arg_list.apply($a, [].concat(args)))['$+'](")")
          };
        };

        def.$received_arg_list = function(args) {
          var $a, $b, self = this;

          args = $slice.call(arguments, 0);
          return ($a = ($b = args).$collect, $a.$$p = "inspect".$to_proc(), $a).call($b).$join(", ");
        };

        def.$count_message = function(count, expectation_count_type) {
          var $a, $b, self = this;

          if (expectation_count_type == null) {
            expectation_count_type = nil
          }
          if ((($a = ((($b = count['$<'](0)) !== false && $b !== nil) ? $b : expectation_count_type['$==']("at_least"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "at least " + (self.$pretty_print(count.$abs()))};
          if (expectation_count_type['$==']("at_most")) {
            return "at most " + (self.$pretty_print(count))};
          return self.$pretty_print(count);
        };

        return (def.$pretty_print = function(count) {
          var self = this;

          return "" + (count) + " time" + ((function() {if (count['$=='](1)) {
            return ""
            } else {
            return "s"
          }; return nil; })());
        }, nil) && 'pretty_print';
      })(self, null)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["securerandom"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$gsub']);
  return (function($base) {
    var self = $module($base, 'SecureRandom');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defs(self, '$uuid', function() {
      var $a, $b, TMP_1, self = this;

      return ($a = ($b = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx").$gsub, $a.$$p = (TMP_1 = function(ch){var self = TMP_1.$$s || this;
if (ch == null) ch = nil;
      
        var r = Math.random() * 16 | 0,
            v = ch == "x" ? r : (r & 3 | 8);

        return v.toString(16);
      }, TMP_1.$$s = self, TMP_1), $a).call($b, /[xy]/);
    })
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/space"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$each_value', '$verify', '$proxies', '$any_instance_recorders', '$reset_all', '$reset', '$clear', '$expectation_ordering', '$new', '$__id__', '$fetch', '$[]=', '$delete', '$select', '$===', '$object', '$values', '$id_for', '$__build_mock_proxy', '$verify_partial_doubles?', '$configuration', '$has_key?', '$!', '$method_defined?', '$require', '$equal?', '$_id2ref', '$instance_exec', '$uuid']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Space(){};
        var self = $Space = $klass($base, $super, 'Space', $Space);

        var def = self.$$proto, $scope = self.$$scope, $a, $b;

        def.expectation_ordering = nil;
        self.$attr_reader("proxies", "any_instance_recorders");

        def.$initialize = function() {
          var self = this;

          self.proxies = $hash2([], {});
          return self.any_instance_recorders = $hash2([], {});
        };

        def.$verify_all = function() {
          var $a, $b, TMP_1, $c, TMP_2, self = this;

          ($a = ($b = self.$proxies()).$each_value, $a.$$p = (TMP_1 = function(object){var self = TMP_1.$$s || this;
if (object == null) object = nil;
          return object.$verify()}, TMP_1.$$s = self, TMP_1), $a).call($b);
          return ($a = ($c = self.$any_instance_recorders()).$each_value, $a.$$p = (TMP_2 = function(recorder){var self = TMP_2.$$s || this;
if (recorder == null) recorder = nil;
          return recorder.$verify()}, TMP_2.$$s = self, TMP_2), $a).call($c);
        };

        def.$reset_all = function() {
          var $a, $b, TMP_3, self = this;

          $scope.get('ConstantMutator').$reset_all();
          ($a = ($b = self.$proxies()).$each_value, $a.$$p = (TMP_3 = function(object){var self = TMP_3.$$s || this;
if (object == null) object = nil;
          return object.$reset()}, TMP_3.$$s = self, TMP_3), $a).call($b);
          self.$proxies().$clear();
          self.$any_instance_recorders().$clear();
          return self.$expectation_ordering().$clear();
        };

        def.$expectation_ordering = function() {
          var $a, self = this;

          return ((($a = self.expectation_ordering) !== false && $a !== nil) ? $a : self.expectation_ordering = $scope.get('OrderGroup').$new());
        };

        def.$any_instance_recorder_for = function(klass) {
          var $a, $b, TMP_4, self = this, id = nil;

          id = klass.$__id__();
          return ($a = ($b = self.$any_instance_recorders()).$fetch, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

          return self.$any_instance_recorders()['$[]='](id, (($scope.get('AnyInstance')).$$scope.get('Recorder')).$new(klass))}, TMP_4.$$s = self, TMP_4), $a).call($b, id);
        };

        def.$remove_any_instance_recorder_for = function(klass) {
          var self = this;

          return self.$any_instance_recorders().$delete(klass.$__id__());
        };

        def.$proxies_of = function(klass) {
          var $a, $b, TMP_5, self = this;

          return ($a = ($b = self.$proxies().$values()).$select, $a.$$p = (TMP_5 = function(proxy){var self = TMP_5.$$s || this;
if (proxy == null) proxy = nil;
          return klass['$==='](proxy.$object())}, TMP_5.$$s = self, TMP_5), $a).call($b);
        };

        def.$proxy_for = function(object) {
          var $a, $b, TMP_6, self = this, id = nil;

          id = self.$id_for(object);
          return ($a = ($b = self.$proxies()).$fetch, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $a, $case = nil;

          return self.$proxies()['$[]='](id, (function() {$case = object;if ($scope.get('NilClass')['$===']($case)) {return $scope.get('ProxyForNil').$new(self.$expectation_ordering())}else if ($scope.get('TestDouble')['$===']($case)) {return object.$__build_mock_proxy(self.$expectation_ordering())}else {if ((($a = (($scope.get('RSpec')).$$scope.get('Mocks')).$configuration()['$verify_partial_doubles?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return $scope.get('VerifyingPartialMockProxy').$new(object, self.$expectation_ordering())
              } else {
              return $scope.get('PartialMockProxy').$new(object, self.$expectation_ordering())
            }}})())}, TMP_6.$$s = self, TMP_6), $a).call($b, id);
        };

        Opal.defn(self, '$ensure_registered', def.$proxy_for);

        def['$registered?'] = function(object) {
          var self = this;

          return self.$proxies()['$has_key?'](self.$id_for(object));
        };

        if ((($a = ($b = (Opal.Object.$$scope.BasicObject == null ? nil : 'constant'), $b !== false && $b !== nil ?Opal.get('BasicObject')['$method_defined?']("__id__")['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$require("securerandom");

          return (def.$id_for = function(object) {
            var $a, $b, TMP_7, self = this, id = nil;

            id = object.$__id__();
            if ((($a = object['$equal?'](Opal.get('ObjectSpace').$_id2ref(id))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return id};
            return ($a = ($b = object).$instance_exec, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $a;
              if (self.__id_for_rspec_mocks_space == null) self.__id_for_rspec_mocks_space = nil;

            return ((($a = self.__id_for_rspec_mocks_space) !== false && $a !== nil) ? $a : self.__id_for_rspec_mocks_space = Opal.get('SecureRandom').$uuid())}, TMP_7.$$s = self, TMP_7), $a).call($b);
          }, nil) && 'id_for';
          } else {
          return (def.$id_for = function(object) {
            var self = this;

            return object.$__id__();
          }, nil) && 'id_for'
        };
      })(self, null)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/extensions/marshal"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$nil?', '$space', '$!', '$registered?', '$===', '$dump_without_mocks', '$dup', '$alias_method', '$undef_method']);
  return (function($base) {
    var self = $module($base, 'Marshal');

    var def = self.$$proto, $scope = self.$$scope;

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      self.$$proto.$dump_with_mocks = function(object, rest) {
        var $a, $b, $c, self = this;

        rest = $slice.call(arguments, 1);
        if ((($a = ((($b = ((($c = ((Opal.get('RSpec')).$$scope.get('Mocks')).$space()['$nil?']()) !== false && $c !== nil) ? $c : ((Opal.get('RSpec')).$$scope.get('Mocks')).$space()['$registered?'](object)['$!']())) !== false && $b !== nil) ? $b : $scope.get('NilClass')['$==='](object))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = self).$dump_without_mocks.apply($a, [object].concat(rest))
          } else {
          return ($b = self).$dump_without_mocks.apply($b, [object.$dup()].concat(rest))
        };
      };
      self.$alias_method("dump_without_mocks", "dump");
      self.$undef_method("dump");
      return self.$alias_method("dump", "dump_with_mocks");
    })(self.$singleton_class())
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/any_instance/chain"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$define_method', '$record', '$to_proc', '$include', '$create_message_expectation_on', '$inject', '$__send__', '$last', '$first', '$messages', '$any?', '$==', '$negated?', '$raise_double_negation_error', '$private', '$empty?', '$verify_invocation_order', '$<<', '$unshift']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'AnyInstance');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Chain(){};
          var self = $Chain = $klass($base, $super, 'Chain', $Chain);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_6, TMP_8;

          def.messages = nil;
          def.$initialize = TMP_1 = function(recorder, args) {
            var self = this, $iter = TMP_1.$$p, block = $iter || nil;

            args = $slice.call(arguments, 1);
            TMP_1.$$p = null;
            self.recorder = recorder;
            self.expectation_args = args;
            return self.expectation_block = block;
          };

          (function($base) {
            var self = $module($base, 'Customizations');

            var def = self.$$proto, $scope = self.$$scope;

            Opal.defs(self, '$record', function(method_name) {
              var $a, $b, TMP_2, self = this;

              return ($a = ($b = self).$define_method, $a.$$p = (TMP_2 = function(args){var self = TMP_2.$$s || this, block, $a, $b;
args = $slice.call(arguments, 0);
                block = TMP_2.$$p || nil, TMP_2.$$p = null;
              return ($a = ($b = self).$record, $a.$$p = block.$to_proc(), $a).apply($b, [method_name].concat(args))}, TMP_2.$$s = self, TMP_2), $a).call($b, method_name);
            });

            self.$record("and_return");

            self.$record("and_raise");

            self.$record("and_throw");

            self.$record("and_yield");

            self.$record("and_call_original");

            self.$record("with");

            self.$record("once");

            self.$record("twice");

            self.$record("any_number_of_times");

            self.$record("exactly");

            self.$record("times");

            self.$record("never");

            self.$record("at_least");

            self.$record("at_most");
          })(self);

          self.$include($scope.get('Customizations'));

          def['$playback!'] = function(instance) {
            var $a, $b, TMP_3, self = this, message_expectation = nil;

            message_expectation = self.$create_message_expectation_on(instance);
            return ($a = ($b = self.$messages()).$inject, $a.$$p = (TMP_3 = function(object, message){var self = TMP_3.$$s || this, $a, $b;
if (object == null) object = nil;if (message == null) message = nil;
            return ($a = ($b = object).$__send__, $a.$$p = message.$last().$to_proc(), $a).apply($b, [].concat(message.$first()))}, TMP_3.$$s = self, TMP_3), $a).call($b, message_expectation);
          };

          def['$constrained_to_any_of?'] = function(constraints) {
            var $a, $b, TMP_4, self = this;

            constraints = $slice.call(arguments, 0);
            return ($a = ($b = constraints)['$any?'], $a.$$p = (TMP_4 = function(constraint){var self = TMP_4.$$s || this, $a, $b, TMP_5;
if (constraint == null) constraint = nil;
            return ($a = ($b = self.$messages())['$any?'], $a.$$p = (TMP_5 = function(message){var self = TMP_5.$$s || this;
if (message == null) message = nil;
              return message.$first().$first()['$=='](constraint)}, TMP_5.$$s = self, TMP_5), $a).call($b)}, TMP_4.$$s = self, TMP_4), $a).call($b);
          };

          def['$expectation_fulfilled!'] = function() {
            var self = this;

            return self.expectation_fulfilled = true;
          };

          def.$never = TMP_6 = function() {var $zuper = $slice.call(arguments, 0);
            var $a, self = this, $iter = TMP_6.$$p, $yield = $iter || nil;

            TMP_6.$$p = null;
            if ((($a = self['$negated?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              $scope.get('ErrorGenerator').$raise_double_negation_error("expect_any_instance_of(MyClass)")};
            return Opal.find_super_dispatcher(self, 'never', TMP_6, $iter).apply(self, $zuper);
          };

          self.$private();

          def['$negated?'] = function() {
            var $a, $b, TMP_7, self = this;

            return ($a = ($b = self.$messages())['$any?'], $a.$$p = (TMP_7 = function($c, _){var self = TMP_7.$$s || this;
message = $c[0];if (_ == null) _ = nil;
            return message['$==']("never")}, TMP_7.$$s = self, TMP_7), $a).call($b);
          };

          def.$messages = function() {
            var $a, self = this;

            return ((($a = self.messages) !== false && $a !== nil) ? $a : self.messages = []);
          };

          def.$last_message = function() {
            var $a, self = this;

            if ((($a = self.$messages()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$messages().$last().$first().$first()
            };
          };

          return (def.$record = TMP_8 = function(rspec_method_name, args) {
            var $a, $b, self = this, $iter = TMP_8.$$p, block = $iter || nil;

            args = $slice.call(arguments, 1);
            TMP_8.$$p = null;
            ($a = ($b = self).$verify_invocation_order, $a.$$p = block.$to_proc(), $a).apply($b, [rspec_method_name].concat(args));
            self.$messages()['$<<']([args.$unshift(rspec_method_name), block]);
            return self;
          }, nil) && 'record';
        })(self, null)
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/any_instance/stub_chain"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$private', '$proxy_for', '$add_stub', '$to_proc', '$<<', '$[]', '$stubs', '$message', '$yield_receiver_to_any_instance_implementation_blocks?', '$configuration', '$and_yield_receiver_to_implementation', '$include?', '$invocation_order', '$last_message', '$raise']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'AnyInstance');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $StubChain(){};
          var self = $StubChain = $klass($base, $super, 'StubChain', $StubChain);

          var def = self.$$proto, $scope = self.$$scope, TMP_1;

          def.expectation_block = def.expectation_args = def.recorder = def.invocation_order = nil;
          def['$expectation_fulfilled?'] = function() {
            var self = this;

            return true;
          };

          self.$private();

          def.$create_message_expectation_on = function(instance) {
            var $a, $b, self = this, proxy = nil, expected_from = nil, stub = nil;

            proxy = ((Opal.get('RSpec')).$$scope.get('Mocks')).$proxy_for(instance);
            expected_from = $scope.get('IGNORED_BACKTRACE_LINE');
            stub = ($a = ($b = proxy).$add_stub, $a.$$p = self.expectation_block.$to_proc(), $a).apply($b, [expected_from].concat(self.expectation_args));
            self.recorder.$stubs()['$[]'](stub.$message())['$<<'](stub);
            if ((($a = (($scope.get('RSpec')).$$scope.get('Mocks')).$configuration()['$yield_receiver_to_any_instance_implementation_blocks?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              stub.$and_yield_receiver_to_implementation()};
            return stub;
          };

          def.$invocation_order = function() {
            var $a, self = this;

            return ((($a = self.invocation_order) !== false && $a !== nil) ? $a : self.invocation_order = $hash2(["with", "and_return", "and_raise", "and_yield", "and_call_original"], {"with": [nil], "and_return": ["with", nil], "and_raise": ["with", nil], "and_yield": ["with", nil], "and_call_original": ["with", nil]}));
          };

          return (def.$verify_invocation_order = TMP_1 = function(rspec_method_name, args) {
            var $a, self = this, $iter = TMP_1.$$p, block = $iter || nil;

            args = $slice.call(arguments, 1);
            TMP_1.$$p = null;
            if ((($a = self.$invocation_order()['$[]'](rspec_method_name)['$include?'](self.$last_message())) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$raise($scope.get('NoMethodError'), "Undefined method " + (rspec_method_name))
            };
          }, nil) && 'verify_invocation_order';
        })(self, $scope.get('Chain'))
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/any_instance/stub_chain_chain"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$private', '$stub_chain_on', '$to_proc']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'AnyInstance');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $StubChainChain(){};
          var self = $StubChainChain = $klass($base, $super, 'StubChainChain', $StubChainChain);

          var def = self.$$proto, $scope = self.$$scope;

          def.expectation_block = def.expectation_args = def.invocation_order = nil;
          self.$private();

          def.$create_message_expectation_on = function(instance) {
            var $a, $b, self = this;

            return ($a = ($b = ((((Opal.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('StubChain'))).$stub_chain_on, $a.$$p = self.expectation_block.$to_proc(), $a).apply($b, [instance].concat(self.expectation_args));
          };

          return (def.$invocation_order = function() {
            var $a, self = this;

            return ((($a = self.invocation_order) !== false && $a !== nil) ? $a : self.invocation_order = $hash2(["and_return", "and_raise", "and_yield"], {"and_return": [nil], "and_raise": [nil], "and_yield": [nil]}));
          }, nil) && 'invocation_order';
        })(self, $scope.get('StubChain'))
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/any_instance/expectation_chain"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$constrained_to_any_of?', '$private', '$proxy_for', '$add_message_expectation', '$to_proc', '$yield_receiver_to_any_instance_implementation_blocks?', '$configuration', '$and_yield_receiver_to_implementation']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'AnyInstance');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $ExpectationChain(){};
          var self = $ExpectationChain = $klass($base, $super, 'ExpectationChain', $ExpectationChain);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

          def.expectation_fulfilled = nil;
          def['$expectation_fulfilled?'] = function() {
            var $a, self = this;

            return ((($a = self.expectation_fulfilled) !== false && $a !== nil) ? $a : self['$constrained_to_any_of?']("never", "any_number_of_times"));
          };

          def.$initialize = TMP_1 = function(args) {var $zuper = $slice.call(arguments, 0);
            var self = this, $iter = TMP_1.$$p, block = $iter || nil;

            args = $slice.call(arguments, 0);
            TMP_1.$$p = null;
            self.expectation_fulfilled = false;
            return Opal.find_super_dispatcher(self, 'initialize', TMP_1, $iter).apply(self, $zuper);
          };

          self.$private();

          return (def.$verify_invocation_order = TMP_2 = function(rspec_method_name, args) {
            var self = this, $iter = TMP_2.$$p, block = $iter || nil;

            args = $slice.call(arguments, 1);
            TMP_2.$$p = null;
            return nil;
          }, nil) && 'verify_invocation_order';
        })(self, $scope.get('Chain'));

        (function($base, $super) {
          function $PositiveExpectationChain(){};
          var self = $PositiveExpectationChain = $klass($base, $super, 'PositiveExpectationChain', $PositiveExpectationChain);

          var def = self.$$proto, $scope = self.$$scope;

          def.expectation_block = def.expectation_args = def.invocation_order = nil;
          self.$private();

          def.$create_message_expectation_on = function(instance) {
            var $a, $b, self = this, proxy = nil, expected_from = nil, me = nil;

            proxy = ((Opal.get('RSpec')).$$scope.get('Mocks')).$proxy_for(instance);
            expected_from = $scope.get('IGNORED_BACKTRACE_LINE');
            me = ($a = ($b = proxy).$add_message_expectation, $a.$$p = self.expectation_block.$to_proc(), $a).apply($b, [expected_from].concat(self.expectation_args));
            if ((($a = (($scope.get('RSpec')).$$scope.get('Mocks')).$configuration()['$yield_receiver_to_any_instance_implementation_blocks?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              me.$and_yield_receiver_to_implementation()};
            return me;
          };

          return (def.$invocation_order = function() {
            var $a, self = this;

            return ((($a = self.invocation_order) !== false && $a !== nil) ? $a : self.invocation_order = $hash2(["with", "and_return", "and_raise"], {"with": [nil], "and_return": ["with", nil], "and_raise": ["with", nil]}));
          }, nil) && 'invocation_order';
        })(self, $scope.get('ExpectationChain'));
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/any_instance/message_chains"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$new', '$[]=', '$[]', '$<<', '$reject!', '$===', '$find', '$all?', '$expectation_fulfilled?', '$compact', '$map', '$last', '$to_s', '$each', '$expectation_fulfilled!', '$raise_if_second_instance_to_receive_message', '$playback!', '$private', '$!', '$equal?', '$raise', '$join', '$sort', '$unfulfilled_expectations']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'AnyInstance');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $MessageChains(){};
          var self = $MessageChains = $klass($base, $super, 'MessageChains', $MessageChains);

          var def = self.$$proto, $scope = self.$$scope;

          def.chains_by_method_name = def.instance_with_expectation = nil;
          def.$initialize = function() {
            var $a, $b, TMP_1, self = this;

            return self.chains_by_method_name = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_1 = function(h, k){var self = TMP_1.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
            return h['$[]='](k, [])}, TMP_1.$$s = self, TMP_1), $a).call($b);
          };

          def['$[]'] = function(method_name) {
            var self = this;

            return self.chains_by_method_name['$[]'](method_name);
          };

          def.$add = function(method_name, chain) {
            var self = this;

            self.chains_by_method_name['$[]'](method_name)['$<<'](chain);
            return chain;
          };

          def['$remove_stub_chains_for!'] = function(method_name) {
            var $a, $b, TMP_2, self = this;

            return ($a = ($b = self.chains_by_method_name['$[]'](method_name))['$reject!'], $a.$$p = (TMP_2 = function(chain){var self = TMP_2.$$s || this;
if (chain == null) chain = nil;
            return $scope.get('StubChain')['$==='](chain)}, TMP_2.$$s = self, TMP_2), $a).call($b);
          };

          def['$has_expectation?'] = function(method_name) {
            var $a, $b, TMP_3, self = this;

            return ($a = ($b = self.chains_by_method_name['$[]'](method_name)).$find, $a.$$p = (TMP_3 = function(chain){var self = TMP_3.$$s || this;
if (chain == null) chain = nil;
            return $scope.get('ExpectationChain')['$==='](chain)}, TMP_3.$$s = self, TMP_3), $a).call($b);
          };

          def['$all_expectations_fulfilled?'] = function() {
            var $a, $b, TMP_4, self = this;

            return ($a = ($b = self.chains_by_method_name)['$all?'], $a.$$p = (TMP_4 = function(method_name, chains){var self = TMP_4.$$s || this, $a, $b, TMP_5;
if (method_name == null) method_name = nil;if (chains == null) chains = nil;
            return ($a = ($b = chains)['$all?'], $a.$$p = (TMP_5 = function(chain){var self = TMP_5.$$s || this;
if (chain == null) chain = nil;
              return chain['$expectation_fulfilled?']()}, TMP_5.$$s = self, TMP_5), $a).call($b)}, TMP_4.$$s = self, TMP_4), $a).call($b);
          };

          def.$unfulfilled_expectations = function() {
            var $a, $b, TMP_6, self = this;

            return ($a = ($b = self.chains_by_method_name).$map, $a.$$p = (TMP_6 = function(method_name, chains){var self = TMP_6.$$s || this, $a;
if (method_name == null) method_name = nil;if (chains == null) chains = nil;
            if ((($a = chains.$last()['$expectation_fulfilled?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                return nil
              } else if ((($a = $scope.get('ExpectationChain')['$==='](chains.$last())) !== nil && (!$a.$$is_boolean || $a == true))) {
                return method_name.$to_s()
                } else {
                return nil
              }}, TMP_6.$$s = self, TMP_6), $a).call($b).$compact();
          };

          def['$received_expected_message!'] = function(method_name) {
            var $a, $b, TMP_7, self = this;

            return ($a = ($b = self.chains_by_method_name['$[]'](method_name)).$each, $a.$$p = (TMP_7 = function(chain){var self = TMP_7.$$s || this;
if (chain == null) chain = nil;
            return chain['$expectation_fulfilled!']()}, TMP_7.$$s = self, TMP_7), $a).call($b);
          };

          def['$playback!'] = function(instance, method_name) {
            var $a, $b, TMP_8, self = this;

            self.$raise_if_second_instance_to_receive_message(instance);
            return ($a = ($b = self.chains_by_method_name['$[]'](method_name)).$each, $a.$$p = (TMP_8 = function(chain){var self = TMP_8.$$s || this;
if (chain == null) chain = nil;
            return chain['$playback!'](instance)}, TMP_8.$$s = self, TMP_8), $a).call($b);
          };

          self.$private();

          return (def.$raise_if_second_instance_to_receive_message = function(instance) {
            var $a, $b, self = this;

            if ((($a = $scope.get('ExpectationChain')['$==='](instance)) !== nil && (!$a.$$is_boolean || $a == true))) {
              ((($a = self.instance_with_expectation) !== false && $a !== nil) ? $a : self.instance_with_expectation = instance)};
            if ((($a = ($b = $scope.get('ExpectationChain')['$==='](instance), $b !== false && $b !== nil ?self.instance_with_expectation['$equal?'](instance)['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$raise((((($scope.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('MockExpectationError')), "Exactly one instance should have received the following message(s) but didn't: " + (self.$unfulfilled_expectations().$sort().$join(", ")))
              } else {
              return nil
            };
          }, nil) && 'raise_if_second_instance_to_receive_message';
        })(self, null)
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/any_instance/recorder"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$new', '$[]=', '$===', '$each', '$and_return', '$stub', '$observe!', '$add', '$message_chains', '$to_proc', '$normalize_chain', '$never', '$should_receive', '$include?', '$to_sym', '$raise', '$remove_stub_chains_for!', '$remove_single_stub', '$[]', '$stubs', '$proxies_of', '$clear', '$has_expectation?', '$stop_observing!', '$!', '$all_expectations_fulfilled?', '$join', '$sort', '$unfulfilled_expectations', '$stop_all_observation!', '$remove_any_instance_recorder_for', '$space', '$restore_method!', '$ensure_registered', '$playback!', '$received_expected_message!', '$private', '$unshift', '$reverse', '$map', '$split', '$to_s', '$shift', '$first', '$mark_invoked!', '$public_protected_or_private_method_defined?', '$build_alias_method_name', '$restore_original_method!', '$remove_dummy_method!', '$class_exec', '$remove_method', '$alias_method', '$method_defined?', '$private_method_defined?', '$delete', '$verify_partial_doubles?', '$configuration', '$already_observing?', '$<<', '$backup_method!', '$__send__', '$owner', '$method_handle_for', '$any_instance_recorder_for', '$instance_that_received', '$inspect']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'AnyInstance');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Recorder(){};
          var self = $Recorder = $klass($base, $super, 'Recorder', $Recorder);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_4, TMP_6, TMP_7, TMP_13;

          def.observed_methods = def.klass = def.expectation_set = def.played_methods = nil;
          self.$attr_reader("message_chains", "stubs", "klass");

          def.$initialize = function(klass) {
            var $a, $b, TMP_1, self = this;

            self.message_chains = $scope.get('MessageChains').$new();
            self.stubs = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_1 = function(hash, key){var self = TMP_1.$$s || this;
if (hash == null) hash = nil;if (key == null) key = nil;
            return hash['$[]='](key, [])}, TMP_1.$$s = self, TMP_1), $a).call($b);
            self.observed_methods = [];
            self.played_methods = $hash2([], {});
            self.klass = klass;
            return self.expectation_set = false;
          };

          def.$stub = TMP_2 = function(method_name_or_method_map) {
            var $a, $b, TMP_3, $c, self = this, $iter = TMP_2.$$p, block = $iter || nil;

            TMP_2.$$p = null;
            if ((($a = $scope.get('Hash')['$==='](method_name_or_method_map)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return ($a = ($b = method_name_or_method_map).$each, $a.$$p = (TMP_3 = function(method_name, return_value){var self = TMP_3.$$s || this;
if (method_name == null) method_name = nil;if (return_value == null) return_value = nil;
              return self.$stub(method_name).$and_return(return_value)}, TMP_3.$$s = self, TMP_3), $a).call($b)
              } else {
              self['$observe!'](method_name_or_method_map);
              return self.$message_chains().$add(method_name_or_method_map, ($a = ($c = $scope.get('StubChain')).$new, $a.$$p = block.$to_proc(), $a).call($c, self, method_name_or_method_map));
            };
          };

          def.$stub_chain = TMP_4 = function(method_names_and_optional_return_values) {
            var $a, $b, TMP_5, self = this, $iter = TMP_4.$$p, block = $iter || nil;

            method_names_and_optional_return_values = $slice.call(arguments, 0);
            TMP_4.$$p = null;
            return ($a = ($b = self).$normalize_chain, $a.$$p = (TMP_5 = function(method_name, args){var self = TMP_5.$$s || this, $a, $b;
if (method_name == null) method_name = nil;if (args == null) args = nil;
            self['$observe!'](method_name);
              return self.$message_chains().$add(method_name, ($a = ($b = $scope.get('StubChainChain')).$new, $a.$$p = block.$to_proc(), $a).apply($b, [self].concat(args)));}, TMP_5.$$s = self, TMP_5), $a).apply($b, [].concat(method_names_and_optional_return_values));
          };

          def.$should_receive = TMP_6 = function(method_name) {
            var $a, $b, self = this, $iter = TMP_6.$$p, block = $iter || nil;

            TMP_6.$$p = null;
            self.expectation_set = true;
            self['$observe!'](method_name);
            return self.$message_chains().$add(method_name, ($a = ($b = $scope.get('PositiveExpectationChain')).$new, $a.$$p = block.$to_proc(), $a).call($b, self, method_name));
          };

          def.$should_not_receive = TMP_7 = function(method_name) {
            var $a, $b, self = this, $iter = TMP_7.$$p, block = $iter || nil;

            TMP_7.$$p = null;
            return ($a = ($b = self).$should_receive, $a.$$p = block.$to_proc(), $a).call($b, method_name).$never();
          };

          def.$unstub = function(method_name) {
            var $a, $b, TMP_8, self = this;

            if ((($a = self.observed_methods['$include?'](method_name.$to_sym())) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$raise((((($scope.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('MockExpectationError')), "The method `" + (method_name) + "` was not stubbed or was already unstubbed")
            };
            self.$message_chains()['$remove_stub_chains_for!'](method_name);
            ($a = ($b = ((Opal.get('RSpec')).$$scope.get('Mocks')).$proxies_of(self.klass)).$each, $a.$$p = (TMP_8 = function(proxy){var self = TMP_8.$$s || this, $a, $b, TMP_9;
if (proxy == null) proxy = nil;
            return ($a = ($b = self.$stubs()['$[]'](method_name)).$each, $a.$$p = (TMP_9 = function(stub){var self = TMP_9.$$s || this;
if (stub == null) stub = nil;
              return proxy.$remove_single_stub(method_name, stub)}, TMP_9.$$s = self, TMP_9), $a).call($b)}, TMP_8.$$s = self, TMP_8), $a).call($b);
            self.$stubs()['$[]'](method_name).$clear();
            if ((($a = self.$message_chains()['$has_expectation?'](method_name)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self['$stop_observing!'](method_name)
            };
          };

          def.$verify = function() {
            var $a, $b, self = this;

            try {
            if ((($a = ($b = self.expectation_set, $b !== false && $b !== nil ?self.$message_chains()['$all_expectations_fulfilled?']()['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$raise((((($scope.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('MockExpectationError')), "Exactly one instance should have received the following message(s) but didn't: " + (self.$message_chains().$unfulfilled_expectations().$sort().$join(", ")))
              } else {
              return nil
            }
            } finally {
            self['$stop_all_observation!']();
            ((Opal.get('RSpec')).$$scope.get('Mocks')).$space().$remove_any_instance_recorder_for(self.klass);
            };
          };

          def['$stop_all_observation!'] = function() {
            var $a, $b, TMP_10, self = this;

            return ($a = ($b = self.observed_methods).$each, $a.$$p = (TMP_10 = function(method_name){var self = TMP_10.$$s || this;
if (method_name == null) method_name = nil;
            return self['$restore_method!'](method_name)}, TMP_10.$$s = self, TMP_10), $a).call($b);
          };

          def['$playback!'] = function(instance, method_name) {
            var $a, self = this;

            (($scope.get('RSpec')).$$scope.get('Mocks')).$space().$ensure_registered(instance);
            self.$message_chains()['$playback!'](instance, method_name);
            self.played_methods['$[]='](method_name, instance);
            if ((($a = self.$message_chains()['$has_expectation?'](method_name)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self['$received_expected_message!'](method_name)
              } else {
              return nil
            };
          };

          def.$instance_that_received = function(method_name) {
            var self = this;

            return self.played_methods['$[]'](method_name);
          };

          def.$build_alias_method_name = function(method_name) {
            var self = this;

            return "__" + (method_name) + "_without_any_instance__";
          };

          def['$already_observing?'] = function(method_name) {
            var self = this;

            return self.observed_methods['$include?'](method_name);
          };

          self.$private();

          def.$normalize_chain = TMP_13 = function(args) {
            var $a, $b, TMP_11, $c, $d, TMP_12, self = this, $iter = TMP_13.$$p, $yield = $iter || nil;

            args = $slice.call(arguments, 0);
            TMP_13.$$p = null;
            ($a = ($b = ($c = ($d = args.$shift().$to_s().$split(".")).$map, $c.$$p = (TMP_12 = function(s){var self = TMP_12.$$s || this;
if (s == null) s = nil;
            return s.$to_sym()}, TMP_12.$$s = self, TMP_12), $c).call($d).$reverse()).$each, $a.$$p = (TMP_11 = function(a){var self = TMP_11.$$s || this;
if (a == null) a = nil;
            return args.$unshift(a)}, TMP_11.$$s = self, TMP_11), $a).call($b);
            return $a = Opal.yieldX($yield, [args.$first(), args]), $a === $breaker ? $a : $a;
          };

          def['$received_expected_message!'] = function(method_name) {
            var self = this;

            self.$message_chains()['$received_expected_message!'](method_name);
            self['$restore_method!'](method_name);
            return self['$mark_invoked!'](method_name);
          };

          def['$restore_method!'] = function(method_name) {
            var $a, self = this;

            if ((($a = self['$public_protected_or_private_method_defined?'](self.$build_alias_method_name(method_name))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self['$restore_original_method!'](method_name)
              } else {
              return self['$remove_dummy_method!'](method_name)
            };
          };

          def['$restore_original_method!'] = function(method_name) {
            var $a, $b, TMP_14, self = this, alias_method_name = nil;

            alias_method_name = self.$build_alias_method_name(method_name);
            return ($a = ($b = self.klass).$class_exec, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

            self.$remove_method(method_name);
              self.$alias_method(method_name, alias_method_name);
              return self.$remove_method(alias_method_name);}, TMP_14.$$s = self, TMP_14), $a).call($b);
          };

          def['$remove_dummy_method!'] = function(method_name) {
            var $a, $b, TMP_15, self = this;

            return ($a = ($b = self.klass).$class_exec, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

            return self.$remove_method(method_name)}, TMP_15.$$s = self, TMP_15), $a).call($b);
          };

          def['$backup_method!'] = function(method_name) {
            var $a, $b, TMP_16, self = this, alias_method_name = nil;

            alias_method_name = self.$build_alias_method_name(method_name);
            if ((($a = self['$public_protected_or_private_method_defined?'](method_name)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return ($a = ($b = self.klass).$class_exec, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

              return self.$alias_method(alias_method_name, method_name)}, TMP_16.$$s = self, TMP_16), $a).call($b)
              } else {
              return nil
            };
          };

          def['$public_protected_or_private_method_defined?'] = function(method_name) {
            var $a, self = this;

            return ((($a = self.klass['$method_defined?'](method_name)) !== false && $a !== nil) ? $a : self.klass['$private_method_defined?'](method_name));
          };

          def['$stop_observing!'] = function(method_name) {
            var self = this;

            self['$restore_method!'](method_name);
            return self.observed_methods.$delete(method_name);
          };

          def['$observe!'] = function(method_name) {
            var $a, $b, TMP_17, self = this;

            if ((($a = (($scope.get('RSpec')).$$scope.get('Mocks')).$configuration()['$verify_partial_doubles?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              if ((($a = self.klass['$method_defined?'](method_name)) !== nil && (!$a.$$is_boolean || $a == true))) {
                } else {
                self.$raise($scope.get('MockExpectationError'))
              }};
            if ((($a = self['$already_observing?'](method_name)) !== nil && (!$a.$$is_boolean || $a == true))) {
              self['$stop_observing!'](method_name)};
            self.observed_methods['$<<'](method_name);
            self['$backup_method!'](method_name);
            return ($a = ($b = self.klass).$__send__, $a.$$p = (TMP_17 = function(args){var self = TMP_17.$$s || this, blk, $a, $b, klass = nil;
args = $slice.call(arguments, 0);
              blk = TMP_17.$$p || nil, TMP_17.$$p = null;
            klass = ((Opal.get('RSpec')).$$scope.get('Mocks')).$method_handle_for(self, method_name).$owner();
              ((Opal.get('RSpec')).$$scope.get('Mocks')).$any_instance_recorder_for(klass)['$playback!'](self, method_name);
              return ($a = ($b = self).$__send__, $a.$$p = blk.$to_proc(), $a).apply($b, [method_name].concat(args));}, TMP_17.$$s = self, TMP_17), $a).call($b, "define_method", method_name);
          };

          return (def['$mark_invoked!'] = function(method_name) {
            var $a, $b, TMP_18, self = this;

            self['$backup_method!'](method_name);
            return ($a = ($b = self.klass).$__send__, $a.$$p = (TMP_18 = function(args){var self = TMP_18.$$s || this, blk, klass = nil, invoked_instance = nil;
args = $slice.call(arguments, 0);
              blk = TMP_18.$$p || nil, TMP_18.$$p = null;
            klass = ((Opal.get('RSpec')).$$scope.get('Mocks')).$method_handle_for(self, method_name).$owner();
              invoked_instance = ((Opal.get('RSpec')).$$scope.get('Mocks')).$any_instance_recorder_for(klass).$instance_that_received(method_name);
              return self.$raise((((($scope.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('MockExpectationError')), "The message '" + (method_name) + "' was received by " + (self.$inspect()) + " but has already been received by " + (invoked_instance));}, TMP_18.$$s = self, TMP_18), $a).call($b, "define_method", method_name);
          }, nil) && 'mark_invoked!';
        })(self, null)
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/mutate_const"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$==', '$arity', '$method', '$const_defined?', '$const_defined_on?', '$const_get', '$raise', '$name', '$select', '$constants', '$inject', '$get_const_defined_on', '$split', '$normalize_const_name', '$!', '$===', '$join', '$sub', '$extend', '$attr_reader', '$attr_accessor', '$attr_writer', '$class', '$new', '$previously_defined=', '$recursive_const_defined?', '$stubbed=', '$hidden=', '$previously_defined?', '$original_value=', '$recursive_const_get', '$private_class_method', '$find', '$to_constant', '$unmutated', '$to_proc', '$raise_on_invalid_const', '$mutate', '$fetch', '$transfer_nested_constants?', '$configuration', '$include', '$pop', '$full_constant_name', '$original_value', '$__send__', '$const_set', '$verify_constants_to_transfer!', '$transfer_nested_constants', '$each', '$respond_to?', '$+', '$map', '$-', '$constants_defined_on', '$any?', '$dup', '$shift', '$first', '$register_mutator', '$rspec_reset', '$reverse', '$mutators', '$clear', '$<<', '$lambda']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'RecursiveConstMethods');

        var def = self.$$proto, $scope = self.$$scope, TMP_4;

        if ($scope.get('Module').$method("const_defined?").$arity()['$=='](1)) {
          Opal.defn(self, '$const_defined_on?', function(mod, const_name) {
            var self = this;

            return mod['$const_defined?'](const_name);
          });

          Opal.defn(self, '$get_const_defined_on', function(mod, const_name) {
            var $a, self = this;

            if ((($a = self['$const_defined_on?'](mod, const_name)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return mod.$const_get(const_name)};
            return self.$raise($scope.get('NameError'), "uninitialized constant " + (mod.$name()) + "::" + (const_name));
          });

          Opal.defn(self, '$constants_defined_on', function(mod) {
            var $a, $b, TMP_1, self = this;

            return ($a = ($b = mod.$constants()).$select, $a.$$p = (TMP_1 = function(c){var self = TMP_1.$$s || this;
if (c == null) c = nil;
            return self['$const_defined_on?'](mod, c)}, TMP_1.$$s = self, TMP_1), $a).call($b);
          });
          } else {
          Opal.defn(self, '$const_defined_on?', function(mod, const_name) {
            var self = this;

            return mod['$const_defined?'](const_name, false);
          });

          Opal.defn(self, '$get_const_defined_on', function(mod, const_name) {
            var self = this;

            return mod.$const_get(const_name, false);
          });

          Opal.defn(self, '$constants_defined_on', function(mod) {
            var self = this;

            return mod.$constants(false);
          });
        };

        Opal.defn(self, '$recursive_const_get', function(const_name) {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = self.$normalize_const_name(const_name).$split("::")).$inject, $a.$$p = (TMP_2 = function(mod, name){var self = TMP_2.$$s || this;
if (mod == null) mod = nil;if (name == null) name = nil;
          return self.$get_const_defined_on(mod, name)}, TMP_2.$$s = self, TMP_2), $a).call($b, $scope.get('Object'));
        });

        Opal.defn(self, '$recursive_const_defined?', TMP_4 = function(const_name) {try {

          var $a, $b, TMP_3, self = this, $iter = TMP_4.$$p, $yield = $iter || nil;

          TMP_4.$$p = null;
          return ($a = ($b = self.$normalize_const_name(const_name).$split("::")).$inject, $a.$$p = (TMP_3 = function($c, name){var self = TMP_3.$$s || this, $a, $b;
mod = $c[0];full_name = $c[1];if (name == null) name = nil;
          if ((($a = (($b = ($yield !== nil)) ? ($scope.get('Module')['$==='](mod))['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              if (Opal.yieldX($yield, [full_name, name]) === $breaker) return $breaker.$v};
            if ((($a = self['$const_defined_on?'](mod, name)) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              Opal.ret(false)
            };
            return [self.$get_const_defined_on(mod, name), [mod, name].$join("::")];}, TMP_3.$$s = self, TMP_3), $a).call($b, [$scope.get('Object'), ""]);
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        });

        Opal.defn(self, '$normalize_const_name', function(const_name) {
          var self = this;

          return const_name.$sub(/\A::/, "");
        });
      })(self);

      (function($base, $super) {
        function $Constant(){};
        var self = $Constant = $klass($base, $super, 'Constant', $Constant);

        var def = self.$$proto, $scope = self.$$scope;

        def.previously_defined = def.stubbed = def.hidden = nil;
        self.$extend($scope.get('RecursiveConstMethods'));

        def.$initialize = function(name) {
          var self = this;

          self.name = name;
          self.previously_defined = false;
          self.stubbed = false;
          return self.hidden = false;
        };

        self.$attr_reader("name");

        self.$attr_accessor("original_value");

        self.$attr_writer("previously_defined", "stubbed", "hidden");

        def['$previously_defined?'] = function() {
          var self = this;

          return self.previously_defined;
        };

        def['$mutated?'] = function() {
          var $a, self = this;

          return ((($a = self.stubbed) !== false && $a !== nil) ? $a : self.hidden);
        };

        def['$stubbed?'] = function() {
          var self = this;

          return self.stubbed;
        };

        def['$hidden?'] = function() {
          var self = this;

          return self.hidden;
        };

        def.$to_s = function() {
          var self = this;

          return "#<" + (self.$class().$name()) + " " + (self.$name()) + ">";
        };

        Opal.defn(self, '$inspect', def.$to_s);

        Opal.defs(self, '$unmutated', function(name) {
          var $a, $b, self = this, const$ = nil;

          const$ = self.$new(name);
          (($a = [self['$recursive_const_defined?'](name)]), $b = const$, $b['$previously_defined='].apply($b, $a), $a[$a.length-1]);
          (($a = [false]), $b = const$, $b['$stubbed='].apply($b, $a), $a[$a.length-1]);
          (($a = [false]), $b = const$, $b['$hidden='].apply($b, $a), $a[$a.length-1]);
          if ((($a = const$['$previously_defined?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            (($a = [self.$recursive_const_get(name)]), $b = const$, $b['$original_value='].apply($b, $a), $a[$a.length-1])};
          return const$;
        });

        self.$private_class_method("unmutated");

        return (Opal.defs(self, '$original', function(name) {
          var self = this, mutator = nil;

          mutator = $scope.get('ConstantMutator').$find(name);
          if (mutator !== false && mutator !== nil) {
            return mutator.$to_constant()
            } else {
            return self.$unmutated(name)
          };
        }), nil) && 'original';
      })(self, null);

      (function($base, $super) {
        function $ConstantMutator(){};
        var self = $ConstantMutator = $klass($base, $super, 'ConstantMutator', $ConstantMutator);

        var def = self.$$proto, $scope = self.$$scope;

        self.$extend($scope.get('RecursiveConstMethods'));

        Opal.defs(self, '$stub', function(constant_name, value, options) {
          var $a, $b, $c, self = this, mutator = nil;

          if (options == null) {
            options = $hash2([], {})
          }
          mutator = (function() {if ((($a = ($b = ($c = self)['$recursive_const_defined?'], $b.$$p = self.$raise_on_invalid_const().$to_proc(), $b).call($c, constant_name)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('DefinedConstantReplacer')
            } else {
            return $scope.get('UndefinedConstantSetter')
          }; return nil; })();
          self.$mutate(mutator.$new(constant_name, value, options.$fetch("transfer_nested_constants", (($scope.get('RSpec')).$$scope.get('Mocks')).$configuration()['$transfer_nested_constants?']())));
          return value;
        });

        Opal.defs(self, '$hide', function(constant_name) {
          var $a, self = this;

          if ((($a = self['$recursive_const_defined?'](constant_name)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil
          };
          self.$mutate($scope.get('ConstantHider').$new(constant_name, nil, $hash2([], {})));
          return nil;
        });

        (function($base, $super) {
          function $BaseMutator(){};
          var self = $BaseMutator = $klass($base, $super, 'BaseMutator', $BaseMutator);

          var def = self.$$proto, $scope = self.$$scope;

          def.full_constant_name = def.context_parts = nil;
          self.$include($scope.get('RecursiveConstMethods'));

          self.$attr_reader("original_value", "full_constant_name");

          def.$initialize = function(full_constant_name, mutated_value, transfer_nested_constants) {
            var self = this;

            self.full_constant_name = self.$normalize_const_name(full_constant_name);
            self.mutated_value = mutated_value;
            self.transfer_nested_constants = transfer_nested_constants;
            self.context_parts = self.full_constant_name.$split("::");
            return self.const_name = self.context_parts.$pop();
          };

          return (def.$to_constant = function() {
            var $a, $b, self = this, const$ = nil;

            const$ = $scope.get('Constant').$new(self.$full_constant_name());
            (($a = [self.$original_value()]), $b = const$, $b['$original_value='].apply($b, $a), $a[$a.length-1]);
            return const$;
          }, nil) && 'to_constant';
        })(self, null);

        (function($base, $super) {
          function $ConstantHider(){};
          var self = $ConstantHider = $klass($base, $super, 'ConstantHider', $ConstantHider);

          var def = self.$$proto, $scope = self.$$scope, TMP_5;

          def.context_parts = def.context = def.const_name = def.original_value = nil;
          def.$mutate = function() {
            var self = this;

            self.context = self.$recursive_const_get(self.context_parts.$join("::"));
            self.original_value = self.$get_const_defined_on(self.context, self.const_name);
            return self.context.$__send__("remove_const", self.const_name);
          };

          def.$to_constant = TMP_5 = function() {var $zuper = $slice.call(arguments, 0);
            var $a, $b, self = this, $iter = TMP_5.$$p, $yield = $iter || nil, const$ = nil;

            TMP_5.$$p = null;
            const$ = Opal.find_super_dispatcher(self, 'to_constant', TMP_5, $iter).apply(self, $zuper);
            (($a = [true]), $b = const$, $b['$hidden='].apply($b, $a), $a[$a.length-1]);
            (($a = [true]), $b = const$, $b['$previously_defined='].apply($b, $a), $a[$a.length-1]);
            return const$;
          };

          return (def.$rspec_reset = function() {
            var self = this;

            return self.context.$const_set(self.const_name, self.original_value);
          }, nil) && 'rspec_reset';
        })(self, $scope.get('BaseMutator'));

        (function($base, $super) {
          function $DefinedConstantReplacer(){};
          var self = $DefinedConstantReplacer = $klass($base, $super, 'DefinedConstantReplacer', $DefinedConstantReplacer);

          var def = self.$$proto, $scope = self.$$scope, TMP_6;

          def.context_parts = def.context = def.const_name = def.mutated_value = def.original_value = def.transfer_nested_constants = def.full_constant_name = nil;
          def.$mutate = function() {
            var self = this, constants_to_transfer = nil;

            self.context = self.$recursive_const_get(self.context_parts.$join("::"));
            self.original_value = self.$get_const_defined_on(self.context, self.const_name);
            constants_to_transfer = self['$verify_constants_to_transfer!']();
            self.context.$__send__("remove_const", self.const_name);
            self.context.$const_set(self.const_name, self.mutated_value);
            return self.$transfer_nested_constants(constants_to_transfer);
          };

          def.$to_constant = TMP_6 = function() {var $zuper = $slice.call(arguments, 0);
            var $a, $b, self = this, $iter = TMP_6.$$p, $yield = $iter || nil, const$ = nil;

            TMP_6.$$p = null;
            const$ = Opal.find_super_dispatcher(self, 'to_constant', TMP_6, $iter).apply(self, $zuper);
            (($a = [true]), $b = const$, $b['$stubbed='].apply($b, $a), $a[$a.length-1]);
            (($a = [true]), $b = const$, $b['$previously_defined='].apply($b, $a), $a[$a.length-1]);
            return const$;
          };

          def.$rspec_reset = function() {
            var self = this;

            self.context.$__send__("remove_const", self.const_name);
            return self.context.$const_set(self.const_name, self.original_value);
          };

          def.$transfer_nested_constants = function(constants) {
            var $a, $b, TMP_7, self = this;

            return ($a = ($b = constants).$each, $a.$$p = (TMP_7 = function(const$){var self = TMP_7.$$s || this;
              if (self.mutated_value == null) self.mutated_value = nil;
if (const$ == null) const$ = nil;
            return self.mutated_value.$const_set(const$, self.$get_const_defined_on(self.$original_value(), const$))}, TMP_7.$$s = self, TMP_7), $a).call($b);
          };

          return (def['$verify_constants_to_transfer!'] = function() {
            var $a, $b, TMP_8, $c, self = this, undefined_constants = nil, available_constants = nil;

            if ((($a = self.transfer_nested_constants) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              return []
            };
            ($a = ($b = $hash(self.original_value, "the original value", self.mutated_value, "the stubbed value")).$each, $a.$$p = (TMP_8 = function(value, description){var self = TMP_8.$$s || this, $a;
              if (self.full_constant_name == null) self.full_constant_name = nil;
if (value == null) value = nil;if (description == null) description = nil;
            if ((($a = value['$respond_to?']("constants")) !== nil && (!$a.$$is_boolean || $a == true))) {
                return nil
                } else {
                return self.$raise($scope.get('ArgumentError'), ((("Cannot transfer nested constants for ") + (self.full_constant_name)) + " ")['$+']("since " + (description) + " is not a class or module and only classes ")['$+']("and modules support nested constants."))
              }}, TMP_8.$$s = self, TMP_8), $a).call($b);
            if ((($a = $scope.get('Array')['$==='](self.transfer_nested_constants)) !== nil && (!$a.$$is_boolean || $a == true))) {
              if ($scope.get('RUBY_VERSION')['$==']("1.8.7")) {
                self.transfer_nested_constants = ($a = ($c = self.transfer_nested_constants).$map, $a.$$p = "to_s".$to_proc(), $a).call($c)};
              undefined_constants = self.transfer_nested_constants['$-'](self.$constants_defined_on(self.original_value));
              if ((($a = undefined_constants['$any?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                available_constants = self.$constants_defined_on(self.original_value)['$-'](self.transfer_nested_constants);
                self.$raise($scope.get('ArgumentError'), ((("Cannot transfer nested constant(s) ") + (undefined_constants.$join(" and "))) + " ")['$+']("for " + (self.full_constant_name) + " since they are not defined. Did you mean ")['$+']("" + (available_constants.$join(" or ")) + "?"));};
              return self.transfer_nested_constants;
              } else {
              return self.$constants_defined_on(self.original_value)
            };
          }, nil) && 'verify_constants_to_transfer!';
        })(self, $scope.get('BaseMutator'));

        (function($base, $super) {
          function $UndefinedConstantSetter(){};
          var self = $UndefinedConstantSetter = $klass($base, $super, 'UndefinedConstantSetter', $UndefinedConstantSetter);

          var def = self.$$proto, $scope = self.$$scope, TMP_11;

          def.context_parts = def.deepest_defined_const = def.const_name = def.mutated_value = def.const_to_remove = nil;
          def.$mutate = function() {
            var $a, $b, TMP_9, $c, TMP_10, self = this, remaining_parts = nil, context = nil;

            remaining_parts = self.context_parts.$dup();
            self.deepest_defined_const = ($a = ($b = self.context_parts).$inject, $a.$$p = (TMP_9 = function(klass, name){var self = TMP_9.$$s || this, $a;
if (klass == null) klass = nil;if (name == null) name = nil;
            if ((($a = self['$const_defined_on?'](klass, name)) !== nil && (!$a.$$is_boolean || $a == true))) {
                } else {
                return ($breaker.$v = klass, $breaker)
              };
              remaining_parts.$shift();
              return self.$get_const_defined_on(klass, name);}, TMP_9.$$s = self, TMP_9), $a).call($b, $scope.get('Object'));
            context = ($a = ($c = remaining_parts).$inject, $a.$$p = (TMP_10 = function(klass, name){var self = TMP_10.$$s || this;
if (klass == null) klass = nil;if (name == null) name = nil;
            return klass.$const_set(name, $scope.get('Module').$new())}, TMP_10.$$s = self, TMP_10), $a).call($c, self.deepest_defined_const);
            self.const_to_remove = ((($a = remaining_parts.$first()) !== false && $a !== nil) ? $a : self.const_name);
            return context.$const_set(self.const_name, self.mutated_value);
          };

          def.$to_constant = TMP_11 = function() {var $zuper = $slice.call(arguments, 0);
            var $a, $b, self = this, $iter = TMP_11.$$p, $yield = $iter || nil, const$ = nil;

            TMP_11.$$p = null;
            const$ = Opal.find_super_dispatcher(self, 'to_constant', TMP_11, $iter).apply(self, $zuper);
            (($a = [true]), $b = const$, $b['$stubbed='].apply($b, $a), $a[$a.length-1]);
            (($a = [false]), $b = const$, $b['$previously_defined='].apply($b, $a), $a[$a.length-1]);
            return const$;
          };

          return (def.$rspec_reset = function() {
            var self = this;

            return self.deepest_defined_const.$__send__("remove_const", self.const_to_remove);
          }, nil) && 'rspec_reset';
        })(self, $scope.get('BaseMutator'));

        Opal.defs(self, '$mutate', function(mutator) {
          var self = this;

          self.$register_mutator(mutator);
          return mutator.$mutate();
        });

        Opal.defs(self, '$reset_all', function() {
          var $a, $b, TMP_12, self = this;

          ($a = ($b = self.$mutators().$reverse()).$each, $a.$$p = (TMP_12 = function(s){var self = TMP_12.$$s || this;
if (s == null) s = nil;
          return s.$rspec_reset()}, TMP_12.$$s = self, TMP_12), $a).call($b);
          return self.$mutators().$clear();
        });

        Opal.defs(self, '$mutators', function() {
          var $a, self = this;
          if (self.mutators == null) self.mutators = nil;

          return ((($a = self.mutators) !== false && $a !== nil) ? $a : self.mutators = []);
        });

        Opal.defs(self, '$register_mutator', function(mutator) {
          var self = this;

          return self.$mutators()['$<<'](mutator);
        });

        Opal.defs(self, '$find', function(name) {
          var $a, $b, TMP_13, self = this;

          return ($a = ($b = self.$mutators()).$find, $a.$$p = (TMP_13 = function(s){var self = TMP_13.$$s || this;
if (s == null) s = nil;
          return s.$full_constant_name()['$=='](name)}, TMP_13.$$s = self, TMP_13), $a).call($b);
        });

        return (Opal.defs(self, '$raise_on_invalid_const', function() {
          var $a, $b, TMP_14, self = this;

          return ($a = ($b = self).$lambda, $a.$$p = (TMP_14 = function(const_name, failed_name){var self = TMP_14.$$s || this;
if (const_name == null) const_name = nil;if (failed_name == null) failed_name = nil;
          return self.$raise(((((("Cannot stub constant ") + (failed_name)) + " on ") + (const_name)) + " ")['$+']("since " + (const_name) + " is not a module."))}, TMP_14.$$s = self, TMP_14), $a).call($b);
        }), nil) && 'raise_on_invalid_const';
      })(self, null);

      Opal.cdecl($scope, 'ConstantStubber', $scope.get('ConstantMutator'));
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/matchers/have_received"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$+', '$expect', '$expected_messages_received_in_order?', '$ensure_count_unconstrained', '$never', '$generate_failure_message', '$description', '$each', '$define_method', '$<<', '$private', '$build_expectation', '$mock_proxy', '$apply_constraints_to', '$send', '$count_constraint', '$raise', '$detect', '$include?', '$map', '$to_proc', '$check_for_unexpected_arguments', '$generate_error', '$message', '$replay_received_message_on', '$expected_messages_received?', '$ensure_expected_ordering_received!', '$proxy_for']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Matchers');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $HaveReceived(){};
          var self = $HaveReceived = $klass($base, $super, 'HaveReceived', $HaveReceived);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, $a, $b, TMP_3;

          def.block = def.method_name = def.constraints = def.expectation = def.subject = nil;
          Opal.cdecl($scope, 'COUNT_CONSTRAINTS', ["exactly", "at_least", "at_most", "times", "once", "twice"]);

          Opal.cdecl($scope, 'ARGS_CONSTRAINTS', ["with"]);

          Opal.cdecl($scope, 'CONSTRAINTS', $scope.get('COUNT_CONSTRAINTS')['$+']($scope.get('ARGS_CONSTRAINTS'))['$+'](["ordered"]));

          def.$initialize = TMP_1 = function(method_name) {
            var self = this, $iter = TMP_1.$$p, block = $iter || nil;

            TMP_1.$$p = null;
            self.method_name = method_name;
            self.block = block;
            self.constraints = [];
            return self.subject = nil;
          };

          def.$name = function() {
            var self = this;

            return "have_received";
          };

          def['$matches?'] = TMP_2 = function(subject) {
            var $a, self = this, $iter = TMP_2.$$p, block = $iter || nil;

            TMP_2.$$p = null;
            ((($a = self.block) !== false && $a !== nil) ? $a : self.block = block);
            self.subject = subject;
            self.expectation = self.$expect();
            return self['$expected_messages_received_in_order?']();
          };

          def['$does_not_match?'] = function(subject) {
            var self = this;

            self.subject = subject;
            self.$ensure_count_unconstrained();
            self.expectation = self.$expect().$never();
            return self['$expected_messages_received_in_order?']();
          };

          def.$failure_message = function() {
            var self = this;

            return self.$generate_failure_message();
          };

          def.$negative_failure_message = function() {
            var self = this;

            return self.$generate_failure_message();
          };

          def.$description = function() {
            var self = this;

            return self.$expect().$description();
          };

          ($a = ($b = $scope.get('CONSTRAINTS')).$each, $a.$$p = (TMP_3 = function(expectation){var self = TMP_3.$$s || this, $a, $b, TMP_4;
if (expectation == null) expectation = nil;
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_4 = function(args){var self = TMP_4.$$s || this;
              if (self.constraints == null) self.constraints = nil;
args = $slice.call(arguments, 0);
            self.constraints['$<<']([expectation].concat(args));
              return self;}, TMP_4.$$s = self, TMP_4), $a).call($b, expectation)}, TMP_3.$$s = self, TMP_3), $a).call($b);

          self.$private();

          def.$expect = function() {
            var self = this, expectation = nil;

            expectation = self.$mock_proxy().$build_expectation(self.method_name);
            self.$apply_constraints_to(expectation);
            return expectation;
          };

          def.$apply_constraints_to = function(expectation) {
            var $a, $b, TMP_5, self = this;

            return ($a = ($b = self.constraints).$each, $a.$$p = (TMP_5 = function(constraint){var self = TMP_5.$$s || this, $a;
if (constraint == null) constraint = nil;
            return ($a = expectation).$send.apply($a, [].concat(constraint))}, TMP_5.$$s = self, TMP_5), $a).call($b);
          };

          def.$ensure_count_unconstrained = function() {
            var $a, self = this;

            if ((($a = self.$count_constraint()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$raise((((($scope.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('MockExpectationError')), "can't use " + (self.$count_constraint()) + " when negative")
              } else {
              return nil
            };
          };

          def.$count_constraint = function() {
            var $a, $b, TMP_6, $c, $d, self = this;

            return ($a = ($b = ($c = ($d = self.constraints).$map, $c.$$p = "first".$to_proc(), $c).call($d)).$detect, $a.$$p = (TMP_6 = function(constraint){var self = TMP_6.$$s || this;
if (constraint == null) constraint = nil;
            return $scope.get('COUNT_CONSTRAINTS')['$include?'](constraint)}, TMP_6.$$s = self, TMP_6), $a).call($b);
          };

          def.$generate_failure_message = function() {
            var self = this, error = nil;

            try {
            self.$mock_proxy().$check_for_unexpected_arguments(self.expectation);
              return self.expectation.$generate_error();
            } catch ($err) {if (Opal.rescue($err, [(((($scope.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('MockExpectationError'))])) {error = $err;
              return error.$message()
              }else { throw $err; }
            };
          };

          def['$expected_messages_received_in_order?'] = function() {
            var $a, $b, self = this;

            ($a = ($b = self.$mock_proxy()).$replay_received_message_on, $a.$$p = self.block.$to_proc(), $a).call($b, self.expectation);
            return ($a = self.expectation['$expected_messages_received?'](), $a !== false && $a !== nil ?self.expectation['$ensure_expected_ordering_received!']() : $a);
          };

          return (def.$mock_proxy = function() {
            var self = this;

            return (($scope.get('RSpec')).$$scope.get('Mocks')).$proxy_for(self.subject);
          }, nil) && 'mock_proxy';
        })(self, null)
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/matchers/receive"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$first_non_rspec_line', '$warn_if_any_instance', '$setup_mock_proxy_method_substitute', '$unshift', '$new', '$setup_expectation', '$to_proc', '$setup_any_instance_method_substitute', '$each', '$method_defined?', '$define_method', '$<<', '$public_instance_methods', '$private', '$===', '$warning', '$klass', '$proxy_for', '$setup_method_substitute', '$any_instance_recorder_for', '$to_sym', '$__send__', '$playback_onto']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Matchers');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Receive(){};
          var self = $Receive = $klass($base, $super, 'Receive', $Receive);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, $a, $b, TMP_7;

          def.recorded_customizations = def.backtrace_line = def.message = def.block = nil;
          def.$initialize = function(message, block) {
            var self = this;

            self.message = message;
            self.block = block;
            self.recorded_customizations = [];
            return self.backtrace_line = $scope.get('CallerFilter').$first_non_rspec_line();
          };

          def.$name = function() {
            var self = this;

            return "receive";
          };

          def.$setup_expectation = TMP_1 = function(subject) {
            var self = this, $iter = TMP_1.$$p, block = $iter || nil;

            TMP_1.$$p = null;
            self.$warn_if_any_instance("expect", subject);
            return self.$setup_mock_proxy_method_substitute(subject, "add_message_expectation", block);
          };

          Opal.defn(self, '$matches?', def.$setup_expectation);

          def.$setup_negative_expectation = TMP_2 = function(subject) {
            var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

            TMP_2.$$p = null;
            self.recorded_customizations.$unshift($scope.get('Customization').$new("never", [], nil));
            self.$warn_if_any_instance("expect", subject);
            return ($a = ($b = self).$setup_expectation, $a.$$p = block.$to_proc(), $a).call($b, subject);
          };

          Opal.defn(self, '$does_not_match?', def.$setup_negative_expectation);

          def.$setup_allowance = TMP_3 = function(subject) {
            var self = this, $iter = TMP_3.$$p, block = $iter || nil;

            TMP_3.$$p = null;
            self.$warn_if_any_instance("allow", subject);
            return self.$setup_mock_proxy_method_substitute(subject, "add_stub", block);
          };

          def.$setup_any_instance_expectation = TMP_4 = function(subject) {
            var self = this, $iter = TMP_4.$$p, block = $iter || nil;

            TMP_4.$$p = null;
            return self.$setup_any_instance_method_substitute(subject, "should_receive", block);
          };

          def.$setup_any_instance_negative_expectation = TMP_5 = function(subject) {
            var self = this, $iter = TMP_5.$$p, block = $iter || nil;

            TMP_5.$$p = null;
            return self.$setup_any_instance_method_substitute(subject, "should_not_receive", block);
          };

          def.$setup_any_instance_allowance = TMP_6 = function(subject) {
            var self = this, $iter = TMP_6.$$p, block = $iter || nil;

            TMP_6.$$p = null;
            return self.$setup_any_instance_method_substitute(subject, "stub", block);
          };

          ($a = ($b = $scope.get('MessageExpectation').$public_instance_methods(false)).$each, $a.$$p = (TMP_7 = function(method){var self = TMP_7.$$s || this, $a, $b, TMP_8;
if (method == null) method = nil;
          if ((($a = self['$method_defined?'](method)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil;};
            return ($a = ($b = self).$define_method, $a.$$p = (TMP_8 = function(args){var self = TMP_8.$$s || this, block;
              if (self.recorded_customizations == null) self.recorded_customizations = nil;
args = $slice.call(arguments, 0);
              block = TMP_8.$$p || nil, TMP_8.$$p = null;
            self.recorded_customizations['$<<']($scope.get('Customization').$new(method, args, block));
              return self;}, TMP_8.$$s = self, TMP_8), $a).call($b, method);}, TMP_7.$$s = self, TMP_7), $a).call($b);

          self.$private();

          def.$warn_if_any_instance = function(expression, subject) {
            var $a, self = this;

            if ((($a = (($scope.get('AnyInstance')).$$scope.get('Recorder'))['$==='](subject)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return $scope.get('RSpec').$warning(((((("`") + (expression)) + "(") + (subject.$klass())) + ".any_instance).to` ")['$<<']("is probably not what you meant, it does not operate on ")['$<<']("any instance of `" + (subject.$klass()) + "`. ")['$<<']("Use `" + (expression) + "_any_instance_of(" + (subject.$klass()) + ").to` instead."))
              } else {
              return nil
            };
          };

          def.$setup_mock_proxy_method_substitute = function(subject, method, block) {
            var self = this, proxy = nil;

            proxy = ((Opal.get('RSpec')).$$scope.get('Mocks')).$proxy_for(subject);
            return self.$setup_method_substitute(proxy, method, block, self.backtrace_line);
          };

          def.$setup_any_instance_method_substitute = function(subject, method, block) {
            var self = this, any_instance_recorder = nil;

            any_instance_recorder = ((Opal.get('RSpec')).$$scope.get('Mocks')).$any_instance_recorder_for(subject);
            return self.$setup_method_substitute(any_instance_recorder, method, block);
          };

          def.$setup_method_substitute = function(host, method, block, args) {
            var $a, $b, $c, TMP_9, self = this, expectation = nil;

            args = $slice.call(arguments, 3);
            args['$<<'](self.message.$to_sym());
            expectation = ($a = ($b = host).$__send__, $a.$$p = (((($c = self.block) !== false && $c !== nil) ? $c : block)).$to_proc(), $a).apply($b, [method].concat(args));
            ($a = ($c = self.recorded_customizations).$each, $a.$$p = (TMP_9 = function(customization){var self = TMP_9.$$s || this;
if (customization == null) customization = nil;
            return customization.$playback_onto(expectation)}, TMP_9.$$s = self, TMP_9), $a).call($c);
            return expectation;
          };

          return (function($base, $super) {
            function $Customization(){};
            var self = $Customization = $klass($base, $super, 'Customization', $Customization);

            var def = self.$$proto, $scope = self.$$scope;

            def.block = def.method_name = def.args = nil;
            def.$initialize = function(method_name, args, block) {
              var self = this;

              self.method_name = method_name;
              self.args = args;
              return self.block = block;
            };

            return (def.$playback_onto = function(expectation) {
              var $a, $b, self = this;

              return ($a = ($b = expectation).$__send__, $a.$$p = self.block.$to_proc(), $a).apply($b, [self.method_name].concat(self.args));
            }, nil) && 'playback_onto';
          })(self, null);
        })(self, null)
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/matchers/receive_messages"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$first_non_rspec_line', '$warn_about_block', '$each_message_on', '$add_simple_expectation', '$proxy_on', '$raise', '$+', '$add_simple_stub', '$and_return', '$should_receive', '$any_instance_of', '$stub', '$private', '$proxy_for', '$any_instance_recorder_for', '$each']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Matchers');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $ReceiveMessages(){};
          var self = $ReceiveMessages = $klass($base, $super, 'ReceiveMessages', $ReceiveMessages);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_5, TMP_7, TMP_9;

          def.message_return_value_hash = nil;
          def.$initialize = function(message_return_value_hash) {
            var self = this;

            self.message_return_value_hash = message_return_value_hash;
            return self.backtrace_line = $scope.get('CallerFilter').$first_non_rspec_line();
          };

          def.$name = function() {
            var self = this;

            return "receive_messages";
          };

          def.$setup_expectation = TMP_1 = function(subject) {
            var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

            TMP_1.$$p = null;
            if (($yield !== nil)) {
              self.$warn_about_block()};
            return ($a = ($b = self).$each_message_on, $a.$$p = (TMP_2 = function(host, message, return_value){var self = TMP_2.$$s || this;
              if (self.backtrace_line == null) self.backtrace_line = nil;
if (host == null) host = nil;if (message == null) message = nil;if (return_value == null) return_value = nil;
            return host.$add_simple_expectation(message, return_value, self.backtrace_line)}, TMP_2.$$s = self, TMP_2), $a).call($b, self.$proxy_on(subject));
          };

          Opal.defn(self, '$matches?', def.$setup_expectation);

          def.$setup_negative_expectation = function(subject) {
            var self = this;

            return self.$raise($scope.get('NegationUnsupportedError'), "`expect(...).to_not receive_messages` is not supported since it "['$+']("doesn't really make sense. What would it even mean?"));
          };

          Opal.defn(self, '$does_not_match?', def.$setup_negative_expectation);

          def.$setup_allowance = TMP_3 = function(subject) {
            var $a, $b, TMP_4, self = this, $iter = TMP_3.$$p, $yield = $iter || nil;

            TMP_3.$$p = null;
            if (($yield !== nil)) {
              self.$warn_about_block()};
            return ($a = ($b = self).$each_message_on, $a.$$p = (TMP_4 = function(host, message, return_value){var self = TMP_4.$$s || this;
if (host == null) host = nil;if (message == null) message = nil;if (return_value == null) return_value = nil;
            return host.$add_simple_stub(message, return_value)}, TMP_4.$$s = self, TMP_4), $a).call($b, self.$proxy_on(subject));
          };

          def.$setup_any_instance_expectation = TMP_5 = function(subject) {
            var $a, $b, TMP_6, self = this, $iter = TMP_5.$$p, $yield = $iter || nil;

            TMP_5.$$p = null;
            if (($yield !== nil)) {
              self.$warn_about_block()};
            return ($a = ($b = self).$each_message_on, $a.$$p = (TMP_6 = function(host, message, return_value){var self = TMP_6.$$s || this;
if (host == null) host = nil;if (message == null) message = nil;if (return_value == null) return_value = nil;
            return host.$should_receive(message).$and_return(return_value)}, TMP_6.$$s = self, TMP_6), $a).call($b, self.$any_instance_of(subject));
          };

          def.$setup_any_instance_allowance = TMP_7 = function(subject) {
            var self = this, $iter = TMP_7.$$p, $yield = $iter || nil;

            TMP_7.$$p = null;
            if (($yield !== nil)) {
              self.$warn_about_block()};
            return self.$any_instance_of(subject).$stub(self.message_return_value_hash);
          };

          def.$warn_about_block = function() {
            var self = this;

            return self.$raise("Implementation blocks aren't supported with `receive_messages`");
          };

          self.$private();

          def.$proxy_on = function(subject) {
            var self = this;

            return ((Opal.get('RSpec')).$$scope.get('Mocks')).$proxy_for(subject);
          };

          def.$any_instance_of = function(subject) {
            var self = this;

            return ((Opal.get('RSpec')).$$scope.get('Mocks')).$any_instance_recorder_for(subject);
          };

          return (def.$each_message_on = TMP_9 = function(host) {
            var $a, $b, TMP_8, self = this, $iter = TMP_9.$$p, $yield = $iter || nil;

            TMP_9.$$p = null;
            return ($a = ($b = self.message_return_value_hash).$each, $a.$$p = (TMP_8 = function(message, value){var self = TMP_8.$$s || this, $a;
if (message == null) message = nil;if (value == null) value = nil;
            return $a = Opal.yieldX($yield, [host, message, value]), $a === $breaker ? $a : $a}, TMP_8.$$s = self, TMP_8), $a).call($b);
          }, nil) && 'each_message_on';
        })(self, null)
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/stub_chain"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$stub_chain', '$new', '$to_proc', '$attr_reader', '$format_chain', '$>', '$length', '$chain', '$find_matching_stub', '$shift', '$block', '$invoke', '$stub', '$object', '$stub_chain_on', '$private', '$===', '$last', '$pop', '$each', '$<<', '$lambda', '$split', '$join', '$__send__', '$proxy_for', '$to_sym', '$first']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $StubChain(){};
        var self = $StubChain = $klass($base, $super, 'StubChain', $StubChain);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4;

        Opal.defs(self, '$stub_chain_on', TMP_1 = function(object, chain) {
          var $a, $b, self = this, $iter = TMP_1.$$p, blk = $iter || nil;

          chain = $slice.call(arguments, 1);
          TMP_1.$$p = null;
          return ($a = ($b = self).$new, $a.$$p = blk.$to_proc(), $a).apply($b, [object].concat(chain)).$stub_chain();
        });

        self.$attr_reader("object", "chain", "block");

        def.$initialize = TMP_2 = function(object, chain) {
          var $a, $b, $c, self = this, $iter = TMP_2.$$p, blk = $iter || nil;

          chain = $slice.call(arguments, 1);
          TMP_2.$$p = null;
          self.object = object;
          return $a = Opal.to_ary(($b = ($c = self).$format_chain, $b.$$p = blk.$to_proc(), $b).apply($c, [].concat(chain))), self.chain = ($a[0] == null ? nil : $a[0]), self.block = ($a[1] == null ? nil : $a[1]);
        };

        def.$stub_chain = function() {
          var $a, $b, $c, TMP_3, $d, $e, self = this, matching_stub = nil, next_in_chain = nil;

          if (self.$chain().$length()['$>'](1)) {
            if ((($a = matching_stub = self.$find_matching_stub()) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$chain().$shift();
              return ($a = ($b = matching_stub.$invoke(nil)).$stub_chain, $a.$$p = self.$block().$to_proc(), $a).apply($b, [].concat(self.$chain()));
              } else {
              next_in_chain = $scope.get('Mock').$new();
              ($a = ($c = self.$object()).$stub, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

              return next_in_chain}, TMP_3.$$s = self, TMP_3), $a).call($c, self.$chain().$shift());
              return ($a = ($d = $scope.get('StubChain')).$stub_chain_on, $a.$$p = self.$block().$to_proc(), $a).apply($d, [next_in_chain].concat(self.$chain()));
            }
            } else {
            return ($a = ($e = self.$object()).$stub, $a.$$p = self.$block().$to_proc(), $a).call($e, self.$chain().$shift())
          };
        };

        self.$private();

        def.$format_chain = TMP_4 = function(chain) {
          var $a, $b, TMP_5, self = this, $iter = TMP_4.$$p, blk = $iter || nil, hash = nil;

          chain = $slice.call(arguments, 0);
          TMP_4.$$p = null;
          if ((($a = $scope.get('Hash')['$==='](chain.$last())) !== nil && (!$a.$$is_boolean || $a == true))) {
            hash = chain.$pop();
            ($a = ($b = hash).$each, $a.$$p = (TMP_5 = function(k, v){var self = TMP_5.$$s || this, $a, $b, TMP_6;
if (k == null) k = nil;if (v == null) v = nil;
            chain['$<<'](k);
              return blk = ($a = ($b = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

              return v}, TMP_6.$$s = self, TMP_6), $a).call($b);}, TMP_5.$$s = self, TMP_5), $a).call($b);};
          return [chain.$join(".").$split("."), blk];
        };

        return (def.$find_matching_stub = function() {
          var self = this;

          return ((Opal.get('RSpec')).$$scope.get('Mocks')).$proxy_for(self.$object()).$__send__("find_matching_method_stub", self.$chain().$first().$to_sym());
        }, nil) && 'find_matching_stub';
      })(self, null)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/targets"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$define_method', '$===', '$raise_unsupported_matcher', '$define_matcher', '$to_proc', '$fetch', '$raise_negation_unsupported', '$private', '$__send__', '$raise', '$+', '$expression', '$name', '$class', '$delegate_to', '$disallow_negation', '$delegate_not_to']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.cdecl($scope, 'UnsupportedMatcherError', $scope.get('Class').$new($scope.get('StandardError')));

      Opal.cdecl($scope, 'NegationUnsupportedError', $scope.get('Class').$new($scope.get('StandardError')));

      (function($base, $super) {
        function $TargetBase(){};
        var self = $TargetBase = $klass($base, $super, 'TargetBase', $TargetBase);

        var def = self.$$proto, $scope = self.$$scope, TMP_4;

        def.target = nil;
        def.$initialize = function(target) {
          var self = this;

          return self.target = target;
        };

        Opal.defs(self, '$delegate_to', function(matcher_method) {
          var $a, $b, TMP_1, self = this;

          return ($a = ($b = self).$define_method, $a.$$p = (TMP_1 = function(matcher){var self = TMP_1.$$s || this, block, $a, $b;
if (matcher == null) matcher = nil;
            block = TMP_1.$$p || nil, TMP_1.$$p = null;
          if ((($a = ((($b = (($scope.get('Matchers')).$$scope.get('Receive'))['$==='](matcher)) !== false && $b !== nil) ? $b : (($scope.get('Matchers')).$$scope.get('ReceiveMessages'))['$==='](matcher))) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$raise_unsupported_matcher("to", matcher)
            };
            return ($a = ($b = self).$define_matcher, $a.$$p = block.$to_proc(), $a).call($b, matcher, matcher_method);}, TMP_1.$$s = self, TMP_1), $a).call($b, "to");
        });

        Opal.defs(self, '$delegate_not_to', function(matcher_method, options) {
          var $a, $b, TMP_2, self = this, method_name = nil;

          if (options == null) {
            options = $hash2([], {})
          }
          method_name = options.$fetch("from");
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_2 = function(matcher){var self = TMP_2.$$s || this, block, $a, $b, $case = nil;
if (matcher == null) matcher = nil;
            block = TMP_2.$$p || nil, TMP_2.$$p = null;
          return (function() {$case = matcher;if ((($scope.get('Matchers')).$$scope.get('Receive'))['$===']($case)) {return ($a = ($b = self).$define_matcher, $a.$$p = block.$to_proc(), $a).call($b, matcher, matcher_method)}else if ((($scope.get('Matchers')).$$scope.get('ReceiveMessages'))['$===']($case)) {return self.$raise_negation_unsupported(method_name, matcher)}else {return self.$raise_unsupported_matcher(method_name, matcher)}})()}, TMP_2.$$s = self, TMP_2), $a).call($b, method_name);
        });

        Opal.defs(self, '$disallow_negation', function(method_name) {
          var $a, $b, TMP_3, self = this;

          return ($a = ($b = self).$define_method, $a.$$p = (TMP_3 = function(matcher, args){var self = TMP_3.$$s || this;
if (matcher == null) matcher = nil;args = $slice.call(arguments, 1);
          return self.$raise_negation_unsupported(method_name, matcher)}, TMP_3.$$s = self, TMP_3), $a).call($b, method_name);
        });

        self.$private();

        def.$define_matcher = TMP_4 = function(matcher, name) {
          var $a, $b, self = this, $iter = TMP_4.$$p, block = $iter || nil;

          TMP_4.$$p = null;
          return ($a = ($b = matcher).$__send__, $a.$$p = block.$to_proc(), $a).call($b, name, self.target);
        };

        def.$raise_unsupported_matcher = function(method_name, matcher) {
          var self = this;

          return self.$raise($scope.get('UnsupportedMatcherError'), "only the `receive` or `receive_messages` matchers are supported "['$+']("with `" + (self.$expression()) + "(...)." + (method_name) + "`, but you have provided: " + (matcher)));
        };

        def.$raise_negation_unsupported = function(method_name, matcher) {
          var self = this;

          return self.$raise($scope.get('NegationUnsupportedError'), ((((((("`") + (self.$expression())) + "(...).") + (method_name)) + " ") + (matcher.$name())) + "` is not supported since it ")['$+']("doesn't really make sense. What would it even mean?"));
        };

        return (def.$expression = function() {
          var self = this;

          return ((self.$class()).$$scope.get('EXPRESSION'));
        }, nil) && 'expression';
      })(self, null);

      (function($base, $super) {
        function $AllowanceTarget(){};
        var self = $AllowanceTarget = $klass($base, $super, 'AllowanceTarget', $AllowanceTarget);

        var def = self.$$proto, $scope = self.$$scope;

        Opal.cdecl($scope, 'EXPRESSION', "allow");

        self.$delegate_to("setup_allowance");

        self.$disallow_negation("not_to");

        return self.$disallow_negation("to_not");
      })(self, $scope.get('TargetBase'));

      (function($base, $super) {
        function $ExpectationTarget(){};
        var self = $ExpectationTarget = $klass($base, $super, 'ExpectationTarget', $ExpectationTarget);

        var def = self.$$proto, $scope = self.$$scope;

        Opal.cdecl($scope, 'EXPRESSION', "expect");

        self.$delegate_to("setup_expectation");

        self.$delegate_not_to("setup_negative_expectation", $hash2(["from"], {"from": "not_to"}));

        return self.$delegate_not_to("setup_negative_expectation", $hash2(["from"], {"from": "to_not"}));
      })(self, $scope.get('TargetBase'));

      (function($base, $super) {
        function $AnyInstanceAllowanceTarget(){};
        var self = $AnyInstanceAllowanceTarget = $klass($base, $super, 'AnyInstanceAllowanceTarget', $AnyInstanceAllowanceTarget);

        var def = self.$$proto, $scope = self.$$scope;

        Opal.cdecl($scope, 'EXPRESSION', "allow_any_instance_of");

        self.$delegate_to("setup_any_instance_allowance");

        self.$disallow_negation("not_to");

        return self.$disallow_negation("to_not");
      })(self, $scope.get('TargetBase'));

      (function($base, $super) {
        function $AnyInstanceExpectationTarget(){};
        var self = $AnyInstanceExpectationTarget = $klass($base, $super, 'AnyInstanceExpectationTarget', $AnyInstanceExpectationTarget);

        var def = self.$$proto, $scope = self.$$scope;

        Opal.cdecl($scope, 'EXPRESSION', "expect_any_instance_of");

        self.$delegate_to("setup_any_instance_expectation");

        self.$delegate_not_to("setup_any_instance_negative_expectation", $hash2(["from"], {"from": "not_to"}));

        return self.$delegate_not_to("setup_any_instance_negative_expectation", $hash2(["from"], {"from": "to_not"}));
      })(self, $scope.get('TargetBase'));
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/syntax"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$deprecate', '$should_enabled?', '$class_exec', '$warn_unless_should_configured', '$[]', '$[]=', '$first_non_rspec_line', '$expect_message', '$to_proc', '$never', '$===', '$each', '$and_return', '$stub', '$allow_message', '$remove_stub', '$proxy_for', '$space', '$stub_chain_on', '$as_null_object', '$received_message?', '$respond_to?', '$any_instance_recorder_for', '$default_should_syntax_host', '$expect_enabled?', '$new', '$warn_about_block', '$method_defined?', '$==', '$>', '$to_f', '$last', '$ancestors']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Syntax');

        var def = self.$$proto, $scope = self.$$scope;

        Opal.defs(self, '$warn_about_should!', function() {
          var self = this;

          return self.warn_about_should = true;
        });

        Opal.defs(self, '$warn_unless_should_configured', function(method_name) {
          var $a, self = this;
          if (self.warn_about_should == null) self.warn_about_should = nil;

          if ((($a = self.warn_about_should) !== nil && (!$a.$$is_boolean || $a == true))) {
            $scope.get('RSpec').$deprecate("Using `" + (method_name) + "` from rspec-mocks' old `:should` syntax without explicitly enabling the syntax", $hash2(["replacement"], {"replacement": "the new `:expect` syntax or explicitly enable `:should`"}));
            return self.warn_about_should = false;
            } else {
            return nil
          };
        });

        Opal.defs(self, '$enable_should', function(syntax_host) {
          var $a, $b, TMP_1, self = this;

          if (syntax_host == null) {
            syntax_host = self.$default_should_syntax_host()
          }
          self.warn_about_should = false;
          if ((($a = self['$should_enabled?'](syntax_host)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          return ($a = ($b = syntax_host).$class_exec, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, TMP_2, TMP_3, TMP_4, TMP_6, TMP_7, $a, $b, TMP_8;

          Opal.defn(self, '$should_receive', TMP_2 = function(message, opts) {
              var $a, $b, $c, self = this, $iter = TMP_2.$$p, block = $iter || nil;

              if (opts == null) {
                opts = $hash2([], {})
              }
              TMP_2.$$p = null;
              ((((Opal.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('Syntax')).$warn_unless_should_configured("should_receive");
              ($a = "expected_from", $b = opts, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, $scope.get('CallerFilter').$first_non_rspec_line())));
              return ($a = ($b = ((Opal.get('RSpec')).$$scope.get('Mocks'))).$expect_message, $a.$$p = block.$to_proc(), $a).call($b, self, message, opts);
            });
            Opal.defn(self, '$should_not_receive', TMP_3 = function(message) {
              var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil, opts = nil;

              TMP_3.$$p = null;
              ((((Opal.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('Syntax')).$warn_unless_should_configured("should_not_receive");
              opts = $hash2(["expected_from"], {"expected_from": $scope.get('CallerFilter').$first_non_rspec_line()});
              return ($a = ($b = ((Opal.get('RSpec')).$$scope.get('Mocks'))).$expect_message, $a.$$p = block.$to_proc(), $a).call($b, self, message, opts).$never();
            });
            Opal.defn(self, '$stub', TMP_4 = function(message_or_hash, opts) {
              var $a, $b, TMP_5, $c, self = this, $iter = TMP_4.$$p, block = $iter || nil;

              if (opts == null) {
                opts = $hash2([], {})
              }
              TMP_4.$$p = null;
              ((((Opal.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('Syntax')).$warn_unless_should_configured("stub");
              if ((($a = Opal.get('Hash')['$==='](message_or_hash)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return ($a = ($b = message_or_hash).$each, $a.$$p = (TMP_5 = function(message, value){var self = TMP_5.$$s || this;
if (message == null) message = nil;if (value == null) value = nil;
                return self.$stub(message).$and_return(value)}, TMP_5.$$s = self, TMP_5), $a).call($b)
                } else {
                opts['$[]=']("expected_from", $scope.get('CallerFilter').$first_non_rspec_line());
                return ($a = ($c = ((Opal.get('RSpec')).$$scope.get('Mocks'))).$allow_message, $a.$$p = block.$to_proc(), $a).call($c, self, message_or_hash, opts);
              };
            });
            Opal.defn(self, '$unstub', function(message) {
              var self = this;

              ((((Opal.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('Syntax')).$warn_unless_should_configured("unstub");
              return ((Opal.get('RSpec')).$$scope.get('Mocks')).$space().$proxy_for(self).$remove_stub(message);
            });
            Opal.defn(self, '$stub_chain', TMP_6 = function(chain) {
              var $a, $b, self = this, $iter = TMP_6.$$p, blk = $iter || nil;

              chain = $slice.call(arguments, 0);
              TMP_6.$$p = null;
              ((((Opal.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('Syntax')).$warn_unless_should_configured("stub_chain");
              return ($a = ($b = ((((Opal.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('StubChain'))).$stub_chain_on, $a.$$p = blk.$to_proc(), $a).apply($b, [self].concat(chain));
            });
            Opal.defn(self, '$as_null_object', function() {
              var self = this;

              ((((Opal.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('Syntax')).$warn_unless_should_configured("as_null_object");
              self._null_object = true;
              return ((Opal.get('RSpec')).$$scope.get('Mocks')).$proxy_for(self).$as_null_object();
            });
            Opal.defn(self, '$null_object?', function() {
              var $a, self = this;

              ((((Opal.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('Syntax')).$warn_unless_should_configured("null_object?");
              return (($a = self['_null_object'], $a != null && $a !== nil) ? 'instance-variable' : nil);
            });
            Opal.defn(self, '$received_message?', TMP_7 = function(message, args) {
              var $a, $b, self = this, $iter = TMP_7.$$p, block = $iter || nil;

              args = $slice.call(arguments, 1);
              TMP_7.$$p = null;
              ((((Opal.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('Syntax')).$warn_unless_should_configured("received_message?");
              return ($a = ($b = ((Opal.get('RSpec')).$$scope.get('Mocks')).$proxy_for(self))['$received_message?'], $a.$$p = block.$to_proc(), $a).apply($b, [message].concat(args));
            });
            if ((($a = $scope.get('Class')['$respond_to?']("any_instance")) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return ($a = ($b = $scope.get('Class')).$class_exec, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

              return (Opal.defn(self, '$any_instance', function() {
                  var self = this;

                  ((((Opal.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('Syntax')).$warn_unless_should_configured("any_instance");
                  return ((Opal.get('RSpec')).$$scope.get('Mocks')).$any_instance_recorder_for(self);
                }), nil) && 'any_instance'}, TMP_8.$$s = self, TMP_8), $a).call($b)
            };}, TMP_1.$$s = self, TMP_1), $a).call($b);
        });

        Opal.defs(self, '$disable_should', function(syntax_host) {
          var $a, $b, TMP_9, $c, TMP_10, self = this;

          if (syntax_host == null) {
            syntax_host = self.$default_should_syntax_host()
          }
          if ((($a = self['$should_enabled?'](syntax_host)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil
          };
          ($a = ($b = syntax_host).$class_exec, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

          delete def.$should_receive;
            delete def.$should_not_receive;
            delete def.$stub;
            delete def.$unstub;
            delete def.$stub_chain;
            delete def.$as_null_object;
            delete def['$null_object?'];
            return delete def['$received_message?'];}, TMP_9.$$s = self, TMP_9), $a).call($b);
          return ($a = ($c = $scope.get('Class')).$class_exec, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

          return delete def.$any_instance}, TMP_10.$$s = self, TMP_10), $a).call($c);
        });

        Opal.defs(self, '$enable_expect', function(syntax_host) {
          var $a, $b, TMP_11, $c, TMP_14, self = this;

          if (syntax_host == null) {
            syntax_host = ((((Opal.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('ExampleMethods'))
          }
          if ((($a = self['$expect_enabled?'](syntax_host)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          ($a = ($b = syntax_host).$class_exec, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this, TMP_12, TMP_13;

          Opal.defn(self, '$receive', TMP_12 = function(method_name) {
              var self = this, $iter = TMP_12.$$p, block = $iter || nil;

              TMP_12.$$p = null;
              return (($scope.get('Matchers')).$$scope.get('Receive')).$new(method_name, block);
            });
            Opal.defn(self, '$receive_messages', TMP_13 = function(message_return_value_hash) {
              var self = this, $iter = TMP_13.$$p, $yield = $iter || nil, matcher = nil;

              TMP_13.$$p = null;
              matcher = (($scope.get('Matchers')).$$scope.get('ReceiveMessages')).$new(message_return_value_hash);
              if (($yield !== nil)) {
                matcher.$warn_about_block()};
              return matcher;
            });
            Opal.defn(self, '$allow', function(target) {
              var self = this;

              return $scope.get('AllowanceTarget').$new(target);
            });
            Opal.defn(self, '$expect_any_instance_of', function(klass) {
              var self = this;

              return $scope.get('AnyInstanceExpectationTarget').$new(klass);
            });
            return (Opal.defn(self, '$allow_any_instance_of', function(klass) {
              var self = this;

              return $scope.get('AnyInstanceAllowanceTarget').$new(klass);
            }), nil) && 'allow_any_instance_of';}, TMP_11.$$s = self, TMP_11), $a).call($b);
          return ($a = ($c = (((((($scope.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('ExampleMethods'))).$$scope.get('ExpectHost'))).$class_exec, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

          return (Opal.defn(self, '$expect', function(target) {
              var self = this;

              return $scope.get('ExpectationTarget').$new(target);
            }), nil) && 'expect'}, TMP_14.$$s = self, TMP_14), $a).call($c);
        });

        Opal.defs(self, '$disable_expect', function(syntax_host) {
          var $a, $b, TMP_15, $c, TMP_16, self = this;

          if (syntax_host == null) {
            syntax_host = ((((Opal.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('ExampleMethods'))
          }
          if ((($a = self['$expect_enabled?'](syntax_host)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil
          };
          ($a = ($b = syntax_host).$class_exec, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

          delete def.$receive;
            delete def.$receive_messages;
            delete def.$allow;
            delete def.$expect_any_instance_of;
            return delete def.$allow_any_instance_of;}, TMP_15.$$s = self, TMP_15), $a).call($b);
          return ($a = ($c = (((((($scope.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('ExampleMethods'))).$$scope.get('ExpectHost'))).$class_exec, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

          return delete def.$expect}, TMP_16.$$s = self, TMP_16), $a).call($c);
        });

        Opal.defs(self, '$should_enabled?', function(syntax_host) {
          var self = this;

          if (syntax_host == null) {
            syntax_host = self.$default_should_syntax_host()
          }
          return syntax_host['$method_defined?']("should_receive");
        });

        Opal.defs(self, '$expect_enabled?', function(syntax_host) {
          var self = this;

          if (syntax_host == null) {
            syntax_host = ((((Opal.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('ExampleMethods'))
          }
          return syntax_host['$method_defined?']("allow");
        });

        Opal.defs(self, '$default_should_syntax_host', function() {
          var $a, $b, $c, self = this;

          if ((($a = ($b = ($c = ($scope.JRUBY_VERSION != null), $c !== false && $c !== nil ?$scope.get('JRUBY_VERSION')['$==']("1.7.4") : $c), $b !== false && $b !== nil ?$scope.get('RUBY_VERSION').$to_f()['$>'](1.8) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return Opal.get('BasicObject')};
          if ((($a = (Opal.Object.$$scope.BasicObject == null ? nil : 'constant')) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return $scope.get('Object')
          };
          if ($scope.get('Object').$ancestors().$last()['$=='](Opal.get('BasicObject'))) {
            } else {
            return $scope.get('Object')
          };
          return Opal.get('BasicObject');
        });
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/configuration"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$each', '$enable_should', '$include?', '$Array', '$enable_expect', '$disable_expect', '$disable_should', '$should_enabled?', '$<<', '$expect_enabled?', '$!', '$syntax=', '$warn_about_should!', '$new', '$reset_syntaxes_to_default', '$configuration']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Configuration(){};
        var self = $Configuration = $klass($base, $super, 'Configuration', $Configuration);

        var def = self.$$proto, $scope = self.$$scope;

        def.yield_receiver_to_any_instance_implementation_blocks = def.verify_doubled_constant_names = def.transfer_nested_constants = def.verify_partial_doubles = nil;
        def.$initialize = function() {
          var self = this;

          self.yield_receiver_to_any_instance_implementation_blocks = true;
          self.verify_doubled_constant_names = false;
          self.transfer_nested_constants = false;
          return self.verify_partial_doubles = false;
        };

        def['$yield_receiver_to_any_instance_implementation_blocks?'] = function() {
          var self = this;

          return self.yield_receiver_to_any_instance_implementation_blocks;
        };

        def['$yield_receiver_to_any_instance_implementation_blocks='] = function(arg) {
          var self = this;

          return self.yield_receiver_to_any_instance_implementation_blocks = arg;
        };

        def.$add_stub_and_should_receive_to = function(modules) {
          var $a, $b, TMP_1, self = this;

          modules = $slice.call(arguments, 0);
          return ($a = ($b = modules).$each, $a.$$p = (TMP_1 = function(mod){var self = TMP_1.$$s || this;
if (mod == null) mod = nil;
          return $scope.get('Syntax').$enable_should(mod)}, TMP_1.$$s = self, TMP_1), $a).call($b);
        };

        def['$syntax='] = function(values) {
          var $a, self = this;

          if ((($a = self.$Array(values)['$include?']("expect")) !== nil && (!$a.$$is_boolean || $a == true))) {
            $scope.get('Syntax').$enable_expect()
            } else {
            $scope.get('Syntax').$disable_expect()
          };
          if ((($a = self.$Array(values)['$include?']("should")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Syntax').$enable_should()
            } else {
            return $scope.get('Syntax').$disable_should()
          };
        };

        def.$syntax = function() {
          var $a, self = this, syntaxes = nil;

          syntaxes = [];
          if ((($a = $scope.get('Syntax')['$should_enabled?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            syntaxes['$<<']("should")};
          if ((($a = $scope.get('Syntax')['$expect_enabled?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            syntaxes['$<<']("expect")};
          return syntaxes;
        };

        def['$verify_doubled_constant_names?'] = function() {
          var self = this;

          return self.verify_doubled_constant_names['$!']()['$!']();
        };

        def['$verify_doubled_constant_names='] = function(val) {
          var self = this;

          return self.verify_doubled_constant_names = val;
        };

        def['$transfer_nested_constants?'] = function() {
          var self = this;

          return self.transfer_nested_constants['$!']()['$!']();
        };

        def['$transfer_nested_constants='] = function(val) {
          var self = this;

          return self.transfer_nested_constants = val;
        };

        def['$verify_partial_doubles='] = function(val) {
          var self = this;

          return self.verify_partial_doubles = val['$!']()['$!']();
        };

        def['$verify_partial_doubles?'] = function() {
          var self = this;

          return self.verify_partial_doubles;
        };

        return (def.$reset_syntaxes_to_default = function() {
          var $a, $b, self = this;

          (($a = [["should", "expect"]]), $b = self, $b['$syntax='].apply($b, $a), $a[$a.length-1]);
          return (((($scope.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('Syntax'))['$warn_about_should!']();
        }, nil) && 'reset_syntaxes_to_default';
      })(self, null);

      Opal.defs(self, '$configuration', function() {
        var $a, self = this;
        if (self.configuration == null) self.configuration = nil;

        return ((($a = self.configuration) !== false && $a !== nil) ? $a : self.configuration = $scope.get('Configuration').$new());
      });

      self.$configuration().$reset_syntaxes_to_default();
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/arity_calculator"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$<=', '$min_arity', '$max_arity', '$==', '$to_s', '$private', '$method_defined?', '$>=', '$arity', '$method', '$~', '$supports_optional_and_splat_args?', '$parameters', '$any?', '$count', '$!', '$<', '$/']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ArityCalculator(){};
        var self = $ArityCalculator = $klass($base, $super, 'ArityCalculator', $ArityCalculator);

        var def = self.$$proto, $scope = self.$$scope, $a;

        def.method = nil;
        def.$initialize = function(method) {
          var self = this;

          return self.method = method;
        };

        def['$within_range?'] = function(actual) {
          var $a, self = this;

          return (($a = self.$min_arity()['$<='](actual)) ? actual['$<='](self.$max_arity()) : $a);
        };

        def.$range_description = function() {
          var self = this;

          if (self.$min_arity()['$=='](self.$max_arity())) {
            return self.$min_arity().$to_s()};
          if (self.$max_arity()['$==']($scope.get('INFINITY'))) {
            return "" + (self.$min_arity()) + " or more"};
          return "" + (self.$min_arity()) + " to " + (self.$max_arity());
        };

        self.$private();

        def.$method = function() {
          var self = this;

          return self.method;
        };

        Opal.defs(self, '$supports_optional_and_splat_args?', function() {
          var self = this;

          return $scope.get('Method')['$method_defined?']("parameters");
        });

        def.$min_arity = function() {
          var self = this;

          if (self.$method().$arity()['$>='](0)) {
            return self.$method().$arity()};
          return self.$method().$arity()['$~']();
        };

        if ((($a = self['$supports_optional_and_splat_args?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          def.$max_arity = function() {
            var $a, $b, $c, TMP_1, TMP_2, self = this, params = nil;

            params = self.$method().$parameters();
            if ((($a = ($b = ($c = params)['$any?'], $b.$$p = (TMP_1 = function(type, _){var self = TMP_1.$$s || this;
if (type == null) type = nil;if (_ == null) _ = nil;
            return type['$==']("rest")}, TMP_1.$$s = self, TMP_1), $b).call($c)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return $scope.get('INFINITY')
              } else {
              return ($a = ($b = params).$count, $a.$$p = (TMP_2 = function(type, _){var self = TMP_2.$$s || this;
if (type == null) type = nil;if (_ == null) _ = nil;
              return type['$==']("block")['$!']()}, TMP_2.$$s = self, TMP_2), $a).call($b)
            };
          }
          } else {
          def.$max_arity = function() {
            var self = this;

            if (self.$method().$arity()['$<'](0)) {
              return $scope.get('INFINITY')
              } else {
              return self.$method().$arity()
            };
          }
        };

        return Opal.cdecl($scope, 'INFINITY', (1)['$/'](0.0));
      })(self, null)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/verifying_message_expecation"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$attr_accessor', '$===', '$first', '$>', '$length', '$ensure_arity!', '$private', '$nil?', '$method_reference', '$when_defined', '$new', '$within_range?', '$raise_arity_error']);
  self.$require("rspec/mocks/arity_calculator");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $VerifyingMessageExpectation(){};
        var self = $VerifyingMessageExpectation = $klass($base, $super, 'VerifyingMessageExpectation', $VerifyingMessageExpectation);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

        self.$attr_accessor("method_reference");

        def.$initialize = TMP_1 = function(args) {var $zuper = $slice.call(arguments, 0);
          var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_1.$$p = null;
          return Opal.find_super_dispatcher(self, 'initialize', TMP_1, $iter).apply(self, $zuper);
        };

        def.$with = TMP_2 = function(args) {var $zuper = $slice.call(arguments, 0);
          var $a, self = this, $iter = TMP_2.$$p, block = $iter || nil, expected_arity = nil;

          args = $slice.call(arguments, 0);
          TMP_2.$$p = null;
          if ((($a = (($scope.get('ArgumentMatchers')).$$scope.get('AnyArgsMatcher'))['$==='](args.$first())) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            expected_arity = (function() {if ((($a = (($scope.get('ArgumentMatchers')).$$scope.get('NoArgsMatcher'))['$==='](args.$first())) !== nil && (!$a.$$is_boolean || $a == true))) {
              return 0
            } else if (args.$length()['$>'](0)) {
              return args.$length()
              } else {
              return Opal.find_super_dispatcher(self, 'with', TMP_2, $iter).apply(self, $zuper)
            }; return nil; })();
            self['$ensure_arity!'](expected_arity);
          };
          return Opal.find_super_dispatcher(self, 'with', TMP_2, $iter).apply(self, $zuper);
        };

        self.$private();

        return (def['$ensure_arity!'] = function(actual) {
          var $a, $b, TMP_3, self = this;

          if ((($a = self.$method_reference()['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          return ($a = ($b = self.$method_reference()).$when_defined, $a.$$p = (TMP_3 = function(method){var self = TMP_3.$$s || this, $a, calculator = nil;
            if (self.error_generator == null) self.error_generator = nil;
if (method == null) method = nil;
          calculator = $scope.get('ArityCalculator').$new(method);
            if ((($a = calculator['$within_range?'](actual)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              self.failed_fast = true;
              return self.error_generator.$raise_arity_error(calculator, actual);
            };}, TMP_3.$$s = self, TMP_3), $a).call($b);
        }, nil) && 'ensure_arity!';
      })(self, $scope.get('MessageExpectation'))
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/method_reference"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$when_loaded', '$method_implemented?', '$method_defined?', '$original_method', '$implemented?', '$private', '$defined?', '$find_method', '$==', '$<', '$to_i', '$[]', '$split', '$instance_method', '$dup', '$respond_to?', '$method']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $MethodReference(){};
        var self = $MethodReference = $klass($base, $super, 'MethodReference', $MethodReference);

        var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4;

        def.module_reference = nil;
        def.$initialize = function(module_reference, method_name) {
          var self = this;

          self.module_reference = module_reference;
          return self.method_name = method_name;
        };

        def['$implemented?'] = function() {
          var $a, $b, TMP_1, self = this;

          return ($a = ($b = self.module_reference).$when_loaded, $a.$$p = (TMP_1 = function(m){var self = TMP_1.$$s || this;
if (m == null) m = nil;
          return self['$method_implemented?'](m)}, TMP_1.$$s = self, TMP_1), $a).call($b);
        };

        def['$defined?'] = function() {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = self.module_reference).$when_loaded, $a.$$p = (TMP_2 = function(m){var self = TMP_2.$$s || this;
if (m == null) m = nil;
          return self['$method_defined?'](m)}, TMP_2.$$s = self, TMP_2), $a).call($b);
        };

        def.$when_defined = TMP_3 = function() {
          var $a, self = this, $iter = TMP_3.$$p, $yield = $iter || nil, original = nil;

          TMP_3.$$p = null;
          if ((($a = original = self.$original_method()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $a = Opal.yield1($yield, original), $a === $breaker ? $a : $a
            } else {
            return nil
          };
        };

        def.$when_unimplemented = TMP_4 = function() {
          var $a, self = this, $iter = TMP_4.$$p, $yield = $iter || nil;

          TMP_4.$$p = null;
          if ((($a = self['$implemented?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $a = Opal.yieldX($yield, []), $a === $breaker ? $a : $a
          };
        };

        self.$private();

        return (def.$original_method = function() {
          var $a, $b, TMP_5, self = this;

          return ($a = ($b = self.module_reference).$when_loaded, $a.$$p = (TMP_5 = function(m){var self = TMP_5.$$s || this, $a;
if (m == null) m = nil;
          return ($a = self['$defined?'](), $a !== false && $a !== nil ?self.$find_method(m) : $a)}, TMP_5.$$s = self, TMP_5), $a).call($b);
        }, nil) && 'original_method';
      })(self, null);

      (function($base, $super) {
        function $InstanceMethodReference(){};
        var self = $InstanceMethodReference = $klass($base, $super, 'InstanceMethodReference', $InstanceMethodReference);

        var def = self.$$proto, $scope = self.$$scope, $a, $b;

        def.method_name = nil;
        self.$private();

        def['$method_implemented?'] = function(m) {
          var self = this;

          return m['$method_defined?'](self.method_name);
        };

        Opal.defn(self, '$method_defined?', def['$method_implemented?']);

        if ((($a = (($b = $scope.get('RUBY_PLATFORM')['$==']("java")) ? $scope.get('JRUBY_VERSION').$split(".")['$[]'](-1).$to_i()['$<'](5) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return (def.$find_method = function(m) {
            var self = this;

            return m.$dup().$instance_method(self.method_name);
          }, nil) && 'find_method'
          } else {
          return (def.$find_method = function(m) {
            var self = this;

            return m.$instance_method(self.method_name);
          }, nil) && 'find_method'
        };
      })(self, $scope.get('MethodReference'));

      (function($base, $super) {
        function $ObjectMethodReference(){};
        var self = $ObjectMethodReference = $klass($base, $super, 'ObjectMethodReference', $ObjectMethodReference);

        var def = self.$$proto, $scope = self.$$scope;

        def.method_name = nil;
        self.$private();

        def['$method_implemented?'] = function(m) {
          var self = this;

          return m['$respond_to?'](self.method_name);
        };

        def['$method_defined?'] = function(m) {
          var self = this;

          return ((function(self) {
            var $scope = self.$$scope, def = self.$$proto;

            return self
          })(m.$singleton_class()))['$method_defined?'](self.method_name);
        };

        return (def.$find_method = function(m) {
          var self = this;

          return m.$method(self.method_name);
        }, nil) && 'find_method';
      })(self, $scope.get('MethodReference'));
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/verifying_proxy"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$ensure_implemented', '$defined?', '$when_unimplemented', '$raise_unimplemented_error', '$[]', '$method_reference', '$include', '$new', '$[]=', '$tap', '$method_reference=', '$ensure_arity!', '$length', '$private', '$when_defined', '$within_range?', '$raise', '$arity', '$respond_to?', '$save_original_method!', '$original_method']);
  self.$require("rspec/mocks/verifying_message_expecation");
  self.$require("rspec/mocks/method_reference");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'VerifyingProxyMethods');

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

        Opal.defn(self, '$add_stub', TMP_1 = function(location, method_name, opts) {var $zuper = $slice.call(arguments, 0);
          var self = this, $iter = TMP_1.$$p, implementation = $iter || nil;

          if (opts == null) {
            opts = $hash2([], {})
          }
          TMP_1.$$p = null;
          self.$ensure_implemented(method_name);
          return Opal.find_super_dispatcher(self, 'add_stub', TMP_1, $iter).apply(self, $zuper);
        });

        Opal.defn(self, '$add_simple_stub', TMP_2 = function(method_name, args) {var $zuper = $slice.call(arguments, 0);
          var self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

          args = $slice.call(arguments, 1);
          TMP_2.$$p = null;
          self.$ensure_implemented(method_name);
          return Opal.find_super_dispatcher(self, 'add_simple_stub', TMP_2, $iter).apply(self, $zuper);
        });

        Opal.defn(self, '$add_message_expectation', TMP_3 = function(location, method_name, opts) {var $zuper = $slice.call(arguments, 0);
          var self = this, $iter = TMP_3.$$p, block = $iter || nil;

          if (opts == null) {
            opts = $hash2([], {})
          }
          TMP_3.$$p = null;
          self.$ensure_implemented(method_name);
          return Opal.find_super_dispatcher(self, 'add_message_expectation', TMP_3, $iter).apply(self, $zuper);
        });

        Opal.defn(self, '$ensure_implemented', function(method_name) {
          var $a, $b, TMP_4, self = this;
          if (self.doubled_module == null) self.doubled_module = nil;

          if ((($a = self.doubled_module['$defined?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil
          };
          return ($a = ($b = self.$method_reference()['$[]'](method_name)).$when_unimplemented, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;
            if (self.error_generator == null) self.error_generator = nil;
            if (self.doubled_module == null) self.doubled_module = nil;

          return self.error_generator.$raise_unimplemented_error(self.doubled_module, method_name)}, TMP_4.$$s = self, TMP_4), $a).call($b);
        });
      })(self);

      (function($base, $super) {
        function $VerifyingProxy(){};
        var self = $VerifyingProxy = $klass($base, $super, 'VerifyingProxy', $VerifyingProxy);

        var def = self.$$proto, $scope = self.$$scope, TMP_5;

        def.method_reference = nil;
        self.$include($scope.get('VerifyingProxyMethods'));

        def.$initialize = TMP_5 = function(object, order_group, name, method_reference_class) {
          var $a, $b, TMP_6, self = this, $iter = TMP_5.$$p, $yield = $iter || nil;

          TMP_5.$$p = null;
          Opal.find_super_dispatcher(self, 'initialize', TMP_5, null).apply(self, [object, order_group]);
          self.object = object;
          self.doubled_module = name;
          self.method_reference_class = method_reference_class;
          return self.method_doubles = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_6 = function(h, k){var self = TMP_6.$$s || this;
            if (self.object == null) self.object = nil;
if (h == null) h = nil;if (k == null) k = nil;
          return h['$[]='](k, $scope.get('VerifyingMethodDouble').$new(self.object, k, self, self.$method_reference()['$[]'](k)))}, TMP_6.$$s = self, TMP_6), $a).call($b);
        };

        return (def.$method_reference = function() {
          var $a, $b, $c, TMP_7, self = this;

          return ((($a = self.method_reference) !== false && $a !== nil) ? $a : self.method_reference = ($b = ($c = $scope.get('Hash')).$new, $b.$$p = (TMP_7 = function(h, k){var self = TMP_7.$$s || this;
            if (self.method_reference_class == null) self.method_reference_class = nil;
            if (self.doubled_module == null) self.doubled_module = nil;
if (h == null) h = nil;if (k == null) k = nil;
          return h['$[]='](k, self.method_reference_class.$new(self.doubled_module, k))}, TMP_7.$$s = self, TMP_7), $b).call($c));
        }, nil) && 'method_reference';
      })(self, $scope.get('Proxy'));

      (function($base, $super) {
        function $VerifyingPartialMockProxy(){};
        var self = $VerifyingPartialMockProxy = $klass($base, $super, 'VerifyingPartialMockProxy', $VerifyingPartialMockProxy);

        var def = self.$$proto, $scope = self.$$scope, TMP_8;

        def.method_doubles = nil;
        self.$include($scope.get('VerifyingProxyMethods'));

        def.$initialize = TMP_8 = function(object, expectation_ordering) {
          var $a, $b, TMP_9, self = this, $iter = TMP_8.$$p, $yield = $iter || nil;

          TMP_8.$$p = null;
          Opal.find_super_dispatcher(self, 'initialize', TMP_8, null).apply(self, [object, expectation_ordering]);
          self.doubled_module = $scope.get('DirectObjectReference').$new(object);
          return self.method_doubles = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_9 = function(h, k){var self = TMP_9.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
          return h['$[]='](k, $scope.get('VerifyingExistingMethodDouble').$new(object, k, self))}, TMP_9.$$s = self, TMP_9), $a).call($b);
        };

        return (def.$method_reference = function() {
          var self = this;

          return self.method_doubles;
        }, nil) && 'method_reference';
      })(self, $scope.get('PartialMockProxy'));

      (function($base, $super) {
        function $VerifyingMethodDouble(){};
        var self = $VerifyingMethodDouble = $klass($base, $super, 'VerifyingMethodDouble', $VerifyingMethodDouble);

        var def = self.$$proto, $scope = self.$$scope, TMP_10, TMP_12, TMP_13;

        def.method_reference = nil;
        def.$initialize = TMP_10 = function(object, method_name, proxy, method_reference) {
          var self = this, $iter = TMP_10.$$p, $yield = $iter || nil;

          TMP_10.$$p = null;
          Opal.find_super_dispatcher(self, 'initialize', TMP_10, null).apply(self, [object, method_name, proxy]);
          return self.method_reference = method_reference;
        };

        def.$message_expectation_class = function() {
          var self = this;

          return $scope.get('VerifyingMessageExpectation');
        };

        def.$add_expectation = TMP_12 = function(arg) {var $zuper = $slice.call(arguments, 0);
          var $a, $b, TMP_11, self = this, $iter = TMP_12.$$p, $yield = $iter || nil;

          arg = $slice.call(arguments, 0);
          TMP_12.$$p = null;
          return ($a = ($b = Opal.find_super_dispatcher(self, 'add_expectation', TMP_12, $iter).apply(self, $zuper)).$tap, $a.$$p = (TMP_11 = function(x){var self = TMP_11.$$s || this, $a, $b;
            if (self.method_reference == null) self.method_reference = nil;
if (x == null) x = nil;
          return (($a = [self.method_reference]), $b = x, $b['$method_reference='].apply($b, $a), $a[$a.length-1])}, TMP_11.$$s = self, TMP_11), $a).call($b);
        };

        def.$proxy_method_invoked = TMP_13 = function(obj, args) {var $zuper = $slice.call(arguments, 0);
          var self = this, $iter = TMP_13.$$p, block = $iter || nil;

          args = $slice.call(arguments, 1);
          TMP_13.$$p = null;
          self['$ensure_arity!'](args.$length());
          return Opal.find_super_dispatcher(self, 'proxy_method_invoked', TMP_13, $iter).apply(self, $zuper);
        };

        self.$private();

        return (def['$ensure_arity!'] = function(arity) {
          var $a, $b, TMP_14, self = this;

          return ($a = ($b = self.method_reference).$when_defined, $a.$$p = (TMP_14 = function(method){var self = TMP_14.$$s || this, $a, calculator = nil;
if (method == null) method = nil;
          calculator = $scope.get('ArityCalculator').$new(method);
            if ((($a = calculator['$within_range?'](arity)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arity) + " for " + (method.$arity()) + ")")
            };}, TMP_14.$$s = self, TMP_14), $a).call($b);
        }, nil) && 'ensure_arity!';
      })(self, $scope.get('MethodDouble'));

      (function($base, $super) {
        function $VerifyingExistingMethodDouble(){};
        var self = $VerifyingExistingMethodDouble = $klass($base, $super, 'VerifyingExistingMethodDouble', $VerifyingExistingMethodDouble);

        var def = self.$$proto, $scope = self.$$scope, TMP_15, TMP_16, TMP_17;

        def.valid_method = nil;
        def.$initialize = TMP_15 = function(object, method_name, proxy) {
          var self = this, $iter = TMP_15.$$p, $yield = $iter || nil;

          TMP_15.$$p = null;
          Opal.find_super_dispatcher(self, 'initialize', TMP_15, null).apply(self, [object, method_name, proxy, self]);
          self.valid_method = object['$respond_to?'](method_name);
          return self['$save_original_method!']();
        };

        def.$when_defined = TMP_16 = function() {
          var $a, self = this, $iter = TMP_16.$$p, $yield = $iter || nil;

          TMP_16.$$p = null;
          return $a = Opal.yield1($yield, self.$original_method()), $a === $breaker ? $a : $a;
        };

        return (def.$when_unimplemented = TMP_17 = function() {
          var $a, self = this, $iter = TMP_17.$$p, $yield = $iter || nil;

          TMP_17.$$p = null;
          if ((($a = self.valid_method) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $a = Opal.yieldX($yield, []), $a === $breaker ? $a : $a
          };
        }, nil) && 'when_unimplemented';
      })(self, $scope.get('VerifyingMethodDouble'));
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/verifying_double"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$null_object?', '$ensure_implemented', '$__mock_proxy', '$include', '$__initialize_as_test_double', '$new', '$stub', '$const_to_replace']);
  self.$require("rspec/mocks/mock");
  self.$require("rspec/mocks/verifying_proxy");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'VerifyingDouble');

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        Opal.defn(self, '$method_missing', TMP_1 = function(message, args) {var $zuper = $slice.call(arguments, 0);
          var $a, self = this, $iter = TMP_1.$$p, block = $iter || nil;

          args = $slice.call(arguments, 1);
          TMP_1.$$p = null;
          if ((($a = self['$null_object?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$__mock_proxy().$ensure_implemented(message)};
          return Opal.find_super_dispatcher(self, 'method_missing', TMP_1, $iter).apply(self, $zuper);
        })
      })(self);

      (function($base, $super) {
        function $InstanceVerifyingDouble(){};
        var self = $InstanceVerifyingDouble = $klass($base, $super, 'InstanceVerifyingDouble', $InstanceVerifyingDouble);

        var def = self.$$proto, $scope = self.$$scope;

        def.doubled_module = nil;
        self.$include($scope.get('TestDouble'));

        self.$include($scope.get('VerifyingDouble'));

        def.$initialize = function(doubled_module, args) {
          var $a, self = this;

          args = $slice.call(arguments, 1);
          self.doubled_module = doubled_module;
          return ($a = self).$__initialize_as_test_double.apply($a, [doubled_module].concat(args));
        };

        return (def.$__build_mock_proxy = function(order_group) {
          var self = this;

          return $scope.get('VerifyingProxy').$new(self, order_group, self.doubled_module, $scope.get('InstanceMethodReference'));
        }, nil) && '__build_mock_proxy';
      })(self, null);

      (function($base) {
        var self = $module($base, 'ObjectVerifyingDoubleMethods');

        var def = self.$$proto, $scope = self.$$scope;

        self.$include($scope.get('TestDouble'));

        self.$include($scope.get('VerifyingDouble'));

        Opal.defn(self, '$initialize', function(doubled_module, args) {
          var $a, self = this;

          args = $slice.call(arguments, 1);
          self.doubled_module = doubled_module;
          return ($a = self).$__initialize_as_test_double.apply($a, [doubled_module].concat(args));
        });

        Opal.defn(self, '$__build_mock_proxy', function(order_group) {
          var self = this;
          if (self.doubled_module == null) self.doubled_module = nil;

          return $scope.get('VerifyingProxy').$new(self, order_group, self.doubled_module, $scope.get('ObjectMethodReference'));
        });

        Opal.defn(self, '$as_stubbed_const', function(options) {
          var self = this;
          if (self.doubled_module == null) self.doubled_module = nil;

          if (options == null) {
            options = $hash2([], {})
          }
          $scope.get('ConstantMutator').$stub(self.doubled_module.$const_to_replace(), self, options);
          return self;
        });
      })(self);

      (function($base, $super) {
        function $ObjectVerifyingDouble(){};
        var self = $ObjectVerifyingDouble = $klass($base, $super, 'ObjectVerifyingDouble', $ObjectVerifyingDouble);

        var def = self.$$proto, $scope = self.$$scope;

        return self.$include($scope.get('ObjectVerifyingDoubleMethods'))
      })(self, null);

      (function($base, $super) {
        function $ClassVerifyingDouble(){};
        var self = $ClassVerifyingDouble = $klass($base, $super, 'ClassVerifyingDouble', $ClassVerifyingDouble);

        var def = self.$$proto, $scope = self.$$scope;

        return self.$include($scope.get('ObjectVerifyingDoubleMethods'))
      })(self, $scope.get('Module'));
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/framework"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("rspec/support/caller_filter");
  self.$require("rspec/support/warnings");
  self.$require("rspec/mocks/instance_method_stasher");
  self.$require("rspec/mocks/method_double");
  self.$require("rspec/mocks/argument_matchers");
  self.$require("rspec/mocks/example_methods");
  self.$require("rspec/mocks/proxy");
  self.$require("rspec/mocks/proxy_for_nil");
  self.$require("rspec/mocks/test_double");
  self.$require("rspec/mocks/mock");
  self.$require("rspec/mocks/argument_list_matcher");
  self.$require("rspec/mocks/message_expectation");
  self.$require("rspec/mocks/order_group");
  self.$require("rspec/mocks/errors");
  self.$require("rspec/mocks/error_generator");
  self.$require("rspec/mocks/space");
  self.$require("rspec/mocks/extensions/marshal");
  self.$require("rspec/mocks/any_instance/chain");
  self.$require("rspec/mocks/any_instance/stub_chain");
  self.$require("rspec/mocks/any_instance/stub_chain_chain");
  self.$require("rspec/mocks/any_instance/expectation_chain");
  self.$require("rspec/mocks/any_instance/message_chains");
  self.$require("rspec/mocks/any_instance/recorder");
  self.$require("rspec/mocks/mutate_const");
  self.$require("rspec/mocks/matchers/have_received");
  self.$require("rspec/mocks/matchers/receive");
  self.$require("rspec/mocks/matchers/receive_messages");
  self.$require("rspec/mocks/stub_chain");
  self.$require("rspec/mocks/targets");
  self.$require("rspec/mocks/syntax");
  self.$require("rspec/mocks/configuration");
  return self.$require("rspec/mocks/verifying_double");
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks/version"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Version');

        var def = self.$$proto, $scope = self.$$scope;

        Opal.cdecl($scope, 'STRING', "3.0.0.beta1")
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/mocks"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$attr_accessor', '$class_exec', '$include', '$space', '$space=', '$new', '$verify_all', '$reset_all', '$proxy_for', '$proxies_of', '$any_instance_recorder_for', '$fetch', '$first_non_rspec_line', '$add_stub', '$to_proc', '$add_message_expectation', '$instance_method', '$===', '$call', '$bind', '$method']);
  self.$require("rspec/mocks/framework");
  self.$require("rspec/mocks/version");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Mocks');

      var def = self.$$proto, $scope = self.$$scope;

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto;

        self.$attr_accessor("space");
        self.$$proto.$setup = function(host) {
          var $a, $b, TMP_1, $c, self = this;

          ($a = ($b = ((function(self) {
            var $scope = self.$$scope, def = self.$$proto;

            return self
          })(host.$singleton_class()))).$class_exec, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

          return self.$include((((($scope.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('ExampleMethods')))}, TMP_1.$$s = self, TMP_1), $a).call($b);
          return ($a = self, ((($c = $a.$space()) !== false && $c !== nil) ? $c : $a['$space=']((((($scope.get('RSpec')).$$scope.get('Mocks'))).$$scope.get('Space')).$new())));
        };
        self.$$proto.$verify = function() {
          var self = this;

          return self.$space().$verify_all();
        };
        self.$$proto.$teardown = function() {
          var self = this;

          return self.$space().$reset_all();
        };
        self.$$proto.$proxy_for = function(object) {
          var self = this;

          return self.$space().$proxy_for(object);
        };
        self.$$proto.$proxies_of = function(klass) {
          var self = this;

          return self.$space().$proxies_of(klass);
        };
        self.$$proto.$any_instance_recorder_for = function(klass) {
          var self = this;

          return self.$space().$any_instance_recorder_for(klass);
        };
        self.$$proto.$allow_message = TMP_2 = function(subject, message, opts) {
          var $a, $b, TMP_3, $c, self = this, $iter = TMP_2.$$p, block = $iter || nil, orig_caller = nil;

          if (opts == null) {
            opts = $hash2([], {})
          }
          TMP_2.$$p = null;
          orig_caller = ($a = ($b = opts).$fetch, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return $scope.get('CallerFilter').$first_non_rspec_line()}, TMP_3.$$s = self, TMP_3), $a).call($b, "expected_from");
          return ($a = ($c = ((Opal.get('RSpec')).$$scope.get('Mocks')).$proxy_for(subject)).$add_stub, $a.$$p = block.$to_proc(), $a).call($c, orig_caller, message, opts);
        };
        self.$$proto.$expect_message = TMP_4 = function(subject, message, opts) {
          var $a, $b, TMP_5, $c, self = this, $iter = TMP_4.$$p, block = $iter || nil, orig_caller = nil;

          if (opts == null) {
            opts = $hash2([], {})
          }
          TMP_4.$$p = null;
          orig_caller = ($a = ($b = opts).$fetch, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

          return $scope.get('CallerFilter').$first_non_rspec_line()}, TMP_5.$$s = self, TMP_5), $a).call($b, "expected_from");
          return ($a = ($c = ((Opal.get('RSpec')).$$scope.get('Mocks')).$proxy_for(subject)).$add_message_expectation, $a.$$p = block.$to_proc(), $a).call($c, orig_caller, message, opts);
        };
        Opal.cdecl($scope, 'KERNEL_METHOD_METHOD', Opal.get('Kernel').$instance_method("method"));
        return (self.$$proto.$method_handle_for = function(object, method_name) {
          var $a, self = this;

          if ((($a = Opal.get('Kernel')['$==='](object)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('KERNEL_METHOD_METHOD').$bind(object).$call(method_name)
            } else {
            return object.$method(method_name)
          };
        }, nil) && 'method_handle_for';
      })(self.$singleton_class());

      Opal.cdecl($scope, 'IGNORED_BACKTRACE_LINE', "this backtrace line is ignored");
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/mocking/with_rspec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$configuration', '$setup', '$verify', '$teardown']);
  self.$require("rspec/mocks");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'MockFrameworkAdapter');

        var def = self.$$proto, $scope = self.$$scope;

        Opal.defs(self, '$framework_name', function() {
          var self = this;

          return "rspec";
        });

        Opal.defs(self, '$configuration', function() {
          var self = this;

          return (($scope.get('RSpec')).$$scope.get('Mocks')).$configuration();
        });

        Opal.defn(self, '$setup_mocks_for_rspec', function() {
          var self = this;

          return (($scope.get('RSpec')).$$scope.get('Mocks')).$setup(self);
        });

        Opal.defn(self, '$verify_mocks_for_rspec', function() {
          var self = this;

          return (($scope.get('RSpec')).$$scope.get('Mocks')).$verify();
        });

        Opal.defn(self, '$teardown_mocks_for_rspec', function() {
          var self = this;

          return (($scope.get('RSpec')).$$scope.get('Mocks')).$teardown();
        });
      })(self)
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/support/version"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Support');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Version');

        var def = self.$$proto, $scope = self.$$scope;

        Opal.cdecl($scope, 'STRING', "3.0.0.beta1")
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/support"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require']);
  self.$require("rspec/support/version");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Support');

      var def = self.$$proto, $scope = self.$$scope;

      nil
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/warnings"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$deprecation', '$reporter', '$configuration', '$merge', '$first_non_rspec_line']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defs(self, '$deprecate', function(deprecated, data) {
      var self = this;

      if (data == null) {
        data = $hash2([], {})
      }
      return $scope.get('RSpec').$configuration().$reporter().$deprecation($hash2(["deprecated", "call_site"], {"deprecated": deprecated, "call_site": $scope.get('CallerFilter').$first_non_rspec_line()}).$merge(data));
    });

    Opal.defs(self, '$warn_deprecation', function(message) {
      var self = this;

      return $scope.get('RSpec').$configuration().$reporter().$deprecation($hash2(["message"], {"message": message}));
    });
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core/shared_context"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$each', '$playback_onto', '$__shared_context_recordings', '$new', '$__send__', '$to_proc', '$block', '$method_name', '$args', '$define_method', '$<<', '$record', '$+', '$instance_methods']);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'SharedContext');

        var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_2;

        Opal.defn(self, '$included', function(group) {
          var $a, $b, TMP_1, self = this;

          return ($a = ($b = self.$__shared_context_recordings()).$each, $a.$$p = (TMP_1 = function(recording){var self = TMP_1.$$s || this;
if (recording == null) recording = nil;
          return recording.$playback_onto(group)}, TMP_1.$$s = self, TMP_1), $a).call($b);
        });

        Opal.defn(self, '$__shared_context_recordings', function() {
          var $a, self = this;
          if (self.__shared_context_recordings == null) self.__shared_context_recordings = nil;

          return ((($a = self.__shared_context_recordings) !== false && $a !== nil) ? $a : self.__shared_context_recordings = []);
        });

        Opal.cdecl($scope, 'Recording', ($a = ($b = $scope.get('Struct')).$new, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return (Opal.defn(self, '$playback_onto', function(group) {
            var $a, $b, self = this;

            return ($a = ($b = group).$__send__, $a.$$p = self.$block().$to_proc(), $a).apply($b, [self.$method_name()].concat(self.$args()));
          }), nil) && 'playback_onto'}, TMP_2.$$s = self, TMP_2), $a).call($b, "method_name", "args", "block"));

        Opal.defs(self, '$record', function(methods) {
          var $a, $b, TMP_3, self = this;

          return ($a = ($b = methods).$each, $a.$$p = (TMP_3 = function(meth){var self = TMP_3.$$s || this, $a, $b, TMP_4;
if (meth == null) meth = nil;
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_4 = function(args){var self = TMP_4.$$s || this, block;
args = $slice.call(arguments, 0);
              block = TMP_4.$$p || nil, TMP_4.$$p = null;
            return self.$__shared_context_recordings()['$<<']($scope.get('Recording').$new(meth, args, block))}, TMP_4.$$s = self, TMP_4), $a).call($b, meth)}, TMP_3.$$s = self, TMP_3), $a).call($b);
        });

        self.$record(["describe", "context"]['$+']($scope.get('Hooks').$instance_methods(false))['$+']((($scope.get('MemoizedHelpers')).$$scope.get('ClassMethods')).$instance_methods(false)));
      })(self)
    })(self);

    Opal.cdecl($scope, 'SharedContext', (($scope.get('Core')).$$scope.get('SharedContext')));
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/core"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, $c, TMP_2, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, require_rspec = nil;

  Opal.add_stubs(['$lambda', '$require', '$[]', '$autoload', '$wants_to_quit', '$world', '$wants_to_quit=', '$new', '$warn_deprecation', '$first_non_rspec_line', '$configuration', '$clear', '$example_groups', '$current', '$[]=', '$=~', '$define_method', '$to_proc', '$method', '$expand_path', '$fetch', '$const_get']);
  require_rspec = (function() {if ((($a = ((($b = self.$require_relative) && !$b.$$stub) || self['$respond_to_missing?']('require_relative') ? 'method' : nil)) !== nil && (!$a.$$is_boolean || $a == true))) {
    return ($a = ($b = self).$lambda, $a.$$p = (TMP_1 = function(path){var self = TMP_1.$$s || this;
if (path == null) path = nil;
    return self.$require("rspec/core"+ '/../' + path)}, TMP_1.$$s = self, TMP_1), $a).call($b)
    } else {
    return ($a = ($c = self).$lambda, $a.$$p = (TMP_2 = function(path){var self = TMP_2.$$s || this;
if (path == null) path = nil;
    return self.$require("rspec/" + (path))}, TMP_2.$$s = self, TMP_2), $a).call($c)
  }; return nil; })();
  self.$require("set");
  self.$require("time");
  self.$require("rbconfig");
  require_rspec['$[]']("core/version");
  self.$require("rspec/support/caller_filter");
  self.$require("rspec/core/warnings");
  self.$require("rspec/support/warnings");
  require_rspec['$[]']("core/flat_map");
  require_rspec['$[]']("core/filter_manager");
  require_rspec['$[]']("core/dsl");
  require_rspec['$[]']("core/reporter");
  require_rspec['$[]']("core/hooks");
  require_rspec['$[]']("core/memoized_helpers");
  require_rspec['$[]']("core/metadata");
  require_rspec['$[]']("core/pending");
  require_rspec['$[]']("core/formatters");
  require_rspec['$[]']("core/ordering");
  require_rspec['$[]']("core/world");
  require_rspec['$[]']("core/configuration");
  require_rspec['$[]']("core/option_parser");
  require_rspec['$[]']("core/configuration_options");
  require_rspec['$[]']("core/command_line");
  require_rspec['$[]']("core/runner");
  require_rspec['$[]']("core/example");
  require_rspec['$[]']("core/shared_example_group/collection");
  require_rspec['$[]']("core/shared_example_group");
  require_rspec['$[]']("core/example_group");
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4, TMP_6;

    self.$autoload("SharedContext", "rspec/core/shared_context");

    Opal.defs(self, '$wants_to_quit', function() {
      var self = this;

      return self.$world().$wants_to_quit();
    });

    Opal.defs(self, '$wants_to_quit=', function(maybe) {
      var $a, $b, self = this;

      return (($a = [(maybe)]), $b = self.$world(), $b['$wants_to_quit='].apply($b, $a), $a[$a.length-1]);
    });

    Opal.defs(self, '$world', function() {
      var $a, self = this;
      if (self.world == null) self.world = nil;

      return ((($a = self.world) !== false && $a !== nil) ? $a : self.world = (((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('World')).$new());
    });

    Opal.defs(self, '$world=', function(new_world) {
      var self = this;

      return self.world = new_world;
    });

    Opal.defs(self, '$reset', function() {
      var self = this;

      self.world = nil;
      return self.configuration = nil;
    });

    Opal.defs(self, '$configuration', TMP_3 = function() {
      var $a, self = this, $iter = TMP_3.$$p, $yield = $iter || nil;
      if (self.configuration == null) self.configuration = nil;

      TMP_3.$$p = null;
      if (($yield !== nil)) {
        $scope.get('RSpec').$warn_deprecation("\n*****************************************************************\nDEPRECATION WARNING\n\n* RSpec.configuration with a block is deprecated and has no effect.\n* please use RSpec.configure with a block instead.\n\nCalled from " + ($scope.get('CallerFilter').$first_non_rspec_line()) + "\n*****************************************************************\n\n")};
      return ((($a = self.configuration) !== false && $a !== nil) ? $a : self.configuration = (((($scope.get('RSpec')).$$scope.get('Core'))).$$scope.get('Configuration')).$new());
    });

    Opal.defs(self, '$configuration=', function(new_configuration) {
      var self = this;

      return self.configuration = new_configuration;
    });

    Opal.defs(self, '$configure', TMP_4 = function() {
      var $a, self = this, $iter = TMP_4.$$p, $yield = $iter || nil;

      TMP_4.$$p = null;
      if (($yield !== nil)) {
        return $a = Opal.yield1($yield, self.$configuration()), $a === $breaker ? $a : $a
        } else {
        return nil
      };
    });

    Opal.defs(self, '$clear_remaining_example_groups', function() {
      var self = this;

      return self.$world().$example_groups().$clear();
    });

    Opal.defs(self, '$current_example', function() {
      var self = this;

      return $scope.get('Thread').$current()['$[]']("_rspec_current_example");
    });

    Opal.defs(self, '$current_example=', function(example) {
      var self = this;

      return $scope.get('Thread').$current()['$[]=']("_rspec_current_example", example);
    });

    Opal.defs(self, '$windows_os?', function() {
      var self = this;

      return (($scope.get('RbConfig')).$$scope.get('CONFIG'))['$[]']("host_os")['$=~'](/cygwin|mswin|mingw|bccwin|wince|emx/);
    });

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Time(){};
        var self = $Time = $klass($base, $super, 'Time', $Time);

        var def = self.$$proto, $scope = self.$$scope;

        return (function(self) {
          var $scope = self.$$scope, def = self.$$proto;

          return ($a = ($b = self).$define_method, $a.$$p = Opal.get('Time').$method("now").$to_proc(), $a).call($b, "now")
        })(self.$singleton_class())
      })(self, null);

      Opal.defs(self, '$path_to_executable', function() {
        var $a, self = this;
        if (self.path_to_executable == null) self.path_to_executable = nil;

        return ((($a = self.path_to_executable) !== false && $a !== nil) ? $a : self.path_to_executable = $scope.get('File').$expand_path("../../../exe/rspec", "rspec/core"));
      });
    })(self);

    Opal.cdecl($scope, 'MODULES_TO_AUTOLOAD', $hash2(["Matchers", "Expectations", "Mocks"], {"Matchers": "rspec/expectations", "Expectations": "rspec/expectations", "Mocks": "rspec/mocks"}));

    Opal.defs(self, '$const_missing', TMP_6 = function(name) {try {

      var $a, $b, TMP_5, self = this, $iter = TMP_6.$$p, $yield = $iter || nil;

      TMP_6.$$p = null;
      self.$require(($a = ($b = $scope.get('MODULES_TO_AUTOLOAD')).$fetch, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

      Opal.ret(Opal.find_iter_super_dispatcher(self, 'const_missing', (TMP_5.$$def || TMP_6), null).apply(self, $slice.call(arguments)))}, TMP_5.$$s = self, TMP_5), $a).call($b, name));
      return Opal.get('RSpec').$const_get(name);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    });
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec/version"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Version');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.cdecl($scope, 'STRING', "3.0.0.beta1")
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["rspec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("rspec/core");
  return self.$require("rspec/version");
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["opal/rspec/requires"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("corelib/dir");
  self.$require("thread");
  self.$require("set");
  self.$require("time");
  self.$require("rbconfig");
  self.$require("pathname");
  self.$require("rspec/core/version");
  self.$require("rspec/core/flat_map");
  self.$require("rspec/core/filter_manager");
  self.$require("rspec/core/dsl");
  self.$require("rspec/core/reporter");
  self.$require("rspec/core/hooks");
  self.$require("rspec/core/memoized_helpers");
  self.$require("rspec/core/metadata");
  self.$require("rspec/core/pending");
  self.$require("rspec/core/formatters");
  self.$require("rspec/core/ordering");
  self.$require("rspec/core/world");
  self.$require("rspec/core/configuration");
  self.$require("rspec/core/option_parser");
  self.$require("rspec/core/configuration_options");
  self.$require("rspec/core/command_line");
  self.$require("rspec/core/runner");
  self.$require("rspec/core/example");
  self.$require("rspec/core/shared_example_group/collection");
  self.$require("rspec/core/shared_example_group");
  self.$require("rspec/core/example_group");
  self.$require("rspec/core/mocking/with_rspec");
  self.$require("rspec/support");
  self.$require("rspec/core");
  self.$require("rspec/expectations");
  self.$require("rspec/mocks");
  self.$require("rspec");
  self.$require("rspec/core/formatters/base_text_formatter");
  self.$require("rspec/core/formatters/html_printer");
  self.$require("rspec/matchers/pretty");
  self.$require("rspec/matchers/built_in/base_matcher");
  return self.$require("rspec/matchers/built_in/be");
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["opal/rspec/fixes"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$flatten', '$map', '$module_function', '$!', '$raise', '$+', '$new', '$dup', '$to_s', '$gsub', '$tr', '$downcase', '$empty?', '$description', '$upcase', '$[]', '$lstrip', '$const_defined?', '$next', '$__id__', '$original_method', '$expect', '$subject']);
  (function($base, $super) {
    function $IO(){};
    var self = $IO = $klass($base, $super, 'IO', $IO);

    var def = self.$$proto, $scope = self.$$scope;

    return (def['$closed?'] = function() {
      var self = this;

      return false;
    }, nil) && 'closed?'
  })(self, null);
  (function($base) {
    var self = $module($base, 'FlatMap');

    var def = self.$$proto, $scope = self.$$scope, TMP_2;

    Opal.defn(self, '$flat_map', TMP_2 = function(array) {
      var $a, $b, TMP_1, self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

      TMP_2.$$p = null;
      return ($a = ($b = array).$map, $a.$$p = (TMP_1 = function(item){var self = TMP_1.$$s || this, $a;
if (item == null) item = nil;
      return $a = Opal.yield1($yield, item), $a === $breaker ? $a : $a}, TMP_1.$$s = self, TMP_1), $a).call($b).$flatten();
    });

    self.$module_function("flat_map");
  })((($scope.get('RSpec')).$$scope.get('Core')));
  (function($base, $super) {
    function $CallerFilter(){};
    var self = $CallerFilter = $klass($base, $super, 'CallerFilter', $CallerFilter);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defs(self, '$first_non_rspec_line', function() {
      var self = this;

      return "";
    }), nil) && 'first_non_rspec_line'
  })($scope.get('RSpec'), null);
  (function($base) {
    var self = $module($base, 'Expectations');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defs(self, '$fail_with', function(message, expected, actual) {
      var $a, self = this;

      if (expected == null) {
        expected = nil
      }
      if (actual == null) {
        actual = nil
      }
      if ((($a = message['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "Failure message is nil. Does your matcher define the "['$+']("appropriate failure_message_for_* method to return a string?"))};
      return self.$raise((((($scope.get('RSpec')).$$scope.get('Expectations'))).$$scope.get('ExpectationNotMetError')).$new(message));
    })
  })($scope.get('RSpec'));
  (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Matchers');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Pretty');

        var def = self.$$proto, $scope = self.$$scope;

        Opal.defn(self, '$underscore', function(camel_cased_word) {
          var self = this, word = nil;

          word = camel_cased_word.$to_s().$dup();
          word = word.$gsub(/([A-Z]+)([A-Z][a-z])/, "$1_$2");
          word = word.$gsub(/([a-z\d])([A-Z])/, "$1_$2");
          word = word.$tr("-", "_");
          word = word.$downcase();
          return word;
        })
      })(self)
    })(self)
  })(self);
  (function($base) {
    var self = $module($base, 'ExampleGroups');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defs(self, '$base_name_for', function(group) {
      var $a, $b, TMP_3, self = this, name = nil;

      if ((($a = group.$description()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return "Anonymous"};
      name = " "['$+'](group.$description());
      name = ($a = ($b = name).$gsub, $a.$$p = (TMP_3 = function(m){var self = TMP_3.$$s || this;
if (m == null) m = nil;
      return m['$[]'](1).$upcase()}, TMP_3.$$s = self, TMP_3), $a).call($b, /[^0-9a-zA-Z]+([0-9a-zA-Z])/);
      name = name.$lstrip();
      name = name.$gsub(/\W/, "");
      name = name.$gsub(/^([^A-Z]|$)/, "Nested$1");
      return name;
    });

    Opal.defs(self, '$disambiguate', function(name, const_scope) {
      var $a, $b, self = this;

      if ((($a = const_scope['$const_defined?'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return name
      };
      name = name['$+']("_2");
      while ((($b = const_scope['$const_defined?'](name)) !== nil && (!$b.$$is_boolean || $b == true))) {
      name = name.$next()};
      return name;
    });
  })($scope.get('RSpec'));
  (function($base, $super) {
    function $Space(){};
    var self = $Space = $klass($base, $super, 'Space', $Space);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$id_for = function(object) {
      var self = this;

      return object.$__id__();
    }, nil) && 'id_for'
  })((($scope.get('RSpec')).$$scope.get('Mocks')), null);
  (function($base, $super) {
    function $MethodDouble(){};
    var self = $MethodDouble = $klass($base, $super, 'MethodDouble', $MethodDouble);

    var def = self.$$proto, $scope = self.$$scope;

    def.original_method = def.method_stasher = nil;
    return (def['$save_original_method!'] = function() {
      var $a, self = this;

      return ((($a = self.original_method) !== false && $a !== nil) ? $a : self.original_method = self.method_stasher.$original_method());
    }, nil) && 'save_original_method!'
  })((($scope.get('RSpec')).$$scope.get('Mocks')), null);
  return (function($base) {
    var self = $module($base, 'RSpec');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Core');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'MemoizedHelpers');

        var def = self.$$proto, $scope = self.$$scope;

        Opal.defn(self, '$is_expected', function() {
          var self = this;

          return self.$expect(self.$subject());
        })
      })(self)
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["opal/rspec/text_formatter"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$empty?', '$failed_examples', '$puts', '$each_with_index', '$dump_failure', '$short_padding', '$next', '$full_description', '$dump_failure_info', '$[]', '$execution_result', '$to_s', '$name', '$class', '$red', '$long_padding', '$each', '$split', '$message', '$==', '$green', '$finish_with_code']);
  return (function($base) {
    var self = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'RSpec');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $TextFormatter(){};
        var self = $TextFormatter = $klass($base, $super, 'TextFormatter', $TextFormatter);

        var def = self.$$proto, $scope = self.$$scope;

        def.$dump_failures = function() {
          var $a, $b, TMP_1, self = this;

          if ((($a = self.$failed_examples()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$puts("\nFinished")
            } else {
            self.$puts("\nFailures:");
            return ($a = ($b = self.$failed_examples()).$each_with_index, $a.$$p = (TMP_1 = function(example, index){var self = TMP_1.$$s || this;
if (example == null) example = nil;if (index == null) index = nil;
            self.$puts("\n");
              return self.$dump_failure(example, index);}, TMP_1.$$s = self, TMP_1), $a).call($b);
          };
        };

        def.$dump_failure = function(example, index) {
          var self = this;

          self.$puts("" + (self.$short_padding()) + (index.$next()) + ") " + (example.$full_description()));
          return self.$dump_failure_info(example);
        };

        def.$dump_failure_info = function(example) {
          var $a, $b, TMP_2, self = this, exception = nil, exception_class_name = nil;

          exception = example.$execution_result()['$[]']("exception");
          exception_class_name = exception.$class().$name().$to_s();
          self.$red("" + (self.$long_padding()) + (exception_class_name) + ":");
          return ($a = ($b = exception.$message().$to_s().$split("\n")).$each, $a.$$p = (TMP_2 = function(line){var self = TMP_2.$$s || this;
if (line == null) line = nil;
          return self.$red("" + (self.$long_padding()) + "  " + (line))}, TMP_2.$$s = self, TMP_2), $a).call($b);
        };

        def.$dump_summary = function(duration, example_count, failure_count, pending_count) {
          var self = this, msg = nil;

          self.duration = duration;
          self.example_count = example_count;
          self.failure_count = failure_count;
          self.pending_count = pending_count;
          msg = "\n" + (example_count) + " examples, " + (failure_count) + " failures (time taken: " + (duration) + ")";
          if (failure_count['$=='](0)) {
            self.$green(msg);
            return self.$finish_with_code(0);
            } else {
            self.$red(msg);
            return self.$finish_with_code(1);
          };
        };

        def.$finish_with_code = function(code) {
          var self = this;

          
          if (typeof(phantom) !== "undefined") {
            phantom.exit(code);
          }
          else {
            Opal.global.OPAL_SPEC_CODE = code;
          }
        
        };

        def.$green = function(str) {
          var self = this;

          return console.log('\033[32m' + str + '\033[0m');
        };

        def.$red = function(str) {
          var self = this;

          return console.log('\033[31m' + str + '\033[0m');
        };

        def.$short_padding = function() {
          var self = this;

          return "  ";
        };

        return (def.$long_padding = function() {
          var self = this;

          return "     ";
        }, nil) && 'long_padding';
      })(self, ((((((Opal.get('RSpec')).$$scope.get('Core'))).$$scope.get('Formatters'))).$$scope.get('BaseFormatter')))
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["opal/rspec/browser_formatter"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$new', '$<<', '$id', '$+', '$append_to_head', '$size', '$parent_groups', '$description', '$style', '$*', '$-', '$class_name=', '$sprintf', '$[]', '$execution_result', '$to_s', '$name', '$class', '$short_padding', '$each', '$long_padding', '$split', '$message', '$h', '$html=', '$add_scripts', '$attr_reader', '$===', '$__send__', '$gsub', '$native']);
  self.$require("erb");
  return (function($base) {
    var self = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'RSpec');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $BrowserFormatter(){};
        var self = $BrowserFormatter = $klass($base, $super, 'BrowserFormatter', $BrowserFormatter);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_6, TMP_7;

        def.rspec_group = def.rspec_dl = def.rspec_dt = def.rspec_results = def.example_group_failed = nil;
        self.$include((($scope.get('ERB')).$$scope.get('Util')));

        Opal.cdecl($scope, 'CSS_STYLES', ((((((((Opal.get('RSpec')).$$scope.get('Core'))).$$scope.get('Formatters'))).$$scope.get('HtmlPrinter'))).$$scope.get('GLOBAL_STYLES')));

        def.$start = TMP_1 = function(example_count) {var $zuper = $slice.call(arguments, 0);
          var self = this, $iter = TMP_1.$$p, $yield = $iter || nil, target = nil, css_text = nil, styles = nil;

          TMP_1.$$p = null;
          Opal.find_super_dispatcher(self, 'start', TMP_1, $iter).apply(self, $zuper);
          target = $scope.get('Element').$new(document.body);
          target['$<<']($scope.get('Element').$new("div", $hash2(["html"], {"html": $scope.get('REPORT_TEMPLATE')})));
          self.rspec_results = $scope.get('Element').$id("rspec-results");
          css_text = $scope.get('CSS_STYLES')['$+']("\n body { padding: 0; margin: 0 }");
          styles = $scope.get('Element').$new("style", $hash2(["type", "css_text"], {"type": "text/css", "css_text": css_text}));
          return styles.$append_to_head();
        };

        def.$example_group_started = TMP_2 = function(example_group) {var $zuper = $slice.call(arguments, 0);
          var self = this, $iter = TMP_2.$$p, $yield = $iter || nil, parents = nil;

          TMP_2.$$p = null;
          Opal.find_super_dispatcher(self, 'example_group_started', TMP_2, $iter).apply(self, $zuper);
          self.example_group_failed = false;
          parents = example_group.$parent_groups().$size();
          self.rspec_group = $scope.get('Element').$new("div", $hash2(["class_name"], {"class_name": "example_group passed"}));
          self.rspec_dl = $scope.get('Element').$new("dl");
          self.rspec_dt = $scope.get('Element').$new("dt", $hash2(["class_name", "text"], {"class_name": "passed", "text": example_group.$description()}));
          self.rspec_group['$<<'](self.rspec_dl);
          self.rspec_dl['$<<'](self.rspec_dt);
          self.rspec_dl.$style("margin-left", "" + ((parents['$-'](2))['$*'](15)) + "px");
          return self.rspec_results['$<<'](self.rspec_group);
        };

        def.$example_group_finished = TMP_3 = function(example_group) {var $zuper = $slice.call(arguments, 0);
          var $a, $b, self = this, $iter = TMP_3.$$p, $yield = $iter || nil;

          TMP_3.$$p = null;
          Opal.find_super_dispatcher(self, 'example_group_finished', TMP_3, $iter).apply(self, $zuper);
          if ((($a = self.example_group_failed) !== nil && (!$a.$$is_boolean || $a == true))) {
            (($a = ["example_group failed"]), $b = self.rspec_group, $b['$class_name='].apply($b, $a), $a[$a.length-1]);
            (($a = ["failed"]), $b = self.rspec_dt, $b['$class_name='].apply($b, $a), $a[$a.length-1]);
            return (($a = ["failed"]), $b = $scope.get('Element').$id("rspec-header"), $b['$class_name='].apply($b, $a), $a[$a.length-1]);
            } else {
            return nil
          };
        };

        def.$example_failed = TMP_4 = function(example) {var $zuper = $slice.call(arguments, 0);
          var $a, $b, TMP_5, self = this, $iter = TMP_4.$$p, $yield = $iter || nil, duration = nil, error = nil, error_name = nil, output = nil;

          TMP_4.$$p = null;
          Opal.find_super_dispatcher(self, 'example_failed', TMP_4, $iter).apply(self, $zuper);
          duration = self.$sprintf("%0.5f", example.$execution_result()['$[]']("run_time"));
          error = example.$execution_result()['$[]']("exception");
          error_name = error.$class().$name().$to_s();
          output = "" + (self.$short_padding()) + (error_name) + ":\n";
          ($a = ($b = error.$message().$to_s().$split("\n")).$each, $a.$$p = (TMP_5 = function(line){var self = TMP_5.$$s || this;
if (line == null) line = nil;
          return output = output['$+']("" + (self.$long_padding()) + "  " + (line) + "\n")}, TMP_5.$$s = self, TMP_5), $a).call($b);
          self.example_group_failed = true;
          return self.rspec_dl['$<<']($scope.get('Element').$new("dd", $hash2(["class_name", "html"], {"class_name": "example failed", "html": "          <span class=\"failed_spec_name\">" + (self.$h(example.$description())) + "</span>\n          <span class=\"duration\">" + (duration) + "s</span>\n          <div class=\"failure\">\n            <div class=\"message\"><pre>" + (self.$h(output)) + "</pre></div>\n          </div>\n"})));
        };

        def.$example_passed = TMP_6 = function(example) {var $zuper = $slice.call(arguments, 0);
          var self = this, $iter = TMP_6.$$p, $yield = $iter || nil, duration = nil;

          TMP_6.$$p = null;
          Opal.find_super_dispatcher(self, 'example_passed', TMP_6, $iter).apply(self, $zuper);
          duration = self.$sprintf("%0.5f", example.$execution_result()['$[]']("run_time"));
          return self.rspec_dl['$<<']($scope.get('Element').$new("dd", $hash2(["class_name", "html"], {"class_name": "example passed", "html": "          <span class=\"passed_spec_name\">" + (self.$h(example.$description())) + "</span>\n          <span class=\"duration\">" + (duration) + "s</span>\n"})));
        };

        def.$dump_summary = TMP_7 = function(duration, example_count, failure_count, pending_count) {var $zuper = $slice.call(arguments, 0);
          var $a, $b, self = this, $iter = TMP_7.$$p, $yield = $iter || nil, totals = nil;

          TMP_7.$$p = null;
          Opal.find_super_dispatcher(self, 'dump_summary', TMP_7, $iter).apply(self, $zuper);
          totals = "" + (example_count) + " examples, " + (failure_count) + " failures";
          (($a = [totals]), $b = $scope.get('Element').$id("totals"), $b['$html='].apply($b, $a), $a[$a.length-1]);
          duration = "Finished in <strong>" + (self.$sprintf("%.5f", duration)) + " seconds</strong>";
          (($a = [duration]), $b = $scope.get('Element').$id("duration"), $b['$html='].apply($b, $a), $a[$a.length-1]);
          return self.$add_scripts();
        };

        def.$add_scripts = function() {
          var self = this, content = nil;

          content = ((((((((Opal.get('RSpec')).$$scope.get('Core'))).$$scope.get('Formatters'))).$$scope.get('HtmlPrinter'))).$$scope.get('GLOBAL_SCRIPTS'));
          return window.eval(content);
        };

        def.$short_padding = function() {
          var self = this;

          return "  ";
        };

        def.$long_padding = function() {
          var self = this;

          return "     ";
        };

        (function($base, $super) {
          function $Element(){};
          var self = $Element = $klass($base, $super, 'Element', $Element);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          self.$attr_reader("native");

          Opal.defs(self, '$id', function(id) {
            var self = this;

            return self.$new(document.getElementById(id));
          });

          def.$initialize = function(el, attrs) {
            var $a, $b, TMP_8, self = this;

            if (attrs == null) {
              attrs = $hash2([], {})
            }
            if ((($a = $scope.get('String')['$==='](el)) !== nil && (!$a.$$is_boolean || $a == true))) {
              self["native"] = document.createElement(el)
              } else {
              self["native"] = el
            };
            return ($a = ($b = attrs).$each, $a.$$p = (TMP_8 = function(name, val){var self = TMP_8.$$s || this;
if (name == null) name = nil;if (val == null) val = nil;
            return self.$__send__("" + (name) + "=", val)}, TMP_8.$$s = self, TMP_8), $a).call($b);
          };

          def['$class_name='] = function(name) {
            var self = this;

            return self["native"].className = name;
          };

          def['$html='] = function(html) {
            var self = this;

            return self["native"].innerHTML = html;
          };

          def['$text='] = function(text) {
            var $a, $b, self = this;

            return (($a = [text.$gsub(/</, "&lt").$gsub(/>/, "&gt")]), $b = self, $b['$html='].apply($b, $a), $a[$a.length-1]);
          };

          def['$type='] = function(type) {
            var self = this;

            return self["native"].type = type;
          };

          def.$append = function(child) {
            var self = this;

            return self["native"].appendChild(child.$native());
          };

          Opal.defn(self, '$<<', def.$append);

          def['$css_text='] = function(text) {
            var self = this;

            
            if (self["native"].styleSheet) {
              self["native"].styleSheet.cssText = text;
            }
            else {
              self["native"].appendChild(document.createTextNode(text));
            }
          ;
          };

          def.$style = function(name, value) {
            var self = this;

            return self["native"].style[name] = value;
          };

          return (def.$append_to_head = function() {
            var self = this;

            return document.getElementsByTagName('head')[0].appendChild(self["native"]);
          }, nil) && 'append_to_head';
        })(self, null);

        return Opal.cdecl($scope, 'REPORT_TEMPLATE', "<div class=\"rspec-report\">\n\n  <div id=\"rspec-header\">\n    <div id=\"label\">\n      <h1>RSpec Code Examples</h1>\n    </div>\n\n    <div id=\"display-filters\">\n      <input id=\"passed_checkbox\"  name=\"passed_checkbox\"  type=\"checkbox\" checked=\"checked\" onchange=\"apply_filters()\" value=\"1\" /> <label for=\"passed_checkbox\">Passed</label>\n      <input id=\"failed_checkbox\"  name=\"failed_checkbox\"  type=\"checkbox\" checked=\"checked\" onchange=\"apply_filters()\" value=\"2\" /> <label for=\"failed_checkbox\">Failed</label>\n      <input id=\"pending_checkbox\" name=\"pending_checkbox\" type=\"checkbox\" checked=\"checked\" onchange=\"apply_filters()\" value=\"3\" /> <label for=\"pending_checkbox\">Pending</label>\n    </div>\n\n    <div id=\"summary\">\n      <p id=\"totals\">&#160;</p>\n      <p id=\"duration\">&#160;</p>\n    </div>\n  </div>\n\n  <div id=\"rspec-results\" class=\"results\">\n  </div>\n</div>\n");
      })(self, ((((((Opal.get('RSpec')).$$scope.get('Core'))).$$scope.get('Formatters'))).$$scope.get('BaseFormatter')))
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["opal/rspec/runner"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$phantom?', '$browser?', '$run', '$new', '$world', '$configuration', '$error_stream=', '$output_stream', '$output_stream=', '$start', '$run_examples', '$run_async_examples', '$finish', '$all?', '$map', '$example_groups', '$reporter', '$example_count', '$run_hook']);
  return (function($base) {
    var self = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'RSpec');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Runner(){};
        var self = $Runner = $klass($base, $super, 'Runner', $Runner);

        var def = self.$$proto, $scope = self.$$scope, TMP_3;

        def.configuration = def.world = def.reporter = nil;
        (function(self) {
          var $scope = self.$$scope, def = self.$$proto;

          self.$$proto['$browser?'] = function() {
            var self = this;

            return typeof(document) !== "undefined";
          };
          self.$$proto['$phantom?'] = function() {
            var self = this;

            return typeof(phantom) !== 'undefined' || typeof(OPAL_SPEC_PHANTOM) !== 'undefined';
          };
          self.$$proto.$default_formatter = function() {
            var $a, self = this;

            if ((($a = self['$phantom?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return $scope.get('TextFormatter')
              } else {
              return $scope.get('BrowserFormatter')
            };
          };
          return (self.$$proto.$autorun = function() {
            var $a, self = this;

            if ((($a = self['$browser?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return setTimeout(function() { $scope.get('Runner').$new().$run() }, 0);
              } else {
              return $scope.get('Runner').$new().$run()
            };
          }, nil) && 'autorun';
        })(self.$singleton_class());

        def.$initialize = function(options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {})
          }
          self.options = options;
          self.world = Opal.get('RSpec').$world();
          return self.configuration = Opal.get('RSpec').$configuration();
        };

        def.$run = function(err, out) {
          var $a, $b, TMP_1, self = this;
          if ($gvars.stdout == null) $gvars.stdout = nil;

          if (err == null) {
            err = $gvars.stdout
          }
          if (out == null) {
            out = $gvars.stdout
          }
          (($a = [err]), $b = self.configuration, $b['$error_stream='].apply($b, $a), $a[$a.length-1]);
          ($a = self.configuration, ((($b = $a.$output_stream()) !== false && $b !== nil) ? $b : $a['$output_stream='](out)));
          self.$start();
          self.$run_examples();
          return ($a = ($b = self).$run_async_examples, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

          return self.$finish()}, TMP_1.$$s = self, TMP_1), $a).call($b);
        };

        def.$run_examples = function() {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = self.world.$example_groups()).$map, $a.$$p = (TMP_2 = function(g){var self = TMP_2.$$s || this;
            if (self.reporter == null) self.reporter = nil;
if (g == null) g = nil;
          return g.$run(self.reporter)}, TMP_2.$$s = self, TMP_2), $a).call($b)['$all?']();
        };

        def.$run_async_examples = TMP_3 = function() {
          var self = this, $iter = TMP_3.$$p, block = $iter || nil;

          TMP_3.$$p = null;
          return $scope.get('AsyncRunner').$new(self, self.reporter, block).$run();
        };

        def.$start = function() {
          var self = this;

          self.reporter = self.configuration.$reporter();
          self.reporter.$start(self.world.$example_count());
          return self.configuration.$run_hook("before", "suite");
        };

        return (def.$finish = function() {
          var self = this;

          self.configuration.$run_hook("after", "suite");
          return self.reporter.$finish();
        }, nil) && 'finish';
      })(self, null)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["opal/rspec/async"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$build_hash_from', '$register', '$extend', '$continue_async', '$async', '$to_proc', '$delay', '$clone', '$examples', '$run_next_example', '$empty?', '$finish', '$run_example', '$pop', '$example_group', '$example_group_started', '$new', '$run', '$example_finished', '$example_group_finished', '$call', '$include', '$<<', '$current_example=', '$instance_variable_set', '$start', '$run_before_each', '$instance_exec', '$set_exception', '$finished?', '$async_example_finished', '$[]', '$options', '$run_after_each', '$each', '$instance_variables', '$assign_generated_description']);
  return (function($base) {
    var self = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'RSpec');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'AsyncHelpers');

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5;

        (function($base) {
          var self = $module($base, 'ClassMethods');

          var def = self.$$proto, $scope = self.$$scope, TMP_1;

          Opal.defn(self, '$async', TMP_1 = function(desc, args) {
            var self = this, $iter = TMP_1.$$p, block = $iter || nil, options = nil;

            args = $slice.call(arguments, 1);
            TMP_1.$$p = null;
            options = ((((Opal.get('RSpec')).$$scope.get('Core'))).$$scope.get('Metadata')).$build_hash_from(args);
            return (((($scope.get('Opal')).$$scope.get('RSpec'))).$$scope.get('AsyncExample')).$register(self, desc, options, block);
          })
        })(self);

        Opal.defs(self, '$included', function(base) {
          var self = this;

          return base.$extend($scope.get('ClassMethods'));
        });

        Opal.defn(self, '$async', TMP_2 = function() {
          var self = this, $iter = TMP_2.$$p, block = $iter || nil;
          if (self.example == null) self.example = nil;

          TMP_2.$$p = null;
          return self.example.$continue_async(block);
        });

        Opal.defn(self, '$delay', TMP_3 = function(duration) {
          var self = this, $iter = TMP_3.$$p, block = $iter || nil;

          TMP_3.$$p = null;
          setTimeout(block, duration * 1000);
          return self;
        });

        Opal.defn(self, '$run_async', TMP_4 = function() {
          var $a, $b, self = this, $iter = TMP_4.$$p, block = $iter || nil;

          TMP_4.$$p = null;
          return ($a = ($b = self).$async, $a.$$p = block.$to_proc(), $a).call($b);
        });

        Opal.defn(self, '$set_timeout', TMP_5 = function(args) {
          var $a, $b, self = this, $iter = TMP_5.$$p, block = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_5.$$p = null;
          return ($a = ($b = self).$delay, $a.$$p = block.$to_proc(), $a).apply($b, [].concat(args));
        });
      })(self);

      (function($base, $super) {
        function $AsyncRunner(){};
        var self = $AsyncRunner = $klass($base, $super, 'AsyncRunner', $AsyncRunner);

        var def = self.$$proto, $scope = self.$$scope;

        def.examples = def.reporter = def.finish_block = nil;
        def.$initialize = function(runner, reporter, finish_block) {
          var self = this;

          self.runner = runner;
          self.reporter = reporter;
          return self.finish_block = finish_block;
        };

        def.$run = function() {
          var self = this;

          self.examples = $scope.get('AsyncExample').$examples().$clone();
          return self.$run_next_example();
        };

        def.$run_next_example = function() {
          var $a, self = this;

          if ((($a = self.examples['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$finish()
            } else {
            return self.$run_example(self.examples.$pop())
          };
        };

        def.$run_example = function(example) {
          var $a, $b, TMP_6, self = this, example_group = nil, instance = nil;

          example_group = example.$example_group();
          self.reporter.$example_group_started(example_group);
          instance = example_group.$new();
          return ($a = ($b = example).$run, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

          return self.$example_finished(example)}, TMP_6.$$s = self, TMP_6), $a).call($b, instance, self.reporter);
        };

        def.$example_finished = function(example) {
          var self = this;

          self.reporter.$example_group_finished(example.$example_group());
          return self.$run_next_example();
        };

        return (def.$finish = function() {
          var self = this;

          return self.finish_block.$call();
        }, nil) && 'finish';
      })(self, null);

      (function($base, $super) {
        function $AsyncExample(){};
        var self = $AsyncExample = $klass($base, $super, 'AsyncExample', $AsyncExample);

        var def = self.$$proto, $scope = self.$$scope, TMP_7;

        def.example_block = def.example_group_instance = def.finished = def.reporter = def.after_run_block = nil;
        self.$include($scope.get('AsyncHelpers'));

        Opal.defs(self, '$register', function(args) {
          var $a, self = this;

          args = $slice.call(arguments, 0);
          return self.$examples()['$<<'](($a = self).$new.apply($a, [].concat(args)));
        });

        Opal.defs(self, '$examples', function() {
          var $a, self = this;
          if (self.examples == null) self.examples = nil;

          return ((($a = self.examples) !== false && $a !== nil) ? $a : self.examples = []);
        });

        def.$run = TMP_7 = function(example_group_instance, reporter) {
          var $a, $b, $c, TMP_8, $d, self = this, $iter = TMP_7.$$p, after_run_block = $iter || nil, should_wait = nil, e = nil;

          TMP_7.$$p = null;
          self.example_group_instance = example_group_instance;
          self.reporter = reporter;
          self.after_run_block = after_run_block;
          self.finished = false;
          should_wait = true;
          (($a = [self]), $b = Opal.get('RSpec'), $b['$current_example='].apply($b, $a), $a[$a.length-1]);
          example_group_instance.$instance_variable_set("@example", self);
          self.$start(reporter);
          try {
          self.$run_before_each();
            ($a = ($b = self.example_group_instance).$instance_exec, $a.$$p = self.example_block.$to_proc(), $a).call($b, self);
          } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
            self.$set_exception(e);
            should_wait = false;
            }else { throw $err; }
          };
          if (should_wait !== false && should_wait !== nil) {
            return ($a = ($c = self).$delay, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $a;

            if ((($a = self['$finished?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                return nil;};
              self.$set_exception($scope.get('RuntimeError').$new("timeout"));
              return self.$async_example_finished();}, TMP_8.$$s = self, TMP_8), $a).call($c, ((($d = self.$options()['$[]']("timeout")) !== false && $d !== nil) ? $d : 10))
            } else {
            return self.$async_example_finished()
          };
        };

        def.$continue_async = function(block) {
          var $a, self = this, e = nil;

          if ((($a = self['$finished?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          try {
          block.$call()
          } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
            self.$set_exception(e)
            }else { throw $err; }
          };
          return self.$async_example_finished();
        };

        def['$finished?'] = function() {
          var self = this;

          return self.finished;
        };

        return (def.$async_example_finished = function() {
          var $a, $b, TMP_9, $c, self = this, e = nil;

          self.finished = true;
          try {
          try {
          self.$run_after_each()
          } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
            self.$set_exception(e)
            }else { throw $err; }
          }
          } finally {
          ($a = ($b = self.example_group_instance.$instance_variables()).$each, $a.$$p = (TMP_9 = function(ivar){var self = TMP_9.$$s || this;
            if (self.example_group_instance == null) self.example_group_instance = nil;
if (ivar == null) ivar = nil;
          return self.example_group_instance.$instance_variable_set(ivar, nil)}, TMP_9.$$s = self, TMP_9), $a).call($b);
          self.example_group_instance = nil;
          try {
          self.$assign_generated_description()
          } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
            self.$set_exception(e, "while assigning the example description")
            }else { throw $err; }
          };
          };
          self.$finish(self.reporter);
          (($a = [nil]), $c = Opal.get('RSpec'), $c['$current_example='].apply($c, $a), $a[$a.length-1]);
          return self.after_run_block.$call();
        }, nil) && 'async_example_finished';
      })(self, ((((Opal.get('RSpec')).$$scope.get('Core'))).$$scope.get('Example')));
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["opal/rspec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$configure', '$formatter=', '$default_formatter', '$include', '$expect_with', '$syntax=']);
  (function($base, $super) {
    function $MiniTest(){};
    var self = $MiniTest = $klass($base, $super, 'MiniTest', $MiniTest);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $Unit(){};
      var self = $Unit = $klass($base, $super, 'Unit', $Unit);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })(self, null)
  })(self, null);
  Opal.cdecl($scope, 'Test', $scope.get('MiniTest'));
  self.$require("opal/rspec/requires");
  self.$require("opal/rspec/fixes");
  self.$require("opal/rspec/text_formatter");
  self.$require("opal/rspec/browser_formatter");
  self.$require("opal/rspec/runner");
  self.$require("opal/rspec/async");
  return ($a = ($b = $scope.get('RSpec')).$configure, $a.$$p = (TMP_1 = function(config){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (config == null) config = nil;
  (($a = [(((($scope.get('Opal')).$$scope.get('RSpec'))).$$scope.get('Runner')).$default_formatter()]), $b = config, $b['$formatter='].apply($b, $a), $a[$a.length-1]);
    config.$include((((($scope.get('Opal')).$$scope.get('RSpec'))).$$scope.get('AsyncHelpers')));
    return ($a = ($b = config).$expect_with, $a.$$p = (TMP_2 = function(c){var self = TMP_2.$$s || this, $a, $b;
if (c == null) c = nil;
    return (($a = [["should", "expect"]]), $b = c, $b['$syntax='].apply($b, $a), $a[$a.length-1])}, TMP_2.$$s = self, TMP_2), $a).call($b, "rspec");}, TMP_1.$$s = self, TMP_1), $a).call($b);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["opal-rspec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("opal/rspec")
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/volt/environment"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$[]', '$==', '$inspect']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Environment(){};
      var self = $Environment = $klass($base, $super, 'Environment', $Environment);

      var def = self.$$proto, $scope = self.$$scope;

      def.env = nil;
      def.$initialize = function() {
        var $a, self = this;

        self.env = $scope.get('ENV')['$[]']("VOLT_ENV");
        if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
          if ((($a = self.env) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            if (window.start_env) {;
            self.env = window.start_env;
            };
          }};
        return ((($a = self.env) !== false && $a !== nil) ? $a : self.env = "development");
      };

      def['$=='] = function(val) {
        var self = this;

        return self.env['$=='](val);
      };

      def['$production?'] = function() {
        var self = this;

        return self['$==']("production");
      };

      def['$test?'] = function() {
        var self = this;

        return self['$==']("test");
      };

      def['$development?'] = function() {
        var self = this;

        return self['$==']("development");
      };

      def.$inspect = function() {
        var self = this;

        return self.env.$inspect();
      };

      return (def.$to_s = function() {
        var self = this;

        return self.env;
      }, nil) && 'to_s';
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/extra_core/logger"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$==', '$each', '$define_method', '$call']);
  if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
    (function($base, $super) {
      function $Logger(){};
      var self = $Logger = $klass($base, $super, 'Logger', $Logger);

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

      def.$initialize = function(args) {
        var self = this;

        args = $slice.call(arguments, 0);
        return nil;
      };

      return ($a = ($b = ["fatal", "info", "warn", "debug", "error"]).$each, $a.$$p = (TMP_1 = function(method_name){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (method_name == null) method_name = nil;
      return ($a = ($b = self).$define_method, $a.$$p = (TMP_2 = function(text){var self = TMP_2.$$s || this, block;
if (text == null) text = nil;
          block = TMP_2.$$p || nil, TMP_2.$$p = null;
        if (block !== false && block !== nil) {
            text = block.$call()};
          console[method_name](text);}, TMP_2.$$s = self, TMP_2), $a).call($b, method_name)}, TMP_1.$$s = self, TMP_1), $a).call($b);
    })(self, null);
    return (function($base, $super) {
      function $VoltLogger(){};
      var self = $VoltLogger = $klass($base, $super, 'VoltLogger', $VoltLogger);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })(self, $scope.get('Logger'));}
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/extra_core/array"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$inject']);
  return (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$sum = function() {
      var self = this;

      return self.$inject(0, "+");
    }, nil) && 'sum'
  })(self, null)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/extra_core/object"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$[]', '$map', '$instance_variable_get', '$instance_variables', '$!', '$nil?', '$gsub', '$inspect', '$load', '$dump', '$empty?', '$respond_to?', '$first', '$public_send', '$to_proc']);
  return (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_2;

    Opal.defn(self, '$instance_values', function() {
      var $a, $b, TMP_1, self = this;

      return $scope.get('Hash')['$[]'](($a = ($b = self.$instance_variables()).$map, $a.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this;
if (name == null) name = nil;
      return [name['$[]']($range(1, -1, false)), self.$instance_variable_get(name)]}, TMP_1.$$s = self, TMP_1), $a).call($b));
    });

    Opal.defn(self, '$or', function(other) {
      var $a, $b, self = this;

      if ((($a = (($b = self !== false && self !== nil) ? self['$nil?']()['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self
        } else {
        return other
      };
    });

    Opal.defn(self, '$and', function(other) {
      var $a, $b, self = this;

      if ((($a = (($b = self !== false && self !== nil) ? self['$nil?']()['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return other
        } else {
        return self
      };
    });

    Opal.defn(self, '$html_inspect', function() {
      var self = this;

      return self.$inspect().$gsub("<", "&lt;").$gsub(">", "&gt;");
    });

    Opal.defn(self, '$deep_clone', function() {
      var self = this;

      return $scope.get('Marshal').$load($scope.get('Marshal').$dump(self));
    });

    return (Opal.defn(self, '$try', TMP_2 = function(a) {
      var $a, $b, self = this, $iter = TMP_2.$$p, b = $iter || nil;

      a = $slice.call(arguments, 0);
      TMP_2.$$p = null;
      if ((($a = ($b = a['$empty?'](), $b !== false && $b !== nil ?(b !== nil) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return $a = Opal.yield1(b, self), $a === $breaker ? $a : $a
      } else if ((($a = self['$respond_to?'](a.$first())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self).$public_send, $a.$$p = b.$to_proc(), $a).apply($b, [].concat(a))
        } else {
        return nil
      };
    }), nil) && 'try';
  })(self, null)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/extra_core/blank"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$respond_to?', '$empty?', '$!', '$blank?', '$alias_method', '$=~']);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$blank?', function() {
      var $a, self = this;

      if ((($a = self['$respond_to?']("empty?")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self['$empty?']()
        } else {
        return self['$!']()
      };
    });

    return (Opal.defn(self, '$present?', function() {
      var self = this;

      return self['$blank?']()['$!']();
    }), nil) && 'present?';
  })(self, null);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope;

    return (def['$blank?'] = function() {
      var self = this;

      return true;
    }, nil) && 'blank?'
  })(self, null);
  (function($base, $super) {
    function $FalseClass(){};
    var self = $FalseClass = $klass($base, $super, 'FalseClass', $FalseClass);

    var def = self.$$proto, $scope = self.$$scope;

    return (def['$blank?'] = function() {
      var self = this;

      return true;
    }, nil) && 'blank?'
  })(self, null);
  (function($base, $super) {
    function $TrueClass(){};
    var self = $TrueClass = $klass($base, $super, 'TrueClass', $TrueClass);

    var def = self.$$proto, $scope = self.$$scope;

    return (def['$blank?'] = function() {
      var self = this;

      return false;
    }, nil) && 'blank?'
  })(self, null);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope;

    return self.$alias_method("blank?", "empty?")
  })(self, null);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope;

    return self.$alias_method("blank?", "empty?")
  })(self, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    return (def['$blank?'] = function() {
      var $a, self = this;

      return ($a = self['$=~'](/\S/), ($a === nil || $a === false));
    }, nil) && 'blank?'
  })(self, null);
  return (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope;

    return (def['$blank?'] = function() {
      var self = this;

      return false;
    }, nil) && 'blank?'
  })(self, null);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/extra_core/stringify_keys"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each_with_object', '$[]=', '$to_s', '$to_sym']);
  return (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$stringify_keys', function() {
      var $a, $b, TMP_1, self = this;

      return ($a = ($b = self).$each_with_object, $a.$$p = (TMP_1 = function($c, hash){var self = TMP_1.$$s || this;
key = $c[0];value = $c[1];if (hash == null) hash = nil;
      return hash['$[]='](key.$to_s(), value)}, TMP_1.$$s = self, TMP_1), $a).call($b, $hash2([], {}));
    });

    return (Opal.defn(self, '$symbolize_keys', function() {
      var $a, $b, TMP_2, self = this;

      return ($a = ($b = self).$each_with_object, $a.$$p = (TMP_2 = function($c, hash){var self = TMP_2.$$s || this;
key = $c[0];value = $c[1];if (hash == null) hash = nil;
      return hash['$[]='](key.$to_sym(), value)}, TMP_2.$$s = self, TMP_2), $a).call($b, $hash2([], {}));
    }), nil) && 'symbolize_keys';
  })(self, null)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/extra_core/inflector/inflections"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$[]', '$[]=', '$new', '$attr_reader', '$each', '$instance_variable_set', '$dup', '$send', '$downcase', '$join', '$values', '$is_a?', '$delete', '$insert', '$==', '$upcase', '$plural', '$+', '$singular', '$flatten!', '$<<', '$===', '$instance']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Inflector');

      var def = self.$$proto, $scope = self.$$scope, TMP_2;

      (function($base, $super) {
        function $Inflections(){};
        var self = $Inflections = $klass($base, $super, 'Inflections', $Inflections);

        var def = self.$$proto, $scope = self.$$scope;

        def.acronyms = def.uncountables = def.plurals = def.singulars = def.humans = nil;
        self.__instance__ = $hash2([], {});

        Opal.defs(self, '$instance', function(locale) {
          var $a, $b, $c, self = this;
          if (self.__instance__ == null) self.__instance__ = nil;

          if (locale == null) {
            locale = "en"
          }
          return ($a = locale, $b = self.__instance__, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, self.$new())));
        });

        self.$attr_reader("plurals", "singulars", "uncountables", "humans", "acronyms", "acronym_regex");

        def.$initialize = function() {
          var $a, self = this;

          return $a = [[], [], [], [], $hash2([], {}), /(?=a)b/], self.plurals = $a[0], self.singulars = $a[1], self.uncountables = $a[2], self.humans = $a[3], self.acronyms = $a[4], self.acronym_regex = $a[5];
        };

        def.$initialize_dup = function(orig) {
          var $a, $b, TMP_1, self = this;

          return ($a = ($b = ["plurals", "singulars", "uncountables", "humans", "acronyms", "acronym_regex"]).$each, $a.$$p = (TMP_1 = function(scope){var self = TMP_1.$$s || this;
if (scope == null) scope = nil;
          return self.$instance_variable_set("@" + (scope), orig.$send(scope).$dup())}, TMP_1.$$s = self, TMP_1), $a).call($b);
        };

        def.$acronym = function(word) {
          var self = this;

          self.acronyms['$[]='](word.$downcase(), word);
          return self.acronym_regex = (new RegExp("" + self.acronyms.$values().$join("|")));
        };

        def.$plural = function(rule, replacement) {
          var $a, self = this;

          if ((($a = rule['$is_a?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.uncountables.$delete(rule)};
          self.uncountables.$delete(replacement);
          return self.plurals.$insert(0, [rule, replacement]);
        };

        def.$singular = function(rule, replacement) {
          var $a, self = this;

          if ((($a = rule['$is_a?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.uncountables.$delete(rule)};
          self.uncountables.$delete(replacement);
          return self.singulars.$insert(0, [rule, replacement]);
        };

        def.$irregular = function(singular, plural) {
          var self = this, s0 = nil, srest = nil, p0 = nil, prest = nil;

          self.uncountables.$delete(singular);
          self.uncountables.$delete(plural);
          s0 = singular['$[]'](0);
          srest = singular['$[]']($range(1, -1, false));
          p0 = plural['$[]'](0);
          prest = plural['$[]']($range(1, -1, false));
          if (s0.$upcase()['$=='](p0.$upcase())) {
            self.$plural((new RegExp("(" + s0 + ")" + srest + "$")), "\\1"['$+'](prest));
            self.$plural((new RegExp("(" + p0 + ")" + prest + "$")), "\\1"['$+'](prest));
            self.$singular((new RegExp("(" + s0 + ")" + srest + "$")), "\\1"['$+'](srest));
            return self.$singular((new RegExp("(" + p0 + ")" + prest + "$")), "\\1"['$+'](srest));
            } else {
            self.$plural((new RegExp("" + s0.$upcase() + "(?i)" + srest + "$")), p0.$upcase()['$+'](prest));
            self.$plural((new RegExp("" + s0.$downcase() + "(?i)" + srest + "$")), p0.$downcase()['$+'](prest));
            self.$plural((new RegExp("" + p0.$upcase() + "(?i)" + prest + "$")), p0.$upcase()['$+'](prest));
            self.$plural((new RegExp("" + p0.$downcase() + "(?i)" + prest + "$")), p0.$downcase()['$+'](prest));
            self.$singular((new RegExp("" + s0.$upcase() + "(?i)" + srest + "$")), s0.$upcase()['$+'](srest));
            self.$singular((new RegExp("" + s0.$downcase() + "(?i)" + srest + "$")), s0.$downcase()['$+'](srest));
            self.$singular((new RegExp("" + p0.$upcase() + "(?i)" + prest + "$")), s0.$upcase()['$+'](srest));
            return self.$singular((new RegExp("" + p0.$downcase() + "(?i)" + prest + "$")), s0.$downcase()['$+'](srest));
          };
        };

        def.$uncountable = function(words) {
          var self = this;

          words = $slice.call(arguments, 0);
          return (self.uncountables['$<<'](words))['$flatten!']();
        };

        def.$human = function(rule, replacement) {
          var self = this;

          return self.humans.$insert(0, [rule, replacement]);
        };

        return (def.$clear = function(scope) {
          var $a, self = this, $case = nil;

          if (scope == null) {
            scope = "all"
          }
          return (function() {$case = scope;if ("all"['$===']($case)) {return $a = [[], [], [], []], self.plurals = $a[0], self.singulars = $a[1], self.uncountables = $a[2], self.humans = $a[3]}else {return self.$instance_variable_set("@" + (scope), [])}})();
        }, nil) && 'clear';
      })(self, null);

      Opal.defs(self, '$inflections', TMP_2 = function(locale) {
        var $a, self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

        if (locale == null) {
          locale = "en"
        }
        TMP_2.$$p = null;
        if (($yield !== nil)) {
          return $a = Opal.yield1($yield, $scope.get('Inflections').$instance(locale)), $a === $breaker ? $a : $a
          } else {
          return $scope.get('Inflections').$instance(locale)
        };
      });
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/extra_core/inflector/methods"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$apply_inflections', '$plurals', '$inflections', '$singulars', '$private', '$dup', '$to_s', '$empty?', '$include?', '$uncountables', '$[]', '$downcase', '$each', '$match', '$sub']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Inflector');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defs(self, '$pluralize', function(word, locale) {
        var self = this;

        if (locale == null) {
          locale = "en"
        }
        return self.$apply_inflections(word, self.$inflections(locale).$plurals());
      });

      Opal.defs(self, '$singularize', function(word, locale) {
        var self = this;

        if (locale == null) {
          locale = "en"
        }
        return self.$apply_inflections(word, self.$inflections(locale).$singulars());
      });

      self.$private();

      Opal.defs(self, '$apply_inflections', function(word, rules) {
        var $a, $b, TMP_1, self = this, result = nil;

        result = word.$to_s().$dup();
        if ((($a = ((($b = word['$empty?']()) !== false && $b !== nil) ? $b : self.$inflections().$uncountables()['$include?'](result.$downcase()['$[]'](/\b\w+\Z/)))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return result
          } else {
          ($a = ($b = rules).$each, $a.$$p = (TMP_1 = function(rule, replacement){var self = TMP_1.$$s || this, $a;
if (rule == null) rule = nil;if (replacement == null) replacement = nil;
          if ((($a = result.$match(rule)) !== nil && (!$a.$$is_boolean || $a == true))) {
              result = result.$sub(rule, replacement);
              return ($breaker.$v = nil, $breaker);
              } else {
              return nil
            }}, TMP_1.$$s = self, TMP_1), $a).call($b);
          return result;
        };
      });
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/extra_core/inflections"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$inflections', '$plural', '$singular', '$irregular', '$uncountable']);
  self.$require("volt/extra_core/inflector/inflections");
  return ($a = ($b = (($scope.get('Volt')).$$scope.get('Inflector'))).$inflections, $a.$$p = (TMP_1 = function(inflect){var self = TMP_1.$$s || this;
if (inflect == null) inflect = nil;
  inflect.$plural(/$/, "s");
    inflect.$plural(/s$/i, "s");
    inflect.$plural(/^(ax|test)is$/i, "\\1es");
    inflect.$plural(/(octop|vir)us$/i, "\\1i");
    inflect.$plural(/(octop|vir)i$/i, "\\1i");
    inflect.$plural(/(alias|status)$/i, "\\1es");
    inflect.$plural(/(bu)s$/i, "\\1ses");
    inflect.$plural(/(buffal|tomat)o$/i, "\\1oes");
    inflect.$plural(/([ti])um$/i, "\\1a");
    inflect.$plural(/([ti])a$/i, "\\1a");
    inflect.$plural(/sis$/i, "ses");
    inflect.$plural(/(?:([^f])fe|([lr])f)$/i, "\\1\\2ves");
    inflect.$plural(/(hive)$/i, "\\1s");
    inflect.$plural(/([^aeiouy]|qu)y$/i, "\\1ies");
    inflect.$plural(/(x|ch|ss|sh)$/i, "\\1es");
    inflect.$plural(/(matr|vert|ind)(?:ix|ex)$/i, "\\1ices");
    inflect.$plural(/^(m|l)ouse$/i, "\\1ice");
    inflect.$plural(/^(m|l)ice$/i, "\\1ice");
    inflect.$plural(/^(ox)$/i, "\\1en");
    inflect.$plural(/^(oxen)$/i, "\\1");
    inflect.$plural(/(quiz)$/i, "\\1zes");
    inflect.$singular(/s$/i, "");
    inflect.$singular(/(ss)$/i, "\\1");
    inflect.$singular(/(n)ews$/i, "\\1ews");
    inflect.$singular(/([ti])a$/i, "\\1um");
    inflect.$singular(/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i, "\\1sis");
    inflect.$singular(/(^analy)(sis|ses)$/i, "\\1sis");
    inflect.$singular(/([^f])ves$/i, "\\1fe");
    inflect.$singular(/(hive)s$/i, "\\1");
    inflect.$singular(/(tive)s$/i, "\\1");
    inflect.$singular(/([lr])ves$/i, "\\1f");
    inflect.$singular(/([^aeiouy]|qu)ies$/i, "\\1y");
    inflect.$singular(/(s)eries$/i, "\\1eries");
    inflect.$singular(/(m)ovies$/i, "\\1ovie");
    inflect.$singular(/(x|ch|ss|sh)es$/i, "\\1");
    inflect.$singular(/^(m|l)ice$/i, "\\1ouse");
    inflect.$singular(/(bus)(es)?$/i, "\\1");
    inflect.$singular(/(o)es$/i, "\\1");
    inflect.$singular(/(shoe)s$/i, "\\1");
    inflect.$singular(/(cris|test)(is|es)$/i, "\\1is");
    inflect.$singular(/^(a)x[ie]s$/i, "\\1xis");
    inflect.$singular(/(octop|vir)(us|i)$/i, "\\1us");
    inflect.$singular(/(alias|status)(es)?$/i, "\\1");
    inflect.$singular(/^(ox)en/i, "\\1");
    inflect.$singular(/(vert|ind)ices$/i, "\\1ex");
    inflect.$singular(/(matr)ices$/i, "\\1ix");
    inflect.$singular(/(quiz)zes$/i, "\\1");
    inflect.$singular(/(database)s$/i, "\\1");
    inflect.$irregular("person", "people");
    inflect.$irregular("man", "men");
    inflect.$irregular("child", "children");
    inflect.$irregular("sex", "sexes");
    inflect.$irregular("move", "moves");
    inflect.$irregular("zombie", "zombies");
    return inflect.$uncountable(["equipment", "information", "rice", "money", "species", "series", "fish", "sheep", "jeans", "police"]);}, TMP_1.$$s = self, TMP_1), $a).call($b, "en");
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/extra_core/inflector"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("volt/extra_core/inflector/inflections");
  self.$require("volt/extra_core/inflector/methods");
  return self.$require("volt/extra_core/inflections");
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/extra_core/string"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$p', '$gsub', '$upcase', '$[]', '$==', '$+', '$capitalize', '$downcase', '$pluralize', '$singularize', '$join', '$map', '$to_proc', '$split']);
  self.$require("volt/extra_core/inflector");
  return (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    def.$camelize = function(first_letter) {
      var $a, $b, TMP_1, self = this, new_str = nil;

      if (first_letter == null) {
        first_letter = "upper"
      }
      self.$p($hash2(["before"], {"before": self}));
      new_str = ($a = ($b = self).$gsub, $a.$$p = (TMP_1 = function(a){var self = TMP_1.$$s || this;
if (a == null) a = nil;
      return a['$[]'](1).$upcase()}, TMP_1.$$s = self, TMP_1), $a).call($b, /_[a-z]/);
      if (first_letter['$==']("upper")) {
        new_str = new_str['$[]'](0).$capitalize()['$+'](new_str['$[]']($range(1, -1, false)))};
      self.$p($hash2(["after"], {"after": new_str}));
      return new_str;
    };

    def.$underscore = function() {
      var self = this;

      return self.$gsub(/([A-Z]+)([A-Z][a-z])/, "\\1_\\2").$gsub(/([a-z\d])([A-Z])/, "\\1_\\2").$downcase();
    };

    def.$dasherize = function() {
      var self = this;

      return self.$gsub("_", "-");
    };

    def.$pluralize = function() {
      var self = this;

      return (($scope.get('Volt')).$$scope.get('Inflector')).$pluralize(self);
    };

    def.$singularize = function() {
      var self = this;

      return (($scope.get('Volt')).$$scope.get('Inflector')).$singularize(self);
    };

    def.$titleize = function() {
      var $a, $b, self = this;

      return ($a = ($b = self.$gsub("_", " ").$split(" ")).$map, $a.$$p = "capitalize".$to_proc(), $a).call($b).$join(" ");
    };

    def['$plural?'] = function() {
      var self = this;

      return self.$pluralize()['$=='](self);
    };

    return (def['$singular?'] = function() {
      var self = this;

      return self.$singularize()['$=='](self);
    }, nil) && 'singular?';
  })(self, null);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/extra_core/true_false"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$true?', function() {
      var self = this;

      return true;
    });

    return (Opal.defn(self, '$false?', function() {
      var self = this;

      return false;
    }), nil) && 'false?';
  })(self, null);
  (function($base, $super) {
    function $FalseClass(){};
    var self = $FalseClass = $klass($base, $super, 'FalseClass', $FalseClass);

    var def = self.$$proto, $scope = self.$$scope;

    def['$true?'] = function() {
      var self = this;

      return false;
    };

    return (def['$false?'] = function() {
      var self = this;

      return true;
    }, nil) && 'false?';
  })(self, null);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope;

    def['$true?'] = function() {
      var self = this;

      return false;
    };

    return (def['$false?'] = function() {
      var self = this;

      return true;
    }, nil) && 'false?';
  })(self, null);
  return (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope;

    def['$true?'] = function() {
      var self = this;

      return self;
    };

    return (def['$false?'] = function() {
      var self = this;

      return self;
    }, nil) && 'false?';
  })(self, null);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/extra_core/class"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$each', '$define_singleton_method', '$class_eval', '$remove_possible_method', '$define_method', '$singleton_class', '$method_defined?', '$private_method_defined?', '$undef_method']);
  return (function($base, $super) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $scope = self.$$scope;

    def.$class_attribute = function(attrs) {
      var $a, $b, TMP_1, self = this;

      attrs = $slice.call(arguments, 0);
      return ($a = ($b = attrs).$each, $a.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3, ivar = nil;
if (name == null) name = nil;
      ($a = ($b = self).$define_singleton_method, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return nil}, TMP_2.$$s = self, TMP_2), $a).call($b, name);
        ivar = "@" + (name);
        return ($a = ($c = self).$define_singleton_method, $a.$$p = (TMP_3 = function(val){var self = TMP_3.$$s || this, $a, $b, TMP_4;
if (val == null) val = nil;
        ($a = ($b = self.$singleton_class()).$class_eval, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, $a, $b, TMP_5;

          self.$remove_possible_method(name);
            return ($a = ($b = self).$define_method, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

            return val}, TMP_5.$$s = self, TMP_5), $a).call($b, name);}, TMP_4.$$s = self, TMP_4), $a).call($b);
          return val;}, TMP_3.$$s = self, TMP_3), $a).call($c, "" + (name) + "=");}, TMP_1.$$s = self, TMP_1), $a).call($b);
    };

    return (def.$remove_possible_method = function(method) {
      var $a, $b, self = this;

      if ((($a = ((($b = self['$method_defined?'](method)) !== false && $b !== nil) ? $b : self['$private_method_defined?'](method))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$undef_method(method)
        } else {
        return nil
      };
    }, nil) && 'remove_possible_method';
  })(self, null)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/extra_core/extra_core"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$==']);
  self.$require("volt/extra_core/logger");
  self.$require("volt/extra_core/array");
  self.$require("volt/extra_core/object");
  self.$require("volt/extra_core/blank");
  self.$require("volt/extra_core/stringify_keys");
  self.$require("volt/extra_core/string");
  self.$require("volt/extra_core/true_false");
  self.$require("volt/extra_core/class");
  if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
    return nil};
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/reactive/computation"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$run_in', '$call', '$run_without_tracking', '$<<', '$!', '$in_browser?', '$queue_flush!', '$class', '$each', '$to_proc', '$invalidate!', '$current', '$current=', '$fail', '$new']);
  (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Computation(){};
      var self = $Computation = $klass($base, $super, 'Computation', $Computation);

      var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_4, TMP_5;

      def.stopped = def.invalidated = def.invalidations = def.computing = nil;
      (Opal.cvars['@@current'] = nil);

      (Opal.cvars['@@flush_queue'] = []);

      Opal.defs(self, '$current=', function(val) {
        var self = this;

        return (Opal.cvars['@@current'] = val);
      });

      Opal.defs(self, '$current', function() {
        var $a, self = this;

        return (($a = Opal.cvars['@@current']) == null ? nil : $a);
      });

      def.$initialize = function(computation) {
        var self = this;

        self.computation = computation;
        return self.invalidations = [];
      };

      def['$compute!'] = function() {
        var $a, $b, TMP_1, self = this;

        self.invalidated = false;
        if ((($a = self.stopped) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          self.computing = true;
          ($a = ($b = self).$run_in, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;
            if (self.computation == null) self.computation = nil;

          return self.computation.$call()}, TMP_1.$$s = self, TMP_1), $a).call($b);
          return self.computing = false;
        };
      };

      def.$on_invalidate = TMP_2 = function() {
        var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, callback = $iter || nil;

        TMP_2.$$p = null;
        if ((($a = self.invalidated) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = $scope.get('Computation')).$run_without_tracking, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return callback.$call()}, TMP_3.$$s = self, TMP_3), $a).call($b)
          } else {
          return self.invalidations['$<<'](callback)
        };
      };

      def['$invalidate!'] = function() {
        var $a, $b, self = this, invalidations = nil;

        if ((($a = self.invalidated) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          self.invalidated = true;
          if ((($a = ($b = self.stopped['$!'](), $b !== false && $b !== nil ?self.computing['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            (($a = Opal.cvars['@@flush_queue']) == null ? nil : $a)['$<<'](self);
            if ((($a = $scope.get('Volt')['$in_browser?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$class()['$queue_flush!']()};};
          invalidations = self.invalidations;
          self.invalidations = [];
          return ($a = ($b = invalidations).$each, $a.$$p = "call".$to_proc(), $a).call($b);
        };
      };

      def.$stop = function() {
        var $a, self = this;

        if ((($a = self.stopped) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          self.stopped = true;
          return self['$invalidate!']();
        };
      };

      def.$run_in = TMP_4 = function() {
        var $a, $b, self = this, $iter = TMP_4.$$p, $yield = $iter || nil, previous = nil;

        TMP_4.$$p = null;
        previous = $scope.get('Computation').$current();
        (($a = [self]), $b = $scope.get('Computation'), $b['$current='].apply($b, $a), $a[$a.length-1]);
        if (Opal.yieldX($yield, []) === $breaker) return $breaker.$v;
        (($a = [previous]), $b = $scope.get('Computation'), $b['$current='].apply($b, $a), $a[$a.length-1]);
        return self;
      };

      Opal.defs(self, '$run_without_tracking', TMP_5 = function() {
        var $a, $b, self = this, $iter = TMP_5.$$p, $yield = $iter || nil, previous = nil, return_value = nil;

        TMP_5.$$p = null;
        previous = $scope.get('Computation').$current();
        (($a = [nil]), $b = $scope.get('Computation'), $b['$current='].apply($b, $a), $a[$a.length-1]);
        return_value = ((($a = Opal.yieldX($yield, [])) === $breaker) ? $breaker.$v : $a);
        (($a = [previous]), $b = $scope.get('Computation'), $b['$current='].apply($b, $a), $a[$a.length-1]);
        return return_value;
      });

      Opal.defs(self, '$flush!', function() {
        var $a, $b, self = this, computations = nil;
        if (self.flushing == null) self.flushing = nil;

        if ((($a = self.flushing) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$fail("Can't flush while in a flush")};
        self.flushing = true;
        self.timer = nil;
        computations = (($a = Opal.cvars['@@flush_queue']) == null ? nil : $a);
        (Opal.cvars['@@flush_queue'] = []);
        ($a = ($b = computations).$each, $a.$$p = "compute!".$to_proc(), $a).call($b);
        return self.flushing = false;
      });

      return (Opal.defs(self, '$queue_flush!', function() {
        var $a, self = this;
        if (self.timer == null) self.timer = nil;

        if ((($a = self.timer) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return self.timer = setImmediate(function() { self['$flush!'](); });
        };
      }), nil) && 'queue_flush!';
    })(self, null)
  })(self);
  return (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $scope = self.$$scope;

    return (def['$watch!'] = function() {
      var $a, $b, TMP_6, self = this;

      return ($a = ($b = (($scope.get('Volt')).$$scope.get('Computation')).$new(self)).$run_in, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

      return self.$call()}, TMP_6.$$s = self, TMP_6), $a).call($b);
    }, nil) && 'watch!'
  })(self, null);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/reactive/dependency"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$require', '$delete', '$include?', '$enum_for', '$each', '$select', '$keys', '$new', '$current', '$add?', '$on_invalidate', '$to_proc', '$changed!']);
  self.$require("set");
  (function($base, $super) {
    function $Set(){};
    var self = $Set = $klass($base, $super, 'Set', $Set);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    def.hash = nil;
    def.$delete = function(o) {
      var self = this;

      return self.hash.$delete(o);
    };

    def['$delete?'] = function(o) {
      var $a, self = this;

      if ((($a = self['$include?'](o)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$delete(o)
        } else {
        return nil
      };
    };

    def.$delete_if = TMP_1 = function() {try {

      var $a, $b, TMP_2, $c, $d, TMP_3, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

      TMP_1.$$p = null;
      ((($a = ($yield !== nil)) !== false && $a !== nil) ? $a : Opal.ret(self.$enum_for("delete_if")));
      ($a = ($b = ($c = ($d = self).$select, $c.$$p = (TMP_3 = function(o){var self = TMP_3.$$s || this, $a;
if (o == null) o = nil;
      return $a = Opal.yield1($yield, o), $a === $breaker ? $a : $a}, TMP_3.$$s = self, TMP_3), $c).call($d)).$each, $a.$$p = (TMP_2 = function(o){var self = TMP_2.$$s || this;
        if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
      return self.hash.$delete(o)}, TMP_2.$$s = self, TMP_2), $a).call($b);
      return self;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    };

    return (def.$to_a = function() {
      var self = this;

      return self.hash.$keys();
    }, nil) && 'to_a';
  })(self, null);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Dependency(){};
      var self = $Dependency = $klass($base, $super, 'Dependency', $Dependency);

      var def = self.$$proto, $scope = self.$$scope;

      def.dependencies = nil;
      def.$initialize = function() {
        var self = this;

        return self.dependencies = $scope.get('Set').$new();
      };

      def.$depend = function() {
        var $a, $b, TMP_4, self = this, current = nil, added = nil;

        if ((($a = self.dependencies) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
        current = $scope.get('Computation').$current();
        if (current !== false && current !== nil) {
          added = self.dependencies['$add?'](current);
          if (added !== false && added !== nil) {
            return ($a = ($b = current).$on_invalidate, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, $a;
              if (self.dependencies == null) self.dependencies = nil;

            if ((($a = self.dependencies) !== nil && (!$a.$$is_boolean || $a == true))) {
                return self.dependencies.$delete(current)
                } else {
                return nil
              }}, TMP_4.$$s = self, TMP_4), $a).call($b)
            } else {
            return nil
          };
          } else {
          return nil
        };
      };

      def['$changed!'] = function() {
        var $a, $b, self = this, deps = nil;

        deps = self.dependencies;
        if (deps !== false && deps !== nil) {
          } else {
          return nil
        };
        self.dependencies = $scope.get('Set').$new();
        return ($a = ($b = deps).$each, $a.$$p = "invalidate!".$to_proc(), $a).call($b);
      };

      return (def.$remove = function() {
        var self = this;

        self['$changed!']();
        return self.dependencies = nil;
      }, nil) && 'remove';
    })(self, null)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["ostruct"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$each_pair', '$[]=', '$to_sym', '$[]', '$end_with?', '$enum_for', '$is_a?', '$==', '$instance_variable_get', '$===', '$eql?', '$dup', '$to_n', '$hash', '$class', '$join', '$map', '$inspect']);
  return (function($base, $super) {
    function $OpenStruct(){};
    var self = $OpenStruct = $klass($base, $super, 'OpenStruct', $OpenStruct);

    var def = self.$$proto, $scope = self.$$scope, TMP_2;

    def.table = nil;
    def.$initialize = function(hash) {
      var $a, $b, TMP_1, self = this;

      if (hash == null) {
        hash = nil
      }
      self.table = $hash2([], {});
      if (hash !== false && hash !== nil) {
        return ($a = ($b = hash).$each_pair, $a.$$p = (TMP_1 = function(key, value){var self = TMP_1.$$s || this;
          if (self.table == null) self.table = nil;
if (key == null) key = nil;if (value == null) value = nil;
        return self.table['$[]='](key.$to_sym(), value)}, TMP_1.$$s = self, TMP_1), $a).call($b)
        } else {
        return nil
      };
    };

    def['$[]'] = function(name) {
      var self = this;

      return self.table['$[]'](name.$to_sym());
    };

    def['$[]='] = function(name, value) {
      var self = this;

      return self.table['$[]='](name.$to_sym(), value);
    };

    def.$method_missing = function(name, args) {
      var $a, self = this;

      args = $slice.call(arguments, 1);
      if ((($a = name['$end_with?']("=")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.table['$[]='](name['$[]']($range(0, -2, false)).$to_sym(), args['$[]'](0))
        } else {
        return self.table['$[]'](name.$to_sym())
      };
    };

    def.$each_pair = TMP_2 = function() {
      var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

      TMP_2.$$p = null;
      if (($yield !== nil)) {
        } else {
        return self.$enum_for("each_pair")
      };
      return ($a = ($b = self.table).$each_pair, $a.$$p = (TMP_3 = function(pair){var self = TMP_3.$$s || this, $a;
if (pair == null) pair = nil;
      return $a = Opal.yield1($yield, pair), $a === $breaker ? $a : $a}, TMP_3.$$s = self, TMP_3), $a).call($b);
    };

    def['$=='] = function(other) {
      var $a, self = this;

      if ((($a = other['$is_a?']($scope.get('OpenStruct'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return self.table['$=='](other.$instance_variable_get("@table"));
    };

    def['$==='] = function(other) {
      var $a, self = this;

      if ((($a = other['$is_a?']($scope.get('OpenStruct'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return self.table['$==='](other.$instance_variable_get("@table"));
    };

    def['$eql?'] = function(other) {
      var $a, self = this;

      if ((($a = other['$is_a?']($scope.get('OpenStruct'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return self.table['$eql?'](other.$instance_variable_get("@table"));
    };

    def.$to_h = function() {
      var self = this;

      return self.table.$dup();
    };

    def.$to_n = function() {
      var self = this;

      return self.table.$to_n();
    };

    def.$hash = function() {
      var self = this;

      return self.table.$hash();
    };

    return (def.$inspect = function() {
      var $a, $b, TMP_4, self = this;

      return "#<" + (self.$class()) + ": " + (($a = ($b = self.$each_pair()).$map, $a.$$p = (TMP_4 = function(name, value){var self = TMP_4.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return "" + (name) + "=" + (self['$[]'](name).$inspect())}, TMP_4.$$s = self, TMP_4), $a).call($b).$join(" ")) + ">";
    }, nil) && 'inspect';
  })(self, null)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/config"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$require', '$key?', '$attr_reader', '$wrap_config', '$each_pair', '$is_a?', '$[]=', '$new']);
  if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
    self.$require("ostruct");
    (function($base, $super) {
      function $OpenStruct(){};
      var self = $OpenStruct = $klass($base, $super, 'OpenStruct', $OpenStruct);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      def.table = nil;
      return (def['$respond_to?'] = TMP_1 = function(method_name) {var $zuper = $slice.call(arguments, 0);
        var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        TMP_1.$$p = null;
        return ((($a = self.table['$key?'](method_name)) !== false && $a !== nil) ? $a : Opal.find_super_dispatcher(self, 'respond_to?', TMP_1, $iter).apply(self, $zuper));
      }, nil) && 'respond_to?'
    })(self, null);
    return (function($base) {
      var self = $module($base, 'Volt');

      var def = self.$$proto, $scope = self.$$scope;

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto;

        self.$attr_reader("config");
        self.$$proto.$setup_client_config = function(config_hash) {
          var self = this;

          return self.config = self.$wrap_config($hash2(["public"], {"public": config_hash}));
        };
        return (self.$$proto.$wrap_config = function(hash) {
          var $a, $b, TMP_2, self = this, new_hash = nil;

          new_hash = $hash2([], {});
          ($a = ($b = hash).$each_pair, $a.$$p = (TMP_2 = function(key, value){var self = TMP_2.$$s || this, $a;
if (key == null) key = nil;if (value == null) value = nil;
          if ((($a = value['$is_a?']($scope.get('Hash'))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return new_hash['$[]='](key, self.$wrap_config(value))
              } else {
              return new_hash['$[]='](key, value)
            }}, TMP_2.$$s = self, TMP_2), $a).call($b);
          return $scope.get('OpenStruct').$new(new_hash);
        }, nil) && 'wrap_config';
      })(self.$singleton_class())
    })(self);}
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/volt/users"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$user_id_signature', '$nil?', '$index', '$[]', '$!', '$==', '$user', '$user_id', '$find_one', '$_users', '$store', '$then', '$_user_id=', '$cookies', '$login', '$delete', '$client?', '$_user_id', '$current']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      self.$$proto.$user_id = function() {
        var $a, self = this, user_id_signature = nil, index = nil, user_id = nil;

        user_id_signature = self.$user_id_signature();
        if ((($a = user_id_signature['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          index = user_id_signature.$index(":");
          user_id = user_id_signature['$[]']($range(0, index, true));
          if ((($a = $scope.get('RUBY_PLATFORM')['$==']("opal")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {};
          return user_id;
        };
      };
      self.$$proto['$user?'] = function() {
        var self = this;

        return self.$user()['$!']()['$!']();
      };
      self.$$proto.$user = function() {
        var self = this, user_id = nil;
        if ($gvars.page == null) $gvars.page = nil;

        user_id = self.$user_id();
        if (user_id !== false && user_id !== nil) {
          return $gvars.page.$store().$_users().$find_one($hash2(["_id"], {"_id": user_id}))
          } else {
          return nil
        };
      };
      self.$$proto.$login = function(username, password) {
        var $a, $b, TMP_1, self = this;

        return ($a = ($b = $scope.get('UserTasks').$login(username, password)).$then, $a.$$p = (TMP_1 = function(result){var self = TMP_1.$$s || this, $a, $b;
          if ($gvars.page == null) $gvars.page = nil;
if (result == null) result = nil;
        (($a = [result]), $b = $gvars.page.$cookies(), $b['$_user_id='].apply($b, $a), $a[$a.length-1]);
          return nil;}, TMP_1.$$s = self, TMP_1), $a).call($b);
      };
      self.$$proto.$logout = function() {
        var self = this;
        if ($gvars.page == null) $gvars.page = nil;

        return $gvars.page.$cookies().$delete("user_id");
      };
      return (self.$$proto.$user_id_signature = function() {
        var $a, self = this, user_id_signature = nil, meta_data = nil;
        if ($gvars.page == null) $gvars.page = nil;

        if ((($a = $scope.get('Volt')['$client?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          user_id_signature = $gvars.page.$cookies().$_user_id()
          } else {
          meta_data = $scope.get('Thread').$current()['$[]']("meta");
          if (meta_data !== false && meta_data !== nil) {
            user_id_signature = meta_data['$[]']("user_id")
            } else {
            user_id_signature = nil
          };
        };
        return user_id_signature;
      }, nil) && 'user_id_signature';
    })(self.$singleton_class())
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$==', '$expand_path', '$pwd', '$attr_writer', '$!', '$[]', '$new']);
  self.$require("volt/volt/environment");
  self.$require("volt/extra_core/extra_core");
  self.$require("volt/reactive/computation");
  self.$require("volt/reactive/dependency");
  self.$require("volt/config");
  if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {};
  self.$require("volt/volt/users");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    self.in_browser = (function() {if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
      return !!document && !window.OPAL_SPEC_PHANTOM;}; return nil; })();

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      self.$$proto.$root = function() {
        var $a, self = this;
        if (self.root == null) self.root = nil;

        return ((($a = self.root) !== false && $a !== nil) ? $a : self.root = $scope.get('File').$expand_path($scope.get('Dir').$pwd()));
      };
      self.$attr_writer("root");
      self.$$proto['$server?'] = function() {
        var self = this;

        return $scope.get('ENV')['$[]']("SERVER")['$!']()['$!']();
      };
      self.$$proto['$client?'] = function() {
        var self = this;

        return $scope.get('ENV')['$[]']("SERVER")['$!']();
      };
      self.$$proto['$source_maps?'] = function() {
        var self = this;

        return $scope.get('ENV')['$[]']("MAPS")['$!']()['$!']();
      };
      self.$$proto.$env = function() {
        var $a, self = this;
        if (self.env == null) self.env = nil;

        return ((($a = self.env) !== false && $a !== nil) ? $a : self.env = (($scope.get('Volt')).$$scope.get('Environment')).$new());
      };
      self.$$proto.$logger = function() {
        var $a, self = this;
        if (self.logger == null) self.logger = nil;

        return ((($a = self.logger) !== false && $a !== nil) ? $a : self.logger = (($scope.get('Volt')).$$scope.get('VoltLogger')).$new());
      };
      self.$attr_writer("logger");
      return (self.$$proto['$in_browser?'] = function() {
        var self = this;
        if (self.in_browser == null) self.in_browser = nil;

        return self.in_browser;
      }, nil) && 'in_browser?';
    })(self.$singleton_class());
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/model_wrapper"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$is_a?', '$new_array_model', '$merge', '$+', '$path', '$new_model', '$map', '$wrap_value', '$to_sym', '$[]']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'ModelWrapper');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defn(self, '$wrap_value', function(value, lookup) {
        var $a, self = this;
        if (self.options == null) self.options = nil;

        if ((($a = value['$is_a?']($scope.get('Array'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$new_array_model(value, self.options.$merge($hash2(["parent", "path"], {"parent": self, "path": self.$path()['$+'](lookup)})))
        } else if ((($a = value['$is_a?']($scope.get('Hash'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$new_model(value, self.options.$merge($hash2(["parent", "path"], {"parent": self, "path": self.$path()['$+'](lookup)})))
          } else {
          return value
        };
      });

      Opal.defn(self, '$wrap_values', function(values, lookup) {
        var $a, $b, TMP_1, $c, TMP_2, self = this, pairs = nil;

        if (lookup == null) {
          lookup = []
        }
        if ((($a = values['$is_a?']($scope.get('Array'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = values).$map, $a.$$p = (TMP_1 = function(v){var self = TMP_1.$$s || this;
if (v == null) v = nil;
          return self.$wrap_value(v, lookup['$+'](["[]"]))}, TMP_1.$$s = self, TMP_1), $a).call($b)
        } else if ((($a = values['$is_a?']($scope.get('Hash'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          pairs = ($a = ($c = values).$map, $a.$$p = (TMP_2 = function(k, v){var self = TMP_2.$$s || this, path = nil;
if (k == null) k = nil;if (v == null) v = nil;
          path = lookup['$+']([k.$to_sym()]);
            return [k, self.$wrap_value(v, path)];}, TMP_2.$$s = self, TMP_2), $a).call($c);
          return $scope.get('Hash')['$[]'](pairs);
          } else {
          return values
        };
      });
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/reactive/eventable"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$call', '$remove_listener', '$object_id', '$to_sym', '$new', '$[]', '$[]=', '$<<', '$==', '$size', '$respond_to?', '$event_added', '$each', '$dup', '$fail', '$inspect', '$delete', '$event_removed']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Listener(){};
      var self = $Listener = $klass($base, $super, 'Listener', $Listener);

      var def = self.$$proto, $scope = self.$$scope;

      def.removed = def.callback = def.klass = def.event = nil;
      def.$initialize = function(klass, event, callback) {
        var self = this;

        self.klass = klass;
        self.event = event;
        return self.callback = callback;
      };

      def.$call = function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        if ((($a = self.removed) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return ($a = self.callback).$call.apply($a, [].concat(args))
        };
      };

      def.$remove = function() {
        var self = this;

        self.removed = true;
        self.klass.$remove_listener(self.event, self);
        self.klass = nil;
        return self.callback = nil;
      };

      return (def.$inspect = function() {
        var self = this;

        return "<Listener:" + (self.$object_id()) + " event=" + (self.event) + ">";
      }, nil) && 'inspect';
    })(self, null);

    (function($base) {
      var self = $module($base, 'Eventable');

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      Opal.defn(self, '$on', TMP_1 = function(event) {
        var $a, $b, $c, self = this, $iter = TMP_1.$$p, callback = $iter || nil, listener = nil, first_for_event = nil, first = nil;
        if (self.listeners == null) self.listeners = nil;

        TMP_1.$$p = null;
        event = event.$to_sym();
        listener = $scope.get('Listener').$new(self, event, callback);
        ((($a = self.listeners) !== false && $a !== nil) ? $a : self.listeners = $hash2([], {}));
        ($a = event, $b = self.listeners, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, [])));
        self.listeners['$[]'](event)['$<<'](listener);
        first_for_event = self.listeners['$[]'](event).$size()['$=='](1);
        first = (($a = first_for_event !== false && first_for_event !== nil) ? self.listeners.$size()['$=='](1) : $a);
        if ((($a = self['$respond_to?']("event_added")) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$event_added(event, first, first_for_event)};
        return listener;
      });

      Opal.defn(self, '$trigger!', function(event, args) {
        var $a, $b, TMP_2, self = this;
        if (self.listeners == null) self.listeners = nil;

        args = $slice.call(arguments, 1);
        event = event.$to_sym();
        if ((($a = ($b = self.listeners, $b !== false && $b !== nil ?self.listeners['$[]'](event) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
        return ($a = ($b = self.listeners['$[]'](event).$dup()).$each, $a.$$p = (TMP_2 = function(listener){var self = TMP_2.$$s || this, $a;
if (listener == null) listener = nil;
        return ($a = listener).$call.apply($a, [].concat(args))}, TMP_2.$$s = self, TMP_2), $a).call($b);
      });

      Opal.defn(self, '$remove_listener', function(event, listener) {
        var $a, $b, self = this, last_for_event = nil, last = nil;
        if (self.listeners == null) self.listeners = nil;

        event = event.$to_sym();
        if ((($a = ($b = self.listeners, $b !== false && $b !== nil ?self.listeners['$[]'](event) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$fail("Unable to delete " + (event) + " from " + (self.$inspect()))
        };
        self.listeners['$[]'](event).$delete(listener);
        last_for_event = self.listeners['$[]'](event).$size()['$=='](0);
        if (last_for_event !== false && last_for_event !== nil) {
          self.listeners.$delete(event)};
        last = (($a = last_for_event !== false && last_for_event !== nil) ? self.listeners.$size()['$=='](0) : $a);
        if ((($a = self['$respond_to?']("event_removed")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$event_removed(event, last, last_for_event)
          } else {
          return nil
        };
      });
    })(self);
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/reactive/reactive_array"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$new', '$send', '$to_proc', '$==', '$each', '$depend', '$empty?', '$times', '$true?', '$call', '$[]', '$+', '$size', '$<<', '$any?', '$all?', '$<', '$[]=', '$trigger_for_index!', '$trigger_size_change!', '$alias_method', '$delete_at', '$remove', '$trigger_removed!', '$upto', '$removed', '$index', '$-', '$changed!', '$trigger_added!', '$fail', '$dup', '$insert', '$class', '$object_id', '$inspect', '$private', '$!', '$trigger!']);
  self.$require("volt/reactive/eventable");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ReactiveArray(){};
      var self = $ReactiveArray = $klass($base, $super, 'ReactiveArray', $ReactiveArray);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_6, TMP_7, TMP_9;

      def.array = def.size_dep = def.array_deps = def.persistor = def.old_size = nil;
      self.$include($scope.get('Eventable'));

      def.$initialize = function(array) {
        var self = this;

        if (array == null) {
          array = []
        }
        self.array = array;
        self.array_deps = [];
        self.size_dep = $scope.get('Dependency').$new();
        return self.old_size = 0;
      };

      def.$method_missing = TMP_1 = function(method_name, args) {
        var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

        args = $slice.call(arguments, 1);
        TMP_1.$$p = null;
        return ($a = ($b = self.array).$send, $a.$$p = block.$to_proc(), $a).apply($b, [method_name].concat(args));
      };

      def['$=='] = function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        return ($a = self.array)['$=='].apply($a, [].concat(args));
      };

      def.$each = TMP_2 = function() {
        var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

        TMP_2.$$p = null;
        return ($a = ($b = self.array).$each, $a.$$p = block.$to_proc(), $a).call($b);
      };

      def['$empty?'] = function() {
        var self = this;

        self.size_dep.$depend();
        return self.array['$empty?']();
      };

      def.$count = TMP_3 = function() {
        var $a, $b, TMP_4, self = this, $iter = TMP_3.$$p, block = $iter || nil, count = nil;

        TMP_3.$$p = null;
        if (block !== false && block !== nil) {
          count = 0;
          ($a = ($b = self.$size()).$times, $a.$$p = (TMP_4 = function(index){var self = TMP_4.$$s || this, $a;
if (index == null) index = nil;
          if ((($a = block.$call(self['$[]'](index))['$true?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return count = count['$+'](1)
              } else {
              return nil
            }}, TMP_4.$$s = self, TMP_4), $a).call($b);
          return count;
          } else {
          return self.$size()
        };
      };

      def.$select = TMP_6 = function() {
        var $a, $b, TMP_5, self = this, $iter = TMP_6.$$p, $yield = $iter || nil, result = nil;

        TMP_6.$$p = null;
        result = [];
        ($a = ($b = self.$size()).$times, $a.$$p = (TMP_5 = function(index){var self = TMP_5.$$s || this, $a, $b, val = nil;
if (index == null) index = nil;
        val = self['$[]'](index);
          if ((($a = ((($b = Opal.yield1($yield, val)) === $breaker) ? $breaker.$v : $b)['$true?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return result['$<<'](val)
            } else {
            return nil
          };}, TMP_5.$$s = self, TMP_5), $a).call($b);
        return result;
      };

      def['$any?'] = TMP_7 = function() {try {

        var $a, $b, TMP_8, self = this, $iter = TMP_7.$$p, $yield = $iter || nil;

        TMP_7.$$p = null;
        if (($yield !== nil)) {
          ($a = ($b = self.$size()).$times, $a.$$p = (TMP_8 = function(index){var self = TMP_8.$$s || this, $a, $b, val = nil;
if (index == null) index = nil;
          val = self['$[]'](index);
            if ((($a = ((($b = Opal.yield1($yield, val)) === $breaker) ? $breaker.$v : $b)['$true?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              Opal.ret(true)
              } else {
              return nil
            };}, TMP_8.$$s = self, TMP_8), $a).call($b);
          return false;
          } else {
          return self.array['$any?']()
        };
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      };

      def['$all?'] = TMP_9 = function() {try {

        var $a, $b, TMP_10, self = this, $iter = TMP_9.$$p, $yield = $iter || nil;

        TMP_9.$$p = null;
        if (($yield !== nil)) {
          ($a = ($b = self.$size()).$times, $a.$$p = (TMP_10 = function(index){var self = TMP_10.$$s || this, $a, $b, val = nil;
if (index == null) index = nil;
          val = self['$[]'](index);
            if ((($a = ((($b = Opal.yield1($yield, val)) === $breaker) ? $breaker.$v : $b)['$true?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              Opal.ret(false)
            };}, TMP_10.$$s = self, TMP_10), $a).call($b);
          return true;
          } else {
          return self.array['$all?']()
        };
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      };

      def['$[]'] = function(index) {
        var $a, $b, $c, self = this, dep = nil;

        if (index['$<'](0)) {
          index = self.$size()['$+'](index)};
        dep = (($a = index, $b = self.array_deps, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, $scope.get('Dependency').$new()))));
        dep.$depend();
        return self.array['$[]'](index);
      };

      def['$[]='] = function(index, value) {
        var self = this;

        self.array['$[]='](index, value);
        self['$trigger_for_index!'](index);
        return self['$trigger_size_change!']();
      };

      def.$size = function() {
        var self = this;

        self.size_dep.$depend();
        return self.array.$size();
      };

      self.$alias_method("length", "size");

      def.$delete_at = function(index) {
        var $a, $b, TMP_11, self = this, model = nil, index_deps = nil;

        if (index['$<'](0)) {
          index = self.$size()['$+'](index)};
        model = self.array.$delete_at(index);
        index_deps = self.array_deps.$delete_at(index);
        if (index_deps !== false && index_deps !== nil) {
          index_deps.$remove()};
        self['$trigger_removed!'](index);
        ($a = ($b = index).$upto, $a.$$p = (TMP_11 = function(position){var self = TMP_11.$$s || this;
if (position == null) position = nil;
        return self['$trigger_for_index!'](position)}, TMP_11.$$s = self, TMP_11), $a).call($b, self.$size()['$+'](1));
        self['$trigger_size_change!']();
        if ((($a = self.persistor) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.persistor.$removed(model)};
        return model;
      };

      def.$delete = function(val) {
        var $a, self = this, index = nil;

        index = self.array.$index(val);
        if (index !== false && index !== nil) {
          return self.$delete_at(index)
        } else if ((($a = self.persistor) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.persistor.$removed(val)
          } else {
          return nil
        };
      };

      def.$clear = function() {
        var $a, $b, TMP_12, $c, TMP_13, self = this, old_size = nil, deps = nil;

        old_size = self.array.$size();
        deps = self.array_deps;
        self.array_deps = [];
        ($a = ($b = old_size).$times, $a.$$p = (TMP_12 = function(index){var self = TMP_12.$$s || this;
if (index == null) index = nil;
        return self['$trigger_removed!'](old_size['$-'](index)['$-'](1))}, TMP_12.$$s = self, TMP_12), $a).call($b);
        if (deps !== false && deps !== nil) {
          ($a = ($c = deps).$each, $a.$$p = (TMP_13 = function(dep){var self = TMP_13.$$s || this;
if (dep == null) dep = nil;
          if (dep !== false && dep !== nil) {
              return dep['$changed!']()
              } else {
              return nil
            }}, TMP_13.$$s = self, TMP_13), $a).call($c)};
        return self.array = [];
      };

      def['$<<'] = function(value) {
        var self = this, result = nil;

        result = (self.array['$<<'](value));
        self['$trigger_for_index!'](self.$size()['$-'](1));
        self['$trigger_added!'](self.$size()['$-'](1));
        self['$trigger_size_change!']();
        return result;
      };

      def['$+'] = function(array) {
        var $a, $b, TMP_14, self = this, old_size = nil, result = nil;

        self.$fail("not implemented yet");
        old_size = self.$size();
        result = $scope.get('ReactiveArray').$new(self.array.$dup()['$+'](array));
        ($a = ($b = old_size).$upto, $a.$$p = (TMP_14 = function(index){var self = TMP_14.$$s || this;
if (index == null) index = nil;
        self['$trigger_for_index!']("changed", index);
          return self['$trigger_added!'](old_size['$+'](index));}, TMP_14.$$s = self, TMP_14), $a).call($b, result.$size()['$-'](1));
        self['$trigger_size_change!']();
        return result;
      };

      def.$insert = function(index, objects) {
        var $a, $b, $c, TMP_15, $d, TMP_16, self = this, result = nil;

        objects = $slice.call(arguments, 1);
        result = ($a = self.array).$insert.apply($a, [index].concat(objects));
        ($b = ($c = index).$upto, $b.$$p = (TMP_15 = function(index){var self = TMP_15.$$s || this;
if (index == null) index = nil;
        return self['$trigger_for_index!'](index)}, TMP_15.$$s = self, TMP_15), $b).call($c, result.$size());
        ($b = ($d = objects.$size()).$times, $b.$$p = (TMP_16 = function(count){var self = TMP_16.$$s || this;
if (count == null) count = nil;
        return self['$trigger_added!'](index['$+'](count))}, TMP_16.$$s = self, TMP_16), $b).call($d);
        self['$trigger_size_change!']();
        return result;
      };

      def.$inspect = function() {
        var self = this;

        self.size_dep.$depend();
        return "#<" + (self.$class()) + ":" + (self.$object_id()) + " " + (self.array.$inspect()) + ">";
      };

      self.$private();

      def['$trigger_size_change!'] = function() {
        var $a, self = this, new_size = nil;

        new_size = self.array.$size();
        if ((($a = new_size['$=='](self.old_size)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.old_size = new_size;
          return self.size_dep['$changed!']();
          } else {
          return nil
        };
      };

      def['$trigger_for_index!'] = function(index) {
        var self = this, dep = nil;

        dep = self.array_deps['$[]'](index);
        if (dep !== false && dep !== nil) {
          return dep['$changed!']()
          } else {
          return nil
        };
      };

      def['$trigger_added!'] = function(index) {
        var self = this;

        return self['$trigger!']("added", index);
      };

      return (def['$trigger_removed!'] = function(index) {
        var self = this;

        return self['$trigger!']("removed", index);
      }, nil) && 'trigger_removed!';
    })(self, null)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/model_helpers"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars;

  Opal.add_stubs(['$is_a?', '$to_h', '$to_a', '$event_added', '$event_removed', '$==', '$last', '$camelize', '$singularize', '$[]', '$model_classes']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'ModelHelpers');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defn(self, '$deep_unwrap', function(value) {
        var $a, self = this;

        if ((($a = value['$is_a?']($scope.get('Model'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return value.$to_h()
        } else if ((($a = value['$is_a?']($scope.get('ArrayModel'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return value.$to_a()
          } else {
          return value
        };
      });

      Opal.defn(self, '$event_added', function(event, first, first_for_event) {
        var $a, self = this;
        if (self.persistor == null) self.persistor = nil;

        if ((($a = self.persistor) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.persistor.$event_added(event, first, first_for_event)
          } else {
          return nil
        };
      });

      Opal.defn(self, '$event_removed', function(event, last, last_for_event) {
        var $a, self = this;
        if (self.persistor == null) self.persistor = nil;

        if ((($a = self.persistor) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.persistor.$event_removed(event, last, last_for_event)
          } else {
          return nil
        };
      });

      Opal.defn(self, '$class_at_path', function(path) {
        var $a, self = this, index = nil, klass_name = nil, klass = nil, e = nil;
        if ($gvars.page == null) $gvars.page = nil;

        if (path !== false && path !== nil) {
          try {
          if (path.$last()['$==']("[]")) {
              index = -2
              } else {
              index = -1
            };
            klass_name = path['$[]'](index).$singularize().$camelize();
            klass = ((($a = $gvars.page.$model_classes()['$[]'](klass_name)) !== false && $a !== nil) ? $a : $scope.get('Model'));
          } catch ($err) {if (Opal.rescue($err, [$scope.get('NameError')])) {e = $err;
            klass = $scope.get('Model')
            }else { throw $err; }
          }
          } else {
          klass = $scope.get('Model')
        };
        return klass;
      });
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/model_state"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$respond_to?', '$state', '$==']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'ModelState');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defn(self, '$state', function() {
        var $a, $b, self = this;
        if (self.persistor == null) self.persistor = nil;
        if (self.state == null) self.state = nil;

        if ((($a = ($b = self.persistor, $b !== false && $b !== nil ?self.persistor['$respond_to?']("state") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.persistor.$state()
          } else {
          return ((($a = self.state) !== false && $a !== nil) ? $a : "loaded")
        };
      });

      Opal.defn(self, '$change_state_to', function(state) {
        var self = this;

        return self.state = state;
      });

      Opal.defn(self, '$loaded?', function() {
        var self = this;

        return self.$state()['$==']("loaded");
      });
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/array_model"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$attr_reader', '$each', '$define_method', '$load_data', '$respond_to?', '$send', '$to_proc', '$fail', '$proxy_with_load_data', '$proxy_to_persistor', '$[]', '$setup_persistor', '$wrap_values', '$loaded', '$is_a?', '$options=', '$merge', '$+', '$first', '$added', '$-', '$size', '$resolve', '$new', '$limit', '$find', '$class_at_path', '$options', '$<<', '$deep_unwrap', '$attributes', '$server?', '$==', '$state', '$class', '$reject', '$to_sym', '$private']);
  self.$require("volt/reactive/reactive_array");
  self.$require("volt/models/model_wrapper");
  self.$require("volt/models/model_helpers");
  self.$require("volt/models/model_state");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ArrayModel(){};
      var self = $ArrayModel = $klass($base, $super, 'ArrayModel', $ArrayModel);

      var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_12;

      def.persistor = def.options = def.array = nil;
      self.$include($scope.get('ModelWrapper'));

      self.$include($scope.get('ModelHelpers'));

      self.$include($scope.get('ModelState'));

      self.$attr_reader("parent", "path", "persistor", "options", "array");

      Opal.defs(self, '$proxy_with_load_data', TMP_3 = function(method_names) {
        var $a, $b, TMP_1, self = this;

        method_names = $slice.call(arguments, 0);
        return ($a = ($b = method_names).$each, $a.$$p = (TMP_1 = function(method_name){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (method_name == null) method_name = nil;
        return ($a = ($b = self).$define_method, $a.$$p = (TMP_2 = function(args){var self = TMP_2.$$s || this;
args = $slice.call(arguments, 0);
          self.$load_data();
            return Opal.find_iter_super_dispatcher(self, 'proxy_with_load_data', (TMP_2.$$def || TMP_1.$$def || TMP_3), null).apply(self, [].concat(args));}, TMP_2.$$s = self, TMP_2), $a).call($b, method_name)}, TMP_1.$$s = self, TMP_1), $a).call($b);
      });

      Opal.defs(self, '$proxy_to_persistor', function(method_names) {
        var $a, $b, TMP_4, self = this;

        method_names = $slice.call(arguments, 0);
        return ($a = ($b = method_names).$each, $a.$$p = (TMP_4 = function(method_name){var self = TMP_4.$$s || this, $a, $b, TMP_5;
if (method_name == null) method_name = nil;
        return ($a = ($b = self).$define_method, $a.$$p = (TMP_5 = function(args){var self = TMP_5.$$s || this, block, $a, $b;
            if (self.persistor == null) self.persistor = nil;
args = $slice.call(arguments, 0);
            block = TMP_5.$$p || nil, TMP_5.$$p = null;
          if ((($a = self.persistor['$respond_to?'](method_name)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return ($a = ($b = self.persistor).$send, $a.$$p = block.$to_proc(), $a).apply($b, [method_name].concat(args))
              } else {
              return self.$fail("this model's persistance layer does not support " + (method_name) + ", try using store")
            }}, TMP_5.$$s = self, TMP_5), $a).call($b, method_name)}, TMP_4.$$s = self, TMP_4), $a).call($b);
      });

      self.$proxy_with_load_data("[]", "size", "first", "last");

      self.$proxy_to_persistor("find", "skip", "limit", "then");

      def.$initialize = TMP_6 = function(array, options) {
        var $a, self = this, $iter = TMP_6.$$p, $yield = $iter || nil;

        if (array == null) {
          array = []
        }
        if (options == null) {
          options = $hash2([], {})
        }
        TMP_6.$$p = null;
        self.options = options;
        self.parent = options['$[]']("parent");
        self.path = ((($a = options['$[]']("path")) !== false && $a !== nil) ? $a : []);
        self.persistor = self.$setup_persistor(options['$[]']("persistor"));
        array = self.$wrap_values(array);
        Opal.find_super_dispatcher(self, 'initialize', TMP_6, null).apply(self, [array]);
        if ((($a = self.persistor) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.persistor.$loaded()
          } else {
          return nil
        };
      };

      def.$attributes = function() {
        var self = this;

        return self;
      };

      def['$<<'] = TMP_7 = function(model) {
        var $a, $b, self = this, $iter = TMP_7.$$p, $yield = $iter || nil;

        TMP_7.$$p = null;
        self.$load_data();
        if ((($a = model['$is_a?']($scope.get('Model'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          (($a = [self.options.$merge($hash2(["path"], {"path": self.options['$[]']("path")['$+'](["[]"])}))]), $b = model, $b['$options='].apply($b, $a), $a[$a.length-1])
          } else {
          model = self.$wrap_values([model]).$first()
        };
        Opal.find_super_dispatcher(self, '<<', TMP_7, null).apply(self, [model]);
        if ((($a = self.persistor) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.persistor.$added(model, self.array.$size()['$-'](1))
          } else {
          return nil
        };
      };

      def.$append = function(model) {
        var $a, self = this, promise = nil;

        $a = Opal.to_ary(self.$send("<<", model)), promise = ($a[0] == null ? nil : $a[0]), model = ($a[1] == null ? nil : $a[1]);
        ((($a = promise) !== false && $a !== nil) ? $a : promise = $scope.get('Promise').$new().$resolve(model));
        return promise;
      };

      def.$find_one = TMP_8 = function(args) {
        var $a, $b, self = this, $iter = TMP_8.$$p, block = $iter || nil;

        args = $slice.call(arguments, 0);
        TMP_8.$$p = null;
        return ($a = ($b = self).$find, $a.$$p = block.$to_proc(), $a).apply($b, [].concat(args)).$limit(1)['$[]'](0);
      };

      def.$inject = TMP_9 = function(args) {
        var self = this, $iter = TMP_9.$$p, $yield = $iter || nil;

        args = $slice.call(arguments, 0);
        TMP_9.$$p = null;
        args = self.$wrap_values(args);
        return Opal.find_super_dispatcher(self, 'inject', TMP_9, null).apply(self, [].concat(args));
      };

      def['$+'] = TMP_10 = function(args) {
        var self = this, $iter = TMP_10.$$p, $yield = $iter || nil;

        args = $slice.call(arguments, 0);
        TMP_10.$$p = null;
        args = self.$wrap_values(args);
        return Opal.find_super_dispatcher(self, '+', TMP_10, null).apply(self, [].concat(args));
      };

      def.$new_model = function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        return ($a = self.$class_at_path(self.$options()['$[]']("path"))).$new.apply($a, [].concat(args));
      };

      def.$new_array_model = function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        return ($a = $scope.get('ArrayModel')).$new.apply($a, [].concat(args));
      };

      def.$to_a = function() {
        var $a, $b, TMP_11, self = this, array = nil;

        array = [];
        ($a = ($b = self.$attributes()).$each, $a.$$p = (TMP_11 = function(value){var self = TMP_11.$$s || this;
if (value == null) value = nil;
        return array['$<<'](self.$deep_unwrap(value))}, TMP_11.$$s = self, TMP_11), $a).call($b);
        return array;
      };

      def.$inspect = TMP_12 = function() {var $zuper = $slice.call(arguments, 0);
        var $a, $b, $c, self = this, $iter = TMP_12.$$p, $yield = $iter || nil;

        TMP_12.$$p = null;
        if ((($a = $scope.get('Volt')['$server?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$load_data()};
        if ((($a = ($b = ($c = self.persistor, $c !== false && $c !== nil ?self.persistor['$is_a?']((($scope.get('Persistors')).$$scope.get('ArrayStore'))) : $c), $b !== false && $b !== nil ?self.$state()['$==']("not_loaded") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "#<" + (self.$class()) + ":not loaded, access with [] or size to load>"
          } else {
          return Opal.find_super_dispatcher(self, 'inspect', TMP_12, $iter).apply(self, $zuper)
        };
      };

      def.$buffer = function() {
        var $a, $b, TMP_13, self = this, model_path = nil, model_klass = nil, new_options = nil, model = nil;

        model_path = self.$options()['$[]']("path")['$+'](["[]"]);
        model_klass = self.$class_at_path(model_path);
        new_options = ($a = ($b = self.$options().$merge($hash2(["path", "save_to"], {"path": model_path, "save_to": self}))).$reject, $a.$$p = (TMP_13 = function(k, _){var self = TMP_13.$$s || this;
if (k == null) k = nil;if (_ == null) _ = nil;
        return k.$to_sym()['$==']("persistor")}, TMP_13.$$s = self, TMP_13), $a).call($b);
        model = model_klass.$new($hash2([], {}), new_options);
        return model;
      };

      self.$private();

      def.$setup_persistor = function(persistor) {
        var self = this;

        if (persistor !== false && persistor !== nil) {
          return self.persistor = persistor.$new(self)
          } else {
          return nil
        };
      };

      return (def.$load_data = function() {
        var $a, $b, self = this;

        if ((($a = ($b = self.persistor, $b !== false && $b !== nil ?self.persistor['$is_a?']((($scope.get('Persistors')).$$scope.get('ArrayStore'))) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.persistor.$load_data()
          } else {
          return nil
        };
      }, nil) && 'load_data';
    })(self, $scope.get('ReactiveArray'))
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/model_hash_behaviour"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$to_sym', '$delete', '$changed!', '$removed', '$depend', '$size', '$each_pair', '$<<', '$nil?', '$!', '$==', '$false?', '$true?', '$each_with_object', '$to_proc', '$each', '$is_a?', '$key?', '$[]=', '$deep_unwrap']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'ModelHashBehaviour');

      var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4, TMP_6;

      Opal.defn(self, '$delete', function(name) {
        var $a, self = this, value = nil;
        if (self.attributes == null) self.attributes = nil;
        if (self.size_dep == null) self.size_dep = nil;
        if (self.deps == null) self.deps = nil;
        if (self.persistor == null) self.persistor = nil;

        name = name.$to_sym();
        value = self.attributes.$delete(name);
        self.size_dep['$changed!']();
        self.deps.$delete(name);
        if ((($a = self.persistor) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.persistor.$removed(name)};
        return value;
      });

      Opal.defn(self, '$size', function() {
        var self = this;
        if (self.size_dep == null) self.size_dep = nil;
        if (self.attributes == null) self.attributes = nil;

        self.size_dep.$depend();
        return self.attributes.$size();
      });

      Opal.defn(self, '$keys', function() {
        var $a, $b, TMP_1, self = this, keys = nil;
        if (self.size_dep == null) self.size_dep = nil;

        self.size_dep.$depend();
        keys = [];
        ($a = ($b = self).$each_pair, $a.$$p = (TMP_1 = function(k, v){var self = TMP_1.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
        return keys['$<<'](k)}, TMP_1.$$s = self, TMP_1), $a).call($b);
        return keys;
      });

      Opal.defn(self, '$nil?', function() {
        var self = this;
        if (self.attributes == null) self.attributes = nil;

        return self.attributes['$nil?']();
      });

      Opal.defn(self, '$empty?', function() {
        var $a, self = this;
        if (self.size_dep == null) self.size_dep = nil;
        if (self.attributes == null) self.attributes = nil;

        self.size_dep.$depend();
        return ((($a = self.attributes['$!']()) !== false && $a !== nil) ? $a : self.attributes.$size()['$=='](0));
      });

      Opal.defn(self, '$false?', function() {
        var self = this;
        if (self.attributes == null) self.attributes = nil;

        return self.attributes['$false?']();
      });

      Opal.defn(self, '$true?', function() {
        var self = this;
        if (self.attributes == null) self.attributes = nil;

        return self.attributes['$true?']();
      });

      Opal.defn(self, '$clear', function() {
        var $a, $b, TMP_2, self = this;
        if (self.attributes == null) self.attributes = nil;
        if (self.size_dep == null) self.size_dep = nil;

        ($a = ($b = self.attributes).$each_pair, $a.$$p = (TMP_2 = function(key, _){var self = TMP_2.$$s || this;
if (key == null) key = nil;if (_ == null) _ = nil;
        return self.$delete(key)}, TMP_2.$$s = self, TMP_2), $a).call($b);
        return self.size_dep['$changed!']();
      });

      Opal.defn(self, '$each_with_object', TMP_3 = function(args) {
        var $a, $b, $c, self = this, $iter = TMP_3.$$p, block = $iter || nil;
        if (self.attributes == null) self.attributes = nil;

        args = $slice.call(arguments, 0);
        TMP_3.$$p = null;
        return ($a = ($b = (((($c = self.attributes) !== false && $c !== nil) ? $c : $hash2([], {})))).$each_with_object, $a.$$p = block.$to_proc(), $a).apply($b, [].concat(args));
      });

      Opal.defn(self, '$each', TMP_4 = function() {
        var $a, $b, self = this, $iter = TMP_4.$$p, block = $iter || nil;
        if (self.array == null) self.array = nil;

        TMP_4.$$p = null;
        self.$size();
        return ($a = ($b = self.array).$each, $a.$$p = block.$to_proc(), $a).call($b);
      });

      Opal.defn(self, '$each_pair', TMP_6 = function() {
        var $a, $b, TMP_5, self = this, $iter = TMP_6.$$p, $yield = $iter || nil;
        if (self.attributes == null) self.attributes = nil;

        TMP_6.$$p = null;
        return ($a = ($b = self.attributes).$each_pair, $a.$$p = (TMP_5 = function(k, v){var self = TMP_5.$$s || this, $a, $b;
if (k == null) k = nil;if (v == null) v = nil;
        if ((($a = ($b = v['$is_a?']($scope.get('Model')), $b !== false && $b !== nil ?v['$nil?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $a = Opal.yieldX($yield, [k, v]), $a === $breaker ? $a : $a
          }}, TMP_5.$$s = self, TMP_5), $a).call($b);
      });

      Opal.defn(self, '$key?', function(key) {
        var $a, self = this;
        if (self.attributes == null) self.attributes = nil;

        return ($a = self.attributes, $a !== false && $a !== nil ?self.attributes['$key?'](key) : $a);
      });

      Opal.defn(self, '$to_h', function() {
        var $a, $b, TMP_7, self = this, hash = nil;
        if (self.size_dep == null) self.size_dep = nil;
        if (self.attributes == null) self.attributes = nil;

        self.size_dep.$depend();
        if ((($a = self.attributes['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          hash = $hash2([], {});
          ($a = ($b = self.attributes).$each_pair, $a.$$p = (TMP_7 = function(key, value){var self = TMP_7.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
          return hash['$[]='](key, self.$deep_unwrap(value))}, TMP_7.$$s = self, TMP_7), $a).call($b);
          return hash;
        };
      });
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/validators/email_validator"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$errors', '$new', '$==', '$merge', '$apply']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $EmailValidator(){};
      var self = $EmailValidator = $klass($base, $super, 'EmailValidator', $EmailValidator);

      var def = self.$$proto, $scope = self.$$scope;

      Opal.cdecl($scope, 'DEFAULT_OPTIONS', $hash2(["with", "message"], {"with": /^([\w\.%\+\-]+)@([\w\-]+\.)+([\w]{2,})$/i, "message": "must be an email address"}));

      Opal.defs(self, '$validate', function(model, old_model, field_name, options) {
        var self = this;

        return self.$new(model, field_name, options).$errors();
      });

      return (Opal.defs(self, '$new', function(model, field_name, options) {
        var self = this;

        if (options['$=='](true)) {
          options = $scope.get('DEFAULT_OPTIONS')};
        options = $scope.get('DEFAULT_OPTIONS').$merge(options);
        return $scope.get('FormatValidator').$new(model, field_name).$apply(options);
      }), nil) && 'new';
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/validators/format_validator"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$errors', '$apply', '$new', '$read_attribute', '$is_a?', '$apply_list', '$with', '$[]', '$valid?', '$error_messages', '$reduce', '$test', '$<<', '$empty?', '$private', '$each', '$respond_to?', '$!', '$try']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $FormatValidator(){};
      var self = $FormatValidator = $klass($base, $super, 'FormatValidator', $FormatValidator);

      var def = self.$$proto, $scope = self.$$scope;

      def.name = def.criteria = def.value = nil;
      Opal.defs(self, '$validate', function(model, old_model, field_name, options) {
        var self = this;

        return self.$new(model, field_name).$apply(options).$errors();
      });

      def.$initialize = function(model, field_name) {
        var self = this;

        self.name = field_name;
        self.value = model.$read_attribute(field_name);
        return self.criteria = [];
      };

      def.$apply = function(options) {
        var $a, self = this;

        if ((($a = options['$is_a?']($scope.get('Array'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$apply_list(options)};
        self.$with(options['$[]']("with"), options['$[]']("message"));
        return self;
      };

      def.$errors = function() {
        var $a, self = this;

        if ((($a = self['$valid?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return $hash2([], {})
          } else {
          return $hash(self.name, self.$error_messages())
        };
      };

      def.$error_messages = function() {
        var $a, $b, TMP_1, self = this;

        return ($a = ($b = self.criteria).$reduce, $a.$$p = (TMP_1 = function(e, c){var self = TMP_1.$$s || this, $a;
if (e == null) e = nil;if (c == null) c = nil;
        if ((($a = self.$test(c['$[]']("criterion"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return e
            } else {
            return e['$<<'](c['$[]']("message"))
          }}, TMP_1.$$s = self, TMP_1), $a).call($b, []);
      };

      def['$valid?'] = function() {
        var self = this;

        return self.$error_messages()['$empty?']();
      };

      def.$with = function(criterion, message) {
        var self = this;

        self.criteria['$<<']($hash2(["criterion", "message"], {"criterion": criterion, "message": message}));
        return self;
      };

      self.$private();

      def.$apply_list = function(array) {
        var $a, $b, TMP_2, self = this;

        ($a = ($b = array).$each, $a.$$p = (TMP_2 = function(options){var self = TMP_2.$$s || this;
if (options == null) options = nil;
        return self.$apply(options)}, TMP_2.$$s = self, TMP_2), $a).call($b);
        return self;
      };

      return (def.$test = function(criterion) {
        var $a, self = this;

        if ((($a = self.value['$respond_to?']("match")) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          return false
        };
        return (((($a = criterion.$try("call", self.value)) !== false && $a !== nil) ? $a : criterion.$try("match", self.value)))['$!']()['$!']();
      }, nil) && 'test';
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/validators/length_validator"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$read_attribute', '$is_a?', '$[]', '$fail', '$!', '$<', '$size', '$[]=', '$>']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $LengthValidator(){};
      var self = $LengthValidator = $klass($base, $super, 'LengthValidator', $LengthValidator);

      var def = self.$$proto, $scope = self.$$scope;

      return (Opal.defs(self, '$validate', function(model, old_model, field_name, args) {
        var $a, $b, self = this, errors = nil, value = nil, min = nil, max = nil, message = nil;

        errors = $hash2([], {});
        value = model.$read_attribute(field_name);
        if ((($a = args['$is_a?']($scope.get('Fixnum'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          min = args;
          max = nil;
          message = nil;
        } else if ((($a = args['$is_a?']($scope.get('Hash'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          min = ((($a = args['$[]']("length")) !== false && $a !== nil) ? $a : args['$[]']("minimum"));
          max = args['$[]']("maximum");
          if ((($a = min['$is_a?']($scope.get('Fixnum'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$fail("length or minimum must be specified")
          };
          message = args['$[]']("message");
          } else {
          self.$fail("The arguments to length must be a number or a hash")
        };
        if ((($a = ((($b = value['$!']()) !== false && $b !== nil) ? $b : value.$size()['$<'](min))) !== nil && (!$a.$$is_boolean || $a == true))) {
          errors['$[]='](field_name, [((($a = message) !== false && $a !== nil) ? $a : "must be at least " + (args) + " characters")])
        } else if ((($a = (($b = max !== false && max !== nil) ? value.$size()['$>'](max) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          errors['$[]='](field_name, [((($a = message) !== false && $a !== nil) ? $a : "must be less than " + (args) + " characters")])};
        return errors;
      }), nil) && 'validate'
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/validators/numericality_validator"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$errors', '$new', '$attr_reader', '$read_attribute', '$Float', '$check_errors', '$[]', '$[]=', '$<<', '$is_a?', '$each', '$===', '$<', '$add_error', '$>']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $NumericalityValidator(){};
      var self = $NumericalityValidator = $klass($base, $super, 'NumericalityValidator', $NumericalityValidator);

      var def = self.$$proto, $scope = self.$$scope;

      def.value = def.field_name = def.errors = def.args = nil;
      Opal.defs(self, '$validate', function(model, old_model, field_name, args) {
        var self = this;

        return self.$new(model, field_name, args).$errors();
      });

      self.$attr_reader("errors");

      def.$initialize = function(model, field_name, args) {
        var self = this;

        self.field_name = field_name;
        self.args = args;
        self.errors = $hash2([], {});
        self.value = model.$read_attribute(field_name);
        self.value = (function() {try {return $scope.get('Kernel').$Float(self.value) } catch ($err) { return nil }})();
        return self.$check_errors();
      };

      def.$add_error = function(error) {
        var $a, $b, $c, self = this, field_errors = nil;

        field_errors = (($a = self.field_name, $b = self.errors, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, []))));
        return field_errors['$<<'](error);
      };

      return (def.$check_errors = function() {
        var $a, $b, TMP_1, $c, self = this, message = nil;

        if ((($a = ($b = self.value, $b !== false && $b !== nil ?self.value['$is_a?']($scope.get('Numeric')) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self.args['$is_a?']($scope.get('Hash'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = self.args).$each, $a.$$p = (TMP_1 = function(arg, val){var self = TMP_1.$$s || this, $case = nil;
              if (self.value == null) self.value = nil;
if (arg == null) arg = nil;if (val == null) val = nil;
            return (function() {$case = arg;if ("min"['$===']($case)) {if (self.value['$<'](val)) {
                return self.$add_error("number must be greater than " + (val))
                } else {
                return nil
              }}else if ("max"['$===']($case)) {if (self.value['$>'](val)) {
                return self.$add_error("number must be less than " + (val))
                } else {
                return nil
              }}else { return nil }})()}, TMP_1.$$s = self, TMP_1), $a).call($b)
            } else {
            return nil
          }
          } else {
          message = ((($a = (($c = self.args['$is_a?']($scope.get('Hash')), $c !== false && $c !== nil ?self.args['$[]']("message") : $c))) !== false && $a !== nil) ? $a : "must be a number");
          return self.$add_error(message);
        };
      }, nil) && 'check_errors';
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/validators/phone_number_validator"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$errors', '$new', '$==', '$merge', '$apply']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $PhoneNumberValidator(){};
      var self = $PhoneNumberValidator = $klass($base, $super, 'PhoneNumberValidator', $PhoneNumberValidator);

      var def = self.$$proto, $scope = self.$$scope;

      Opal.cdecl($scope, 'DEFAULT_OPTIONS', $hash2(["with", "message"], {"with": /^(\+?\d{1,2}[\.\-\ ]?\d{3}|\(\d{3}\)|\d{3})[\.\-\ ]?\d{3,4}[\.\-\ ]?\d{4}$/, "message": "must be a phone number with area or country code"}));

      Opal.defs(self, '$validate', function(model, old_model, field_name, options) {
        var self = this;

        return self.$new(model, field_name, options).$errors();
      });

      return (Opal.defs(self, '$new', function(model, field_name, options) {
        var self = this;

        if (options['$=='](true)) {
          options = $scope.get('DEFAULT_OPTIONS')};
        options = $scope.get('DEFAULT_OPTIONS').$merge(options);
        return $scope.get('FormatValidator').$new(model, field_name).$apply(options);
      }), nil) && 'new';
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/validators/presence_validator"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$read_attribute', '$!', '$blank?', '$is_a?', '$[]', '$[]=']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $PresenceValidator(){};
      var self = $PresenceValidator = $klass($base, $super, 'PresenceValidator', $PresenceValidator);

      var def = self.$$proto, $scope = self.$$scope;

      return (Opal.defs(self, '$validate', function(model, old_model, field_name, args) {
        var $a, $b, self = this, errors = nil, value = nil, message = nil;

        errors = $hash2([], {});
        value = model.$read_attribute(field_name);
        if ((($a = ((($b = value['$!']()) !== false && $b !== nil) ? $b : value['$blank?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ($b = args['$is_a?']($scope.get('Hash')), $b !== false && $b !== nil ?args['$[]']("message") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            message = args['$[]']("message")
            } else {
            message = "must be specified"
          };
          errors['$[]='](field_name, [message]);};
        return errors;
      }), nil) && 'validate'
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/validators/unique_validator"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$!', '$==']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $UniqueValidator(){};
      var self = $UniqueValidator = $klass($base, $super, 'UniqueValidator', $UniqueValidator);

      var def = self.$$proto, $scope = self.$$scope;

      return (Opal.defs(self, '$validate', function(model, old_model, field_name, args) {
        var $a, self = this, errors = nil;

        errors = $hash2([], {});
        if ((($a = $scope.get('RUBY_PLATFORM')['$==']("opal")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {};
        return errors;
      }), nil) && 'validate'
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/validations"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$fail', '$custom_validations', '$custom_validations=', '$<<', '$validations', '$validations=', '$[]=', '$send', '$class_attribute', '$marked_fields', '$new', '$class', '$each_key', '$mark_field!', '$to_sym', '$errors', '$delete', '$proc', '$merge!', '$+', '$[]', '$options', '$is_a?', '$run_validations', '$client?', '$call', '$to_h', '$server_errors', '$run_custom_validations', '$private', '$each_pair', '$!', '$validation_class', '$validate_with', '$each', '$instance_exec', '$to_proc', '$validate', '$const_get', '$to_s', '$camelize', '$puts']);
  self.$require("volt/models/validators/email_validator");
  self.$require("volt/models/validators/format_validator");
  self.$require("volt/models/validators/length_validator");
  self.$require("volt/models/validators/numericality_validator");
  self.$require("volt/models/validators/phone_number_validator");
  self.$require("volt/models/validators/presence_validator");
  self.$require("volt/models/validators/unique_validator");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Validations');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'ClassMethods');

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        Opal.defn(self, '$validate', TMP_1 = function(field_name, options) {
          var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

          if (field_name == null) {
            field_name = nil
          }
          if (options == null) {
            options = nil
          }
          TMP_1.$$p = null;
          if (block !== false && block !== nil) {
            if ((($a = ((($b = field_name) !== false && $b !== nil) ? $b : options)) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$fail("validate should be passed a field name and options or a block, not both.")};
            ($a = self, ((($b = $a.$custom_validations()) !== false && $b !== nil) ? $b : $a['$custom_validations=']([])));
            return self.$custom_validations()['$<<'](block);
            } else {
            ($a = self, ((($b = $a.$validations()) !== false && $b !== nil) ? $b : $a['$validations=']($hash2([], {}))));
            return self.$validations()['$[]='](field_name, options);
          };
        })
      })(self);

      Opal.defs(self, '$included', function(base) {
        var self = this;

        base.$send("extend", $scope.get('ClassMethods'));
        return base.$class_attribute("custom_validations", "validations");
      });

      Opal.defn(self, '$mark_field!', function(field_name) {
        var self = this;

        return self.$marked_fields()['$[]='](field_name, true);
      });

      Opal.defn(self, '$marked_fields', function() {
        var $a, self = this;
        if (self.marked_fields == null) self.marked_fields = nil;

        return ((($a = self.marked_fields) !== false && $a !== nil) ? $a : self.marked_fields = $scope.get('ReactiveHash').$new());
      });

      Opal.defn(self, '$mark_all_fields!', function() {
        var $a, $b, TMP_2, self = this, validations = nil;

        validations = self.$class().$validations();
        if (validations !== false && validations !== nil) {
          return ($a = ($b = validations).$each_key, $a.$$p = (TMP_2 = function(key){var self = TMP_2.$$s || this;
if (key == null) key = nil;
          return self['$mark_field!'](key.$to_sym())}, TMP_2.$$s = self, TMP_2), $a).call($b)
          } else {
          return nil
        };
      });

      Opal.defn(self, '$marked_errors', function() {
        var self = this;

        return self.$errors(true);
      });

      Opal.defn(self, '$server_errors', function() {
        var $a, self = this;
        if (self.server_errors == null) self.server_errors = nil;

        return ((($a = self.server_errors) !== false && $a !== nil) ? $a : self.server_errors = $scope.get('ReactiveHash').$new());
      });

      Opal.defn(self, '$clear_server_errors', function(key) {
        var self = this;
        if (self.server_errors == null) self.server_errors = nil;

        return self.server_errors.$delete(key);
      });

      Opal.defn(self, '$errors', function(marked_only) {
        var $a, $b, TMP_3, $c, self = this, errors = nil, merge = nil, save_to = nil, old_model = nil;

        if (marked_only == null) {
          marked_only = false
        }
        errors = $hash2([], {});
        merge = ($a = ($b = self).$proc, $a.$$p = (TMP_3 = function(new_errors){var self = TMP_3.$$s || this, $a, $b, TMP_4;
if (new_errors == null) new_errors = nil;
        return ($a = ($b = errors)['$merge!'], $a.$$p = (TMP_4 = function(key, new_val, old_val){var self = TMP_4.$$s || this;
if (key == null) key = nil;if (new_val == null) new_val = nil;if (old_val == null) old_val = nil;
          return new_val['$+'](old_val)}, TMP_4.$$s = self, TMP_4), $a).call($b, new_errors)}, TMP_3.$$s = self, TMP_3), $a).call($b);
        save_to = self.$options()['$[]']("save_to");
        if ((($a = (($c = save_to !== false && save_to !== nil) ? save_to['$is_a?']((($scope.get('Volt')).$$scope.get('Model'))) : $c)) !== nil && (!$a.$$is_boolean || $a == true))) {
          old_model = save_to
          } else {
          old_model = nil
        };
        errors = self.$run_validations(errors, merge, marked_only, old_model);
        if ((($a = $scope.get('Volt')['$client?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          errors = merge.$call(self.$server_errors().$to_h())};
        errors = self.$run_custom_validations(errors, merge, old_model);
        return errors;
      });

      self.$private();

      Opal.defn(self, '$run_validations', function(errors, merge, marked_only, old_model) {
        var $a, $b, TMP_5, self = this, validations = nil;

        validations = self.$class().$validations();
        if (validations !== false && validations !== nil) {
          ($a = ($b = validations).$each_pair, $a.$$p = (TMP_5 = function(field_name, options){var self = TMP_5.$$s || this, $a, $b, TMP_6;
if (field_name == null) field_name = nil;if (options == null) options = nil;
          if ((($a = (($b = marked_only !== false && marked_only !== nil) ? self.$marked_fields()['$[]'](field_name)['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil;};
            return ($a = ($b = options).$each_pair, $a.$$p = (TMP_6 = function(validation, args){var self = TMP_6.$$s || this, klass = nil;
if (validation == null) validation = nil;if (args == null) args = nil;
            klass = self.$validation_class(validation, args);
              if (klass !== false && klass !== nil) {
                return self.$validate_with(merge, klass, old_model, field_name, args)
                } else {
                return self.$fail("validation type " + (validation) + " is not specified.")
              };}, TMP_6.$$s = self, TMP_6), $a).call($b);}, TMP_5.$$s = self, TMP_5), $a).call($b)};
        return errors;
      });

      Opal.defn(self, '$run_custom_validations', function(errors, merge, old_model) {
        var $a, $b, TMP_7, self = this, custom_validations = nil;

        custom_validations = self.$class().$custom_validations();
        if (custom_validations !== false && custom_validations !== nil) {
          ($a = ($b = custom_validations).$each, $a.$$p = (TMP_7 = function(custom_validation){var self = TMP_7.$$s || this, $a, $b, result = nil;
if (custom_validation == null) custom_validation = nil;
          result = ($a = ($b = self).$instance_exec, $a.$$p = custom_validation.$to_proc(), $a).call($b, old_model);
            if (result !== false && result !== nil) {
              return errors = merge.$call(result)
              } else {
              return nil
            };}, TMP_7.$$s = self, TMP_7), $a).call($b)};
        return errors;
      });

      Opal.defn(self, '$validate_with', function(merge, klass, old_model, field_name, args) {
        var self = this;

        return merge.$call(klass.$validate(self, old_model, field_name, args));
      });

      Opal.defn(self, '$validation_class', function(validation, args) {
        var self = this, e = nil;

        try {
        return $scope.get('Volt').$const_get(("" + validation.$camelize().$to_s() + "Validator"))
        } catch ($err) {if (Opal.rescue($err, [$scope.get('NameError')])) {e = $err;
          return self.$puts("Unable to find " + (validation) + " validator")
          }else { throw $err; }
        };
      });
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/buffer"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$errors', '$==', '$size', '$[]', '$options', '$is_a?', '$append', '$attributes', '$assign_attributes', '$fail', '$replace', '$server_errors', '$promise_for_errors', '$then', '$[]=', '$_id', '$mark_all_fields!', '$reject', '$new', '$plural?', '$last', '$!', '$class_at_path', '$+', '$to_sym', '$merge', '$state', '$setup_buffer', '$parent']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Buffer');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defn(self, '$save!', function() {
        var $a, $b, TMP_1, $c, $d, TMP_2, self = this, errors = nil, save_to = nil, promise = nil;

        errors = self.$errors();
        if (errors.$size()['$=='](0)) {
          save_to = self.$options()['$[]']("save_to");
          if (save_to !== false && save_to !== nil) {
            if ((($a = save_to['$is_a?']($scope.get('ArrayModel'))) !== nil && (!$a.$$is_boolean || $a == true))) {
              promise = save_to.$append(self.$attributes())
              } else {
              promise = save_to.$assign_attributes(self.$attributes())
            };
            return ($a = ($b = ($c = ($d = promise).$then, $c.$$p = (TMP_2 = function(new_model){var self = TMP_2.$$s || this;
if (new_model == null) new_model = nil;
            if (new_model !== false && new_model !== nil) {
                self.$attributes()['$[]=']("_id", new_model.$_id());
                self.$options()['$[]=']("save_to", new_model);};
              return nil;}, TMP_2.$$s = self, TMP_2), $c).call($d)).$fail, $a.$$p = (TMP_1 = function(errors){var self = TMP_1.$$s || this, $a;
if (errors == null) errors = nil;
            if ((($a = errors['$is_a?']($scope.get('Hash'))) !== nil && (!$a.$$is_boolean || $a == true))) {
                self.$server_errors().$replace(errors)};
              return self.$promise_for_errors(errors);}, TMP_1.$$s = self, TMP_1), $a).call($b);
            } else {
            return self.$fail("Model is not a buffer, can not be saved, modifications should be persisted as they are made.")
          };
          } else {
          return self.$promise_for_errors(errors)
        };
      });

      Opal.defn(self, '$promise_for_errors', function(errors) {
        var self = this;

        self['$mark_all_fields!']();
        return $scope.get('Promise').$new().$reject(errors);
      });

      Opal.defn(self, '$buffer', function() {
        var $a, $b, TMP_3, $c, TMP_4, self = this, model_path = nil, model_klass = nil, new_options = nil, model = nil;

        model_path = self.$options()['$[]']("path");
        if ((($a = ($b = model_path.$last()['$plural?'](), $b !== false && $b !== nil ?model_path['$[]'](-1)['$==']("[]")['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          model_klass = self.$class_at_path(model_path['$+'](["[]"]))
          } else {
          model_klass = self.$class_at_path(model_path)
        };
        new_options = ($a = ($b = self.$options().$merge($hash2(["path", "save_to"], {"path": model_path, "save_to": self}))).$reject, $a.$$p = (TMP_3 = function(k, _){var self = TMP_3.$$s || this;
if (k == null) k = nil;if (_ == null) _ = nil;
        return k.$to_sym()['$==']("persistor")}, TMP_3.$$s = self, TMP_3), $a).call($b);
        model = model_klass.$new($hash2([], {}), new_options, "loading");
        if (self.$state()['$==']("loaded")) {
          self.$setup_buffer(model)
          } else {
          ($a = ($c = self.$parent()).$then, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

          return self.$setup_buffer(model)}, TMP_4.$$s = self, TMP_4), $a).call($c)
        };
        return model;
      });
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/field_helpers"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$!', '$include?', '$fail', '$define_method', '$read_attribute', '$==', '$to_s', '$to_f', '$assign_attribute', '$send']);
  return (function($base) {
    var self = $module($base, 'FieldHelpers');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $InvalidFieldClass(){};
      var self = $InvalidFieldClass = $klass($base, $super, 'InvalidFieldClass', $InvalidFieldClass);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })(self, $scope.get('RuntimeError'));

    (function($base) {
      var self = $module($base, 'ClassMethods');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defn(self, '$field', function(name, klass) {
        var $a, $b, TMP_1, $c, TMP_2, self = this;

        if (klass == null) {
          klass = nil
        }
        if ((($a = (($b = klass !== false && klass !== nil) ? [$scope.get('String'), $scope.get('Numeric')]['$include?'](klass)['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$fail((($scope.get('FieldHelpers')).$$scope.get('InvalidFieldClass')), "valid field types is currently limited to String or Numeric")};
        ($a = ($b = self).$define_method, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

        return self.$read_attribute(name)}, TMP_1.$$s = self, TMP_1), $a).call($b, name);
        return ($a = ($c = self).$define_method, $a.$$p = (TMP_2 = function(val){var self = TMP_2.$$s || this;
if (val == null) val = nil;
        if (klass !== false && klass !== nil) {
            if (klass['$==']($scope.get('String'))) {
              val = val.$to_s()
            } else if (klass['$==']($scope.get('Numeric'))) {
              val = val.$to_f()}};
          return self.$assign_attribute(name, val);}, TMP_2.$$s = self, TMP_2), $a).call($c, ("" + name.$to_s() + "="));
      })
    })(self);

    Opal.defs(self, '$included', function(base) {
      var self = this;

      return base.$send("extend", $scope.get('ClassMethods'));
    });
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/reactive/hash_dependency"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$depend', '$ensure_key', '$changed!', '$delete', '$remove', '$each_pair', '$private', '$[]', '$[]=', '$new']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $HashDependency(){};
      var self = $HashDependency = $klass($base, $super, 'HashDependency', $HashDependency);

      var def = self.$$proto, $scope = self.$$scope;

      def.hash_depedencies = nil;
      def.$initialize = function() {
        var self = this;

        return self.hash_depedencies = $hash2([], {});
      };

      def.$depend = function(key) {
        var self = this;

        return self.$ensure_key(key).$depend();
      };

      def['$changed!'] = function(key) {
        var self = this;

        return self.$ensure_key(key)['$changed!']();
      };

      def.$delete = function(key) {
        var self = this, dep = nil;

        dep = self.hash_depedencies.$delete(key);
        if (dep !== false && dep !== nil) {
          dep['$changed!']();
          return dep.$remove();
          } else {
          return nil
        };
      };

      def['$changed_all!'] = function() {
        var $a, $b, TMP_1, self = this;

        return ($a = ($b = self.hash_depedencies).$each_pair, $a.$$p = (TMP_1 = function(key, value){var self = TMP_1.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
        return value['$changed!']()}, TMP_1.$$s = self, TMP_1), $a).call($b);
      };

      self.$private();

      return (def.$ensure_key = function(key) {
        var $a, $b, $c, self = this;

        return ($a = key, $b = self.hash_depedencies, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, $scope.get('Dependency').$new())));
      }, nil) && 'ensure_key';
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/reactive/reactive_hash"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$new', '$depend', '$==', '$send', '$to_proc', '$[]', '$changed!', '$[]=', '$delete', '$each_pair', '$clear', '$inspect']);
  self.$require("volt/reactive/hash_dependency");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ReactiveHash(){};
      var self = $ReactiveHash = $klass($base, $super, 'ReactiveHash', $ReactiveHash);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      def.all_deps = def.hash = def.deps = nil;
      def.$initialize = function(values) {
        var self = this;

        if (values == null) {
          values = $hash2([], {})
        }
        self.hash = values;
        self.deps = $scope.get('HashDependency').$new();
        return self.all_deps = $scope.get('Dependency').$new();
      };

      def['$=='] = function(val) {
        var self = this;

        self.all_deps.$depend();
        return self.hash['$=='](val);
      };

      def.$method_missing = TMP_1 = function(method_name, args) {
        var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

        args = $slice.call(arguments, 1);
        TMP_1.$$p = null;
        self.all_deps.$depend();
        return ($a = ($b = self.hash).$send, $a.$$p = block.$to_proc(), $a).apply($b, [method_name].concat(args));
      };

      def['$[]'] = function(key) {
        var self = this;

        self.deps.$depend(key);
        return self.hash['$[]'](key);
      };

      def['$[]='] = function(key, value) {
        var self = this;

        self.deps['$changed!'](key);
        self.all_deps['$changed!']();
        return self.hash['$[]='](key, value);
      };

      def.$delete = function(key) {
        var self = this;

        self.deps.$delete(key);
        self.all_deps['$changed!']();
        return self.hash.$delete(key);
      };

      def.$clear = function() {
        var $a, $b, TMP_2, self = this;

        ($a = ($b = self.hash).$each_pair, $a.$$p = (TMP_2 = function(key, _){var self = TMP_2.$$s || this;
if (key == null) key = nil;if (_ == null) _ = nil;
        return self.$delete(key)}, TMP_2.$$s = self, TMP_2), $a).call($b);
        return self.all_deps['$changed!']();
      };

      def.$replace = function(hash) {
        var $a, $b, TMP_3, self = this;

        self.$clear();
        return ($a = ($b = hash).$each_pair, $a.$$p = (TMP_3 = function(key, value){var self = TMP_3.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
        return self['$[]='](key, value)}, TMP_3.$$s = self, TMP_3), $a).call($b);
      };

      def.$to_h = function() {
        var self = this;

        self.all_deps.$depend();
        return self.hash;
      };

      return (def.$inspect = function() {
        var self = this;

        self.all_deps.$depend();
        return "#<ReactiveHash " + (self.hash.$inspect()) + ">";
      }, nil) && 'inspect';
    })(self, null)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/model"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$include', '$attr_reader', '$new', '$options=', '$send', '$loaded', '$__id', '$__id=', '$[]', '$setup_persistor', '$wrap_values', '$delete', '$nosave', '$_id=', '$each_pair', '$respond_to?', '$to_s', '$changed_all!', '$changed', '$alias_method', '$is_a?', '$==', '$attributes', '$!', '$assign_attribute', '$to_proc', '$read_attribute', '$expand!', '$to_sym', '$check_valid_field_name', '$wrap_value', '$[]=', '$changed!', '$clear_server_errors', '$current', '$key?', '$depend', '$read_new_model', '$in_browser?', '$merge', '$+', '$path', '$plural?', '$new_array_model', '$new_model', '$class_at_path', '$dup', '$nil?', '$last', '$fail', '$<<', '$class', '$object_id', '$inspect', '$private', '$raise', '$attributes=', '$change_state_to']);
  self.$require("volt/models/model_wrapper");
  self.$require("volt/models/array_model");
  self.$require("volt/models/model_helpers");
  self.$require("volt/models/model_hash_behaviour");
  self.$require("volt/models/validations");
  self.$require("volt/models/model_state");
  self.$require("volt/models/buffer");
  self.$require("volt/models/field_helpers");
  self.$require("volt/reactive/reactive_hash");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $NilMethodCall(){};
      var self = $NilMethodCall = $klass($base, $super, 'NilMethodCall', $NilMethodCall);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })(self, $scope.get('NoMethodError'));

    (function($base, $super) {
      function $InvalidFieldName(){};
      var self = $InvalidFieldName = $klass($base, $super, 'InvalidFieldName', $InvalidFieldName);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })(self, $scope.get('StandardError'));

    (function($base, $super) {
      function $Model(){};
      var self = $Model = $klass($base, $super, 'Model', $Model);

      var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4, TMP_5, TMP_6;

      def.persistor = def.deps = def.attributes = def.size_dep = def.server_errors = def.options = def.parent = def.path = nil;
      self.$include($scope.get('ModelWrapper'));

      self.$include($scope.get('ModelHelpers'));

      self.$include($scope.get('ModelHashBehaviour'));

      self.$include($scope.get('Validations'));

      self.$include($scope.get('ModelState'));

      self.$include($scope.get('Buffer'));

      self.$include($scope.get('FieldHelpers'));

      self.$attr_reader("attributes");

      self.$attr_reader("parent", "path", "persistor", "options");

      Opal.cdecl($scope, 'INVALID_FIELD_NAMES', $hash2(["attributes", "parent", "path", "options", "persistor"], {"attributes": true, "parent": true, "path": true, "options": true, "persistor": true}));

      def.$initialize = function(attributes, options, initial_state) {
        var $a, $b, self = this;

        if (attributes == null) {
          attributes = $hash2([], {})
        }
        if (options == null) {
          options = $hash2([], {})
        }
        if (initial_state == null) {
          initial_state = nil
        }
        self.deps = $scope.get('HashDependency').$new();
        self.size_dep = $scope.get('Dependency').$new();
        (($a = [options]), $b = self, $b['$options='].apply($b, $a), $a[$a.length-1]);
        self.$send("attributes=", attributes, true);
        self.state = "loaded";
        if ((($a = self.persistor) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.persistor.$loaded(initial_state)
          } else {
          return nil
        };
      };

      def.$_id = function() {
        var self = this;

        return self.$__id();
      };

      def['$_id='] = function(val) {
        var $a, $b, self = this;

        return (($a = [val]), $b = self, $b['$__id='].apply($b, $a), $a[$a.length-1]);
      };

      def['$options='] = function(options) {
        var $a, self = this;

        self.options = options;
        self.parent = options['$[]']("parent");
        self.path = ((($a = options['$[]']("path")) !== false && $a !== nil) ? $a : []);
        self.class_paths = options['$[]']("class_paths");
        return self.persistor = self.$setup_persistor(options['$[]']("persistor"));
      };

      def['$attributes='] = function(attrs, initial_setup) {
        var $a, $b, TMP_1, self = this, id = nil;

        if (initial_setup == null) {
          initial_setup = false
        }
        self.attributes = $hash2([], {});
        attrs = self.$wrap_values(attrs);
        if (attrs !== false && attrs !== nil) {
          id = attrs.$delete("_id");
          ($a = ($b = $scope.get('Model')).$nosave, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2;

          if (id !== false && id !== nil) {
              (($a = [id]), $b = self, $b['$_id='].apply($b, $a), $a[$a.length-1])};
            return ($a = ($b = attrs).$each_pair, $a.$$p = (TMP_2 = function(key, value){var self = TMP_2.$$s || this, $a;
if (key == null) key = nil;if (value == null) value = nil;
            if ((($a = self['$respond_to?'](("" + key.$to_s() + "="))) !== nil && (!$a.$$is_boolean || $a == true))) {
                return self.$send(("" + key.$to_s() + "="), value)
                } else {
                return self.$send(("_" + key.$to_s() + "="), value)
              }}, TMP_2.$$s = self, TMP_2), $a).call($b);}, TMP_1.$$s = self, TMP_1), $a).call($b);
          } else {
          self.attributes = attrs
        };
        self.deps['$changed_all!']();
        self.deps = $scope.get('HashDependency').$new();
        if (initial_setup !== false && initial_setup !== nil) {
          return nil
        } else if ((($a = self.persistor) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.persistor.$changed()
          } else {
          return nil
        };
      };

      self.$alias_method("assign_attributes", "attributes=");

      def['$=='] = TMP_3 = function(val) {var $zuper = $slice.call(arguments, 0);
        var $a, self = this, $iter = TMP_3.$$p, $yield = $iter || nil;

        TMP_3.$$p = null;
        if ((($a = val['$is_a?']($scope.get('Model'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return Opal.find_super_dispatcher(self, '==', TMP_3, $iter).apply(self, $zuper)
          } else {
          return self.$attributes()['$=='](val)
        };
      };

      def['$!'] = function() {
        var self = this;

        return self.$attributes()['$!']();
      };

      def.$method_missing = TMP_4 = function(method_name, args) {var $zuper = $slice.call(arguments, 0);
        var $a, $b, self = this, $iter = TMP_4.$$p, block = $iter || nil;

        args = $slice.call(arguments, 1);
        TMP_4.$$p = null;
        if (method_name['$[]'](0)['$==']("_")) {
          method_name = method_name['$[]']($range(1, -1, false));
          if (method_name['$[]'](-1)['$==']("=")) {
            return ($a = ($b = self).$assign_attribute, $a.$$p = block.$to_proc(), $a).apply($b, [method_name['$[]']($range(0, -2, false))].concat(args))
            } else {
            return self.$read_attribute(method_name)
          };
          } else {
          return Opal.find_super_dispatcher(self, 'method_missing', TMP_4, $iter).apply(self, $zuper)
        };
      };

      def.$assign_attribute = TMP_5 = function(method_name, args) {
        var $a, $b, self = this, $iter = TMP_5.$$p, block = $iter || nil, attribute_name = nil, value = nil, old_value = nil, new_value = nil;

        args = $slice.call(arguments, 1);
        TMP_5.$$p = null;
        self['$expand!']();
        attribute_name = method_name.$to_sym();
        self.$check_valid_field_name(attribute_name);
        value = args['$[]'](0);
        old_value = self.attributes['$[]'](attribute_name);
        new_value = self.$wrap_value(value, [attribute_name]);
        if ((($a = old_value['$=='](new_value)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.attributes['$[]='](attribute_name, new_value);
          self.deps['$changed!'](attribute_name);
          if ((($a = ((($b = old_value['$=='](nil)) !== false && $b !== nil) ? $b : new_value['$=='](nil))) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.size_dep['$changed!']()};
          if ((($a = self.server_errors) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$clear_server_errors(attribute_name)};
          if ((($a = ((($b = ($scope.Thread != null)['$!']()) !== false && $b !== nil) ? $b : $scope.get('Thread').$current()['$[]']("nosave")['$!']())) !== nil && (!$a.$$is_boolean || $a == true))) {
            if ((($a = self.persistor) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.persistor.$changed(attribute_name)
              } else {
              return nil
            }
            } else {
            return nil
          };
          } else {
          return nil
        };
      };

      def.$read_attribute = function(attr_name) {
        var $a, $b, self = this, new_model = nil;

        attr_name = attr_name.$to_sym();
        self.$check_valid_field_name(attr_name);
        if ((($a = ($b = self.attributes, $b !== false && $b !== nil ?self.attributes['$key?'](attr_name) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.deps.$depend(attr_name);
          return self.attributes['$[]'](attr_name);
          } else {
          new_model = self.$read_new_model(attr_name);
          ((($a = self.attributes) !== false && $a !== nil) ? $a : self.attributes = $hash2([], {}));
          self.attributes['$[]='](attr_name, new_model);
          if ((($a = $scope.get('Volt')['$in_browser?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            setImmediate(function() {;
            self.size_dep['$changed!']();
            });
            } else {
            self.size_dep['$changed!']()
          };
          self.deps.$depend(attr_name);
          return new_model;
        };
      };

      def.$read_new_model = function(method_name) {
        var $a, $b, self = this, opts = nil;

        if ((($a = ($b = self.persistor, $b !== false && $b !== nil ?self.persistor['$respond_to?']("read_new_model") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.persistor.$read_new_model(method_name)
          } else {
          opts = self.options.$merge($hash2(["parent", "path"], {"parent": self, "path": self.$path()['$+']([method_name])}));
          if ((($a = method_name['$plural?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$new_array_model([], opts)
            } else {
            return self.$new_model(nil, opts)
          };
        };
      };

      def.$new_model = function(attributes, options) {
        var self = this;

        return self.$class_at_path(options['$[]']("path")).$new(attributes, options);
      };

      def.$new_array_model = function(attributes, options) {
        var self = this;

        options = options.$dup();
        options['$[]=']("query", $hash2([], {}));
        return $scope.get('ArrayModel').$new(attributes, options);
      };

      def['$expand!'] = function() {
        var $a, self = this;

        if ((($a = self.$attributes()['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.attributes = $hash2([], {});
          if ((($a = self.parent) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.parent['$expand!']();
            return self.parent.$send(("_" + self.path.$last().$to_s() + "="), self);
            } else {
            return nil
          };
          } else {
          return nil
        };
      };

      def['$<<'] = function(value) {
        var $a, self = this, path = nil, result = nil;

        if ((($a = self.parent) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.parent['$expand!']()
          } else {
          self.$fail("Model data should be stored in sub collections.")
        };
        path = self.path.$last();
        result = self.parent.$send(path);
        if ((($a = result['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.parent.$send(("" + path.$to_s() + "="), self.$new_array_model([], self.options));
          result = self.parent.$send(path);};
        result['$<<'](value);
        return nil;
      };

      def.$inspect = function() {
        var self = this;

        return "<" + (self.$class()) + ":" + (self.$object_id()) + " " + (self.$attributes().$inspect()) + ">";
      };

      if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
        Opal.defs(self, '$nosave', TMP_6 = function() {
          var $a, self = this, $iter = TMP_6.$$p, $yield = $iter || nil;

          TMP_6.$$p = null;
          return $a = Opal.yieldX($yield, []), $a === $breaker ? $a : $a;
        })};

      self.$private();

      def.$check_valid_field_name = function(name) {
        var $a, self = this;

        if ((($a = $scope.get('INVALID_FIELD_NAMES')['$[]'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$raise($scope.get('InvalidFieldName'), "`" + (name) + "` is reserved and can not be used as a field")
          } else {
          return nil
        };
      };

      def.$setup_buffer = function(model) {
        var $a, $b, self = this;

        (($a = [self.$attributes()]), $b = model, $b['$attributes='].apply($b, $a), $a[$a.length-1]);
        return model.$change_state_to("loaded");
      };

      return (def.$setup_persistor = function(persistor) {
        var self = this;

        if (persistor !== false && persistor !== nil) {
          return self.persistor = persistor.$new(self)
          } else {
          return nil
        };
      }, nil) && 'setup_persistor';
    })(self, null);
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/cursor"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require']);
  self.$require("volt/models/array_model");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Cursor(){};
      var self = $Cursor = $klass($base, $super, 'Cursor', $Cursor);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })(self, $scope.get('ArrayModel'))
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/persistors/store_factory"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$is_a?', '$new']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Persistors');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $StoreFactory(){};
        var self = $StoreFactory = $klass($base, $super, 'StoreFactory', $StoreFactory);

        var def = self.$$proto, $scope = self.$$scope;

        def.tasks = nil;
        def.$initialize = function(tasks) {
          var self = this;

          return self.tasks = tasks;
        };

        return (def.$new = function(model) {
          var $a, self = this;

          if ((($a = model['$is_a?']($scope.get('ArrayModel'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('ArrayStore').$new(model, self.tasks)
            } else {
            return $scope.get('ModelStore').$new(model, self.tasks)
          };
        }, nil) && 'new';
      })(self, null)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/persistors/base"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$changed']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Persistors');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Base(){};
        var self = $Base = $klass($base, $super, 'Base', $Base);

        var def = self.$$proto, $scope = self.$$scope;

        def.$loaded = function(initial_state) {
          var self = this;

          if (initial_state == null) {
            initial_state = nil
          }
          return nil;
        };

        def.$changed = function(attribute_name) {
          var self = this;

          return nil;
        };

        def.$added = function(model, index) {
          var self = this;

          return nil;
        };

        def.$removed = function(attribute_name) {
          var self = this;

          return self.$changed(attribute_name);
        };

        def.$event_added = function(event, first, first_for_event) {
          var self = this;

          return nil;
        };

        return (def.$event_removed = function(event, last, last_for_event) {
          var self = this;

          return nil;
        }, nil) && 'event_removed';
      })(self, null)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/utils/generic_pool"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$==', '$nil?', '$last', '$pop', '$each_with_index', '$-', '$size', '$[]', '$[]=', '$create_new_item', '$to_proc', '$create', '$transform_item', '$alias_method', '$__lookup', '$values', '$<<', '$delete', '$downto']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $GenericPool(){};
      var self = $GenericPool = $klass($base, $super, 'GenericPool', $GenericPool);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3;

      def.pool = nil;
      self.$attr_reader("pool");

      def.$initialize = function() {
        var self = this;

        return self.pool = $hash2([], {});
      };

      def.$clear = function() {
        var self = this;

        return self.pool = $hash2([], {});
      };

      def.$lookup = TMP_1 = function(args) {try {

        var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil, section = nil;

        args = $slice.call(arguments, 0);
        TMP_1.$$p = null;
        section = self.pool;
        if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
          if ((($a = args.$last()['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            args.$pop()}};
        return ($a = ($b = args).$each_with_index, $a.$$p = (TMP_2 = function(arg, index){var self = TMP_2.$$s || this, $a, $b, $c, $d, $e, last = nil, next_section = nil;
if (arg == null) arg = nil;if (index == null) index = nil;
        last = (args.$size()['$-'](1))['$=='](index);
          if (last !== false && last !== nil) {
            Opal.ret((($a = arg, $b = section, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, ($d = ($e = self).$create_new_item, $d.$$p = block.$to_proc(), $d).apply($e, [].concat(args)))))))
            } else {
            next_section = section['$[]'](arg);
            ((($a = next_section) !== false && $a !== nil) ? $a : next_section = (section['$[]='](arg, $hash2([], {}))));
            return section = next_section;
          };}, TMP_2.$$s = self, TMP_2), $a).call($b);
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      };

      def.$create_new_item = TMP_3 = function(args) {
        var $a, self = this, $iter = TMP_3.$$p, $yield = $iter || nil, new_item = nil;

        args = $slice.call(arguments, 0);
        TMP_3.$$p = null;
        if (($yield !== nil)) {
          new_item = ((($a = Opal.yieldX($yield, [].concat(args))) === $breaker) ? $breaker.$v : $a)
          } else {
          new_item = ($a = self).$create.apply($a, [].concat(args))
        };
        return self.$transform_item(new_item);
      };

      def.$transform_item = function(item) {
        var self = this;

        return item;
      };

      self.$alias_method("__lookup", "lookup");

      def.$lookup_all = function(args) {
        var $a, $b, TMP_4, self = this, result = nil;

        args = $slice.call(arguments, 0);
        result = ($a = ($b = self).$__lookup, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

        return nil}, TMP_4.$$s = self, TMP_4), $a).apply($b, [].concat(args));
        if (result !== false && result !== nil) {
          return result.$values()
          } else {
          return []
        };
      };

      return (def.$remove = function(args) {
        var $a, $b, TMP_5, $c, TMP_6, self = this, stack = nil, section = nil;

        args = $slice.call(arguments, 0);
        stack = [];
        section = self.pool;
        ($a = ($b = args).$each_with_index, $a.$$p = (TMP_5 = function(arg, index){var self = TMP_5.$$s || this;
if (arg == null) arg = nil;if (index == null) index = nil;
        stack['$<<'](section);
          if (args.$size()['$-'](1)['$=='](index)) {
            return section.$delete(arg)
            } else {
            return section = section['$[]'](arg)
          };}, TMP_5.$$s = self, TMP_5), $a).call($b);
        return ($a = ($c = (stack.$size()['$-'](1))).$downto, $a.$$p = (TMP_6 = function(index){var self = TMP_6.$$s || this, node = nil, parent = nil;
if (index == null) index = nil;
        node = stack['$[]'](index);
          parent = stack['$[]'](index['$-'](1));
          if (node.$size()['$=='](0)) {
            return parent.$delete(args['$[]'](index['$-'](1)))
            } else {
            return nil
          };}, TMP_6.$$s = self, TMP_6), $a).call($c, 1);
      }, nil) && 'remove';
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/utils/generic_counting_pool"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$create', '$__lookup', '$to_proc', '$[]=', '$+', '$[]', '$-', '$==']);
  self.$require("volt/utils/generic_pool");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $GenericCountingPool(){};
      var self = $GenericCountingPool = $klass($base, $super, 'GenericCountingPool', $GenericCountingPool);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

      def.$generate_new = function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        return [0, ($a = self).$create.apply($a, [].concat(args))];
      };

      def.$find = TMP_1 = function(args) {
        var $a, $b, $c, self = this, $iter = TMP_1.$$p, block = $iter || nil, item = nil;

        args = $slice.call(arguments, 0);
        TMP_1.$$p = null;
        item = ($a = ($b = self).$__lookup, $a.$$p = block.$to_proc(), $a).apply($b, [].concat(args));
        ($a = 0, $c = item, $c['$[]=']($a, $c['$[]']($a)['$+'](1)));
        return item['$[]'](1);
      };

      def.$lookup = TMP_2 = function(args) {
        var self = this, $iter = TMP_2.$$p, block = $iter || nil, item = nil;

        args = $slice.call(arguments, 0);
        TMP_2.$$p = null;
        item = Opal.find_super_dispatcher(self, 'lookup', TMP_2, null).apply(self, [].concat(args).concat(block.$to_proc()));
        return item['$[]'](1);
      };

      def.$transform_item = function(item) {
        var self = this;

        return [0, item];
      };

      return (def.$remove = TMP_3 = function(args) {
        var $a, $b, $c, self = this, $iter = TMP_3.$$p, $yield = $iter || nil, item = nil;

        args = $slice.call(arguments, 0);
        TMP_3.$$p = null;
        item = ($a = self).$__lookup.apply($a, [].concat(args));
        ($b = 0, $c = item, $c['$[]=']($b, $c['$[]']($b)['$-'](1)));
        if (item['$[]'](0)['$=='](0)) {
          return Opal.find_super_dispatcher(self, 'remove', TMP_3, null).apply(self, [].concat(args))
          } else {
          return nil
        };
      }, nil) && 'remove';
    })(self, $scope.get('GenericPool'))
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/persistors/model_identity_map"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$[]=']);
  self.$require("volt/utils/generic_counting_pool");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ModelIdentityMap(){};
      var self = $ModelIdentityMap = $klass($base, $super, 'ModelIdentityMap', $ModelIdentityMap);

      var def = self.$$proto, $scope = self.$$scope;

      def.pool = nil;
      return (def.$add = function(id, model) {
        var self = this;

        return self.pool['$[]='](id, [1, model]);
      }, nil) && 'add'
    })(self, $scope.get('GenericCountingPool'))
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/persistors/store"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$new', '$merge', '$options', '$+', '$path', '$plural?', '$new_array_model', '$new_model', '$attributes', '$attributes=', '$[]=']);
  self.$require("volt/models/persistors/base");
  self.$require("volt/models/persistors/model_identity_map");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Persistors');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Store(){};
        var self = $Store = $klass($base, $super, 'Store', $Store);

        var def = self.$$proto, $scope = self.$$scope;

        def.saved = def.model = nil;
        (Opal.cvars['@@identity_map'] = $scope.get('ModelIdentityMap').$new());

        def.$initialize = function(model, tasks) {
          var self = this;

          if (tasks == null) {
            tasks = nil
          }
          self.tasks = tasks;
          self.model = model;
          return self.saved = false;
        };

        def['$saved?'] = function() {
          var self = this;

          return self.saved;
        };

        return (def.$read_new_model = function(method_name) {
          var $a, $b, self = this, options = nil, model = nil;

          options = self.model.$options().$merge($hash2(["parent", "path"], {"parent": self.model, "path": self.model.$path()['$+']([method_name])}));
          if ((($a = method_name['$plural?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            model = self.model.$new_array_model([], options)
            } else {
            model = self.model.$new_model(nil, options);
            ($a = self.model, ((($b = $a.$attributes()) !== false && $b !== nil) ? $b : $a['$attributes=']($hash2([], {}))));
            self.model.$attributes()['$[]='](method_name, model);
          };
          return model;
        }, nil) && 'read_new_model';
      })(self, $scope.get('Base'))
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/persistors/query/query_listener"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$fail', '$puts', '$inspect', '$then', '$each', '$>', '$size', '$model', '$clear', '$add', '$change_state_to', '$dup', '$add_listener', '$<<', '$each_with_index', '$to_h', '$first', '$delete', '$==', '$remove', '$remove_listener', '$changed']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $QueryListener(){};
      var self = $QueryListener = $klass($base, $super, 'QueryListener', $QueryListener);

      var def = self.$$proto, $scope = self.$$scope, TMP_5;

      def.collection = def.query = def.stores = def.listening = def.query_listener_pool = nil;
      def.$initialize = function(query_listener_pool, tasks, collection, query) {
        var self = this;

        self.query_listener_pool = query_listener_pool;
        self.tasks = tasks;
        self.stores = [];
        self.collection = collection;
        self.query = query;
        return self.listening = false;
      };

      def.$add_listener = function() {
        var $a, $b, TMP_1, $c, $d, TMP_2, self = this;

        self.listening = true;
        return ($a = ($b = ($c = ($d = $scope.get('QueryTasks').$add_listener(self.collection, self.query)).$then, $c.$$p = (TMP_2 = function(ret){var self = TMP_2.$$s || this, $a, $b, TMP_3, results = nil, errors = nil;
          if (self.stores == null) self.stores = nil;
if (ret == null) ret = nil;
        $a = Opal.to_ary(ret), results = ($a[0] == null ? nil : $a[0]), errors = ($a[1] == null ? nil : $a[1]);
          return ($a = ($b = self.stores.$dup()).$each, $a.$$p = (TMP_3 = function(store){var self = TMP_3.$$s || this, $a, $b, TMP_4;
if (store == null) store = nil;
          if (store.$model().$size()['$>'](0)) {
              store.$model().$clear()};
            ($a = ($b = results).$each, $a.$$p = (TMP_4 = function(index, data){var self = TMP_4.$$s || this;
if (index == null) index = nil;if (data == null) data = nil;
            return store.$add(index, data)}, TMP_4.$$s = self, TMP_4), $a).call($b);
            return store.$change_state_to("loaded");}, TMP_3.$$s = self, TMP_3), $a).call($b);}, TMP_2.$$s = self, TMP_2), $c).call($d)).$fail, $a.$$p = (TMP_1 = function(err){var self = TMP_1.$$s || this;
if (err == null) err = nil;
        return self.$puts("Error adding listener: " + (err.$inspect()))}, TMP_1.$$s = self, TMP_1), $a).call($b);
      };

      def.$add_store = TMP_5 = function(store) {
        var $a, $b, TMP_6, self = this, $iter = TMP_5.$$p, block = $iter || nil;

        TMP_5.$$p = null;
        self.stores['$<<'](store);
        if ((($a = self.listening) !== nil && (!$a.$$is_boolean || $a == true))) {
          store.$model().$clear();
          ($a = ($b = self.stores.$first().$model()).$each_with_index, $a.$$p = (TMP_6 = function(item, index){var self = TMP_6.$$s || this;
if (item == null) item = nil;if (index == null) index = nil;
          return store.$add(index, item.$to_h())}, TMP_6.$$s = self, TMP_6), $a).call($b);
          return store.$change_state_to("loaded");
          } else {
          return self.$add_listener()
        };
      };

      def.$remove_store = function(store) {
        var $a, self = this;

        self.stores.$delete(store);
        if (self.stores.$size()['$=='](0)) {
          self.query_listener_pool.$remove(self.collection, self.query);
          if ((($a = self.listening) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.listening = false;
            return $scope.get('QueryTasks').$remove_listener(self.collection, self.query);
            } else {
            return nil
          };
          } else {
          return nil
        };
      };

      def.$added = function(index, data) {
        var $a, $b, TMP_7, self = this;

        return ($a = ($b = self.stores).$each, $a.$$p = (TMP_7 = function(store){var self = TMP_7.$$s || this;
if (store == null) store = nil;
        return store.$add(index, data)}, TMP_7.$$s = self, TMP_7), $a).call($b);
      };

      def.$removed = function(ids) {
        var $a, $b, TMP_8, self = this;

        return ($a = ($b = self.stores).$each, $a.$$p = (TMP_8 = function(store){var self = TMP_8.$$s || this;
if (store == null) store = nil;
        return store.$remove(ids)}, TMP_8.$$s = self, TMP_8), $a).call($b);
      };

      return (def.$changed = function(model_id, data) {
        var self = this;

        $gvars.loading_models = true;
        self.$puts("new data: " + (data.$inspect()));
        (($scope.get('Persistors')).$$scope.get('ModelStore')).$changed(model_id, data);
        return $gvars.loading_models = false;
      }, nil) && 'changed';
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/persistors/query/query_listener_pool"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$puts', '$each_pair', '$each_key', '$inspect']);
  self.$require("volt/utils/generic_pool");
  self.$require("volt/models/persistors/query/query_listener");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $QueryListenerPool(){};
      var self = $QueryListenerPool = $klass($base, $super, 'QueryListenerPool', $QueryListenerPool);

      var def = self.$$proto, $scope = self.$$scope;

      def.pool = nil;
      return (def.$print = function() {
        var $a, $b, TMP_1, self = this;

        self.$puts("--- Running Queries ---");
        return ($a = ($b = self.pool).$each_pair, $a.$$p = (TMP_1 = function(table, query_hash){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (table == null) table = nil;if (query_hash == null) query_hash = nil;
        return ($a = ($b = query_hash).$each_key, $a.$$p = (TMP_2 = function(query){var self = TMP_2.$$s || this;
if (query == null) query = nil;
          return self.$puts("" + (table) + ": " + (query.$inspect()))}, TMP_2.$$s = self, TMP_2), $a).call($b)}, TMP_1.$$s = self, TMP_1), $a).call($b);
      }, nil) && 'print'
    })(self, $scope.get('GenericPool'))
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/persistors/store_state"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$change_state_to', '$new', '$depend', '$!', '$==', '$changed!', '$each', '$resolve', '$compact', '$stop_listening']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Persistors');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'StoreState');

        var def = self.$$proto, $scope = self.$$scope;

        Opal.defn(self, '$loaded', function(initial_state) {
          var $a, self = this;

          if (initial_state == null) {
            initial_state = nil
          }
          return self.$change_state_to(((($a = initial_state) !== false && $a !== nil) ? $a : "not_loaded"));
        });

        Opal.defn(self, '$state', function() {
          var $a, self = this;
          if (self.state_dep == null) self.state_dep = nil;
          if (self.state == null) self.state = nil;

          ((($a = self.state_dep) !== false && $a !== nil) ? $a : self.state_dep = $scope.get('Dependency').$new());
          self.state_dep.$depend();
          return self.state;
        });

        Opal.defn(self, '$change_state_to', function(new_state) {
          var $a, $b, TMP_1, self = this, old_state = nil;
          if (self.state == null) self.state = nil;
          if (self.state_dep == null) self.state_dep = nil;
          if (self.fetch_promises == null) self.fetch_promises = nil;

          old_state = self.state;
          self.state = new_state;
          if ((($a = old_state['$=='](self.state)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            if ((($a = self.state_dep) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.state_dep['$changed!']()}};
          if ((($a = (($b = self.state['$==']("loaded")) ? self.fetch_promises : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            ($a = ($b = self.fetch_promises.$compact()).$each, $a.$$p = (TMP_1 = function(fp){var self = TMP_1.$$s || this;
              if (self.model == null) self.model = nil;
if (fp == null) fp = nil;
            return fp.$resolve(self.model)}, TMP_1.$$s = self, TMP_1), $a).call($b);
            self.fetch_promises = nil;
            return self.$stop_listening();
            } else {
            return nil
          };
        });
      })(self)
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/persistors/array_store"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$new', '$attr_reader', '$[]', '$options', '$==', '$load_data', '$stop_listening', '$>', '$size', '$stop', '$remove_store', '$change_state_to', '$is_a?', '$watch!', '$lambda', '$call', '$run_query', '$puts', '$clear', '$last', '$path', '$parent', '$persistor', '$ensure_setup', '$attributes', '$true?', '$[]=', '$to_s', '$singularize', '$lookup', '$add_store', '$fail', '$merge', '$then', '$to_proc', '$resolve', '$<<', '$find', '$_id', '$array', '$+', '$new_model', '$insert', '$each', '$each_with_index', '$delete_at', '$add_to_collection', '$remove_from_collection', '$delete', '$channel_name']);
  self.$require("volt/models/persistors/store");
  self.$require("volt/models/persistors/query/query_listener_pool");
  self.$require("volt/models/persistors/store_state");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Persistors');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ArrayStore(){};
        var self = $ArrayStore = $klass($base, $super, 'ArrayStore', $ArrayStore);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_5;

        def.model = def.skip = def.has_events = def.fetch_promises = def.query_computation = def.query_listener = def.state = def.query = def.limit = nil;
        self.$include($scope.get('StoreState'));

        (Opal.cvars['@@query_pool'] = $scope.get('QueryListenerPool').$new());

        self.$attr_reader("model");

        Opal.defs(self, '$query_pool', function() {
          var $a, self = this;

          return (($a = Opal.cvars['@@query_pool']) == null ? nil : $a);
        });

        def.$initialize = TMP_1 = function(model, tasks) {var $zuper = $slice.call(arguments, 0);
          var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

          if (tasks == null) {
            tasks = nil
          }
          TMP_1.$$p = null;
          Opal.find_super_dispatcher(self, 'initialize', TMP_1, $iter).apply(self, $zuper);
          self.query = self.model.$options()['$[]']("query");
          self.limit = self.model.$options()['$[]']("limit");
          self.skip = self.model.$options()['$[]']("skip");
          if (self.skip['$=='](0)) {
            return self.skip = nil
            } else {
            return nil
          };
        };

        def.$event_added = function(event, first, first_for_event) {
          var self = this;

          if (first !== false && first !== nil) {
            self.has_events = true;
            return self.$load_data();
            } else {
            return nil
          };
        };

        def.$event_removed = function(event, last, last_for_event) {
          var self = this;

          if (last !== false && last !== nil) {
            self.has_events = false;
            return self.$stop_listening();
            } else {
            return nil
          };
        };

        def.$stop_listening = function(stop_watching_query) {
          var $a, $b, self = this;

          if (stop_watching_query == null) {
            stop_watching_query = true
          }
          if ((($a = self.has_events) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          if ((($a = ($b = self.fetch_promises, $b !== false && $b !== nil ?self.fetch_promises.$size()['$>'](0) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          if ((($a = ($b = self.query_computation, $b !== false && $b !== nil ?stop_watching_query : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.query_computation.$stop()};
          if ((($a = self.query_listener) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.query_listener.$remove_store(self);
            self.query_listener = nil;};
          return self.state = "dirty";
        };

        def.$load_data = function() {
          var $a, $b, TMP_2, self = this;

          if ((($a = ((($b = self.state['$==']("not_loaded")) !== false && $b !== nil) ? $b : self.state['$==']("dirty"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$change_state_to("loading");
            if ((($a = self.query['$is_a?']($scope.get('Proc'))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.query_computation = ($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, new_query = nil;
                if (self.query == null) self.query = nil;
                if (self.model == null) self.model = nil;
                if (self.skip == null) self.skip = nil;
                if (self.limit == null) self.limit = nil;

              self.$stop_listening(false);
                self.$change_state_to("loading");
                new_query = self.query.$call();
                return self.$run_query(self.model, self.query.$call(), self.skip, self.limit);}, TMP_2.$$s = self, TMP_2), $a).call($b)['$watch!']()
              } else {
              return self.$run_query(self.model, self.query, self.skip, self.limit)
            };
            } else {
            return nil
          };
        };

        def.$unload_data = function() {
          var self = this;

          self.$puts("Unload Data");
          self.$change_state_to("not_loaded");
          return self.model.$clear();
        };

        def.$run_query = function(model, query, skip, limit) {
          var $a, $b, $c, TMP_3, self = this, collection = nil, parent = nil, attrs = nil, full_query = nil;

          if (query == null) {
            query = $hash2([], {})
          }
          if (skip == null) {
            skip = nil
          }
          if (limit == null) {
            limit = nil
          }
          self.model.$clear();
          collection = model.$path().$last();
          if (model.$path().$size()['$>'](1)) {
            parent = model.$parent();
            if ((($a = parent.$persistor()) !== nil && (!$a.$$is_boolean || $a == true))) {
              parent.$persistor().$ensure_setup()};
            if ((($a = ($b = (($c = parent !== false && parent !== nil) ? (attrs = parent.$attributes()) : $c), $b !== false && $b !== nil ?attrs['$[]']("_id")['$true?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              query['$[]='](("" + model.$path()['$[]'](-3).$singularize().$to_s() + "_id"), attrs['$[]']("_id"))};};
          full_query = [query, skip, limit];
          self.query_listener = ($a = ($b = (($c = Opal.cvars['@@query_pool']) == null ? nil : $c)).$lookup, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $a;
            if (self.tasks == null) self.tasks = nil;

          return $scope.get('QueryListener').$new((($a = Opal.cvars['@@query_pool']) == null ? nil : $a), self.tasks, collection, full_query)}, TMP_3.$$s = self, TMP_3), $a).call($b, collection, full_query);
          return self.query_listener.$add_store(self);
        };

        def.$find = TMP_4 = function(query) {
          var $a, self = this, $iter = TMP_4.$$p, block = $iter || nil;

          if (query == null) {
            query = nil
          }
          TMP_4.$$p = null;
          if (block !== false && block !== nil) {
            if (query !== false && query !== nil) {
              self.$fail("Query should not be passed in to a find if a block is specified")};
            query = block;
            } else {
            ((($a = query) !== false && $a !== nil) ? $a : query = $hash2([], {}))
          };
          return $scope.get('Cursor').$new([], self.model.$options().$merge($hash2(["query"], {"query": query})));
        };

        def.$limit = function(limit) {
          var self = this;

          return $scope.get('Cursor').$new([], self.model.$options().$merge($hash2(["limit"], {"limit": limit})));
        };

        def.$skip = function(skip) {
          var self = this;

          return $scope.get('Cursor').$new([], self.model.$options().$merge($hash2(["skip"], {"skip": skip})));
        };

        def.$then = TMP_5 = function() {
          var $a, $b, self = this, $iter = TMP_5.$$p, block = $iter || nil, promise = nil;

          TMP_5.$$p = null;
          if (block !== false && block !== nil) {
            } else {
            self.$fail("then must pass a block")
          };
          promise = $scope.get('Promise').$new();
          promise = ($a = ($b = promise).$then, $a.$$p = block.$to_proc(), $a).call($b);
          if (self.state['$==']("loaded")) {
            promise.$resolve(self.model)
            } else {
            ((($a = self.fetch_promises) !== false && $a !== nil) ? $a : self.fetch_promises = []);
            self.fetch_promises['$<<'](promise);
            self.$load_data();
          };
          return promise;
        };

        def.$add = function(index, data) {
          var $a, $b, $c, TMP_6, TMP_7, $d, self = this, data_id = nil, new_model = nil;

          $gvars.loading_models = true;
          data_id = ((($a = data['$[]']("_id")) !== false && $a !== nil) ? $a : data['$[]']("_id"));
          if ((($a = ($b = ($c = self.model.$array()).$find, $b.$$p = (TMP_6 = function(v){var self = TMP_6.$$s || this;
if (v == null) v = nil;
          return v.$_id()['$=='](data_id)}, TMP_6.$$s = self, TMP_6), $b).call($c)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            new_model = ($a = ($b = (($d = Opal.cvars['@@identity_map']) == null ? nil : $d)).$find, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, new_options = nil;
              if (self.model == null) self.model = nil;

            new_options = self.model.$options().$merge($hash2(["path", "parent"], {"path": self.model.$path()['$+'](["[]"]), "parent": self.model}));
              return self.model.$new_model(data, new_options, "loaded");}, TMP_7.$$s = self, TMP_7), $a).call($b, data_id);
            self.model.$insert(index, new_model);
          };
          return $gvars.loading_models = false;
        };

        def.$remove = function(ids) {
          var $a, $b, TMP_8, self = this;

          $gvars.loading_models = true;
          ($a = ($b = ids).$each, $a.$$p = (TMP_8 = function(id){var self = TMP_8.$$s || this, $a, $b, TMP_9;
            if (self.model == null) self.model = nil;
if (id == null) id = nil;
          return ($a = ($b = self.model).$each_with_index, $a.$$p = (TMP_9 = function(model, index){var self = TMP_9.$$s || this, del = nil;
              if (self.model == null) self.model = nil;
if (model == null) model = nil;if (index == null) index = nil;
            if (model.$_id()['$=='](id)) {
                del = self.model.$delete_at(index);
                return ($breaker.$v = nil, $breaker);
                } else {
                return nil
              }}, TMP_9.$$s = self, TMP_9), $a).call($b)}, TMP_8.$$s = self, TMP_8), $a).call($b);
          return $gvars.loading_models = false;
        };

        def.$channel_name = function() {
          var self = this;

          return self.model.$path()['$[]'](-1);
        };

        def.$added = function(model, index) {
          var $a, self = this;

          if ((($a = model.$persistor()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return model.$persistor().$add_to_collection()
            } else {
            return nil
          };
        };

        return (def.$removed = function(model) {
          var $a, $b, self = this;
          if ($gvars.loading_models == null) $gvars.loading_models = nil;

          if ((($a = model.$persistor()) !== nil && (!$a.$$is_boolean || $a == true))) {
            model.$persistor().$remove_from_collection()};
          if ((($a = ($b = ($gvars["loading_models"] != null ? 'global-variable' : nil), $b !== false && $b !== nil ?$gvars.loading_models : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $scope.get('StoreTasks').$delete(self.$channel_name(), model.$attributes()['$[]']("_id"))
          };
        }, nil) && 'removed';
      })(self, $scope.get('Store'))
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/persistors/model_store"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$==', '$include', '$flatten', '$map', '$to_proc', '$attr_reader', '$attr_accessor', '$ensure_setup', '$changed', '$attributes', '$nil?', '$[]', '$__id=', '$generate_id', '$add_to_identity_map', '$add', '$_id', '$times', '$<<', '$sample', '$join', '$!', '$path', '$new', '$size', '$save_changes?', '$>', '$parent', '$[]=', '$to_s', '$singularize', '$collection', '$puts', '$fail', '$queue_client_save', '$each', '$reject', '$then', '$resolve', '$save', '$self_attributes', '$nosave', '$lookup', '$each_pair', '$send', '$private', '$is_a?']);
  self.$require("volt/models/persistors/store");
  self.$require("volt/models/persistors/store_state");
  if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {};
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Persistors');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ModelStore(){};
        var self = $ModelStore = $klass($base, $super, 'ModelStore', $ModelStore);

        var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

        def.model = def.in_identity_map = def.tasks = def.save_promises = nil;
        self.$include($scope.get('StoreState'));

        Opal.cdecl($scope, 'ID_CHARS', ($a = ($b = [($range("a", "f", false)), ($range("0", "9", false))]).$map, $a.$$p = "to_a".$to_proc(), $a).call($b).$flatten());

        self.$attr_reader("model");

        self.$attr_accessor("in_identity_map");

        def.$initialize = TMP_1 = function(model, tasks) {var $zuper = $slice.call(arguments, 0);
          var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

          TMP_1.$$p = null;
          Opal.find_super_dispatcher(self, 'initialize', TMP_1, $iter).apply(self, $zuper);
          return self.in_identity_map = false;
        };

        def.$add_to_collection = function() {
          var self = this;

          self.in_collection = true;
          self.$ensure_setup();
          return self.$changed();
        };

        def.$remove_from_collection = function() {
          var self = this;

          return self.in_collection = false;
        };

        def.$ensure_setup = function() {
          var $a, $b, self = this, attrs = nil;

          if ((($a = (attrs = self.model.$attributes())) !== nil && (!$a.$$is_boolean || $a == true))) {
            if ((($a = attrs['$[]']("_id")['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              (($a = [self.$generate_id()]), $b = self.model, $b['$__id='].apply($b, $a), $a[$a.length-1])};
            return self.$add_to_identity_map();
            } else {
            return nil
          };
        };

        def.$add_to_identity_map = function() {
          var $a, self = this;

          if ((($a = self.in_identity_map) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            (($a = Opal.cvars['@@identity_map']) == null ? nil : $a).$add(self.model.$_id(), self.model);
            return self.in_identity_map = true;
          };
        };

        def.$generate_id = function() {
          var $a, $b, TMP_2, self = this, id = nil;

          id = [];
          ($a = ($b = (24)).$times, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

          return id['$<<']($scope.get('ID_CHARS').$sample())}, TMP_2.$$s = self, TMP_2), $a).call($b);
          return id.$join();
        };

        def['$save_changes?'] = function() {
          var $a, $b, self = this;
          if ($gvars.loading_models == null) $gvars.loading_models = nil;

          if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
            return ($a = (($b = ($gvars["loading_models"] != null ? 'global-variable' : nil), $b !== false && $b !== nil ?$gvars.loading_models : $b))['$!'](), $a !== false && $a !== nil ?self.tasks : $a)};
        };

        def.$changed = function(attribute_name) {
          var $a, $b, $c, self = this, path = nil, promise = nil, path_size = nil, parent = nil, source = nil;

          if (attribute_name == null) {
            attribute_name = nil
          }
          path = self.model.$path();
          promise = $scope.get('Promise').$new();
          self.$ensure_setup();
          path_size = path.$size();
          if ((($a = ($b = ($c = self['$save_changes?'](), $c !== false && $c !== nil ?path_size['$>'](0) : $c), $b !== false && $b !== nil ?self.model['$nil?']()['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            if ((($a = ($b = (($c = path_size['$>'](3)) ? (parent = self.model.$parent()) : $c), $b !== false && $b !== nil ?(source = parent.$parent()) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.model.$attributes()['$[]='](("" + path['$[]'](-4).$singularize().$to_s() + "_id"), source.$_id())};
            if ((($a = self.$collection()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$puts("Attempting to save model directly on store.");
              self.$fail("Attempting to save model directly on store.");
            } else if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
              ((($a = self.save_promises) !== false && $a !== nil) ? $a : self.save_promises = []);
              self.save_promises['$<<'](promise);
              self.$queue_client_save();};};
          return promise;
        };

        def.$queue_client_save = function() {
          var self = this;

          
        if (!self.saveTimer) {
          self.saveTimer = setImmediate(self.$run_save.bind(self));
        }
        
        };

        def.$run_save = function() {
          var $a, $b, TMP_3, $c, $d, TMP_5, self = this;

          
        clearImmediate(self.saveTimer);
        delete self.saveTimer;
        
          return ($a = ($b = ($c = ($d = $scope.get('StoreTasks').$save(self.$collection(), self.model.$path(), self.$self_attributes())).$then, $c.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $a, $b, TMP_6, save_promises = nil;
            if (self.save_promises == null) self.save_promises = nil;

          save_promises = self.save_promises;
            self.save_promises = nil;
            return ($a = ($b = save_promises).$each, $a.$$p = (TMP_6 = function(promise){var self = TMP_6.$$s || this;
if (promise == null) promise = nil;
            return promise.$resolve(nil)}, TMP_6.$$s = self, TMP_6), $a).call($b);}, TMP_5.$$s = self, TMP_5), $c).call($d)).$fail, $a.$$p = (TMP_3 = function(errors){var self = TMP_3.$$s || this, $a, $b, TMP_4, save_promises = nil;
            if (self.save_promises == null) self.save_promises = nil;
if (errors == null) errors = nil;
          save_promises = self.save_promises;
            self.save_promises = nil;
            return ($a = ($b = save_promises).$each, $a.$$p = (TMP_4 = function(promise){var self = TMP_4.$$s || this;
if (promise == null) promise = nil;
            return promise.$reject(errors)}, TMP_4.$$s = self, TMP_4), $a).call($b);}, TMP_3.$$s = self, TMP_3), $a).call($b);
        };

        def.$event_added = function(event, first, first_for_event) {
          var $a, $b, self = this;

          if ((($a = (($b = first_for_event !== false && first_for_event !== nil) ? event['$==']("changed") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$ensure_setup()
            } else {
            return nil
          };
        };

        Opal.defs(self, '$changed', function(model_id, data) {
          var $a, $b, TMP_7, self = this;

          return ($a = ($b = $scope.get('Model')).$nosave, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $a, $b, TMP_8, model = nil;

          model = (($a = Opal.cvars['@@identity_map']) == null ? nil : $a).$lookup(model_id);
            if (model !== false && model !== nil) {
              return ($a = ($b = data).$each_pair, $a.$$p = (TMP_8 = function(key, value){var self = TMP_8.$$s || this, $a;
if (key == null) key = nil;if (value == null) value = nil;
              if ((($a = key['$==']("_id")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                  return model.$send(("_" + key.$to_s() + "="), value)
                  } else {
                  return nil
                }}, TMP_8.$$s = self, TMP_8), $a).call($b)
              } else {
              return nil
            };}, TMP_7.$$s = self, TMP_7), $a).call($b);
        });

        def['$[]'] = function(val) {
          var self = this;

          return self.$fail("Models do not support hash style lookup.  Hashes inserted into other models are converted to models, see https://github.com/voltrb/volt#automatic-model-conversion");
        };

        self.$private();

        def.$self_attributes = function() {
          var $a, $b, TMP_9, self = this;

          return ($a = ($b = self.model.$attributes()).$reject, $a.$$p = (TMP_9 = function(k, v){var self = TMP_9.$$s || this, $a;
if (k == null) k = nil;if (v == null) v = nil;
          return ((($a = v['$is_a?']($scope.get('Model'))) !== false && $a !== nil) ? $a : v['$is_a?']($scope.get('ArrayModel')))}, TMP_9.$$s = self, TMP_9), $a).call($b);
        };

        def.$collection = function() {
          var self = this;

          return self.model.$path()['$[]'](-2);
        };

        if ((($a = $scope.get('RUBY_PLATFORM')['$==']("opal")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
      })(self, $scope.get('Store'))
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/persistors/params"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$==', '$client?', '$update!', '$url']);
  self.$require("volt/models/persistors/base");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Persistors');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Params(){};
        var self = $Params = $klass($base, $super, 'Params', $Params);

        var def = self.$$proto, $scope = self.$$scope;

        def.$initialize = function(model) {
          var self = this;

          return self.model = model;
        };

        def.$changed = function(attribute_name) {
          var self = this;

          if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
            
            if (window.setTimeout && this.$run_update.bind) {
              if (window.paramsUpdateTimer) {
                clearTimeout(window.paramsUpdateTimer);
              }
              window.paramsUpdateTimer = setTimeout(this.$run_update.bind(this), 0);
            }
          };
        };

        return (def.$run_update = function() {
          var $a, self = this;
          if ($gvars.page == null) $gvars.page = nil;

          if ((($a = $scope.get('Volt')['$client?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $gvars.page.$url()['$update!']()
            } else {
            return nil
          };
        }, nil) && 'run_update';
      })(self, $scope.get('Base'))
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/persistors/cookies"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$[]', '$map', '$strip', '$split', '$==', '$size', '$<<', '$join', '$!', '$path', '$writing_cookies', '$each_pair', '$assign_attribute', '$read_cookies', '$read_attribute', '$write_cookie', '$to_s', '$+', '$now', '$*']);
  self.$require("volt/models/persistors/base");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Persistors');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Cookies(){};
        var self = $Cookies = $klass($base, $super, 'Cookies', $Cookies);

        var def = self.$$proto, $scope = self.$$scope, TMP_6;

        def.loaded = def.model = nil;
        def.$read_cookies = function() {
          var $a, $b, TMP_1, self = this, cookies = nil;

          cookies = document.cookie;
          return $scope.get('Hash')['$[]'](($a = ($b = cookies.$split(";")).$map, $a.$$p = (TMP_1 = function(v){var self = TMP_1.$$s || this, $a, $b, TMP_2, parts = nil;
if (v == null) v = nil;
          parts = ($a = ($b = v.$split("=", 2)).$map, $a.$$p = (TMP_2 = function(p){var self = TMP_2.$$s || this;
if (p == null) p = nil;
            p = p.$strip();
              return decodeURIComponent(p);}, TMP_2.$$s = self, TMP_2), $a).call($b);
            if (parts.$size()['$=='](1)) {
              parts['$<<']("")};
            return parts;}, TMP_1.$$s = self, TMP_1), $a).call($b));
        };

        def.$write_cookie = function(key, value, options) {
          var $a, self = this, parts = nil, expires = nil, cookie_val = nil;

          if (options == null) {
            options = $hash2([], {})
          }
          parts = [];
          parts['$<<'](encodeURIComponent(key));
          parts['$<<']("=");
          parts['$<<'](encodeURIComponent(value));
          parts['$<<']("; ");
          if ((($a = options['$[]']("max_age")) !== nil && (!$a.$$is_boolean || $a == true))) {
            parts['$<<']("max-age=")['$<<'](options['$[]']("max_age"))['$<<']("; ")};
          if ((($a = options['$[]']("expires")) !== nil && (!$a.$$is_boolean || $a == true))) {
            expires = options['$[]']("expires");
            parts['$<<']("expires=")['$<<'](expires.toGMTString())['$<<']("; ");};
          if ((($a = options['$[]']("path")) !== nil && (!$a.$$is_boolean || $a == true))) {
            parts['$<<']("path=")['$<<'](options['$[]']("path"))['$<<']("; ")};
          if ((($a = options['$[]']("domain")) !== nil && (!$a.$$is_boolean || $a == true))) {
            parts['$<<']("domain=")['$<<'](options['$[]']("domain"))['$<<']("; ")};
          if ((($a = options['$[]']("secure")) !== nil && (!$a.$$is_boolean || $a == true))) {
            parts['$<<']("secure")};
          cookie_val = parts.$join();
          return document.cookie = cookie_val;
        };

        def.$initialize = function(model) {
          var self = this;

          return self.model = model;
        };

        def.$added = function(model, index) {
          var self = this;

          return nil;
        };

        def.$loaded = function(initial_state) {
          var $a, $b, TMP_3, self = this;

          if (initial_state == null) {
            initial_state = nil
          }
          if ((($a = ($b = self.loaded['$!'](), $b !== false && $b !== nil ?self.model.$path()['$==']([]) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.loaded = true;
            return ($a = ($b = self).$writing_cookies, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $a, $b, TMP_4;

            return ($a = ($b = self.$read_cookies()).$each_pair, $a.$$p = (TMP_4 = function(key, value){var self = TMP_4.$$s || this;
                if (self.model == null) self.model = nil;
if (key == null) key = nil;if (value == null) value = nil;
              return self.model.$assign_attribute(key, value)}, TMP_4.$$s = self, TMP_4), $a).call($b)}, TMP_3.$$s = self, TMP_3), $a).call($b);
            } else {
            return nil
          };
        };

        def.$changed = function(attribute_name) {
          var $a, self = this, value = nil;
          if ($gvars.writing_cookies == null) $gvars.writing_cookies = nil;

          if ((($a = $gvars.writing_cookies) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            value = self.model.$read_attribute(attribute_name);
            return self.$write_cookie(attribute_name, value.$to_s(), $hash2(["expires"], {"expires": $scope.get('Time').$now()['$+'](((356)['$*'](24)['$*'](60)['$*'](60)))}));
          };
        };

        def.$removed = function(attribute_name) {
          var $a, $b, TMP_5, self = this;

          return ($a = ($b = self).$writing_cookies, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

          return self.$write_cookie(attribute_name, "", $hash2(["expires"], {"expires": $scope.get('Time').$now()}))}, TMP_5.$$s = self, TMP_5), $a).call($b);
        };

        return (def.$writing_cookies = TMP_6 = function() {
          var self = this, $iter = TMP_6.$$p, $yield = $iter || nil;

          TMP_6.$$p = null;
          $gvars.writing_cookies = true;
          if (Opal.yieldX($yield, []) === $breaker) return $breaker.$v;
          return $gvars.writing_cookies = false;
        }, nil) && 'writing_cookies';
      })(self, $scope.get('Base'))
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/persistors/flash"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$client?', '$delete', '$==', '$size', '$[]', '$path', '$parent']);
  self.$require("volt/models/persistors/base");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Persistors');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Flash(){};
        var self = $Flash = $klass($base, $super, 'Flash', $Flash);

        var def = self.$$proto, $scope = self.$$scope;

        def.model = nil;
        def.$initialize = function(model) {
          var self = this;

          return self.model = model;
        };

        def.$added = function(model, index) {
          var $a, self = this;

          if ((($a = $scope.get('Volt')['$client?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            
            setTimeout(function() {
              self.$clear_model(model);
            }, 5000);
          
            } else {
            return nil
          };
        };

        return (def.$clear_model = function(model) {
          var self = this, collection_name = nil;

          self.model.$delete(model);
          if (self.model.$size()['$=='](0)) {
            collection_name = self.model.$path()['$[]'](-1);
            return self.model.$parent().$delete(collection_name);
            } else {
            return nil
          };
        }, nil) && 'clear_model';
      })(self, $scope.get('Base'))
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/utils/local_storage"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$==']);
  if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
    return (function($base) {
      var self = $module($base, 'Volt');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'LocalStorage');

        var def = self.$$proto, $scope = self.$$scope;

        Opal.defs(self, '$[]', function(key) {
          var self = this;

          
          var val = localStorage.getItem(key);
          return val === null ? nil : val;
        
        });

        Opal.defs(self, '$[]=', function(key, value) {
          var self = this;

          return localStorage.setItem(key, value);
        });

        Opal.defs(self, '$clear', function() {
          var self = this;

          localStorage.clear();
          return self;
        });

        Opal.defs(self, '$delete', function(key) {
          var self = this;

          
          var val = localStorage.getItem(key);
          localStorage.removeItem(key);
          return val === null ? nil : val;
        
        });
      })(self)
    })(self)}
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/persistors/local_store"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$loop', '$parent', '$save_all', '$persistor', '$root_model', '$==', '$path', '$[]', '$parse', '$each_pair', '$send', '$to_s', '$dump', '$to_h', '$[]=']);
  self.$require("volt/models/persistors/base");
  self.$require("volt/utils/local_storage");
  self.$require("json");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Persistors');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $LocalStore(){};
        var self = $LocalStore = $klass($base, $super, 'LocalStore', $LocalStore);

        var def = self.$$proto, $scope = self.$$scope;

        def.model = def.loading_data = nil;
        def.$initialize = function(model) {
          var self = this;

          return self.model = model;
        };

        def.$root_model = function() {
          var $a, $b, TMP_1, self = this, node = nil;

          node = self.model;
          ($a = ($b = self).$loop, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, parent = nil;

          parent = node.$parent();
            if (parent !== false && parent !== nil) {
              return node = parent
              } else {
              return ($breaker.$v = nil, $breaker)
            };}, TMP_1.$$s = self, TMP_1), $a).call($b);
          return node;
        };

        def.$added = function(model, index) {
          var self = this;

          return self.$root_model().$persistor().$save_all();
        };

        def.$loaded = function(initial_state) {
          var $a, $b, TMP_2, self = this, json_data = nil, root_attributes = nil;

          if (initial_state == null) {
            initial_state = nil
          }
          if (self.model.$path()['$==']([])) {
            json_data = $scope.get('LocalStorage')['$[]']("volt-store");
            if (json_data !== false && json_data !== nil) {
              root_attributes = $scope.get('JSON').$parse(json_data);
              self.loading_data = true;
              ($a = ($b = root_attributes).$each_pair, $a.$$p = (TMP_2 = function(key, value){var self = TMP_2.$$s || this;
                if (self.model == null) self.model = nil;
if (key == null) key = nil;if (value == null) value = nil;
              return self.model.$send(("_" + key.$to_s() + "="), value)}, TMP_2.$$s = self, TMP_2), $a).call($b);
              return self.loading_data = nil;
              } else {
              return nil
            };
            } else {
            return nil
          };
        };

        def.$changed = function(attribute_name) {
          var self = this;

          return self.$root_model().$persistor().$save_all();
        };

        return (def.$save_all = function() {
          var $a, self = this, json_data = nil;

          if ((($a = self.loading_data) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          json_data = $scope.get('JSON').$dump(self.model.$to_h());
          return $scope.get('LocalStorage')['$[]=']("volt-store", json_data);
        }, nil) && 'save_all';
      })(self, $scope.get('Base'))
    })(self)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["promise.rb"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$resolve', '$new', '$reject', '$attr_reader', '$!', '$==', '$<<', '$>>', '$exception?', '$resolved?', '$value', '$rejected?', '$===', '$error', '$realized?', '$raise', '$^', '$call', '$resolve!', '$exception!', '$reject!', '$class', '$object_id', '$+', '$inspect', '$act?', '$prev', '$concat', '$it', '$lambda', '$reverse', '$<=', '$length', '$shift', '$-', '$each', '$wait', '$then', '$to_proc', '$map', '$reduce', '$always', '$try', '$tap', '$all?', '$find']);
  return (function($base, $super) {
    function $Promise(){};
    var self = $Promise = $klass($base, $super, 'Promise', $Promise);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

    def.success = def.exception = def.realized = def.delayed = def.failure = def.error = def.prev = def.next = def.value = nil;
    Opal.defs(self, '$value', function(value) {
      var self = this;

      return self.$new().$resolve(value);
    });

    Opal.defs(self, '$error', function(value) {
      var self = this;

      return self.$new().$reject(value);
    });

    Opal.defs(self, '$when', function(promises) {
      var self = this;

      promises = $slice.call(arguments, 0);
      return $scope.get('When').$new(promises);
    });

    self.$attr_reader("value", "error", "prev", "next");

    def.$initialize = function(success, failure) {
      var self = this;

      if (success == null) {
        success = nil
      }
      if (failure == null) {
        failure = nil
      }
      self.success = success;
      self.failure = failure;
      self.realized = nil;
      self.exception = false;
      self.value = nil;
      self.error = nil;
      self.delayed = nil;
      self.prev = nil;
      return self.next = nil;
    };

    def['$act?'] = function() {
      var self = this;

      return self.success['$=='](nil)['$!']();
    };

    def['$exception?'] = function() {
      var self = this;

      return self.exception;
    };

    def['$realized?'] = function() {
      var self = this;

      return self.realized['$=='](nil)['$!']();
    };

    def['$resolved?'] = function() {
      var self = this;

      return self.realized['$==']("resolve");
    };

    def['$rejected?'] = function() {
      var self = this;

      return self.realized['$==']("reject");
    };

    def['$^'] = function(promise) {
      var self = this;

      promise['$<<'](self);
      self['$>>'](promise);
      return promise;
    };

    def['$<<'] = function(promise) {
      var self = this;

      self.prev = promise;
      return self;
    };

    def['$>>'] = function(promise) {
      var $a, $b, $c, $d, self = this;

      self.next = promise;
      if ((($a = self['$exception?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        promise.$reject(self.delayed)
      } else if ((($a = self['$resolved?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        promise.$resolve(((($a = self.delayed) !== false && $a !== nil) ? $a : self.$value()))
      } else if ((($a = ($b = self['$rejected?'](), $b !== false && $b !== nil ?(((($c = self.failure['$!']()) !== false && $c !== nil) ? $c : $scope.get('Promise')['$===']((((($d = self.delayed) !== false && $d !== nil) ? $d : self.error))))) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        promise.$reject(((($a = self.delayed) !== false && $a !== nil) ? $a : self.$error()))};
      return self;
    };

    def.$resolve = function(value) {
      var $a, self = this, e = nil;

      if (value == null) {
        value = nil
      }
      if ((($a = self['$realized?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "the promise has already been realized")};
      if ((($a = $scope.get('Promise')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
        value['$<<'](self.prev);
        return value['$^'](self);};
      self.realized = "resolve";
      self.value = value;
      try {
      if ((($a = self.success) !== nil && (!$a.$$is_boolean || $a == true))) {
          value = self.success.$call(value)};
        self['$resolve!'](value);
      } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
        self['$exception!'](e)
        }else { throw $err; }
      };
      return self;
    };

    def['$resolve!'] = function(value) {
      var $a, self = this;

      if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.next.$resolve(value)
        } else {
        return self.delayed = value
      };
    };

    def.$reject = function(value) {
      var $a, self = this, e = nil;

      if (value == null) {
        value = nil
      }
      if ((($a = self['$realized?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "the promise has already been realized")};
      if ((($a = $scope.get('Promise')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
        value['$<<'](self.prev);
        return value['$^'](self);};
      self.realized = "reject";
      self.error = value;
      try {
      if ((($a = self.failure) !== nil && (!$a.$$is_boolean || $a == true))) {
          value = self.failure.$call(value);
          if ((($a = $scope.get('Promise')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self['$reject!'](value)};
          } else {
          self['$reject!'](value)
        }
      } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
        self['$exception!'](e)
        }else { throw $err; }
      };
      return self;
    };

    def['$reject!'] = function(value) {
      var $a, self = this;

      if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.next.$reject(value)
        } else {
        return self.delayed = value
      };
    };

    def['$exception!'] = function(error) {
      var self = this;

      self.exception = true;
      return self['$reject!'](error);
    };

    def.$then = TMP_1 = function() {
      var $a, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "a promise has already been chained")};
      return self['$^']($scope.get('Promise').$new(block));
    };

    Opal.defn(self, '$do', def.$then);

    def.$fail = TMP_2 = function() {
      var $a, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "a promise has already been chained")};
      return self['$^']($scope.get('Promise').$new(nil, block));
    };

    Opal.defn(self, '$rescue', def.$fail);

    Opal.defn(self, '$catch', def.$fail);

    def.$always = TMP_3 = function() {
      var $a, self = this, $iter = TMP_3.$$p, block = $iter || nil;

      TMP_3.$$p = null;
      if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "a promise has already been chained")};
      return self['$^']($scope.get('Promise').$new(block, block));
    };

    Opal.defn(self, '$finally', def.$always);

    Opal.defn(self, '$ensure', def.$always);

    def.$trace = TMP_4 = function(depth) {
      var $a, self = this, $iter = TMP_4.$$p, block = $iter || nil;

      if (depth == null) {
        depth = nil
      }
      TMP_4.$$p = null;
      if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "a promise has already been chained")};
      return self['$^']($scope.get('Trace').$new(depth, block));
    };

    def.$inspect = function() {
      var $a, self = this, result = nil;

      result = "#<" + (self.$class()) + "(" + (self.$object_id()) + ")";
      if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
        result = result['$+'](" >> " + (self.next.$inspect()))};
      if ((($a = self['$realized?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        result = result['$+'](": " + ((((($a = self.value) !== false && $a !== nil) ? $a : self.error)).$inspect()) + ">")
        } else {
        result = result['$+'](">")
      };
      return result;
    };

    (function($base, $super) {
      function $Trace(){};
      var self = $Trace = $klass($base, $super, 'Trace', $Trace);

      var def = self.$$proto, $scope = self.$$scope, TMP_6;

      Opal.defs(self, '$it', function(promise) {
        var $a, self = this, current = nil, prev = nil;

        if ((($a = promise['$realized?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise($scope.get('ArgumentError'), "the promise hasn't been realized")
        };
        current = (function() {if ((($a = promise['$act?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return [promise.$value()]
          } else {
          return []
        }; return nil; })();
        if ((($a = prev = promise.$prev()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return current.$concat(self.$it(prev))
          } else {
          return current
        };
      });

      return (def.$initialize = TMP_6 = function(depth, block) {
        var $a, $b, TMP_5, self = this, $iter = TMP_6.$$p, $yield = $iter || nil;

        TMP_6.$$p = null;
        self.depth = depth;
        return Opal.find_super_dispatcher(self, 'initialize', TMP_6, null).apply(self, [($a = ($b = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $a, $b, trace = nil;

        trace = $scope.get('Trace').$it(self).$reverse();
          if ((($a = (($b = depth !== false && depth !== nil) ? depth['$<='](trace.$length()) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            trace.$shift(trace.$length()['$-'](depth))};
          return ($a = block).$call.apply($a, [].concat(trace));}, TMP_5.$$s = self, TMP_5), $a).call($b)]);
      }, nil) && 'initialize';
    })(self, self);

    return (function($base, $super) {
      function $When(){};
      var self = $When = $klass($base, $super, 'When', $When);

      var def = self.$$proto, $scope = self.$$scope, TMP_7, TMP_9, TMP_11, TMP_13, TMP_17;

      def.wait = nil;
      def.$initialize = TMP_7 = function(promises) {
        var $a, $b, TMP_8, self = this, $iter = TMP_7.$$p, $yield = $iter || nil;

        if (promises == null) {
          promises = []
        }
        TMP_7.$$p = null;
        Opal.find_super_dispatcher(self, 'initialize', TMP_7, null).apply(self, []);
        self.wait = [];
        return ($a = ($b = promises).$each, $a.$$p = (TMP_8 = function(promise){var self = TMP_8.$$s || this;
if (promise == null) promise = nil;
        return self.$wait(promise)}, TMP_8.$$s = self, TMP_8), $a).call($b);
      };

      def.$each = TMP_9 = function() {
        var $a, $b, TMP_10, self = this, $iter = TMP_9.$$p, block = $iter || nil;

        TMP_9.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.get('ArgumentError'), "no block given")
        };
        return ($a = ($b = self).$then, $a.$$p = (TMP_10 = function(values){var self = TMP_10.$$s || this, $a, $b;
if (values == null) values = nil;
        return ($a = ($b = values).$each, $a.$$p = block.$to_proc(), $a).call($b)}, TMP_10.$$s = self, TMP_10), $a).call($b);
      };

      def.$collect = TMP_11 = function() {
        var $a, $b, TMP_12, self = this, $iter = TMP_11.$$p, block = $iter || nil;

        TMP_11.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.get('ArgumentError'), "no block given")
        };
        return ($a = ($b = self).$then, $a.$$p = (TMP_12 = function(values){var self = TMP_12.$$s || this, $a, $b;
if (values == null) values = nil;
        return $scope.get('When').$new(($a = ($b = values).$map, $a.$$p = block.$to_proc(), $a).call($b))}, TMP_12.$$s = self, TMP_12), $a).call($b);
      };

      def.$inject = TMP_13 = function(args) {
        var $a, $b, TMP_14, self = this, $iter = TMP_13.$$p, block = $iter || nil;

        args = $slice.call(arguments, 0);
        TMP_13.$$p = null;
        return ($a = ($b = self).$then, $a.$$p = (TMP_14 = function(values){var self = TMP_14.$$s || this, $a, $b;
if (values == null) values = nil;
        return ($a = ($b = values).$reduce, $a.$$p = block.$to_proc(), $a).apply($b, [].concat(args))}, TMP_14.$$s = self, TMP_14), $a).call($b);
      };

      Opal.defn(self, '$map', def.$collect);

      Opal.defn(self, '$reduce', def.$inject);

      def.$wait = function(promise) {
        var $a, $b, TMP_15, self = this;

        if ((($a = $scope.get('Promise')['$==='](promise)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          promise = $scope.get('Promise').$value(promise)
        };
        if ((($a = promise['$act?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          promise = promise.$then()};
        self.wait['$<<'](promise);
        ($a = ($b = promise).$always, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this, $a;
          if (self.next == null) self.next = nil;

        if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$try()
            } else {
            return nil
          }}, TMP_15.$$s = self, TMP_15), $a).call($b);
        return self;
      };

      Opal.defn(self, '$and', def.$wait);

      def['$>>'] = TMP_17 = function() {var $zuper = $slice.call(arguments, 0);
        var $a, $b, TMP_16, self = this, $iter = TMP_17.$$p, $yield = $iter || nil;

        TMP_17.$$p = null;
        return ($a = ($b = Opal.find_super_dispatcher(self, '>>', TMP_17, $iter).apply(self, $zuper)).$tap, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

        return self.$try()}, TMP_16.$$s = self, TMP_16), $a).call($b);
      };

      return (def.$try = function() {
        var $a, $b, $c, $d, self = this, promise = nil;

        if ((($a = ($b = ($c = self.wait)['$all?'], $b.$$p = "realized?".$to_proc(), $b).call($c)) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = promise = ($b = ($d = self.wait).$find, $b.$$p = "rejected?".$to_proc(), $b).call($d)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$reject(promise.$error())
            } else {
            return self.$resolve(($a = ($b = self.wait).$map, $a.$$p = "value".$to_proc(), $a).call($b))
          }
          } else {
          return nil
        };
      }, nil) && 'try';
    })(self, self);
  })(self, null)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$==']);
  self.$require("volt/extra_core/extra_core");
  self.$require("volt/models/model");
  self.$require("volt/models/cursor");
  self.$require("volt/models/persistors/store_factory");
  self.$require("volt/models/persistors/array_store");
  self.$require("volt/models/persistors/model_store");
  self.$require("volt/models/persistors/params");
  if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
    self.$require("volt/models/persistors/cookies")};
  self.$require("volt/models/persistors/flash");
  self.$require("volt/models/persistors/local_store");
  if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
    return self.$require("promise.rb")};
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["strscan"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$length', '$pos=']);
  return (function($base, $super) {
    function $StringScanner(){};
    var self = $StringScanner = $klass($base, $super, 'StringScanner', $StringScanner);

    var def = self.$$proto, $scope = self.$$scope;

    def.pos = def.string = def.working = def.prev_pos = def.matched = def.match = nil;
    self.$attr_reader("pos");

    self.$attr_reader("matched");

    def.$initialize = function(string) {
      var self = this;

      self.string = string;
      self.pos = 0;
      self.matched = nil;
      self.working = string;
      return self.match = [];
    };

    self.$attr_reader("string");

    def['$beginning_of_line?'] = function() {
      var self = this;

      return self.pos === 0 || self.string.charAt(self.pos - 1) === "\n";
    };

    Opal.defn(self, '$bol?', def['$beginning_of_line?']);

    def.$scan = function(regex) {
      var self = this;

      
      var regex  = new RegExp('^' + regex.toString().substring(1, regex.toString().length - 1)),
          result = regex.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }
      else if (typeof(result) === 'object') {
        self.prev_pos = self.pos;
        self.pos     += result[0].length;
        self.working  = self.working.substring(result[0].length);
        self.matched  = result[0];
        self.match    = result;

        return result[0];
      }
      else if (typeof(result) === 'string') {
        self.pos     += result.length;
        self.working  = self.working.substring(result.length);

        return result;
      }
      else {
        return nil;
      }
    ;
    };

    def['$[]'] = function(idx) {
      var self = this;

      
      var match = self.match;

      if (idx < 0) {
        idx += match.length;
      }

      if (idx < 0 || idx >= match.length) {
        return nil;
      }

      if (match[idx] == null) {
        return nil;
      }

      return match[idx];
    ;
    };

    def.$check = function(regex) {
      var self = this;

      
      var regexp = new RegExp('^' + regex.toString().substring(1, regex.toString().length - 1)),
          result = regexp.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }

      return self.matched = result[0];
    ;
    };

    def.$peek = function(length) {
      var self = this;

      return self.working.substring(0, length);
    };

    def['$eos?'] = function() {
      var self = this;

      return self.working.length === 0;
    };

    def.$skip = function(re) {
      var self = this;

      
      re = new RegExp('^' + re.source)
      var result = re.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }
      else {
        var match_str = result[0];
        var match_len = match_str.length;
        self.matched = match_str;
        self.prev_pos = self.pos;
        self.pos += match_len;
        self.working = self.working.substring(match_len);
        return match_len;
      }
    ;
    };

    def.$get_byte = function() {
      var self = this;

      
      var result = nil;
      if (self.pos < self.string.length) {
        self.prev_pos = self.pos;
        self.pos += 1;
        result = self.matched = self.working.substring(0, 1);
        self.working = self.working.substring(1);
      }
      else {
        self.matched = nil;
      }

      return result;
    ;
    };

    Opal.defn(self, '$getch', def.$get_byte);

    def['$pos='] = function(pos) {
      var self = this;

      
      if (pos < 0) {
        pos += self.string.$length();
      }
    ;
      self.pos = pos;
      return self.working = self.string.slice(pos);
    };

    def.$reset = function() {
      var self = this;

      self.working = self.string;
      self.matched = nil;
      return self.pos = 0;
    };

    def.$rest = function() {
      var self = this;

      return self.working;
    };

    def['$rest?'] = function() {
      var self = this;

      return self.working.length !== 0;
    };

    def.$terminate = function() {
      var $a, $b, self = this;

      self.match = nil;
      return (($a = [self.string.$length()]), $b = self, $b['$pos='].apply($b, $a), $a[$a.length-1]);
    };

    return (def.$unscan = function() {
      var self = this;

      self.pos = self.prev_pos;
      self.prev_pos = nil;
      self.match = nil;
      return self;
    }, nil) && 'unscan';
  })(self, null)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/server/html_parser/sandlebars_parser"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$each', '$[]=', '$truth_hash', '$new', '$parse', '$last', '$loop', '$[]', '$scan_until', '$special_tag', '$scan', '$respond_to?', '$comment', '$start_tag', '$end_tag', '$!', '$==', '$pos=', '$-', '$pos', '$text', '$start_binding', '$<<', '$+', '$eos?', '$raise_parse_error', '$strip', '$fail', '$binding', '$count', '$pre_match', '$=~', '$downcase', '$blank?', '$push', '$start_section', '$downto', '$size', '$>=', '$*', '$gsub']);
  self.$require("strscan");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $HTMLParseError(){};
      var self = $HTMLParseError = $klass($base, $super, 'HTMLParseError', $HTMLParseError);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })(self, $scope.get('RuntimeError'));

    (function($base, $super) {
      function $SandlebarsParser(){};
      var self = $SandlebarsParser = $klass($base, $super, 'SandlebarsParser', $SandlebarsParser);

      var def = self.$$proto, $scope = self.$$scope;

      def.stack = def.handler = def.html = def.file_path = nil;
      Opal.defs(self, '$truth_hash', function(array) {
        var $a, $b, TMP_1, self = this, hash = nil;

        hash = $hash2([], {});
        ($a = ($b = array).$each, $a.$$p = (TMP_1 = function(v){var self = TMP_1.$$s || this;
if (v == null) v = nil;
        return hash['$[]='](v, true)}, TMP_1.$$s = self, TMP_1), $a).call($b);
        return hash;
      });

      Opal.cdecl($scope, 'START_TAG', /^<([-!\:A-Za-z0-9_]+)((?:\s+[\w\-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)>/);

      Opal.cdecl($scope, 'END_TAG', /^<\/([-!\:A-Za-z0-9_]+)[^>]*>/);

      Opal.cdecl($scope, 'ATTRIBUTES', /([-\:A-Za-z0-9_]+)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|([^>\s]+)))?/);

      Opal.cdecl($scope, 'BLOCK', self.$truth_hash(["a", "address", "applet", "blockquote", "button", "center", "dd", "del", "dir", "div", "dl", "dt", "fieldset", "form", "frameset", "hr", "iframe", "ins", "isindex", "li", "map", "menu", "noframes", "noscript", "object", "ol", "p", "pre", "script", "table", "tbody", "td", "tfoot", "th", "thead", "tr", "ul"]));

      Opal.cdecl($scope, 'EMPTY', self.$truth_hash(["area", "base", "basefont", "br", "col", "frame", "hr", "img", "input", "isindex", "link", "meta", "param", "embed"]));

      Opal.cdecl($scope, 'INLINE', self.$truth_hash(["abbr", "acronym", "applet", "b", "basefont", "bdo", "big", "br", "button", "cite", "code", "del", "dfn", "em", "font", "i", "iframe", "img", "input", "ins", "kbd", "label", "map", "object", "q", "s", "samp", "script", "select", "small", "span", "strike", "strong", "sub", "sup", "textarea", "tt", "u", "var"]));

      Opal.cdecl($scope, 'CLOSE_SELF', self.$truth_hash(["colgroup", "dd", "dt", "li", "options", "p", "td", "tfoot", "th", "thead", "tr"]));

      Opal.cdecl($scope, 'SPECIAL', self.$truth_hash(["script", "style"]));

      Opal.cdecl($scope, 'FILL_IN_ATTRIBUTES', self.$truth_hash(["checked", "compact", "declare", "defer", "disabled", "ismap", "multiple", "nohref", "noresize", "noshade", "nowrap", "readonly", "selected"]));

      def.$initialize = function(html, handler, file_path) {
        var self = this;

        if (file_path == null) {
          file_path = nil
        }
        self.html = $scope.get('StringScanner').$new(html);
        self.handler = handler;
        self.file_path = file_path;
        self.stack = [];
        return self.$parse();
      };

      def.$last = function() {
        var self = this;

        return self.stack.$last();
      };

      def.$parse = function() {
        var $a, $b, TMP_2, self = this;

        ($a = ($b = self).$loop, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $b, close_tag = nil, body = nil, comment = nil, tag = nil, tag_name = nil, rest = nil, unary = nil, escaped = nil, binding = nil, text = nil;
          if (self.html == null) self.html = nil;
          if (self.handler == null) self.handler = nil;

        if ((($a = ($b = self.$last(), $b !== false && $b !== nil ?$scope.get('SPECIAL')['$[]'](self.$last()) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            close_tag = "</" + (self.$last()) + ">";
            body = self.html.$scan_until((new RegExp("" + close_tag)));
            return self.$special_tag(close_tag, body);
          } else if ((($a = self.html.$scan(/\<\!--/)) !== nil && (!$a.$$is_boolean || $a == true))) {
            comment = self.html.$scan_until(/--\>/);
            comment = comment['$[]']($range(0, -4, false));
            if ((($a = self.handler['$respond_to?']("comment")) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.handler.$comment(comment)
              } else {
              return nil
            };
          } else if ((($a = (tag = self.html.$scan($scope.get('START_TAG')))) !== nil && (!$a.$$is_boolean || $a == true))) {
            tag_name = self.html['$[]'](1);
            rest = self.html['$[]'](2);
            unary = self.html['$[]'](3);
            return self.$start_tag(tag, tag_name, rest, unary);
          } else if ((($a = self.html.$scan($scope.get('END_TAG'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            tag_name = self.html['$[]'](1);
            return self.$end_tag(tag_name, tag_name);
          } else if ((($a = (escaped = self.html.$scan(/\{\{\{(.*?)\}\}\}([^\}]|$)/))) !== nil && (!$a.$$is_boolean || $a == true))) {
            if ((($a = escaped['$[]'](-1)['$==']("}")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              (($a = [self.html.$pos()['$-'](1)]), $b = self.html, $b['$pos='].apply($b, $a), $a[$a.length-1])};
            return self.$text(self.html['$[]'](1));
          } else if ((($a = (binding = self.html.$scan(/\{\{/))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$start_binding()
          } else if ((($a = (text = self.html.$scan(/\{/))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$text(text)
          } else if ((($a = (text = self.html.$scan(/(?:[^\<\{]+)/))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$text(text)
            } else {
            return ($breaker.$v = nil, $breaker)
          }}, TMP_2.$$s = self, TMP_2), $a).call($b);
        return self.$end_tag(nil, nil);
      };

      def.$text = function(text) {
        var $a, self = this;

        if ((($a = self.handler['$respond_to?']("text")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.handler.$text(text)
          } else {
          return nil
        };
      };

      def.$start_binding = function() {
        var $a, $b, TMP_3, self = this, binding = nil, open_count = nil;

        binding = "";
        open_count = 1;
        ($a = ($b = self).$loop, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $a, $b, match = nil;
          if (self.html == null) self.html = nil;

        binding['$<<'](self.html.$scan_until(/(\{\{|\}\}|\n|\Z)/));
          match = self.html['$[]'](1);
          if (match['$==']("}}")) {
            open_count = open_count['$-'](1);
            if (open_count['$=='](0)) {
              return ($breaker.$v = nil, $breaker)
              } else {
              return nil
            };
          } else if (match['$==']("{{")) {
            return open_count = open_count['$+'](1)
          } else if ((($a = ((($b = match['$==']("\n")) !== false && $b !== nil) ? $b : self.html['$eos?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$raise_parse_error("unclosed binding: {" + (binding.$strip()))
            } else {
            return self.$fail("should not reach here")
          };}, TMP_3.$$s = self, TMP_3), $a).call($b);
        binding = binding['$[]']($range(0, -3, false));
        if ((($a = self.handler['$respond_to?']("binding")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.handler.$binding(binding)
          } else {
          return nil
        };
      };

      def.$raise_parse_error = function(error) {
        var $a, self = this, line_number = nil, error_str = nil;

        line_number = self.html.$pre_match().$count("\n")['$+'](1);
        error_str = error['$+'](" on line: " + (line_number));
        if ((($a = self.file_path) !== nil && (!$a.$$is_boolean || $a == true))) {
          error_str = error_str['$+'](" of " + (self.file_path))};
        return self.$fail($scope.get('HTMLParseError'), error_str);
      };

      def.$start_tag = function(tag, tag_name, rest, unary) {
        var $a, $b, TMP_4, self = this, section_tag = nil, attributes = nil;

        section_tag = (($a = tag_name['$[]'](0)['$=='](":")) ? tag_name['$[]'](1)['$=~'](/[A-Z]/) : $a);
        tag_name = tag_name.$downcase();
        if (tag_name['$==']("!doctype")) {
          if ((($a = self.handler['$respond_to?']("start_tag")) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.handler.$text(tag)};
          return nil;};
        if ((($a = $scope.get('BLOCK')['$[]'](tag_name)) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ($b = self.$last(), $b !== false && $b !== nil ?$scope.get('INLINE')['$[]'](self.$last()) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$end_tag(nil, self.$last())}};
        if ((($a = ($b = $scope.get('CLOSE_SELF')['$[]'](tag_name), $b !== false && $b !== nil ?self.$last()['$=='](tag_name) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$end_tag(nil, tag_name)};
        unary = ((($a = $scope.get('EMPTY')['$[]'](tag_name)) !== false && $a !== nil) ? $a : unary['$blank?']()['$!']());
        if ((($a = ((($b = unary) !== false && $b !== nil) ? $b : section_tag)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.stack.$push(tag_name)
        };
        if ((($a = self.handler['$respond_to?']("start_tag")) !== nil && (!$a.$$is_boolean || $a == true))) {
          attributes = $hash2([], {});
          ($a = ($b = rest.$scan($scope.get('ATTRIBUTES'))).$each, $a.$$p = (TMP_4 = function(match){var self = TMP_4.$$s || this, $a, $b, $c, $d, name = nil, value = nil;
if (match == null) match = nil;
          name = match['$[]'](0);
            value = ((($a = ((($b = ((($c = ((($d = match['$[]'](1)) !== false && $d !== nil) ? $d : match['$[]'](2))) !== false && $c !== nil) ? $c : match['$[]'](3))) !== false && $b !== nil) ? $b : $scope.get('FILL_IN_ATTRIBUTES')['$[]'](name))) !== false && $a !== nil) ? $a : "");
            return attributes['$[]='](name, value);}, TMP_4.$$s = self, TMP_4), $a).call($b);
          if (section_tag !== false && section_tag !== nil) {
            return self.handler.$start_section(tag_name, attributes, unary)
            } else {
            return self.handler.$start_tag(tag_name, attributes, unary)
          };
          } else {
          return nil
        };
      };

      def.$end_tag = function(tag, tag_name) {
        var $a, $b, TMP_5, $c, TMP_6, self = this, new_size = nil;

        new_size = 0;
        if (tag !== false && tag !== nil) {
          ($a = ($b = (self.stack.$size()['$-'](1))).$downto, $a.$$p = (TMP_5 = function(index){var self = TMP_5.$$s || this;
            if (self.stack == null) self.stack = nil;
if (index == null) index = nil;
          if (self.stack['$[]'](index)['$=='](tag_name)) {
              new_size = index;
              return ($breaker.$v = nil, $breaker);
              } else {
              return nil
            }}, TMP_5.$$s = self, TMP_5), $a).call($b, 0)};
        if (new_size['$>='](0)) {
          if ((($a = self.handler['$respond_to?']("end_tag")) !== nil && (!$a.$$is_boolean || $a == true))) {
            ($a = ($c = (self.stack.$size()['$-'](1))).$downto, $a.$$p = (TMP_6 = function(index){var self = TMP_6.$$s || this;
              if (self.handler == null) self.handler = nil;
              if (self.stack == null) self.stack = nil;
if (index == null) index = nil;
            return self.handler.$end_tag(self.stack['$[]'](index))}, TMP_6.$$s = self, TMP_6), $a).call($c, new_size)};
          return self.stack = self.stack['$[]']($range(0, new_size, true));
          } else {
          return nil
        };
      };

      return (def.$special_tag = function(close_tag, body) {
        var self = this;

        body = body['$[]']($range(0, (((-1)['$*'](close_tag.$size()))['$-'](1)), false));
        body = body.$gsub(/\<\!--(.*?)--\>/, "\\1").$gsub(/\<\!\[CDATA\[(.*?)\]\]\>/, "\\1");
        self.$text(body);
        return self.$end_tag(self.$last(), self.$last());
      }, nil) && 'special_tag';
    })(self, null);
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/server/html_parser/attribute_scope"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range;

  Opal.add_stubs(['$dup', '$each_pair', '$==', '$[]', '$process_event_binding', '$process_attribute', '$add_id_to_attributes', '$[]=', '$delete', '$save_binding', '$inspect', '$reject', '$to_proc', '$split', '$count', '$binding_parts_and_count', '$>', '$size', '$add_multiple_attribute', '$add_single_attribute', '$gsub', '$strip', '$=~', '$!', '$index', '$getter_to_setter', '$===', '$fail', '$add_string_template_renderer', '$+', '$new', '$close_scope', '$last', '$scope', '$templates', '$to_s', '$join', '$map']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'AttributeScope');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defn(self, '$process_attributes', function(tag_name, attributes) {
        var $a, $b, TMP_1, self = this, new_attributes = nil;

        new_attributes = attributes.$dup();
        ($a = ($b = attributes).$each_pair, $a.$$p = (TMP_1 = function(name, value){var self = TMP_1.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
        if (name['$[]']($range(0, 1, false))['$==']("e-")) {
            return self.$process_event_binding(tag_name, new_attributes, name, value)
            } else {
            return self.$process_attribute(tag_name, new_attributes, name, value)
          }}, TMP_1.$$s = self, TMP_1), $a).call($b);
        return new_attributes;
      });

      Opal.defn(self, '$process_event_binding', function(tag_name, attributes, name, value) {
        var $a, $b, $c, self = this, id = nil, event = nil;

        id = self.$add_id_to_attributes(attributes);
        event = name['$[]']($range(2, -1, false));
        if (tag_name['$==']("a")) {
          ($a = "href", $b = attributes, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, "")))};
        attributes.$delete(name);
        return self.$save_binding(id, "lambda { |__p, __t, __c, __id| Volt::EventBinding.new(__p, __t, __c, __id, " + (event.$inspect()) + ", Proc.new {|event| " + (value) + " })}");
      });

      Opal.defn(self, '$binding_parts_and_count', function(value) {
        var $a, $b, $c, TMP_2, self = this, parts = nil, binding_count = nil;

        parts = ($a = ($b = value.$split(/(\{\{[^\}]+\}\})/)).$reject, $a.$$p = "blank?".$to_proc(), $a).call($b);
        binding_count = ($a = ($c = parts).$count, $a.$$p = (TMP_2 = function(p){var self = TMP_2.$$s || this, $a, $b, $c;
if (p == null) p = nil;
        return ($a = ($b = (($c = p['$[]'](0)['$==']("{")) ? p['$[]'](1)['$==']("{") : $c), $b !== false && $b !== nil ?p['$[]'](-2)['$==']("}") : $b), $a !== false && $a !== nil ?p['$[]'](-1)['$==']("}") : $a)}, TMP_2.$$s = self, TMP_2), $a).call($c);
        return [parts, binding_count];
      });

      Opal.defn(self, '$process_attribute', function(tag_name, attributes, attribute_name, value) {
        var $a, $b, self = this, parts = nil, binding_count = nil, id = nil;

        $a = Opal.to_ary(self.$binding_parts_and_count(value)), parts = ($a[0] == null ? nil : $a[0]), binding_count = ($a[1] == null ? nil : $a[1]);
        if (binding_count['$>'](0)) {
          id = self.$add_id_to_attributes(attributes);
          if (parts.$size()['$>'](1)) {
            self.$add_multiple_attribute(tag_name, id, attribute_name, parts, value)
          } else if ((($a = (($b = parts.$size()['$=='](1)) ? binding_count['$=='](1) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$add_single_attribute(id, attribute_name, parts)};
          return attributes.$delete(attribute_name);
          } else {
          return nil
        };
      });

      Opal.defn(self, '$getter_to_setter', function(getter) {
        var $a, $b, self = this, prefix = nil;

        getter = getter.$strip().$gsub(/\(\s*\)/, "");
        if ((($a = ($b = getter['$[]'](0)['$=~'](/^[a-z_]/), $b !== false && $b !== nil ?getter['$[]'](-1)['$=='](")")['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ((($b = getter.$index(".")) !== false && $b !== nil) ? $b : getter.$index("@"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            prefix = ""
            } else {
            prefix = "self."
          };
          return "" + (prefix) + (getter) + "=(val)";
          } else {
          return "raise \"could not auto generate setter for `" + (getter) + "`\""
        };
      });

      Opal.defn(self, '$add_single_attribute', function(id, attribute_name, parts) {
        var self = this, getter = nil, setter = nil;

        getter = parts['$[]'](0)['$[]']($range(2, -2, true)).$strip();
        setter = self.$getter_to_setter(getter);
        return self.$save_binding(id, "lambda { |__p, __t, __c, __id| Volt::AttributeBinding.new(__p, __t, __c, __id, " + (attribute_name.$inspect()) + ", Proc.new { " + (getter) + " }, Proc.new { |val| " + (setter) + " }) }");
      });

      Opal.defn(self, '$add_multiple_attribute', function(tag_name, id, attribute_name, parts, content) {
        var self = this, $case = nil, string_template_renderer_path = nil;

        $case = attribute_name;if ("checked"['$===']($case) || "value"['$===']($case)) {if (parts.$size()['$>'](1)) {
          if (tag_name['$==']("textarea")) {
            self.$fail("The content of text area's can not be bound to multiple bindings.")
            } else {
            self.$fail("Multiple bindings can not be passed to a " + (attribute_name) + " binding: " + (parts.$inspect()))
          }}};
        string_template_renderer_path = self.$add_string_template_renderer(content);
        return self.$save_binding(id, "lambda { |__p, __t, __c, __id| Volt::AttributeBinding.new(__p, __t, __c, __id, " + (attribute_name.$inspect()) + ", Proc.new { Volt::StringTemplateRender.new(__p, __c, " + (string_template_renderer_path.$inspect()) + ") }) }");
      });

      Opal.defn(self, '$add_string_template_renderer', function(content) {
        var $a, $b, TMP_3, self = this, path = nil, new_handler = nil;
        if (self.path == null) self.path = nil;
        if (self.binding_number == null) self.binding_number = nil;

        path = self.path['$+']("/_rv" + (self.binding_number));
        new_handler = $scope.get('ViewHandler').$new(path, false);
        self.binding_number = self.binding_number['$+'](1);
        $scope.get('SandlebarsParser').$new(content, new_handler);
        new_handler.$scope().$last().$close_scope();
        ($a = ($b = new_handler.$templates()).$each_pair, $a.$$p = (TMP_3 = function(key, value){var self = TMP_3.$$s || this;
          if (self.handler == null) self.handler = nil;
if (key == null) key = nil;if (value == null) value = nil;
        return self.handler.$templates()['$[]='](key, value)}, TMP_3.$$s = self, TMP_3), $a).call($b);
        return path;
      });

      Opal.defn(self, '$add_id_to_attributes', function(attributes) {
        var $a, $b, $c, self = this, id = nil;
        if (self.binding_number == null) self.binding_number = nil;

        id = ($a = "id", $b = attributes, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, "id" + (self.binding_number))));
        self.binding_number = self.binding_number['$+'](1);
        return id.$to_s();
      });

      Opal.defn(self, '$attribute_string', function(attributes) {
        var $a, $b, TMP_4, self = this, attr_str = nil;

        attr_str = ($a = ($b = attributes).$map, $a.$$p = (TMP_4 = function(v){var self = TMP_4.$$s || this;
if (v == null) v = nil;
        return "" + (v['$[]'](0)) + "=\"" + (v['$[]'](1)) + "\""}, TMP_4.$$s = self, TMP_4), $a).call($b).$join(" ");
        if (attr_str.$size()['$>'](0)) {
          attr_str = " "['$+'](attr_str)};
        return attr_str;
      });
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/server/html_parser/view_scope"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$include', '$attr_reader', '$attr_accessor', '$<<', '$strip', '$index', '$[]', '$===', '$add_if', '$add_else', '$blank?', '$fail', '$add_template', '$=~', '$add_each', '$add_content_binding', '$close_scope', '$html', '$save_binding', '$+', '$scope', '$new', '$gsub', '$inspect', '$!', '$tr', '$each_pair', '$binding_parts_and_count', '$>', '$==', '$size', '$getter_to_setter', '$parent_fetcher', '$last_method_name', '$join', '$last', '$pop', '$templates', '$path', '$bindings', '$[]=']);
  self.$require("volt/server/html_parser/attribute_scope");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ViewScope(){};
      var self = $ViewScope = $klass($base, $super, 'ViewScope', $ViewScope);

      var def = self.$$proto, $scope = self.$$scope;

      def.html = def.handler = def.binding_number = def.path = def.bindings = nil;
      self.$include($scope.get('AttributeScope'));

      self.$attr_reader("html", "bindings");

      self.$attr_accessor("path", "binding_number");

      def.$initialize = function(handler, path) {
        var self = this;

        self.handler = handler;
        self.path = path;
        self.html = "";
        self.bindings = $hash2([], {});
        return self.binding_number = 0;
      };

      def['$<<'] = function(html) {
        var self = this;

        return self.html['$<<'](html);
      };

      def.$add_binding = function(content) {
        var $a, self = this, index = nil, first_symbol = nil, args = nil, $case = nil;

        content = content.$strip();
        index = content.$index(/[ \(]/);
        if (index !== false && index !== nil) {
          first_symbol = content['$[]']($range(0, index, true));
          args = content['$[]']($range(index, -1, false)).$strip();
          return (function() {$case = first_symbol;if ("if"['$===']($case)) {return self.$add_if(args)}else if ("elsif"['$===']($case)) {return self.$add_else(args)}else if ("else"['$===']($case)) {if ((($a = args['$blank?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$add_else(nil)
            } else {
            return self.$fail("else does not take a conditional, " + (content) + " was provided.")
          }}else if ("template"['$===']($case)) {return self.$add_template(args)}else {if ((($a = content['$=~'](/.each\s+do\s+\|/)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$add_each(content, false)
          } else if ((($a = content['$=~'](/.each_with_index\s+do\s+\|/)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$add_each(content, true)
            } else {
            return self.$add_content_binding(content)
          }}})();
          } else {
          return (function() {$case = content;if ("end"['$===']($case)) {return self.$close_scope()}else if ("else"['$===']($case)) {return self.$add_else(nil)}else {return self.$add_content_binding(content)}})()
        };
      };

      def.$add_content_binding = function(content) {
        var self = this;

        self.handler.$html()['$<<']("<!-- $" + (self.binding_number) + " --><!-- $/" + (self.binding_number) + " -->");
        self.$save_binding(self.binding_number, "lambda { |__p, __t, __c, __id| Volt::ContentBinding.new(__p, __t, __c, __id, Proc.new { " + (content) + " }) }");
        return self.binding_number = self.binding_number['$+'](1);
      };

      def.$add_if = function(content) {
        var self = this;

        self.handler.$scope()['$<<']($scope.get('IfViewScope').$new(self.handler, self.path['$+']("/__ifg" + (self.binding_number)), content));
        return self.binding_number = self.binding_number['$+'](1);
      };

      def.$add_else = function(content) {
        var self = this;

        return self.$fail("#else can only be added inside of an if block");
      };

      def.$add_each = function(content, with_index) {
        var self = this;

        return self.handler.$scope()['$<<']($scope.get('EachScope').$new(self.handler, self.path['$+']("/__each" + (self.binding_number)), content, with_index));
      };

      def.$add_template = function(content) {
        var self = this;

        content = content.$strip().$gsub(/^\(/, "").$gsub(/\)$/, "");
        self.handler.$html()['$<<']("<!-- $" + (self.binding_number) + " --><!-- $/" + (self.binding_number) + " -->");
        self.$save_binding(self.binding_number, "lambda { |__p, __t, __c, __id| Volt::TemplateBinding.new(__p, __t, __c, __id, " + (self.path.$inspect()) + ", Proc.new { [" + (content) + "] }) }");
        return self.binding_number = self.binding_number['$+'](1);
      };

      def.$parent_fetcher = function(getter) {
        var $a, $b, self = this, parent = nil;

        parent = getter.$strip().$gsub(/[.][^.]+$/, "");
        if ((($a = ((($b = parent['$blank?']()) !== false && $b !== nil) ? $b : getter.$index(".")['$!']())) !== nil && (!$a.$$is_boolean || $a == true))) {
          parent = "self"};
        return parent;
      };

      def.$last_method_name = function(getter) {
        var self = this;

        return getter.$strip()['$[]'](/[^.]+$/);
      };

      def.$add_component = function(tag_name, attributes, unary) {
        var $a, $b, TMP_1, self = this, component_name = nil, data_hash = nil, arguments$ = nil;

        component_name = tag_name['$[]']($range(1, -1, false)).$tr(":", "/");
        self.handler.$html()['$<<']("<!-- $" + (self.binding_number) + " --><!-- $/" + (self.binding_number) + " -->");
        data_hash = [];
        ($a = ($b = attributes).$each_pair, $a.$$p = (TMP_1 = function(name, value){var self = TMP_1.$$s || this, $a, $b, parts = nil, binding_count = nil, getter = nil, setter = nil, parent = nil;
if (name == null) name = nil;if (value == null) value = nil;
        name = name.$tr("-", "_");
          $a = Opal.to_ary(self.$binding_parts_and_count(value)), parts = ($a[0] == null ? nil : $a[0]), binding_count = ($a[1] == null ? nil : $a[1]);
          if (binding_count['$>'](0)) {
            if (binding_count['$>'](1)) {
              return nil
            } else if ((($a = (($b = parts.$size()['$=='](1)) ? binding_count['$=='](1) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              getter = value['$[]']($range(2, -2, true)).$strip();
              data_hash['$<<']("" + (name.$inspect()) + " => Proc.new { " + (getter) + " }");
              setter = self.$getter_to_setter(getter);
              data_hash['$<<']("" + ((name['$+']("=")).$inspect()) + " => Proc.new { |val| " + (setter) + " }");
              parent = self.$parent_fetcher(getter);
              data_hash['$<<']("" + ((name['$+']("_parent")).$inspect()) + " => Proc.new { " + (parent) + " }");
              return data_hash['$<<']("" + ((name['$+']("_last_method")).$inspect()) + " => " + (self.$last_method_name(getter).$inspect()));
              } else {
              return nil
            }
            } else {
            return data_hash['$<<']("" + (name.$inspect()) + " => " + (value.$inspect()))
          };}, TMP_1.$$s = self, TMP_1), $a).call($b);
        arguments$ = "" + (component_name.$inspect()) + ", { " + (data_hash.$join(",")) + " }";
        self.$save_binding(self.binding_number, "lambda { |__p, __t, __c, __id| Volt::ComponentBinding.new(__p, __t, __c, __id, " + (self.path.$inspect()) + ", Proc.new { [" + (arguments$) + "] }) }");
        return self.binding_number = self.binding_number['$+'](1);
      };

      def.$add_textarea = function(tag_name, attributes, unary) {
        var self = this;

        self.handler.$scope()['$<<']($scope.get('TextareaScope').$new(self.handler, self.path['$+']("/__txtarea" + (self.binding_number)), attributes));
        self.binding_number = self.binding_number['$+'](1);
        if (unary !== false && unary !== nil) {
          return self.handler.$last().$close_scope()
          } else {
          return nil
        };
      };

      def.$close_scope = function(pop) {
        var $a, self = this, scope = nil, template = nil;

        if (pop == null) {
          pop = true
        }
        if (pop !== false && pop !== nil) {
          scope = self.handler.$scope().$pop()
          } else {
          scope = self.handler.$last()
        };
        if ((($a = self.handler.$templates()['$[]'](scope.$path())) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$fail("template path already exists: " + (scope.$path()))};
        template = $hash2(["html"], {"html": scope.$html()});
        if (scope.$bindings().$size()['$>'](0)) {
          template['$[]=']("bindings", scope.$bindings())};
        return self.handler.$templates()['$[]='](scope.$path(), template);
      };

      return (def.$save_binding = function(binding_number, code) {
        var $a, $b, $c, self = this;

        ($a = binding_number, $b = self.bindings, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, [])));
        return self.bindings['$[]'](binding_number)['$<<'](code);
      }, nil) && 'save_binding';
    })(self, null)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/server/html_parser/if_view_scope"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$binding_number', '$last', '$binding_number=', '$+', '$new_path', '$close_scope', '$<<', '$scope', '$path', '$join', '$map', '$[]', '$nil?', '$inspect', '$save_binding', '$html']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $IfViewScope(){};
      var self = $IfViewScope = $klass($base, $super, 'IfViewScope', $IfViewScope);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

      def.path = def.handler = def.original_path = def.path_number = def.branches = def.last_content = def.if_binding_number = nil;
      def.$initialize = TMP_1 = function(handler, path, content) {
        var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        TMP_1.$$p = null;
        Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [handler, path]);
        self.original_path = self.path;
        self.last_content = content;
        self.branches = [];
        self.if_binding_number = self.handler.$last().$binding_number();
        ($a = self.handler.$last(), $a['$binding_number=']($a.$binding_number()['$+'](1)));
        self.path_number = 0;
        return self.$new_path();
      };

      def.$new_path = function() {
        var self = this;

        self.path = self.original_path['$+']("/__if" + (self.path_number));
        return self.path_number = self.path_number['$+'](1);
      };

      def.$add_else = function(content) {
        var self = this;

        self.$close_scope(false);
        self.last_content = content;
        self.html = "";
        self.bindings = $hash2([], {});
        self.handler.$scope()['$<<'](self);
        self.binding_number = 0;
        return self.$new_path();
      };

      return (def.$close_scope = TMP_2 = function(final$) {
        var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, $yield = $iter || nil, branches = nil, new_scope = nil;

        if (final$ == null) {
          final$ = true
        }
        TMP_2.$$p = null;
        self.branches['$<<']([self.last_content, self.$path()]);
        Opal.find_super_dispatcher(self, 'close_scope', TMP_2, null).apply(self, []);
        if (final$ !== false && final$ !== nil) {
          branches = ($a = ($b = self.branches).$map, $a.$$p = (TMP_3 = function(branch){var self = TMP_3.$$s || this, $a, content = nil;
if (branch == null) branch = nil;
          content = branch['$[]'](0);
            if ((($a = content['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              content = nil.$inspect()
              } else {
              content = "Proc.new { " + (branch['$[]'](0)) + " }"
            };
            return "[" + (content) + ", " + (branch['$[]'](1).$inspect()) + "]";}, TMP_3.$$s = self, TMP_3), $a).call($b).$join(", ");
          new_scope = self.handler.$last();
          new_scope.$save_binding(self.if_binding_number, "lambda { |__p, __t, __c, __id| Volt::IfBinding.new(__p, __t, __c, __id, [" + (branches) + "]) }");
          return new_scope.$html()['$<<']("<!-- $" + (self.if_binding_number) + " --><!-- $/" + (self.if_binding_number) + " -->");
          } else {
          return nil
        };
      }, nil) && 'close_scope';
    })(self, $scope.get('ViewScope'))
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/server/html_parser/view_handler"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$attr_reader', '$html', '$last', '$+', '$new', '$<<', '$add_binding', '$[]', '$===', '$add_component', '$==', '$add_textarea', '$process_attributes', '$attribute_string', '$close_scope', '$path']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ViewHandler(){};
      var self = $ViewHandler = $klass($base, $super, 'ViewHandler', $ViewHandler);

      var def = self.$$proto, $scope = self.$$scope;

      def.scope = def.in_textarea = def.in_section = def.original_path = nil;
      self.$attr_reader("templates", "scope");

      def.$html = function() {
        var self = this;

        return self.$last().$html();
      };

      def.$last = function() {
        var self = this;

        return self.scope.$last();
      };

      def.$initialize = function(initial_path, allow_sections) {
        var self = this;

        if (allow_sections == null) {
          allow_sections = true
        }
        self.original_path = initial_path;
        if (allow_sections !== false && allow_sections !== nil) {
          initial_path = initial_path['$+']("/body")};
        self.scope = [$scope.get('ViewScope').$new(self, initial_path)];
        return self.templates = $hash2([], {});
      };

      def.$comment = function(comment) {
        var self = this;

        return self.$last()['$<<']("<!--" + (comment) + "-->");
      };

      def.$text = function(text) {
        var self = this;

        return self.$last()['$<<'](text);
      };

      def.$binding = function(binding) {
        var self = this;

        return self.scope.$last().$add_binding(binding);
      };

      def.$start_tag = function(tag_name, attributes, unary) {
        var self = this, $case = nil, attr_str = nil;

        return (function() {$case = tag_name['$[]'](0);if (":"['$===']($case)) {return self.$last().$add_component(tag_name, attributes, unary)}else {if (tag_name['$==']("textarea")) {
          self.in_textarea = true;
          return self.$last().$add_textarea(tag_name, attributes, unary);
          } else {
          attributes = self.$last().$process_attributes(tag_name, attributes);
          attr_str = self.$last().$attribute_string(attributes);
          return self.$last()['$<<']("<" + (tag_name) + (attr_str) + ((function() {if (unary !== false && unary !== nil) {
            return " /"
            } else {
            return ""
          }; return nil; })()) + ">");
        }}})();
      };

      def.$end_tag = function(tag_name) {
        var $a, $b, self = this;

        if ((($a = ($b = self.in_textarea, $b !== false && $b !== nil ?tag_name['$==']("textarea") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$last().$close_scope();
          return self.in_textarea = nil;
          } else {
          return self.$last()['$<<']("</" + (tag_name) + ">")
        };
      };

      return (def.$start_section = function(tag_name, attributes, unary) {
        var $a, self = this, path = nil, new_path = nil;

        path = self.$last().$path();
        if ((($a = self.in_section) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$last().$close_scope()
          } else {
          self.templates = $hash2([], {})
        };
        self.in_section = tag_name['$[]']($range(1, -1, false));
        new_path = self.original_path['$+']("/")['$+'](self.in_section);
        return self.scope = [$scope.get('ViewScope').$new(self, new_path)];
      }, nil) && 'start_section';
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/server/html_parser/each_scope"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$split', '$gsub', '$binding_number', '$[]', '$scope', '$binding_number=', '$+', '$<<', '$html', '$save_binding', '$last', '$inspect']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $EachScope(){};
      var self = $EachScope = $klass($base, $super, 'EachScope', $EachScope);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

      def.variable_name = def.handler = def.path = def.content = def.index_name = nil;
      def.$initialize = TMP_1 = function(handler, path, content, with_index) {
        var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        TMP_1.$$p = null;
        Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [handler, path]);
        if (with_index !== false && with_index !== nil) {
          $a = Opal.to_ary(content.$split(/.each_with_index\s+do\s+\|/)), self.content = ($a[0] == null ? nil : $a[0]), self.variable_name = ($a[1] == null ? nil : $a[1]);
          return $a = Opal.to_ary(self.variable_name.$gsub(/\|/, "").$split(/\s*,\s*/)), self.variable_name = ($a[0] == null ? nil : $a[0]), self.index_name = ($a[1] == null ? nil : $a[1]);
          } else {
          $a = Opal.to_ary(content.$split(/.each\s+do\s+\|/)), self.content = ($a[0] == null ? nil : $a[0]), self.variable_name = ($a[1] == null ? nil : $a[1]);
          return self.variable_name = self.variable_name.$gsub(/\|/, "");
        };
      };

      return (def.$close_scope = TMP_2 = function() {var $zuper = $slice.call(arguments, 0);
        var $a, self = this, $iter = TMP_2.$$p, $yield = $iter || nil, binding_number = nil;

        TMP_2.$$p = null;
        binding_number = self.handler.$scope()['$[]'](-2).$binding_number();
        ($a = self.handler.$scope()['$[]'](-2), $a['$binding_number=']($a.$binding_number()['$+'](1)));
        self.path = self.path['$+']("/__template/" + (binding_number));
        Opal.find_super_dispatcher(self, 'close_scope', TMP_2, $iter).apply(self, $zuper);
        self.handler.$html()['$<<']("<!-- $" + (binding_number) + " --><!-- $/" + (binding_number) + " -->");
        return self.handler.$scope().$last().$save_binding(binding_number, "lambda { |__p, __t, __c, __id| Volt::EachBinding.new(__p, __t, __c, __id, Proc.new { " + (self.content) + " }, " + (self.variable_name.$inspect()) + ", " + (self.index_name.$inspect()) + ", " + (self.path.$inspect()) + ") }");
      }, nil) && 'close_scope';
    })(self, $scope.get('ViewScope'))
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/server/html_parser/textarea_scope"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$<<', '$pop', '$scope', '$[]', '$[]=', '$process_attributes', '$last', '$html', '$attribute_string']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $TextareaScope(){};
      var self = $TextareaScope = $klass($base, $super, 'TextareaScope', $TextareaScope);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      def.html = def.handler = def.attributes = nil;
      def.$initialize = TMP_1 = function(handler, path, attributes) {
        var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        TMP_1.$$p = null;
        Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [handler, path]);
        return self.attributes = attributes;
      };

      def.$add_binding = function(content) {
        var self = this;

        return self.html['$<<']("{{" + (content) + "}}");
      };

      return (def.$close_scope = function(pop) {
        var $a, self = this, attributes = nil;

        if (pop == null) {
          pop = true
        }
        self.handler.$scope().$pop();
        attributes = self.attributes;
        if ((($a = self.html['$[]'](/\{\{[^\}]+\}\}/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          attributes['$[]=']("value", self.html);
          self.html = "";};
        attributes = self.handler.$last().$process_attributes("textarea", attributes);
        return self.handler.$last().$html()['$<<']("<textarea" + (self.$attribute_string(attributes)) + ">" + (self.html) + "</textarea>");
      }, nil) && 'close_scope';
    })(self, $scope.get('ViewScope'))
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/server/html_parser/view_parser"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$attr_reader', '$new', '$close_scope', '$last', '$scope', '$templates', '$deep_clone', '$each_pair', '$[]', '$[]=', '$map', '$eval']);
  self.$require("volt/server/html_parser/sandlebars_parser");
  self.$require("volt/server/html_parser/view_scope");
  self.$require("volt/server/html_parser/if_view_scope");
  self.$require("volt/server/html_parser/view_handler");
  self.$require("volt/server/html_parser/each_scope");
  self.$require("volt/server/html_parser/textarea_scope");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ViewParser(){};
      var self = $ViewParser = $klass($base, $super, 'ViewParser', $ViewParser);

      var def = self.$$proto, $scope = self.$$scope;

      def.templates = nil;
      self.$attr_reader("templates");

      def.$initialize = function(html, template_path) {
        var self = this, handler = nil;

        self.template_path = template_path;
        handler = $scope.get('ViewHandler').$new(template_path);
        $scope.get('SandlebarsParser').$new(html, handler);
        handler.$scope().$last().$close_scope();
        return self.templates = handler.$templates();
      };

      return (def.$data = function() {
        var $a, $b, TMP_1, self = this, templates = nil;

        templates = self.templates.$deep_clone();
        ($a = ($b = templates).$each_pair, $a.$$p = (TMP_1 = function(name, value){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (name == null) name = nil;if (value == null) value = nil;
        if ((($a = value['$[]']("bindings")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = value['$[]']("bindings")).$each_pair, $a.$$p = (TMP_2 = function(number, binding){var self = TMP_2.$$s || this, $a, $b, TMP_3;
if (number == null) number = nil;if (binding == null) binding = nil;
            return value['$[]']("bindings")['$[]='](number, ($a = ($b = binding).$map, $a.$$p = (TMP_3 = function(code){var self = TMP_3.$$s || this;
if (code == null) code = nil;
              return self.$eval(code)}, TMP_3.$$s = self, TMP_3), $a).call($b))}, TMP_2.$$s = self, TMP_2), $a).call($b)
            } else {
            return nil
          }}, TMP_1.$$s = self, TMP_1), $a).call($b);
        return templates;
      }, nil) && 'data';
    })(self, null)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/tasks/task_handler"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$==', '$_user_id', '$cookies', '$nil?', '$[]=', '$call', '$to_proc', '$tasks', '$name']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $TaskHandler(){};
      var self = $TaskHandler = $klass($base, $super, 'TaskHandler', $TaskHandler);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
        return (Opal.defs(self, '$method_missing', TMP_1 = function(name, args) {
          var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil, meta_data = nil, user_id = nil;
          if ($gvars.page == null) $gvars.page = nil;

          args = $slice.call(arguments, 1);
          TMP_1.$$p = null;
          meta_data = $hash2([], {});
          user_id = $gvars.page.$cookies().$_user_id();
          if ((($a = user_id['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            meta_data['$[]=']("user_id", user_id)
          };
          return ($a = ($b = $gvars.page.$tasks()).$call, $a.$$p = block.$to_proc(), $a).apply($b, [self.$name(), name, meta_data].concat(args));
        }), nil) && 'method_missing'}
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/server/component_templates"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$+', '$generate_routes_code', '$generate_view_code', '$<<', '$generate_controller_code', '$generate_model_code', '$generate_tasks_code', '$each', '$[]', '$size', '$*', '$new', '$read', '$each_pair', '$inspect', '$join', '$page_reference', '$templates', '$sort', '$match', '$exist?', '$map', '$name', '$known_handlers']);
  self.$require("volt/server/html_parser/view_parser");
  self.$require("volt/tasks/task_handler");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ComponentTemplates(){};
      var self = $ComponentTemplates = $klass($base, $super, 'ComponentTemplates', $ComponentTemplates);

      var def = self.$$proto, $scope = self.$$scope;

      def.client = def.component_path = nil;
      def.$initialize = function(component_path, component_name, client) {
        var self = this;

        if (client == null) {
          client = true
        }
        self.component_path = component_path;
        self.component_name = component_name;
        return self.client = client;
      };

      def.$code = function() {
        var $a, self = this, code = nil;

        code = self.$generate_routes_code()['$+'](self.$generate_view_code());
        if ((($a = self.client) !== nil && (!$a.$$is_boolean || $a == true))) {
          code['$<<'](self.$generate_controller_code()['$+'](self.$generate_model_code())['$+'](self.$generate_tasks_code()))};
        return code;
      };

      def.$page_reference = function() {
        var self = this;

        return "$page";
      };

      def.$generate_view_code = function() {
        var $a, $b, TMP_1, self = this, code = nil, views_path = nil;

        code = "";
        views_path = "" + (self.component_path) + "/views/";
        ($a = ($b = $scope.get('Dir')['$[]']("" + (views_path) + "*/*.html").$sort()).$each, $a.$$p = (TMP_1 = function(view_path){var self = TMP_1.$$s || this, $a, $b, TMP_2, template_path = nil, all_templates = nil, binding_initializers = nil;
          if (self.component_name == null) self.component_name = nil;
if (view_path == null) view_path = nil;
        template_path = view_path['$[]']($range(views_path.$size(), (((-1)['$*']((".html".$size()['$+'](1))))), false));
          template_path = "" + (self.component_name) + "/" + (template_path);
          all_templates = $scope.get('ViewParser').$new($scope.get('File').$read(view_path), template_path);
          binding_initializers = [];
          return ($a = ($b = all_templates.$templates()).$each_pair, $a.$$p = (TMP_2 = function(name, template){var self = TMP_2.$$s || this, $a, $b, TMP_3, binding_code = nil;
if (name == null) name = nil;if (template == null) template = nil;
          binding_code = [];
            if ((($a = template['$[]']("bindings")) !== nil && (!$a.$$is_boolean || $a == true))) {
              ($a = ($b = template['$[]']("bindings")).$each_pair, $a.$$p = (TMP_3 = function(key, value){var self = TMP_3.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
              return binding_code['$<<']("" + (key.$inspect()) + " => [" + (value.$join(", ")) + "]")}, TMP_3.$$s = self, TMP_3), $a).call($b)};
            binding_code = "{" + (binding_code.$join(", ")) + "}";
            return code['$<<']("" + (self.$page_reference()) + ".add_template(" + (name.$inspect()) + ", " + (template['$[]']("html").$inspect()) + ", " + (binding_code) + ")\n");}, TMP_2.$$s = self, TMP_2), $a).call($b);}, TMP_1.$$s = self, TMP_1), $a).call($b);
        return code;
      };

      def.$generate_controller_code = function() {
        var $a, $b, TMP_4, self = this, code = nil, controllers_path = nil;

        code = "";
        controllers_path = "" + (self.component_path) + "/controllers/";
        ($a = ($b = $scope.get('Dir')['$[]']("" + (controllers_path) + "*_controller.rb").$sort()).$each, $a.$$p = (TMP_4 = function(controller_path){var self = TMP_4.$$s || this;
if (controller_path == null) controller_path = nil;
        return code['$<<']($scope.get('File').$read(controller_path)['$+']("\n\n"))}, TMP_4.$$s = self, TMP_4), $a).call($b);
        return code;
      };

      def.$generate_model_code = function() {
        var $a, $b, TMP_5, self = this, code = nil, models_path = nil;

        code = "";
        models_path = "" + (self.component_path) + "/models/";
        ($a = ($b = $scope.get('Dir')['$[]']("" + (models_path) + "*.rb").$sort()).$each, $a.$$p = (TMP_5 = function(model_path){var self = TMP_5.$$s || this, model_name = nil;
if (model_path == null) model_path = nil;
        code['$<<']($scope.get('File').$read(model_path)['$+']("\n\n"));
          model_name = model_path.$match(/([^\/]+)[.]rb$/)['$[]'](1);
          return code['$<<']("" + (self.$page_reference()) + ".add_model(" + (model_name.$inspect()) + ")\n\n");}, TMP_5.$$s = self, TMP_5), $a).call($b);
        return code;
      };

      def.$generate_routes_code = function() {
        var $a, self = this, code = nil, routes_path = nil;

        code = "";
        routes_path = "" + (self.component_path) + "/config/routes.rb";
        if ((($a = $scope.get('File')['$exist?'](routes_path)) !== nil && (!$a.$$is_boolean || $a == true))) {
          code['$<<']("" + (self.$page_reference()) + ".add_routes do\n");
          code['$<<']("\n"['$+']($scope.get('File').$read(routes_path))['$+']("\n"));
          code['$<<']("end\n\n");};
        return code;
      };

      return (def.$generate_tasks_code = function() {
        var $a, $b, TMP_6, self = this;

        return ($a = ($b = $scope.get('TaskHandler').$known_handlers()).$map, $a.$$p = (TMP_6 = function(handler){var self = TMP_6.$$s || this;
if (handler == null) handler = nil;
        return "class " + (handler.$name()) + " < Volt::TaskHandler; end"}, TMP_6.$$s = self, TMP_6), $a).call($b).$join("\n");
      }, nil) && 'generate_tasks_code';
    })(self, null)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/server/rack/asset_files"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$component', '$join', '$fail', '$inspect', '$component_name', '$exist?', '$read', '$instance_eval', '$[]', '$[]=', '$component_paths', '$each', '$load_dependencies', '$add_assets', '$<<', '$keys', '$directory?', '$===', '$+', '$map', '$size', '$sort', '$source_maps?', '$logical_path', '$to_a', '$environment', '$uniq', '$gsub']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $AssetFiles(){};
      var self = $AssetFiles = $klass($base, $super, 'AssetFiles', $AssetFiles);

      var def = self.$$proto, $scope = self.$$scope;

      def.included_components = def.component_paths = def.assets = def.components = nil;
      def.$initialize = function(component_name, component_paths) {
        var self = this;

        self.component_paths = component_paths;
        self.assets = [];
        self.included_components = $hash2([], {});
        self.components = [];
        self.$component("volt");
        return self.$component(component_name);
      };

      def.$load_dependencies = function(path) {
        var $a, self = this, dependencies_file = nil, code = nil;

        if (path !== false && path !== nil) {
          dependencies_file = $scope.get('File').$join(path, "config/dependencies.rb")
          } else {
          self.$fail("Unable to find component " + (self.$component_name().$inspect()))
        };
        if ((($a = $scope.get('File')['$exist?'](dependencies_file)) !== nil && (!$a.$$is_boolean || $a == true))) {
          code = $scope.get('File').$read(dependencies_file);
          return self.$instance_eval(code, dependencies_file, 0);
          } else {
          return nil
        };
      };

      def.$component = function(name) {
        var $a, $b, TMP_1, self = this, component_path = nil;

        if ((($a = self.included_components['$[]'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          self.included_components['$[]='](name, true);
          component_path = self.component_paths.$component_paths(name);
          if (component_path !== false && component_path !== nil) {
            } else {
            self.$fail("Unable to find component '" + (name) + "', make sure the gem is included in your Gemfile")
          };
          return ($a = ($b = component_path).$each, $a.$$p = (TMP_1 = function(path){var self = TMP_1.$$s || this;
            if (self.components == null) self.components = nil;
if (path == null) path = nil;
          self.$load_dependencies(path);
            self.$add_assets(path);
            return self.components['$<<']([path, name]);}, TMP_1.$$s = self, TMP_1), $a).call($b);
        };
      };

      def.$components = function() {
        var self = this;

        return self.included_components.$keys();
      };

      def.$javascript_file = function(url) {
        var self = this;

        return self.assets['$<<'](["javascript_file", url]);
      };

      def.$css_file = function(url) {
        var self = this;

        return self.assets['$<<'](["css_file", url]);
      };

      def.$component_paths = function() {
        var self = this;

        return self.components;
      };

      def.$add_assets = function(path) {
        var $a, self = this, asset_folder = nil;

        asset_folder = $scope.get('File').$join(path, "assets");
        if ((($a = $scope.get('File')['$directory?'](asset_folder)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.assets['$<<'](["folder", asset_folder])
          } else {
          return nil
        };
      };

      def.$javascript_files = function(opal_files) {
        var $a, $b, TMP_2, $c, TMP_4, self = this, javascript_files = nil, opal_js_files = nil;

        javascript_files = [];
        ($a = ($b = self.assets).$each, $a.$$p = (TMP_2 = function(type, path){var self = TMP_2.$$s || this, $a, $b, TMP_3, $case = nil;
if (type == null) type = nil;if (path == null) path = nil;
        return (function() {$case = type;if ("folder"['$===']($case)) {return javascript_files = javascript_files['$+'](($a = ($b = $scope.get('Dir')['$[]']("" + (path) + "/**/*.js").$sort()).$map, $a.$$p = (TMP_3 = function(folder){var self = TMP_3.$$s || this;
if (folder == null) folder = nil;
          return "/assets"['$+'](folder['$[]']($range(path.$size(), -1, false)))}, TMP_3.$$s = self, TMP_3), $a).call($b))}else if ("javascript_file"['$===']($case)) {return javascript_files['$<<'](path)}else { return nil }})()}, TMP_2.$$s = self, TMP_2), $a).call($b);
        opal_js_files = [];
        if ((($a = $scope.get('Volt')['$source_maps?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          opal_js_files = opal_js_files['$+'](($a = ($c = opal_files.$environment()['$[]']("volt/page/page").$to_a()).$map, $a.$$p = (TMP_4 = function(v){var self = TMP_4.$$s || this;
if (v == null) v = nil;
          return "/assets/"['$+'](v.$logical_path())['$+']("?body=1")}, TMP_4.$$s = self, TMP_4), $a).call($c))
          } else {
          opal_js_files['$<<']("/assets/volt/page/page.js")
        };
        opal_js_files['$<<']("/components/main.js");
        javascript_files = javascript_files['$+'](opal_js_files);
        return javascript_files.$uniq();
      };

      return (def.$css_files = function() {
        var $a, $b, TMP_5, self = this, css_files = nil;

        css_files = [];
        ($a = ($b = self.assets).$each, $a.$$p = (TMP_5 = function(type, path){var self = TMP_5.$$s || this, $a, $b, TMP_6, $case = nil;
if (type == null) type = nil;if (path == null) path = nil;
        return (function() {$case = type;if ("folder"['$===']($case)) {return css_files = css_files['$+'](($a = ($b = $scope.get('Dir')['$[]']("" + (path) + "/**/[^_]*.{css,scss}").$sort()).$map, $a.$$p = (TMP_6 = function(folder){var self = TMP_6.$$s || this;
if (folder == null) folder = nil;
          return "/assets"['$+'](folder['$[]']($range(path.$size(), -1, false)).$gsub(/[.]scss$/, ""))}, TMP_6.$$s = self, TMP_6), $a).call($b))}else if ("css_file"['$===']($case)) {return css_files['$<<'](path)}else { return nil }})()}, TMP_5.$$s = self, TMP_5), $a).call($b);
        return css_files.$uniq();
      }, nil) && 'css_files';
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/server/rack/component_code"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$generate_config_code', '$new', '$each', '$<<', '$code', '$component_paths', '$inspect', '$to_h', '$public', '$config']);
  self.$require("volt/server/html_parser/view_parser");
  self.$require("volt/server/component_templates");
  self.$require("volt/server/rack/asset_files");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ComponentCode(){};
      var self = $ComponentCode = $klass($base, $super, 'ComponentCode', $ComponentCode);

      var def = self.$$proto, $scope = self.$$scope;

      def.client = def.component_name = def.component_paths = nil;
      def.$initialize = function(component_name, component_paths, client) {
        var self = this;

        if (client == null) {
          client = true
        }
        self.component_name = component_name;
        self.component_paths = component_paths;
        return self.client = client;
      };

      def.$code = function() {
        var $a, $b, TMP_1, self = this, code = nil, asset_files = nil;

        code = (function() {if ((($a = self.client) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$generate_config_code()
          } else {
          return ""
        }; return nil; })();
        asset_files = $scope.get('AssetFiles').$new(self.component_name, self.component_paths);
        ($a = ($b = asset_files.$component_paths()).$each, $a.$$p = (TMP_1 = function(component_path, component_name){var self = TMP_1.$$s || this;
          if (self.client == null) self.client = nil;
if (component_path == null) component_path = nil;if (component_name == null) component_name = nil;
        code['$<<']($scope.get('ComponentTemplates').$new(component_path, component_name, self.client).$code());
          return code['$<<']("\n\n");}, TMP_1.$$s = self, TMP_1), $a).call($b);
        return code;
      };

      return (def.$generate_config_code = function() {
        var self = this;

        return "\nVolt.setup_client_config(" + ($scope.get('Volt').$config().$public().$to_h().$inspect()) + ")\n";
      }, nil) && 'generate_config_code';
    })(self, null)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/server/rack/component_paths"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$pwd', '$expand_path', '$join', '$dirname', '$map', '$+', '$reject', '$=~', '$to_proc', '$values', '$loaded_specs', '$uniq', '$each', '$<<', '$flatten', '$app_folders', '$directory?', '$[]', '$[]=', '$include?', '$sort', '$==', '$code', '$new', '$eval', '$components']);
  self.$require("volt/server/rack/component_code");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ComponentPaths(){};
      var self = $ComponentPaths = $klass($base, $super, 'ComponentPaths', $ComponentPaths);

      var def = self.$$proto, $scope = self.$$scope, TMP_5, TMP_14;

      def.app_folders = def.root = def.components = nil;
      def.$initialize = function(root) {
        var $a, self = this;

        if (root == null) {
          root = nil
        }
        return self.root = ((($a = root) !== false && $a !== nil) ? $a : $scope.get('Dir').$pwd());
      };

      def.$app_folders = TMP_5 = function() {
        var $a, $b, $c, TMP_1, $d, TMP_2, $e, $f, TMP_3, $g, $h, TMP_4, self = this, $iter = TMP_5.$$p, $yield = $iter || nil, volt_app = nil, app_folders = nil, files = nil;

        TMP_5.$$p = null;
        ((($a = self.app_folders) !== false && $a !== nil) ? $a : self.app_folders = (function() {volt_app = $scope.get('File').$expand_path($scope.get('File').$join($scope.get('File').$dirname("volt/server/rack/component_paths"), "../../../../app"));
        app_folders = ($b = ($c = [volt_app, "" + (self.root) + "/app", "" + (self.root) + "/vendor/app"]).$map, $b.$$p = (TMP_1 = function(f){var self = TMP_1.$$s || this;
if (f == null) f = nil;
        return $scope.get('File').$expand_path(f)}, TMP_1.$$s = self, TMP_1), $b).call($c);
        app_folders = app_folders['$+'](($b = ($d = ($e = ($f = ($g = ($h = $scope.get('Gem').$loaded_specs().$values()).$map, $g.$$p = "full_gem_path".$to_proc(), $g).call($h)).$reject, $e.$$p = (TMP_3 = function(g){var self = TMP_3.$$s || this, $a;
if (g == null) g = nil;
        return ($a = g['$=~'](/volt/), ($a === nil || $a === false))}, TMP_3.$$s = self, TMP_3), $e).call($f)).$map, $b.$$p = (TMP_2 = function(f){var self = TMP_2.$$s || this;
if (f == null) f = nil;
        return f['$+']("/app")}, TMP_2.$$s = self, TMP_2), $b).call($d));
        return app_folders.$uniq();})());
        files = [];
        ($a = ($b = self.app_folders).$each, $a.$$p = (TMP_4 = function(app_folder){var self = TMP_4.$$s || this, $a;
if (app_folder == null) app_folder = nil;
        return files['$<<'](((($a = Opal.yield1($yield, app_folder)) === $breaker) ? $breaker.$v : $a))}, TMP_4.$$s = self, TMP_4), $a).call($b);
        return files.$flatten();
      };

      def.$components = function() {
        var $a, $b, TMP_6, self = this;

        if ((($a = self.components) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.components};
        self.components = $hash2([], {});
        ($a = ($b = self).$app_folders, $a.$$p = (TMP_6 = function(app_folder){var self = TMP_6.$$s || this, $a, $b, TMP_7;
if (app_folder == null) app_folder = nil;
        return ($a = ($b = $scope.get('Dir')['$[]']("" + (app_folder) + "/*").$sort()).$each, $a.$$p = (TMP_7 = function(folder){var self = TMP_7.$$s || this, $a, $b, $c, folder_name = nil, folders = nil;
            if (self.components == null) self.components = nil;
if (folder == null) folder = nil;
          if ((($a = $scope.get('File')['$directory?'](folder)) !== nil && (!$a.$$is_boolean || $a == true))) {
              folder_name = folder['$[]'](/[^\/]+$/);
              folders = (($a = folder_name, $b = self.components, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, []))));
              if ((($a = folders['$include?'](folder)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return nil
                } else {
                return folders['$<<'](folder)
              };
              } else {
              return nil
            }}, TMP_7.$$s = self, TMP_7), $a).call($b)}, TMP_6.$$s = self, TMP_6), $a).call($b);
        return self.components;
      };

      def.$require_in_components = function() {
        var self = this;

        if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
          return nil};
      };

      def.$load_views_and_routes = function() {
        var $a, $b, TMP_8, $c, TMP_11, self = this, component_names = nil;

        component_names = [];
        ($a = ($b = self).$app_folders, $a.$$p = (TMP_8 = function(app_folder){var self = TMP_8.$$s || this, $a, $b, TMP_9, $c, $d, TMP_10;
if (app_folder == null) app_folder = nil;
        return ($a = ($b = ($c = ($d = $scope.get('Dir')['$[]']("" + (app_folder) + "/*")).$map, $c.$$p = (TMP_10 = function(cp){var self = TMP_10.$$s || this;
if (cp == null) cp = nil;
          return cp['$[]'](/[^\/]+$/)}, TMP_10.$$s = self, TMP_10), $c).call($d)).$each, $a.$$p = (TMP_9 = function(component_name){var self = TMP_9.$$s || this, $a;
if (component_name == null) component_name = nil;
          if ((($a = $scope.get('File')['$directory?'](component_name)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return component_names['$<<'](component_name)
              } else {
              return nil
            }}, TMP_9.$$s = self, TMP_9), $a).call($b)}, TMP_8.$$s = self, TMP_8), $a).call($b);
        return ($a = ($c = component_names.$uniq()).$each, $a.$$p = (TMP_11 = function(component_name){var self = TMP_11.$$s || this, code = nil;
if (component_name == null) component_name = nil;
        code = (($scope.get('Volt')).$$scope.get('ComponentCode')).$new(component_name, self, false).$code();
          return self.$eval(code);}, TMP_11.$$s = self, TMP_11), $a).call($c);
      };

      def.$component_paths = function(name) {
        var self = this, folders = nil;

        folders = self.$components()['$[]'](name);
        if (folders !== false && folders !== nil) {
          return folders
          } else {
          return nil
        };
      };

      return (def.$asset_folders = TMP_14 = function() {
        var $a, $b, TMP_12, self = this, $iter = TMP_14.$$p, $yield = $iter || nil, folders = nil;

        TMP_14.$$p = null;
        folders = [];
        ($a = ($b = self).$app_folders, $a.$$p = (TMP_12 = function(app_folder){var self = TMP_12.$$s || this, $a, $b, TMP_13;
if (app_folder == null) app_folder = nil;
        return ($a = ($b = $scope.get('Dir')['$[]']("" + (app_folder) + "/*/assets").$sort()).$each, $a.$$p = (TMP_13 = function(asset_folder){var self = TMP_13.$$s || this, $a;
if (asset_folder == null) asset_folder = nil;
          return folders['$<<'](((($a = Opal.yield1($yield, asset_folder)) === $breaker) ? $breaker.$v : $a))}, TMP_13.$$s = self, TMP_13), $a).call($b)}, TMP_12.$$s = self, TMP_12), $a).call($b);
        return folders.$flatten();
      }, nil) && 'asset_folders';
    })(self, null)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/boot"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$==', '$new', '$require_in_components']);
  self.$require("volt/models");
  self.$require("volt/server/rack/component_paths");
  if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
    self.$require("volt")};
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defs(self, '$boot', function(app_path) {
      var self = this, component_paths = nil;

      if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {};
      component_paths = $scope.get('ComponentPaths').$new(app_path);
      component_paths.$require_in_components();
      return component_paths;
    })
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/spec/setup"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$[]=', '$boot', '$==']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return (self.$$proto.$spec_setup = function(app_path) {
        var self = this;

        if (app_path == null) {
          app_path = "."
        }
        self.$require("volt");
        $scope.get('ENV')['$[]=']("SERVER", "true");
        $scope.get('ENV')['$[]=']("VOLT_ENV", "test");
        self.$require("volt/boot");
        $scope.get('Volt').$boot(app_path);
        if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
          return nil};
      }, nil) && 'spec_setup'
    })(self.$singleton_class())
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["spec_helper"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, kitchen_sink_path = nil;

  Opal.add_stubs(['$require', '$==', '$expand_path', '$join', '$dirname', '$spec_setup']);
  self.$require("volt/spec/setup");
  if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {};
  kitchen_sink_path = $scope.get('File').$expand_path($scope.get('File').$join($scope.get('File').$dirname("spec_helper"), "apps/kitchen_sink"));
  $scope.get('Volt').$spec_setup(kitchen_sink_path);
  if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
    return nil};
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/reactive/reactive_accessors"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$instance_variable_get', '$to_s', '$instance_variable_set', '$new', '$each', '$define_method', '$depend', '$__reactive_dependency_get', '$class', '$to_sym', '$changed!', '$reactive_reader', '$reactive_writer', '$send']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'ReactiveAccessors');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'ClassMethods');

        var def = self.$$proto, $scope = self.$$scope;

        Opal.defn(self, '$__reactive_dependency_get', function(var_name) {
          var $a, self = this, value_dep = nil;

          value_dep = self.$instance_variable_get(("@__" + var_name.$to_s() + "_dependency"));
          return ((($a = value_dep) !== false && $a !== nil) ? $a : value_dep = self.$instance_variable_set(("@__" + var_name.$to_s() + "_dependency"), $scope.get('Dependency').$new()));
        });

        Opal.defn(self, '$reactive_reader', function(names) {
          var $a, $b, TMP_1, self = this;

          names = $slice.call(arguments, 0);
          return ($a = ($b = names).$each, $a.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this, $a, $b, TMP_2, var_name = nil;
if (name == null) name = nil;
          var_name = ("@" + name.$to_s());
            return ($a = ($b = self).$define_method, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, value = nil;

            value = self.$instance_variable_get(var_name);
              self.$class().$__reactive_dependency_get(name).$depend();
              return value;}, TMP_2.$$s = self, TMP_2), $a).call($b, name.$to_sym());}, TMP_1.$$s = self, TMP_1), $a).call($b);
        });

        Opal.defn(self, '$reactive_writer', function(names) {
          var $a, $b, TMP_3, self = this;

          names = $slice.call(arguments, 0);
          return ($a = ($b = names).$each, $a.$$p = (TMP_3 = function(name){var self = TMP_3.$$s || this, $a, $b, TMP_4, var_name = nil;
if (name == null) name = nil;
          var_name = ("@" + name.$to_s());
            return ($a = ($b = self).$define_method, $a.$$p = (TMP_4 = function(new_value){var self = TMP_4.$$s || this;
if (new_value == null) new_value = nil;
            self.$instance_variable_set(var_name, new_value);
              return self.$class().$__reactive_dependency_get(name)['$changed!']();}, TMP_4.$$s = self, TMP_4), $a).call($b, "" + (name) + "=");}, TMP_3.$$s = self, TMP_3), $a).call($b);
        });

        Opal.defn(self, '$reactive_accessor', function(names) {
          var $a, $b, self = this;

          names = $slice.call(arguments, 0);
          ($a = self).$reactive_reader.apply($a, [].concat(names));
          return ($b = self).$reactive_writer.apply($b, [].concat(names));
        });
      })(self);

      Opal.defs(self, '$included', function(base) {
        var self = this;

        return base.$send("extend", $scope.get('ClassMethods'));
      });
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["controllers/reactive_accessors_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$reactive_accessor', '$describe', '$it', '$new', '$_name=', '$to', '$expect', '$_name', '$eq', '$watch!', '$lambda', '$<<', '$flush!']);
  self.$require("spec_helper");
  self.$require("volt/reactive/reactive_accessors");
  (function($base, $super) {
    function $TestReactiveAccessors(){};
    var self = $TestReactiveAccessors = $klass($base, $super, 'TestReactiveAccessors', $TestReactiveAccessors);

    var def = self.$$proto, $scope = self.$$scope;

    self.$include((($scope.get('Volt')).$$scope.get('ReactiveAccessors')));

    return self.$reactive_accessor("_name");
  })(self, null);
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3, $d, TMP_4;

  ($a = ($b = self).$it, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $b, inst = nil;

    inst = $scope.get('TestReactiveAccessors').$new();
      (($a = ["Ryan"]), $b = inst, $b['$_name='].apply($b, $a), $a[$a.length-1]);
      return self.$expect(inst.$_name()).$to(self.$eq("Ryan"));}, TMP_2.$$s = self, TMP_2), $a).call($b, "should assign a reactive value");
    ($a = ($c = self).$it, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, inst = nil;

    inst = $scope.get('TestReactiveAccessors').$new();
      return self.$expect(inst.$_name()).$to(self.$eq(nil));}, TMP_3.$$s = self, TMP_3), $a).call($c, "should start nil");
    return ($a = ($d = self).$it, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, $a, $b, TMP_5, $c, inst = nil, values = nil;

    inst = $scope.get('TestReactiveAccessors').$new();
      values = [];
      ($a = ($b = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

      return values['$<<'](inst.$_name())}, TMP_5.$$s = self, TMP_5), $a).call($b)['$watch!']();
      self.$expect(values).$to(self.$eq([nil]));
      (($a = ["Ryan"]), $c = inst, $c['$_name='].apply($c, $a), $a[$a.length-1]);
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      self.$expect(values).$to(self.$eq([nil, "Ryan"]));
      (($a = ["Stout"]), $c = inst, $c['$_name='].apply($c, $a), $a[$a.length-1]);
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      return self.$expect(values).$to(self.$eq([nil, "Ryan", "Stout"]));}, TMP_4.$$s = self, TMP_4), $a).call($d, "should trigger changed when assigning a new value");}, TMP_1.$$s = self, TMP_1), $a).call($b, (($scope.get('Volt')).$$scope.get('ReactiveAccessors')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["extra_core/array_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$describe', '$it', '$to', '$expect', '$sum', '$eq']);
  self.$require("spec_helper");
  self.$require("volt/extra_core/array");
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2;

  return ($a = ($b = self).$describe, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $b, TMP_3;

    return ($a = ($b = self).$it, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

      return self.$expect([1, 2, 3].$sum()).$to(self.$eq(6))}, TMP_3.$$s = self, TMP_3), $a).call($b, "calculates sum of array of integers")}, TMP_2.$$s = self, TMP_2), $a).call($b, "#sum")}, TMP_1.$$s = self, TMP_1), $a).call($b, $scope.get('Array'));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["extra_core/blank_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$describe', '$it', '$to', '$expect', '$blank?', '$eq']);
  self.$require("spec_helper");
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3;

  ($a = ($b = self).$it, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

    return self.$expect("  "['$blank?']()).$to(self.$eq(true))}, TMP_2.$$s = self, TMP_2), $a).call($b, "should report blank when blank");
    return ($a = ($c = self).$it, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

    return self.$expect("  text "['$blank?']()).$to(self.$eq(false))}, TMP_3.$$s = self, TMP_3), $a).call($c, "should report not blank when not blank");}, TMP_1.$$s = self, TMP_1), $a).call($b, "blank");
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["extra_core/class_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$class_attribute', '$describe', '$it', '$to', '$expect', '$some_data', '$eq', '$some_data=']);
  self.$require("spec_helper");
  self.$require("volt/extra_core/array");
  (function($base, $super) {
    function $TestClassAttributes(){};
    var self = $TestClassAttributes = $klass($base, $super, 'TestClassAttributes', $TestClassAttributes);

    var def = self.$$proto, $scope = self.$$scope;

    return self.$class_attribute("some_data")
  })(self, null);
  (function($base, $super) {
    function $TestSubClassAttributes(){};
    var self = $TestSubClassAttributes = $klass($base, $super, 'TestSubClassAttributes', $TestSubClassAttributes);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('TestClassAttributes'));
  (function($base, $super) {
    function $TestSubClassAttributes2(){};
    var self = $TestSubClassAttributes2 = $klass($base, $super, 'TestSubClassAttributes2', $TestSubClassAttributes2);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('TestClassAttributes'));
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2;

  return ($a = ($b = self).$it, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $b;

    self.$expect($scope.get('TestClassAttributes').$some_data()).$to(self.$eq(nil));
      (($a = [5]), $b = $scope.get('TestClassAttributes'), $b['$some_data='].apply($b, $a), $a[$a.length-1]);
      self.$expect($scope.get('TestClassAttributes').$some_data()).$to(self.$eq(5));
      self.$expect($scope.get('TestSubClassAttributes').$some_data()).$to(self.$eq(5));
      self.$expect($scope.get('TestSubClassAttributes2').$some_data()).$to(self.$eq(5));
      (($a = [10]), $b = $scope.get('TestSubClassAttributes'), $b['$some_data='].apply($b, $a), $a[$a.length-1]);
      self.$expect($scope.get('TestClassAttributes').$some_data()).$to(self.$eq(5));
      self.$expect($scope.get('TestSubClassAttributes').$some_data()).$to(self.$eq(10));
      self.$expect($scope.get('TestSubClassAttributes2').$some_data()).$to(self.$eq(5));
      (($a = [15]), $b = $scope.get('TestSubClassAttributes2'), $b['$some_data='].apply($b, $a), $a[$a.length-1]);
      self.$expect($scope.get('TestClassAttributes').$some_data()).$to(self.$eq(5));
      self.$expect($scope.get('TestSubClassAttributes').$some_data()).$to(self.$eq(10));
      return self.$expect($scope.get('TestSubClassAttributes2').$some_data()).$to(self.$eq(15));}, TMP_2.$$s = self, TMP_2), $a).call($b, "should provide class_attributes that can be inherited")}, TMP_1.$$s = self, TMP_1), $a).call($b, "extra_core class addons");
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["extra_core/inflector_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$describe', '$it', '$to', '$expect', '$pluralize', '$eq', '$singularize']);
  self.$require("spec_helper");
  self.$require("volt/extra_core/inflector");
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3;

  ($a = ($b = self).$it, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

    return self.$expect("car".$pluralize()).$to(self.$eq("cars"))}, TMP_2.$$s = self, TMP_2), $a).call($b, "should pluralize correctly");
    return ($a = ($c = self).$it, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

    return self.$expect("cars".$singularize()).$to(self.$eq("car"))}, TMP_3.$$s = self, TMP_3), $a).call($c, "should singularize correctly");}, TMP_1.$$s = self, TMP_1), $a).call($b, (($scope.get('Volt')).$$scope.get('Inflector')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["extra_core/logger_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$!', '$==']);
  if ((($a = $scope.get('RUBY_PLATFORM')['$==']("opal")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
    } else {
    return nil
  }
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["extra_core/object_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$describe', '$it', '$to', '$expect', '$blank?', '$new', '$be_false', '$be_true', '$present?']);
  self.$require("spec_helper");
  self.$require("volt/extra_core/blank");
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3;

  ($a = ($b = self).$it, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

    self.$expect($scope.get('Object').$new()['$blank?']()).$to(self.$be_false());
      return self.$expect(nil['$blank?']()).$to(self.$be_true());}, TMP_2.$$s = self, TMP_2), $a).call($b, "should add blank? to all objects");
    return ($a = ($c = self).$it, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

    self.$expect($scope.get('Object').$new()['$present?']()).$to(self.$be_true());
      return self.$expect(nil['$present?']()).$to(self.$be_false());}, TMP_3.$$s = self, TMP_3), $a).call($c, "should add present? to all objects");}, TMP_1.$$s = self, TMP_1), $a).call($b, $scope.get('Object'));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["extra_core/string_transformation_test_cases"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2;

  Opal.cdecl($scope, 'CamelToUnderscore', $hash2(["Product", "SpecialGuest", "ApplicationController", "Area51Controller"], {"Product": "product", "SpecialGuest": "special_guest", "ApplicationController": "application_controller", "Area51Controller": "area51_controller"}));
  Opal.cdecl($scope, 'UnderscoreToLowerCamel', $hash2(["product", "special_guest", "application_controller", "area51_controller"], {"product": "product", "special_guest": "specialGuest", "application_controller": "applicationController", "area51_controller": "area51Controller"}));
  return Opal.cdecl($scope, 'UnderscoresToDashes', $hash2(["street", "street_address", "person_street_address"], {"street": "street", "street_address": "street-address", "person_street_address": "person-street-address"}));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["extra_core/string_transformations_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$describe', '$each', '$it', '$to', '$expect', '$camelize', '$eq', '$dasherize', '$underscore']);
  self.$require("spec_helper");
  self.$require("extra_core/string_transformation_test_cases");
  self.$require("volt/extra_core/string");
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_4, $d, TMP_5, $e, TMP_6, $f, TMP_7, $g, TMP_9, $h, TMP_11, $i, TMP_13;

  ($a = ($b = $scope.get('CamelToUnderscore')).$each, $a.$$p = (TMP_2 = function(camel, underscore){var self = TMP_2.$$s || this, $a, $b, TMP_3;
if (camel == null) camel = nil;if (underscore == null) underscore = nil;
    return ($a = ($b = self).$it, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

      return self.$expect(underscore.$camelize()).$to(self.$eq(camel))}, TMP_3.$$s = self, TMP_3), $a).call($b, "camelizes")}, TMP_2.$$s = self, TMP_2), $a).call($b);
    ($a = ($c = self).$it, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

    return self.$expect("capital_city".$camelize("lower")).$to(self.$eq("capitalCity"))}, TMP_4.$$s = self, TMP_4), $a).call($c, "camelizes lower");
    ($a = ($d = self).$it, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

    return self.$expect("capital_city".$camelize("upper")).$to(self.$eq("CapitalCity"))}, TMP_5.$$s = self, TMP_5), $a).call($d, "camelizes upper");
    ($a = ($e = self).$it, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

    return self.$expect("capital_city".$camelize()).$to(self.$eq("CapitalCity"))}, TMP_6.$$s = self, TMP_6), $a).call($e, "camelizes upper default");
    ($a = ($f = $scope.get('UnderscoreToLowerCamel')).$each, $a.$$p = (TMP_7 = function(underscored, lower_camel){var self = TMP_7.$$s || this, $a, $b, TMP_8;
if (underscored == null) underscored = nil;if (lower_camel == null) lower_camel = nil;
    return ($a = ($b = self).$it, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

      return self.$expect(underscored.$camelize("lower")).$to(self.$eq(lower_camel))}, TMP_8.$$s = self, TMP_8), $a).call($b, "camelizes lower")}, TMP_7.$$s = self, TMP_7), $a).call($f);
    ($a = ($g = $scope.get('UnderscoresToDashes')).$each, $a.$$p = (TMP_9 = function(underscored, dasherized){var self = TMP_9.$$s || this, $a, $b, TMP_10;
if (underscored == null) underscored = nil;if (dasherized == null) dasherized = nil;
    return ($a = ($b = self).$it, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

      return self.$expect(underscored.$dasherize()).$to(self.$eq(dasherized))}, TMP_10.$$s = self, TMP_10), $a).call($b, "dasherizes")}, TMP_9.$$s = self, TMP_9), $a).call($g);
    ($a = ($h = $scope.get('CamelToUnderscore')).$each, $a.$$p = (TMP_11 = function(camel, underscore){var self = TMP_11.$$s || this, $a, $b, TMP_12;
if (camel == null) camel = nil;if (underscore == null) underscore = nil;
    return ($a = ($b = self).$it, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

      return self.$expect(camel.$underscore()).$to(self.$eq(underscore))}, TMP_12.$$s = self, TMP_12), $a).call($b, "underscores")}, TMP_11.$$s = self, TMP_11), $a).call($h);
    return ($a = ($i = self).$it, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

    self.$expect("HTMLTidy".$underscore()).$to(self.$eq("html_tidy"));
      return self.$expect("HTMLTidyGenerator".$underscore()).$to(self.$eq("html_tidy_generator"));}, TMP_13.$$s = self, TMP_13), $a).call($i, "underscores acronyms");}, TMP_1.$$s = self, TMP_1), $a).call($b, "#camelize");
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["extra_core/symbol_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==']);
  if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
    return nil}
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["integration/bindings_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2;

  Opal.add_stubs(['$[]', '$require', '$describe', '$it', '$visit', '$to', '$expect', '$page', '$have_content', '$click_link', '$fill_in', '$value', '$find', '$eq', '$!', '$==', '$current_path', '$current_url', '$match', '$check', '$be_checked', '$uncheck', '$to_not']);
  if ((($a = $scope.get('ENV')['$[]']("BROWSER")) !== nil && (!$a.$$is_boolean || $a == true))) {
    self.$require("spec_helper");
    return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3, $d, TMP_10, $e, TMP_13;

    ($a = ($b = self).$it, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

      self.$visit("/");
        return self.$expect(self.$page()).$to(self.$have_content("Kitchen Sink"));}, TMP_2.$$s = self, TMP_2), $a).call($b, "should load the page");
      ($a = ($c = self).$describe, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $a, $b, TMP_4, $c, TMP_5, $d, TMP_6, $e, TMP_7, $f, TMP_8, $g, TMP_9;

      ($a = ($b = self).$it, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

        self.$visit("/");
          self.$click_link("Bindings");
          self.$fill_in("pageName1", $hash2(["with"], {"with": "Page bindings"}));
          self.$expect(self.$find("#pageName1").$value()).$to(self.$eq("Page bindings"));
          self.$expect(self.$find("#pageName2").$value()).$to(self.$eq("Page bindings"));
          self.$expect(self.$find("#pageName3")).$to(self.$have_content("Page bindings"));
          self.$fill_in("pageName2", $hash2(["with"], {"with": "Update everywhere"}));
          self.$expect(self.$find("#pageName1").$value()).$to(self.$eq("Update everywhere"));
          self.$expect(self.$find("#pageName2").$value()).$to(self.$eq("Update everywhere"));
          return self.$expect(self.$find("#pageName3")).$to(self.$have_content("Update everywhere"));}, TMP_4.$$s = self, TMP_4), $a).call($b, "should load the bindings page and update bindings");
        ($a = ($c = self).$it, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $a;

        self.$visit("/");
          self.$click_link("Bindings");
          if ((($a = $scope.get('ENV')['$[]']("BROWSER")['$==']("phantom")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$expect(self.$current_path()).$to(self.$eq("/bindings"))};
          self.$fill_in("paramsName1", $hash2(["with"], {"with": "Params bindings"}));
          self.$expect(self.$find("#paramsName1").$value()).$to(self.$eq("Params bindings"));
          self.$expect(self.$find("#paramsName2").$value()).$to(self.$eq("Params bindings"));
          self.$expect(self.$find("#paramsName3")).$to(self.$have_content("Params bindings"));
          self.$fill_in("paramsName2", $hash2(["with"], {"with": "Update everywhere"}));
          self.$expect(self.$find("#paramsName1").$value()).$to(self.$eq("Update everywhere"));
          self.$expect(self.$find("#paramsName2").$value()).$to(self.$eq("Update everywhere"));
          self.$expect(self.$find("#paramsName3")).$to(self.$have_content("Update everywhere"));
          if ((($a = $scope.get('ENV')['$[]']("BROWSER")['$==']("phantom")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$expect(self.$current_url()).$to(self.$match(/\/bindings[?]name[=]Update%20everywhere$/))
            } else {
            return nil
          };}, TMP_5.$$s = self, TMP_5), $a).call($c, "should update params bindings and the url");
        ($a = ($d = self).$it, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $a;

        self.$visit("/");
          self.$click_link("Bindings");
          if ((($a = $scope.get('ENV')['$[]']("BROWSER")['$==']("phantom")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$expect(self.$current_path()).$to(self.$eq("/bindings"))};
          self.$fill_in("routesName1", $hash2(["with"], {"with": "Routes bindings"}));
          self.$expect(self.$find("#routesName1").$value()).$to(self.$eq("Routes bindings"));
          self.$expect(self.$find("#routesName2").$value()).$to(self.$eq("Routes bindings"));
          self.$expect(self.$find("#routesName3")).$to(self.$have_content("Routes bindings"));
          self.$fill_in("routesName2", $hash2(["with"], {"with": "bound_url"}));
          self.$expect(self.$find("#routesName1").$value()).$to(self.$eq("bound_url"));
          self.$expect(self.$find("#routesName2").$value()).$to(self.$eq("bound_url"));
          self.$expect(self.$find("#routesName3")).$to(self.$have_content("bound_url"));
          if ((($a = $scope.get('ENV')['$[]']("BROWSER")['$==']("phantom")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$expect(self.$current_path()).$to(self.$eq("/bindings/bound_url"))
            } else {
            return nil
          };}, TMP_6.$$s = self, TMP_6), $a).call($d, "should update the url and fields when bound to a param in the route");
        ($a = ($e = self).$it, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

        self.$visit("/bindings/testing?name=cool");
          self.$expect(self.$find("#paramsName3")).$to(self.$have_content("cool"));
          return self.$expect(self.$find("#routesName3")).$to(self.$have_content("testing"));}, TMP_7.$$s = self, TMP_7), $a).call($e, "should go from a url and query to params");
        ($a = ($f = self).$it, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

        self.$visit("/");
          self.$click_link("Bindings");
          self.$fill_in("textareaName1", $hash2(["with"], {"with": "Page bindings"}));
          self.$expect(self.$find("#textareaName1").$value()).$to(self.$eq("Page bindings"));
          self.$expect(self.$find("#textareaName2").$value()).$to(self.$eq("Page bindings"));
          self.$expect(self.$find("#textareaName3")).$to(self.$have_content("Page bindings"));
          self.$fill_in("textareaName2", $hash2(["with"], {"with": "Update everywhere"}));
          self.$expect(self.$find("#textareaName1").$value()).$to(self.$eq("Update everywhere"));
          self.$expect(self.$find("#textareaName2").$value()).$to(self.$eq("Update everywhere"));
          return self.$expect(self.$find("#textareaName3")).$to(self.$have_content("Update everywhere"));}, TMP_8.$$s = self, TMP_8), $a).call($f, "should load the bindings page and update bindings");
        return ($a = ($g = self).$it, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

        self.$visit("/");
          self.$click_link("Bindings");
          self.$fill_in("localstoreName1", $hash2(["with"], {"with": "Page bindings"}));
          self.$expect(self.$find("#localstoreName1").$value()).$to(self.$eq("Page bindings"));
          self.$expect(self.$find("#localstoreName2").$value()).$to(self.$eq("Page bindings"));
          self.$expect(self.$find("#localstoreName3")).$to(self.$have_content("Page bindings"));
          self.$fill_in("localstoreName2", $hash2(["with"], {"with": "Update everywhere"}));
          self.$expect(self.$find("#localstoreName1").$value()).$to(self.$eq("Update everywhere"));
          self.$expect(self.$find("#localstoreName2").$value()).$to(self.$eq("Update everywhere"));
          return self.$expect(self.$find("#localstoreName3")).$to(self.$have_content("Update everywhere"));}, TMP_9.$$s = self, TMP_9), $a).call($g, "should update local_store bindings");}, TMP_3.$$s = self, TMP_3), $a).call($c, "text/fields");
      ($a = ($d = self).$describe, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this, $a, $b, TMP_11, $c, TMP_12;

      ($a = ($b = self).$it, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

        self.$visit("/");
          self.$click_link("Bindings");
          self.$expect(self.$find("#pageCheck3")).$to(self.$have_content(""));
          self.$check("pageCheck1");
          self.$expect(self.$find("#pageCheck1")).$to(self.$be_checked());
          self.$expect(self.$find("#pageCheck2")).$to(self.$be_checked());
          self.$expect(self.$find("#pageCheck3")).$to(self.$have_content("true"));
          self.$uncheck("pageCheck1");
          self.$expect(self.$find("#pageCheck1")).$to_not(self.$be_checked());
          self.$expect(self.$find("#pageCheck2")).$to_not(self.$be_checked());
          return self.$expect(self.$find("#pageCheck3")).$to(self.$have_content(""));}, TMP_11.$$s = self, TMP_11), $a).call($b, "should load the bindings page and update checkboxes");
        return ($a = ($c = self).$it, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this, $a;

        self.$visit("/");
          self.$click_link("Bindings");
          if ((($a = $scope.get('ENV')['$[]']("BROWSER")['$==']("phantom")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$expect(self.$current_path()).$to(self.$eq("/bindings"))};
          self.$expect(self.$find("#paramsCheck3")).$to(self.$have_content(""));
          self.$check("paramsCheck1");
          self.$expect(self.$find("#paramsCheck1")).$to(self.$be_checked());
          self.$expect(self.$find("#paramsCheck2")).$to(self.$be_checked());
          self.$expect(self.$find("#paramsCheck3")).$to(self.$have_content("true"));
          if ((($a = $scope.get('ENV')['$[]']("BROWSER")['$==']("phantom")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$expect(self.$current_url()).$to(self.$match(/\/bindings[?]check[=]true$/))};
          self.$uncheck("paramsCheck1");
          self.$expect(self.$find("#paramsCheck1")).$to_not(self.$be_checked());
          self.$expect(self.$find("#paramsCheck2")).$to_not(self.$be_checked());
          self.$expect(self.$find("#paramsCheck3")).$to(self.$have_content(""));
          if ((($a = $scope.get('ENV')['$[]']("BROWSER")['$==']("phantom")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$expect(self.$current_url()).$to(self.$match(/\/bindings[?]check[=]false$/))
            } else {
            return nil
          };}, TMP_12.$$s = self, TMP_12), $a).call($c, "should load the bindings page and update checkboxes bound to params");}, TMP_10.$$s = self, TMP_10), $a).call($d, "check boxes");
      return ($a = ($e = self).$describe, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this, $a, $b, TMP_14;

      return ($a = ($b = self).$it, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

        self.$visit("/");
          self.$click_link("Bindings");
          return self.$expect(self.$find("#escapeContent")).$to(self.$have_content("this is {{escaped}}"));}, TMP_14.$$s = self, TMP_14), $a).call($b, "should escape in a tripple stash")}, TMP_13.$$s = self, TMP_13), $a).call($e, "content escaping");}, TMP_1.$$s = self, TMP_1), $a).call($b, "bindings test", $hash2(["type", "sauce"], {"type": "feature", "sauce": true}));
    } else {
    return nil
  }
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["integration/cookies_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2;

  Opal.add_stubs(['$[]', '$require', '$describe', '$!', '$==', '$it', '$visit', '$click_link', '$fill_in', '$click_button', '$to', '$expect', '$page', '$have_content', '$evaluate_script', '$click', '$find', '$to_not']);
  if ((($a = $scope.get('ENV')['$[]']("BROWSER")) !== nil && (!$a.$$is_boolean || $a == true))) {
    self.$require("spec_helper");
    return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3;

    if ((($a = $scope.get('ENV')['$[]']("BROWSER")['$==']("phantom")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        ($a = ($b = self).$it, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        self.$visit("/");
          self.$click_link("Cookies");
          self.$fill_in("cookieName", $hash2(["with"], {"with": "one"}));
          self.$fill_in("cookieValue", $hash2(["with"], {"with": "one"}));
          self.$click_button("Add Cookie");
          self.$expect(self.$page()).$to(self.$have_content("one: one"));
          self.$page().$evaluate_script("document.location.reload()");
          return self.$expect(self.$page()).$to(self.$have_content("one: one"));}, TMP_2.$$s = self, TMP_2), $a).call($b, "should add")};
      return ($a = ($c = self).$it, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

      self.$visit("/");
        self.$click_link("Cookies");
        self.$fill_in("cookieName", $hash2(["with"], {"with": "two"}));
        self.$fill_in("cookieValue", $hash2(["with"], {"with": "two"}));
        self.$click_button("Add Cookie");
        self.$expect(self.$page()).$to(self.$have_content("two: two"));
        self.$find(".cookieDelete").$click();
        self.$expect(self.$page()).$to_not(self.$have_content("two: two"));
        self.$page().$evaluate_script("document.location.reload()");
        return self.$expect(self.$page()).$to_not(self.$have_content("two: two"));}, TMP_3.$$s = self, TMP_3), $a).call($c, "should delete cookies");}, TMP_1.$$s = self, TMP_1), $a).call($b, "cookies collection", $hash2(["type", "sauce"], {"type": "feature", "sauce": true}));
    } else {
    return nil
  }
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["integration/flash_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2;

  Opal.add_stubs(['$[]', '$!', '$==', '$require', '$describe', '$it', '$visit', '$click_link', '$to', '$expect', '$page', '$have_content', '$click', '$find', '$to_not']);
  if ((($a = ($b = $scope.get('ENV')['$[]']("BROWSER"), $b !== false && $b !== nil ?$scope.get('ENV')['$[]']("BROWSER")['$==']("sauce")['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
    self.$require("spec_helper");
    return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2;

    return ($a = ($b = self).$it, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

      self.$visit("/");
        self.$click_link("Flash");
        self.$click_link("Flash Notice");
        self.$expect(self.$page()).$to(self.$have_content("A notice message"));
        self.$find(".alert").$click();
        self.$expect(self.$page()).$to_not(self.$have_content("A notice message"));
        self.$click_link("Flash Success");
        self.$expect(self.$page()).$to(self.$have_content("A success message"));
        self.$find(".alert").$click();
        self.$expect(self.$page()).$to_not(self.$have_content("A success message"));
        self.$click_link("Flash Warning");
        self.$expect(self.$page()).$to(self.$have_content("A warning message"));
        self.$find(".alert").$click();
        self.$expect(self.$page()).$to_not(self.$have_content("A warning message"));
        self.$click_link("Flash Error");
        self.$expect(self.$page()).$to(self.$have_content("An error message"));
        self.$find(".alert").$click();
        return self.$expect(self.$page()).$to_not(self.$have_content("An error message"));}, TMP_2.$$s = self, TMP_2), $a).call($b, "should flash on sucesses, notices, warnings, and errors")}, TMP_1.$$s = self, TMP_1), $a).call($b, "flash messages", $hash2(["type", "sauce"], {"type": "feature", "sauce": true}));
    } else {
    return nil
  }
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["integration/list_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$[]', '$require', '$describe', '$before', '$visit', '$click_link', '$fill_in', '$it', '$to', '$expect', '$find', '$have_content', '$all', '$to_not', '$have_css', '$set', '$click']);
  if ($scope.get('ENV')['$[]']("BROWSER")['$==']("firefox")) {
    self.$require("spec_helper");
    return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, $f, TMP_6;

    ($a = ($b = self).$before, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

      self.$visit("/");
        self.$click_link("Todos");
        self.$fill_in("newtodo", $hash2(["with"], {"with": "Item 1\n"}));
        self.$fill_in("newtodo", $hash2(["with"], {"with": "Item 2\n"}));
        return self.$fill_in("newtodo", $hash2(["with"], {"with": "Item 3\n"}));}, TMP_2.$$s = self, TMP_2), $a).call($b);
      ($a = ($c = self).$it, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

      return self.$expect(self.$find("#todos-table")).$to(self.$have_content("Item 1"))}, TMP_3.$$s = self, TMP_3), $a).call($c, "should add items to the list");
      ($a = ($d = self).$it, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, box = nil;

      box = self.$all("css", "#todos-table input[type=checkbox]")['$[]'](0);
        self.$expect(self.$find("#todos-table")).$to_not(self.$have_css("td.name.complete"));
        box.$set(true);
        self.$expect(self.$find("#todos-table")).$to(self.$have_css("td.name.complete"));
        box.$set(false);
        return self.$expect(self.$find("#todos-table")).$to_not(self.$have_css("td.name.complete"));}, TMP_4.$$s = self, TMP_4), $a).call($d, "should strikethrough when the checkbox is checked");
      ($a = ($e = self).$it, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

      self.$expect(self.$find("#todos-table")).$to(self.$have_content("Item 1"));
        self.$expect(self.$find("#todos-table")).$to(self.$have_content("Item 2"));
        self.$expect(self.$find("#todos-table")).$to(self.$have_content("Item 3"));
        self.$all("css", "#todos-table button")['$[]'](1).$click();
        self.$expect(self.$find("#todos-table")).$to(self.$have_content("Item 1"));
        self.$expect(self.$find("#todos-table")).$to_not(self.$have_content("Item 2"));
        return self.$expect(self.$find("#todos-table")).$to(self.$have_content("Item 3"));}, TMP_5.$$s = self, TMP_5), $a).call($e, "should delete items");
      return ($a = ($f = self).$it, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, count = nil, box1 = nil, box2 = nil;

      count = self.$find("#count");
        self.$expect(count).$to(self.$have_content("0 of 3"));
        box1 = self.$all("css", "#todos-table input[type=checkbox]")['$[]'](0);
        box1.$set(true);
        self.$expect(count).$to(self.$have_content("1 of 3"));
        self.$all("css", "#todos-table button")['$[]'](0).$click();
        self.$expect(count).$to(self.$have_content("0 of 2"));
        box1 = self.$all("css", "#todos-table input[type=checkbox]")['$[]'](0);
        box1.$set(true);
        self.$expect(count).$to(self.$have_content("1 of 2"));
        box2 = self.$all("css", "#todos-table input[type=checkbox]")['$[]'](1);
        box2.$set(true);
        return self.$expect(count).$to(self.$have_content("2 of 2"));}, TMP_6.$$s = self, TMP_6), $a).call($f, "should track the number of todos and the numbers that are complete");}, TMP_1.$$s = self, TMP_1), $a).call($b, "todo example spec", $hash2(["type", "sauce"], {"type": "feature", "sauce": true}));
    } else {
    return nil
  }
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["integration/templates_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2;

  Opal.add_stubs(['$[]', '$require', '$describe', '$it', '$visit', '$to', '$expect', '$page', '$have_title', '$click_link']);
  if ((($a = $scope.get('ENV')['$[]']("BROWSER")) !== nil && (!$a.$$is_boolean || $a == true))) {
    self.$require("spec_helper");
    return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2;

    return ($a = ($b = self).$it, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

      self.$visit("/");
        self.$expect(self.$page()).$to(self.$have_title("KitchenSink - KitchenSink"));
        self.$click_link("Bindings");
        return self.$expect(self.$page()).$to(self.$have_title("Bindings - KitchenSink"));}, TMP_2.$$s = self, TMP_2), $a).call($b, "should change the title when changing pages")}, TMP_1.$$s = self, TMP_1), $a).call($b, "bindings test", $hash2(["type", "sauce"], {"type": "feature", "sauce": true}));
    } else {
    return nil
  }
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["integration/url_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2;

  Opal.add_stubs(['$[]', '$!', '$==', '$require', '$describe', '$it', '$visit', '$to', '$expect', '$current_url', '$match', '$click_link', '$page', '$have_content', '$evaluate_script']);
  if ((($a = ($b = $scope.get('ENV')['$[]']("BROWSER"), $b !== false && $b !== nil ?$scope.get('ENV')['$[]']("BROWSER")['$==']("phantom")['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
    self.$require("spec_helper");
    return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2;

    return ($a = ($b = self).$it, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

      self.$visit("/");
        self.$expect(self.$current_url()).$to(self.$match(/\/$/));
        self.$click_link("Bindings");
        self.$expect(self.$current_url()).$to(self.$match(/\/bindings$/));
        self.$expect(self.$page()).$to(self.$have_content("Checkbox"));
        self.$click_link("Todos");
        self.$expect(self.$current_url()).$to(self.$match(/\/todos$/));
        self.$expect(self.$page()).$to(self.$have_content("Todos Example"));
        self.$page().$evaluate_script("window.history.back()");
        self.$click_link("Bindings");
        self.$expect(self.$current_url()).$to(self.$match(/\/bindings$/));
        self.$expect(self.$page()).$to(self.$have_content("Checkbox"));
        self.$page().$evaluate_script("window.history.back()");
        return self.$expect(self.$current_url()).$to(self.$match(/\/$/));}, TMP_2.$$s = self, TMP_2), $a).call($b, "should update the page when using the back button")}, TMP_1.$$s = self, TMP_1), $a).call($b, "url features", $hash2(["type", "sauce"], {"type": "feature", "sauce": true}));
    } else {
    return nil
  }
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["integration/user_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$[]', '$require', '$describe', '$before', '$drop_database', '$new', '$after', '$it', '$visit', '$click_link', '$all', '$set', '$click_button', '$to', '$expect', '$page', '$have_content', '$<<', '$_users', '$store', '$to_not', '$execute_script']);
  if ((($a = $scope.get('ENV')['$[]']("BROWSER")) !== nil && (!$a.$$is_boolean || $a == true))) {
    self.$require("spec_helper");
    return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, $f, TMP_6;

    ($a = ($b = self).$before, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

      return $scope.get('DataStore').$new().$drop_database()}, TMP_2.$$s = self, TMP_2), $a).call($b, "each");
      ($a = ($c = self).$after, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

      return $scope.get('DataStore').$new().$drop_database()}, TMP_3.$$s = self, TMP_3), $a).call($c, "each");
      ($a = ($d = self).$it, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, fields = nil;

      self.$visit("/");
        self.$click_link("Login");
        self.$click_link("Signup here");
        fields = self.$all("css", "form .form-control");
        fields['$[]'](0).$set("test@test.com");
        fields['$[]'](1).$set("awes0mesEcRet");
        fields['$[]'](2).$set("Test Account 9550");
        self.$click_button("Signup");
        return self.$expect(self.$page()).$to(self.$have_content("Test Account 9550"));}, TMP_4.$$s = self, TMP_4), $a).call($d, "should create an account");
      ($a = ($e = self).$it, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, fields = nil;
        if ($gvars.page == null) $gvars.page = nil;

      self.$visit("/");
        $gvars.page.$store().$_users()['$<<']($hash2(["email", "password", "name"], {"email": "test@test.com", "password": "awes0mesEcRet", "name": "Test Account 9550"}));
        self.$click_link("Login");
        fields = self.$all("css", "form .form-control");
        fields['$[]'](0).$set("test@test.com");
        fields['$[]'](1).$set("awes0mesEcRet");
        self.$click_button("Login");
        self.$expect(self.$page()).$to(self.$have_content("Test Account 9550"));
        self.$click_link("Test Account 9550");
        self.$click_link("Logout");
        return self.$expect(self.$page()).$to_not(self.$have_content("Test Account 9550"));}, TMP_5.$$s = self, TMP_5), $a).call($e, "should login and logout");
      return ($a = ($f = self).$it, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, fields = nil;

      self.$visit("/");
        self.$click_link("Login");
        self.$click_link("Signup here");
        self.$expect(self.$page()).$to_not(self.$have_content("must be at least 8 characters"));
        fields = self.$all("css", "form .form-control");
        fields['$[]'](0).$set("test");
        fields['$[]'](1).$set("awe");
        fields['$[]'](2).$set("Tes");
        self.$page().$execute_script("$('.form-control').blur()");
        return self.$expect(self.$page()).$to(self.$have_content("must be at least 8 characters"));}, TMP_6.$$s = self, TMP_6), $a).call($f, "should fail to create an account without a valid email and password");}, TMP_1.$$s = self, TMP_1), $a).call($b, "user accounts", $hash2(["type", "sauce"], {"type": "feature", "sauce": true}));
    } else {
    return nil
  }
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["models/field_helpers_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$field', '$describe', '$it', '$new', '$to', '$expect', '$name', '$eq', '$name=', '$value', '$value=', '$raise_error']);
  self.$require("spec_helper");
  self.$require("volt/models");
  (function($base, $super) {
    function $ExampleModelWithField(){};
    var self = $ExampleModelWithField = $klass($base, $super, 'ExampleModelWithField', $ExampleModelWithField);

    var def = self.$$proto, $scope = self.$$scope;

    self.$field("name");

    return self.$field("value", $scope.get('Numeric'));
  })(self, (($scope.get('Volt')).$$scope.get('Model')));
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3;

  ($a = ($b = self).$it, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $b, model = nil;

    model = $scope.get('ExampleModelWithField').$new();
      self.$expect(model.$name()).$to(self.$eq(nil));
      (($a = ["jimmy"]), $b = model, $b['$name='].apply($b, $a), $a[$a.length-1]);
      self.$expect(model.$name()).$to(self.$eq("jimmy"));
      self.$expect(model.$value()).$to(self.$eq(nil));
      (($a = ["20.5"]), $b = model, $b['$value='].apply($b, $a), $a[$a.length-1]);
      return self.$expect(model.$value()).$to(self.$eq(20.5));}, TMP_2.$$s = self, TMP_2), $a).call($b, "should allow a user to setup a field that can be written to and read");
    return ($a = ($c = self).$it, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $a, $b, TMP_4;

    return ($a = ($b = self).$expect, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

      return $scope.get('ExampleModelWithField').$field("awesome", $scope.get('Array'))}, TMP_4.$$s = self, TMP_4), $a).call($b).$to(self.$raise_error((($scope.get('FieldHelpers')).$$scope.get('InvalidFieldClass'))))}, TMP_3.$$s = self, TMP_3), $a).call($c, "should raise an error when an invalid cast type is provided");}, TMP_1.$$s = self, TMP_1), $a).call($b, "field helpers");
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["models/model_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$describe', '$it', '$new', '$_stash=', '$to', '$expect', '$_stash', '$eq', '$watch!', '$lambda', '$<<', '$_name', '$flush!', '$_name=', '$nil?', '$_missing', '$!', '$_mis1=', '$_false1=', '$_mis1', '$_false1', '$attributes', '$_something', '$_blue', '$+', '$_blue=', '$_green', '$_green=', '$_one=', '$_two=', '$_three=', '$_one', '$_two', '$_prop', '$[]', '$_prop=', '$_items', '$delete_at', '$size', '$length', '$_lists', '$class', '$_item', '$_lists=', '$respond_to?', '$delete', '$_text', '$on', '$_new_item', '$path', '$_test', '$_test=', '$_items=', '$_complete', '$_complete=', '$index', '$==', '$to_h', '$to_a', '$before', '$_object', '$let', '$each', '$send', '$model', '$to_s', '$raise_error', '$double', '$receive']);
  self.$require("spec_helper");
  self.$require("volt/models");
  (function($base, $super) {
    function $TestItem(){};
    var self = $TestItem = $klass($base, $super, 'TestItem', $TestItem);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, (($scope.get('Volt')).$$scope.get('Model')));
  (function($base, $super) {
    function $Item(){};
    var self = $Item = $klass($base, $super, 'Item', $Item);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, (($scope.get('Volt')).$$scope.get('Model')));
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3, $d, TMP_5, $e, TMP_6, $f, TMP_7, $g, TMP_8, $h, TMP_10, $i, TMP_13, $j, TMP_15, $k, TMP_17, $l, TMP_19, $m, TMP_22, $n, TMP_23, $o, TMP_24, $p, TMP_25, $q, TMP_27, $r, TMP_29, $s, TMP_30, $t, TMP_32, $u, TMP_34, $v, TMP_40, $w, TMP_42, $x, TMP_43, $y, TMP_44, $z, TMP_45, $aa, TMP_46, $ab, TMP_52, $ac, TMP_60;

  ($a = ($b = self).$it, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $b, a = nil;

    a = (($scope.get('Volt')).$$scope.get('Model')).$new();
      (($a = ["yes"]), $b = a, $b['$_stash='].apply($b, $a), $a[$a.length-1]);
      return self.$expect(a.$_stash()).$to(self.$eq("yes"));}, TMP_2.$$s = self, TMP_2), $a).call($b, "should allow _ methods to be used to store values without predefining them");
    ($a = ($c = self).$it, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $a, $b, TMP_4, $c, a = nil, values = nil;

    a = (($scope.get('Volt')).$$scope.get('Model')).$new();
      values = [];
      ($a = ($b = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

      return values['$<<'](a.$_name())}, TMP_4.$$s = self, TMP_4), $a).call($b)['$watch!']();
      self.$expect(values).$to(self.$eq([nil]));
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      (($a = ["Bob"]), $c = a, $c['$_name='].apply($c, $a), $a[$a.length-1]);
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      return self.$expect(values).$to(self.$eq([nil, "Bob"]));}, TMP_3.$$s = self, TMP_3), $a).call($c, "should update other values off the same model");
    ($a = ($d = self).$it, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, a = nil, b = nil;

    a = (($scope.get('Volt')).$$scope.get('Model')).$new();
      b = a.$_missing()['$nil?']();
      return self.$expect(b).$to(self.$eq(true));}, TMP_5.$$s = self, TMP_5), $a).call($d, "should say unregistered attributes are nil");
    ($a = ($e = self).$it, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $a, $b, a = nil;

    a = (($scope.get('Volt')).$$scope.get('Model')).$new();
      self.$expect((a.$_missing()['$!']())).$to(self.$eq(true));
      (($a = [nil]), $b = a, $b['$_mis1='].apply($b, $a), $a[$a.length-1]);
      (($a = [false]), $b = a, $b['$_false1='].apply($b, $a), $a[$a.length-1]);
      self.$expect(a.$_mis1()['$!']()).$to(self.$eq(true));
      return self.$expect(a.$_false1()['$!']()).$to(self.$eq(true));}, TMP_6.$$s = self, TMP_6), $a).call($e, "should negate nil and false correctly");
    ($a = ($f = self).$it, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, a = nil;

    a = (($scope.get('Volt')).$$scope.get('Model')).$new();
      return self.$expect(a.$_something().$attributes()).$to(self.$eq(nil));}, TMP_7.$$s = self, TMP_7), $a).call($f, "should return a nil model for an underscore value that doesn't exist");
    ($a = ($g = self).$it, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $a, $b, TMP_9, $c, a = nil, count = nil;

    a = (($scope.get('Volt')).$$scope.get('Model')).$new();
      count = 0;
      ($a = ($b = self).$lambda, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

      a.$_blue();
        return count = count['$+'](1);}, TMP_9.$$s = self, TMP_9), $a).call($b)['$watch!']();
      self.$expect(count).$to(self.$eq(1));
      (($a = ["one"]), $c = a, $c['$_blue='].apply($c, $a), $a[$a.length-1]);
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      self.$expect(count).$to(self.$eq(2));
      (($a = ["two"]), $c = a, $c['$_blue='].apply($c, $a), $a[$a.length-1]);
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      return self.$expect(count).$to(self.$eq(3));}, TMP_8.$$s = self, TMP_8), $a).call($g, "should trigger changed once when a new value is assigned.");
    ($a = ($h = self).$it, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this, $a, $b, TMP_11, $c, TMP_12, $d, a = nil, blue_count = nil, green_count = nil;

    a = (($scope.get('Volt')).$$scope.get('Model')).$new();
      blue_count = 0;
      green_count = 0;
      ($a = ($b = self).$lambda, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

      a.$_blue();
        return blue_count = blue_count['$+'](1);}, TMP_11.$$s = self, TMP_11), $a).call($b)['$watch!']();
      ($a = ($c = self).$lambda, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

      a.$_green();
        return green_count = green_count['$+'](1);}, TMP_12.$$s = self, TMP_12), $a).call($c)['$watch!']();
      self.$expect(blue_count).$to(self.$eq(1));
      self.$expect(green_count).$to(self.$eq(1));
      (($a = ["one"]), $d = a, $d['$_green='].apply($d, $a), $a[$a.length-1]);
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      self.$expect(blue_count).$to(self.$eq(1));
      self.$expect(green_count).$to(self.$eq(2));
      (($a = ["two"]), $d = a, $d['$_blue='].apply($d, $a), $a[$a.length-1]);
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      self.$expect(blue_count).$to(self.$eq(2));
      return self.$expect(green_count).$to(self.$eq(2));}, TMP_10.$$s = self, TMP_10), $a).call($h, "should not trigger changed on other attributes");
    ($a = ($i = self).$it, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this, $a, $b, TMP_14, $c, a = nil, c = nil, count = nil;

    a = (($scope.get('Volt')).$$scope.get('Model')).$new();
      (($a = [1]), $b = a, $b['$_one='].apply($b, $a), $a[$a.length-1]);
      (($a = [2]), $b = a, $b['$_two='].apply($b, $a), $a[$a.length-1]);
      (($a = [3]), $b = a, $b['$_three='].apply($b, $a), $a[$a.length-1]);
      c = nil;
      count = 0;
      ($a = ($b = self).$lambda, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

      c = a.$_one()['$+'](a.$_two());
        return count = count['$+'](1);}, TMP_14.$$s = self, TMP_14), $a).call($b)['$watch!']();
      self.$expect(count).$to(self.$eq(1));
      (($a = [5]), $c = a, $c['$_two='].apply($c, $a), $a[$a.length-1]);
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      self.$expect(count).$to(self.$eq(2));
      (($a = [6]), $c = a, $c['$_one='].apply($c, $a), $a[$a.length-1]);
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      self.$expect(count).$to(self.$eq(3));
      (($a = [7]), $c = a, $c['$_three='].apply($c, $a), $a[$a.length-1]);
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      return self.$expect(count).$to(self.$eq(3));}, TMP_13.$$s = self, TMP_13), $a).call($i, "should call change through arguments");
    ($a = ($j = self).$it, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this, $a, $b, TMP_16, $c, model = nil, array = nil, values = nil;

    model = (($scope.get('Volt')).$$scope.get('Model')).$new();
      array = [];
      array['$<<'](model);
      values = [];
      ($a = ($b = self).$lambda, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

      return values['$<<'](array['$[]'](0).$_prop())}, TMP_16.$$s = self, TMP_16), $a).call($b)['$watch!']();
      self.$expect(values).$to(self.$eq([nil]));
      (($a = ["one"]), $c = model, $c['$_prop='].apply($c, $a), $a[$a.length-1]);
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      return self.$expect(values).$to(self.$eq([nil, "one"]));}, TMP_15.$$s = self, TMP_15), $a).call($j, "should update through a normal array");
    ($a = ($k = self).$it, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this, $a, $b, TMP_18, model = nil, count = nil;

    model = (($scope.get('Volt')).$$scope.get('Model')).$new();
      model.$_items()['$<<']($hash2(["_name"], {"_name": "One"}));
      model.$_items()['$<<']($hash2(["_name"], {"_name": "Two"}));
      model.$_items()['$<<']($hash2(["_name"], {"_name": "Three"}));
      count = 0;
      ($a = ($b = self).$lambda, $a.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this;

      model.$_items()['$[]'](2);
        return count = count['$+'](1);}, TMP_18.$$s = self, TMP_18), $a).call($b)['$watch!']();
      self.$expect(count).$to(self.$eq(1));
      model.$_items().$delete_at(1);
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      return self.$expect(count).$to(self.$eq(2));}, TMP_17.$$s = self, TMP_17), $a).call($k, "should trigger changed for any indicies after a deleted index");
    ($a = ($l = self).$it, $a.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this, $a, $b, TMP_20, $c, TMP_21, model = nil, size = nil, length = nil, count_size = nil, count_length = nil;

    model = (($scope.get('Volt')).$$scope.get('Model')).$new();
      model.$_items()['$<<']($hash2(["_name"], {"_name": "One"}));
      size = model.$_items().$size();
      length = model.$_items().$length();
      count_size = 0;
      count_length = 0;
      ($a = ($b = self).$lambda, $a.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this;

      model.$_items().$size();
        return count_size = count_size['$+'](1);}, TMP_20.$$s = self, TMP_20), $a).call($b)['$watch!']();
      ($a = ($c = self).$lambda, $a.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;

      model.$_items().$length();
        return count_length = count_length['$+'](1);}, TMP_21.$$s = self, TMP_21), $a).call($c)['$watch!']();
      self.$expect(count_size).$to(self.$eq(1));
      self.$expect(count_length).$to(self.$eq(1));
      model.$_items()['$<<']($hash2(["_name"], {"_name": "Two"}));
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      self.$expect(count_size).$to(self.$eq(2));
      return self.$expect(count_length).$to(self.$eq(2));}, TMP_19.$$s = self, TMP_19), $a).call($l, "should change the size and length when an item gets added");
    ($a = ($m = self).$it, $a.$$p = (TMP_22 = function(){var self = TMP_22.$$s || this, model = nil;

    model = (($scope.get('Volt')).$$scope.get('Model')).$new();
      model.$_items()['$<<']($hash2(["name", "lists"], {"name": "Cool", "lists": []}));
      model.$_items()['$[]'](0).$_lists()['$<<']($hash2(["name"], {"name": "worked"}));
      return self.$expect(model.$_items()['$[]'](0).$_lists()['$[]'](0).$_name()).$to(self.$eq("worked"));}, TMP_22.$$s = self, TMP_22), $a).call($m, "should add doubly nested arrays");
    ($a = ($n = self).$it, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this, model = nil;

    model = (($scope.get('Volt')).$$scope.get('Model')).$new();
      model.$_items()['$<<']($hash2(["_name", "_lists"], {"_name": "Test", "_lists": []}));
      return self.$expect(model.$_items()['$[]'](0).$_lists().$class()).$to(self.$eq((($scope.get('Volt')).$$scope.get('ArrayModel'))));}, TMP_23.$$s = self, TMP_23), $a).call($n, "should make pushed subarrays into ArrayModels");
    ($a = ($o = self).$it, $a.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this, $a, $b, model = nil;

    model = (($scope.get('Volt')).$$scope.get('Model')).$new();
      (($a = ["Test"]), $b = model.$_item(), $b['$_name='].apply($b, $a), $a[$a.length-1]);
      (($a = [[]]), $b = model.$_item(), $b['$_lists='].apply($b, $a), $a[$a.length-1]);
      return self.$expect(model.$_item().$_lists().$class()).$to(self.$eq((($scope.get('Volt')).$$scope.get('ArrayModel'))));}, TMP_24.$$s = self, TMP_24), $a).call($o, "should make assigned subarrays into ArrayModels");
    ($a = ($p = self).$it, $a.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this, $a, $b, TMP_26, $c, a = nil, count = nil;

    a = (($scope.get('Volt')).$$scope.get('Model')).$new();
      count = 0;
      ($a = ($b = self).$lambda, $a.$$p = (TMP_26 = function(){var self = TMP_26.$$s || this, $a, $b;

      ($a = ($b = a.$_blue(), $b !== false && $b !== nil ?a.$_blue()['$respond_to?']("green") : $b), $a !== false && $a !== nil ?a.$_blue().$_green() : $a);
        return count = count['$+'](1);}, TMP_26.$$s = self, TMP_26), $a).call($b)['$watch!']();
      self.$expect(count).$to(self.$eq(1));
      (($a = [5]), $c = a.$_blue(), $c['$_green='].apply($c, $a), $a[$a.length-1]);
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      self.$expect(count).$to(self.$eq(1));
      (($a = [22]), $c = a, $c['$_blue='].apply($c, $a), $a[$a.length-1]);
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      self.$expect(count).$to(self.$eq(2));
      (($a = [$hash2(["green"], {"green": 50})]), $c = a, $c['$_blue='].apply($c, $a), $a[$a.length-1]);
      self.$expect(a.$_blue().$_green()).$to(self.$eq(50));
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      return self.$expect(count).$to(self.$eq(3));}, TMP_25.$$s = self, TMP_25), $a).call($p, "should call changed when a the reference to a submodel is assigned to another value");
    ($a = ($q = self).$it, $a.$$p = (TMP_27 = function(){var self = TMP_27.$$s || this, $a, $b, TMP_28, $c, a = nil, count = nil;

    a = (($scope.get('Volt')).$$scope.get('Model')).$new();
      count = 0;
      ($a = ($b = self).$lambda, $a.$$p = (TMP_28 = function(){var self = TMP_28.$$s || this;

      a.$_blue();
        return count = count['$+'](1);}, TMP_28.$$s = self, TMP_28), $a).call($b)['$watch!']();
      self.$expect(count).$to(self.$eq(1));
      (($a = [1]), $c = a, $c['$_blue='].apply($c, $a), $a[$a.length-1]);
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      self.$expect(count).$to(self.$eq(2));
      a.$delete("blue");
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      return self.$expect(count).$to(self.$eq(3));}, TMP_27.$$s = self, TMP_27), $a).call($q, "should trigger changed when a value is deleted");
    ($a = ($r = self).$it, $a.$$p = (TMP_29 = function(){var self = TMP_29.$$s || this, a = nil;

    a = (($scope.get('Volt')).$$scope.get('Model')).$new();
      a.$_items()['$<<']($hash2(["name"], {"name": $hash2(["text"], {"text": "Name"})}));
      return self.$expect(a.$_items()['$[]'](0).$_name().$_text()).$to(self.$eq("Name"));}, TMP_29.$$s = self, TMP_29), $a).call($r, "should let you append nested hashes");
    ($a = ($s = self).$it, $a.$$p = (TMP_30 = function(){var self = TMP_30.$$s || this, $a, $b, TMP_31, a = nil, count = nil;

    a = (($scope.get('Volt')).$$scope.get('Model')).$new();
      a.$_lists()['$<<'](1);
      count = 0;
      ($a = ($b = a.$_lists()).$on, $a.$$p = (TMP_31 = function(){var self = TMP_31.$$s || this;

      return count = count['$+'](1)}, TMP_31.$$s = self, TMP_31), $a).call($b, "added");
      self.$expect(count).$to(self.$eq(0));
      a.$_lists()['$<<'](2);
      return self.$expect(count).$to(self.$eq(1));}, TMP_30.$$s = self, TMP_30), $a).call($s, "should not call added too many times");
    ($a = ($t = self).$it, $a.$$p = (TMP_32 = function(){var self = TMP_32.$$s || this, $a, $b, TMP_33, $c, a = nil, count = nil;

    a = (($scope.get('Volt')).$$scope.get('Model')).$new();
      count = 0;
      ($a = ($b = self).$lambda, $a.$$p = (TMP_33 = function(){var self = TMP_33.$$s || this;

      count = count['$+'](1);
        return a.$_new_item().$_name();}, TMP_33.$$s = self, TMP_33), $a).call($b)['$watch!']();
      self.$expect(count).$to(self.$eq(1));
      (($a = ["Testing"]), $c = a.$_new_item(), $c['$_name='].apply($c, $a), $a[$a.length-1]);
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      return self.$expect(count).$to(self.$eq(2));}, TMP_32.$$s = self, TMP_32), $a).call($t, "should propigate to different branches");
    ($a = ($u = self).$describe, $a.$$p = (TMP_34 = function(){var self = TMP_34.$$s || this, $a, $b, TMP_35, $c, TMP_36, $d, TMP_37, $e, TMP_38;

    ($a = ($b = self).$it, $a.$$p = (TMP_35 = function(){var self = TMP_35.$$s || this, $a, $b, a = nil;

      a = (($scope.get('Volt')).$$scope.get('Model')).$new();
        self.$expect(a.$_test().$path()).$to(self.$eq(["test"]));
        (($a = [$hash2(["_name"], {"_name": "Yes"})]), $b = a, $b['$_test='].apply($b, $a), $a[$a.length-1]);
        self.$expect(a.$_test().$path()).$to(self.$eq(["test"]));
        a.$_items()['$<<']($hash2(["_name"], {"_name": "Yes"}));
        self.$expect(a.$_items().$path()).$to(self.$eq(["items"]));
        return self.$expect(a.$_items()['$[]'](0).$path()).$to(self.$eq(["items", "[]"]));}, TMP_35.$$s = self, TMP_35), $a).call($b, "should store the path");
      ($a = ($c = self).$it, $a.$$p = (TMP_36 = function(){var self = TMP_36.$$s || this, $a, $b, a = nil;

      a = (($scope.get('Volt')).$$scope.get('Model')).$new();
        (($a = [[$hash2(["_name"], {"_name": "Cool"})]]), $b = a, $b['$_items='].apply($b, $a), $a[$a.length-1]);
        self.$expect(a.$_items().$path()).$to(self.$eq(["items"]));
        return self.$expect(a.$_items()['$[]'](0).$path()).$to(self.$eq(["items", "[]"]));}, TMP_36.$$s = self, TMP_36), $a).call($c, "should store the paths when assigned");
      ($a = ($d = self).$it, $a.$$p = (TMP_37 = function(){var self = TMP_37.$$s || this, a = nil;

      a = (($scope.get('Volt')).$$scope.get('Model')).$new();
        a.$_items()['$<<']($hash2(["name", "lists"], {"name": "Cool", "lists": [$hash2(["name"], {"name": "One"}), $hash2(["name"], {"name": "Two"})]}));
        self.$expect(a.$_items()['$[]'](0).$_lists().$path()).$to(self.$eq(["items", "[]", "lists"]));
        return self.$expect(a.$_items()['$[]'](0).$_lists()['$[]'](1).$path()).$to(self.$eq(["items", "[]", "lists", "[]"]));}, TMP_37.$$s = self, TMP_37), $a).call($d, "should handle nested paths");
      return ($a = ($e = self).$it, $a.$$p = (TMP_38 = function(){var self = TMP_38.$$s || this, $a, $b, TMP_39, a = nil, count = nil, b = nil;

      a = (($scope.get('Volt')).$$scope.get('Model')).$new();
        count = 0;
        b = a.$_items();
        ($a = ($b = b).$on, $a.$$p = (TMP_39 = function(){var self = TMP_39.$$s || this;

        return count = count['$+'](1)}, TMP_39.$$s = self, TMP_39), $a).call($b, "added");
        self.$expect(count).$to(self.$eq(0));
        b['$<<']($hash2(["_name"], {"_name": "one"}));
        b['$<<']($hash2(["_name"], {"_name": "two"}));
        return self.$expect(count).$to(self.$eq(2));}, TMP_38.$$s = self, TMP_38), $a).call($e, "should trigger added when added");}, TMP_34.$$s = self, TMP_34), $a).call($u, "paths");
    ($a = ($v = self).$it, $a.$$p = (TMP_40 = function(){var self = TMP_40.$$s || this, $a, $b, TMP_41, $c, a = nil, count = nil;

    a = (($scope.get('Volt')).$$scope.get('Model')).$new();
      count = 0;
      ($a = ($b = self).$lambda, $a.$$p = (TMP_41 = function(){var self = TMP_41.$$s || this;

      count = count['$+'](1);
        return a.$_complete();}, TMP_41.$$s = self, TMP_41), $a).call($b)['$watch!']();
      self.$expect(count).$to(self.$eq(1));
      (($a = [true]), $c = a, $c['$_complete='].apply($c, $a), $a[$a.length-1]);
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      self.$expect(count).$to(self.$eq(2));
      (($a = [false]), $c = a, $c['$_complete='].apply($c, $a), $a[$a.length-1]);
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      return self.$expect(count).$to(self.$eq(3));}, TMP_40.$$s = self, TMP_40), $a).call($v, "should trigger on false assign");
    ($a = ($w = self).$it, $a.$$p = (TMP_42 = function(){var self = TMP_42.$$s || this, array = nil;

    array = (($scope.get('Volt')).$$scope.get('ArrayModel')).$new([]);
      array['$<<']($hash2(["name"], {"name": "One"}));
      array['$<<']($hash2(["name"], {"name": "Two"}));
      array['$<<']($hash2(["name"], {"name": "Three"}));
      self.$expect(array.$size()).$to(self.$eq(3));
      self.$expect(array.$index(array['$[]'](0))).$to(self.$eq(0));
      array.$delete(array['$[]'](0));
      self.$expect(array.$size()).$to(self.$eq(2));
      return self.$expect(array['$[]'](0).$_name()).$to(self.$eq("Two"));}, TMP_42.$$s = self, TMP_42), $a).call($w, "should delete from an ArrayModel");
    ($a = ($x = self).$it, $a.$$p = (TMP_43 = function(){var self = TMP_43.$$s || this, a = nil;

    a = (($scope.get('Volt')).$$scope.get('Model')).$new($hash2(["_name"], {"_name": "Cool"}));
      return self.$expect(a['$=='](a)).$to(self.$eq(true));}, TMP_43.$$s = self, TMP_43), $a).call($x, "should compare true");
    ($a = ($y = self).$it, $a.$$p = (TMP_44 = function(){var self = TMP_44.$$s || this, a = nil;

    a = [$hash2(["name"], {"name": "One"}), $hash2(["name"], {"name": "Two"}), $hash2(["name"], {"name": "Three"})];
      return self.$expect(a.$index(a['$[]'](1))).$to(self.$eq(1));}, TMP_44.$$s = self, TMP_44), $a).call($y, "should do index");
    ($a = ($z = self).$it, $a.$$p = (TMP_45 = function(){var self = TMP_45.$$s || this, a = nil, item1 = nil, all_items = nil;

    a = (($scope.get('Volt')).$$scope.get('Model')).$new();
      a.$_items()['$<<']($hash2(["name", "other"], {"name": "Test1", "other": $hash2(["time"], {"time": "Now"})}));
      a.$_items()['$<<']($hash2(["name", "other"], {"name": "Test2", "other": $hash2(["time"], {"time": "Later"})}));
      item1 = a.$_items()['$[]'](0).$to_h();
      self.$expect(item1['$[]']("name")).$to(self.$eq("Test1"));
      self.$expect(item1['$[]']("other")['$[]']("time")).$to(self.$eq("Now"));
      all_items = a.$_items().$to_a();
      a = [$hash2(["name", "other"], {"name": "Test1", "other": $hash2(["time"], {"time": "Now"})}), $hash2(["name", "other"], {"name": "Test2", "other": $hash2(["time"], {"time": "Later"})})];
      return self.$expect(all_items).$to(self.$eq(a));}, TMP_45.$$s = self, TMP_45), $a).call($z, "should convert to a hash, and unwrap all of the way down");
    ($a = ($aa = self).$describe, $a.$$p = (TMP_46 = function(){var self = TMP_46.$$s || this, $a, $b, TMP_47, $c, TMP_48, $d, TMP_49, $e, TMP_50, $f, TMP_51;

    ($a = ($b = self).$before, $a.$$p = (TMP_47 = function(){var self = TMP_47.$$s || this;

      return self.model = (($scope.get('Volt')).$$scope.get('Model')).$new()}, TMP_47.$$s = self, TMP_47), $a).call($b);
      ($a = ($c = self).$it, $a.$$p = (TMP_48 = function(){var self = TMP_48.$$s || this, $a, $b;
        if (self.model == null) self.model = nil;

      (($a = ["Test"]), $b = self.model.$_object(), $b['$_name='].apply($b, $a), $a[$a.length-1]);
        return self.$expect(self.model.$_object().$path()).$to(self.$eq(["object"]));}, TMP_48.$$s = self, TMP_48), $a).call($c, "should set the model path");
      ($a = ($d = self).$it, $a.$$p = (TMP_49 = function(){var self = TMP_49.$$s || this;
        if (self.model == null) self.model = nil;

      self.model.$_items()['$<<']($hash2(["_name"], {"_name": "Bob"}));
        self.$expect(self.model.$_items().$path()).$to(self.$eq(["items"]));
        return self.$expect(self.model.$_items()['$[]'](0).$path()).$to(self.$eq(["items", "[]"]));}, TMP_49.$$s = self, TMP_49), $a).call($d, "should set the model path for a sub array");
      ($a = ($e = self).$it, $a.$$p = (TMP_50 = function(){var self = TMP_50.$$s || this;
        if (self.model == null) self.model = nil;

      self.model.$_lists()['$<<']($hash2(["_name", "_items"], {"_name": "List 1", "_items": []}));
        return self.$expect(self.model.$_lists()['$[]'](0).$_items().$path()).$to(self.$eq(["lists", "[]", "items"]));}, TMP_50.$$s = self, TMP_50), $a).call($e, "should set the model path for sub sub arrays");
      return ($a = ($f = self).$it, $a.$$p = (TMP_51 = function(){var self = TMP_51.$$s || this, test_item = nil;
        if (self.model == null) self.model = nil;

      test_item = $scope.get('TestItem').$new();
        self.model.$_items()['$<<'](test_item);
        return self.$expect(self.model.$_items()['$[]'](0).$path()).$to(self.$eq(["items", "[]"]));}, TMP_51.$$s = self, TMP_51), $a).call($f, "should update the path when added from a model instance to a collection");}, TMP_46.$$s = self, TMP_46), $a).call($aa, "model paths");
    ($a = ($ab = self).$describe, $a.$$p = (TMP_52 = function(){var self = TMP_52.$$s || this, $a, $b, TMP_53, $c, TMP_54, $d, TMP_57;

    ($a = ($b = self).$let, $a.$$p = (TMP_53 = function(){var self = TMP_53.$$s || this;

      return (($scope.get('Volt')).$$scope.get('Model')).$new()}, TMP_53.$$s = self, TMP_53), $a).call($b, "model");
      ($a = ($c = self).$it, $a.$$p = (TMP_54 = function(){var self = TMP_54.$$s || this, $a, $b, TMP_55;

      return ($a = ($b = ["attributes", "parent", "path", "options", "persistor"]).$each, $a.$$p = (TMP_55 = function(attr_name){var self = TMP_55.$$s || this, $a, $b, TMP_56;
if (attr_name == null) attr_name = nil;
        return ($a = ($b = self).$expect, $a.$$p = (TMP_56 = function(){var self = TMP_56.$$s || this;

          return self.$model().$send(("_" + attr_name.$to_s()))}, TMP_56.$$s = self, TMP_56), $a).call($b).$to(self.$raise_error((($scope.get('Volt')).$$scope.get('InvalidFieldName')), "`" + (attr_name) + "` is reserved and can not be used as a field"))}, TMP_55.$$s = self, TMP_55), $a).call($b)}, TMP_54.$$s = self, TMP_54), $a).call($c, "should prevent reserved attributes from being read with underscores");
      return ($a = ($d = self).$it, $a.$$p = (TMP_57 = function(){var self = TMP_57.$$s || this, $a, $b, TMP_58;

      return ($a = ($b = ["attributes", "parent", "path", "options", "persistor"]).$each, $a.$$p = (TMP_58 = function(attr_name){var self = TMP_58.$$s || this, $a, $b, TMP_59;
if (attr_name == null) attr_name = nil;
        return ($a = ($b = self).$expect, $a.$$p = (TMP_59 = function(){var self = TMP_59.$$s || this;

          return self.$model().$send(("_" + attr_name.$to_s() + "="), "assign val")}, TMP_59.$$s = self, TMP_59), $a).call($b).$to(self.$raise_error((($scope.get('Volt')).$$scope.get('InvalidFieldName')), "`" + (attr_name) + "` is reserved and can not be used as a field"))}, TMP_58.$$s = self, TMP_58), $a).call($b)}, TMP_57.$$s = self, TMP_57), $a).call($d, "should prevent reserved attributes from being assigned directly");}, TMP_52.$$s = self, TMP_52), $a).call($ab, "reserved attributes");
    ($a = ($ac = self).$describe, $a.$$p = (TMP_60 = function(){var self = TMP_60.$$s || this, $a, $b, TMP_61;

    return ($a = ($b = self).$it, $a.$$p = (TMP_61 = function(){var self = TMP_61.$$s || this, persistor = nil;

      persistor = self.$double("volt/persistor");
        self.$expect(persistor).$to(self.$receive("new"));
        return self.model = (($scope.get('Volt')).$$scope.get('Model')).$new(nil, $hash2(["persistor"], {"persistor": persistor}));}, TMP_61.$$s = self, TMP_61), $a).call($b, "should setup a new instance of the persistor with self")}, TMP_60.$$s = self, TMP_60), $a).call($ac, "persistors");
    if ((($a = $scope.get('RUBY_PLATFORM')['$==']("opal")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      return nil
    };}, TMP_1.$$s = self, TMP_1), $a).call($b, (($scope.get('Volt')).$$scope.get('Model')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["models/persistors/params_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$describe', '$it', '$new', '$to', '$expect', '$class', '$_test', '$eq', '$persistor', '$_cool', '$<<', '$_items', '$[]', '$_name']);
  self.$require("spec_helper");
  self.$require("volt/models");
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2;

  return ($a = ($b = self).$it, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, a = nil;

    a = (($scope.get('Volt')).$$scope.get('Model')).$new($hash2([], {}), $hash2(["persistor"], {"persistor": (((($scope.get('Volt')).$$scope.get('Persistors'))).$$scope.get('Params'))}));
      self.$expect(a.$_test().$class()).$to(self.$eq((($scope.get('Volt')).$$scope.get('Model'))));
      self.$expect(a.$_test().$_cool().$persistor().$class()).$to(self.$eq((((($scope.get('Volt')).$$scope.get('Persistors'))).$$scope.get('Params'))));
      a.$_items()['$<<']($hash2(["name"], {"name": "Test"}));
      self.$expect(a.$_items().$persistor().$class()).$to(self.$eq((((($scope.get('Volt')).$$scope.get('Persistors'))).$$scope.get('Params'))));
      self.$expect(a.$_items()['$[]'](0).$persistor().$class()).$to(self.$eq((((($scope.get('Volt')).$$scope.get('Persistors'))).$$scope.get('Params'))));
      return self.$expect(a.$_items()['$[]'](0).$_name().$class()).$to(self.$eq($scope.get('String')));}, TMP_2.$$s = self, TMP_2), $a).call($b, "should stay as params classes when used")}, TMP_1.$$s = self, TMP_1), $a).call($b, (((($scope.get('Volt')).$$scope.get('Persistors'))).$$scope.get('Params')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["models/persistors/store_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$describe', '$it', '$double', '$to', '$expect', '$receive', '$and_return', '$new', '$_attr=', '$with', '$<<']);
  self.$require("spec_helper");
  self.$require("volt/models");
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3;

  ($a = ($b = self).$it, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $b, persistor = nil, persistor_instance = nil;
      if (self.model == null) self.model = nil;

    persistor = self.$double("volt/persistor");
      persistor_instance = self.$double("volt/persistor instance");
      self.$expect(persistor_instance).$to(self.$receive("loaded"));
      self.$expect(persistor).$to(self.$receive("new").$and_return(persistor_instance));
      self.model = (($scope.get('Volt')).$$scope.get('Model')).$new(nil, $hash2(["persistor"], {"persistor": persistor}));
      self.$expect(persistor_instance).$to(self.$receive("changed"));
      return (($a = ["yes"]), $b = self.model, $b['$_attr='].apply($b, $a), $a[$a.length-1]);}, TMP_2.$$s = self, TMP_2), $a).call($b, "should tell the persistor when the model has changed");
    return ($a = ($c = self).$it, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, persistor = nil, persistor_instance = nil;
      if (self.model == null) self.model = nil;

    persistor = self.$double("volt/persistor");
      persistor_instance = self.$double("volt/persistor instance");
      self.$expect(persistor_instance).$to(self.$receive("loaded"));
      self.$expect(persistor).$to(self.$receive("new").$and_return(persistor_instance));
      self.model = (($scope.get('Volt')).$$scope.get('ArrayModel')).$new([1, 2, 3], $hash2(["persistor"], {"persistor": persistor}));
      self.$expect(persistor_instance).$to(self.$receive("added").$with(4, 3));
      return self.model['$<<'](4);}, TMP_3.$$s = self, TMP_3), $a).call($c, "should tell the persistor when something is added to an array model");}, TMP_1.$$s = self, TMP_1), $a).call($b, (((($scope.get('Volt')).$$scope.get('Persistors'))).$$scope.get('Store')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/models/user"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$try', '$config', '$validate', '$login_field', '$server?', '$_hashed_password=', '$create', '$_password=']);
  if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {};
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $User(){};
      var self = $User = $klass($base, $super, 'User', $User);

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defs(self, '$login_field', function() {
        var $a, self = this;

        if ((($a = $scope.get('Volt').$config().$try("public").$try("auth").$try("use_username")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "username"
          } else {
          return "email"
        };
      });

      self.$validate(self.$login_field(), $hash2(["unique", "length"], {"unique": true, "length": 8}));

      self.$validate("email", $hash2(["email"], {"email": true}));

      if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
        self.$validate("password", $hash2(["length"], {"length": 8}))};

      return (def['$password='] = function(val) {
        var $a, $b, self = this;

        if ((($a = $scope.get('Volt')['$server?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return (($a = [(($scope.get('BCrypt')).$$scope.get('Password')).$create(val)]), $b = self, $b['$_hashed_password='].apply($b, $a), $a[$a.length-1])
          } else {
          return (($a = [val]), $b = self, $b['$_password='].apply($b, $a), $a[$a.length-1])
        };
      }, nil) && 'password=';
    })(self, $scope.get('Model'))
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["models/user_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$describe', '$subject', '$login_field', '$context', '$before', '$to', '$allow', '$and_return', '$receive', '$new', '$it', '$expect', '$eq', '$let!', '$password=', '$user', '$!', '$==', '$_password']);
  self.$require("spec_helper");
  self.$require("volt/models/user");
  (function($base, $super) {
    function $FakeConfig(){};
    var self = $FakeConfig = $klass($base, $super, 'FakeConfig', $FakeConfig);

    var def = self.$$proto, $scope = self.$$scope;

    def.$public = function() {
      var self = this;

      return self;
    };

    def.$auth = function() {
      var self = this;

      return self;
    };

    return (def.$use_username = function() {
      var self = this;

      return true;
    }, nil) && 'use_username';
  })(self, null);
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_9;

  ($a = ($b = self).$describe, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $b, TMP_3, $c, TMP_4, $d, TMP_7;

    ($a = ($b = self).$subject, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

      return (($scope.get('Volt')).$$scope.get('User')).$login_field()}, TMP_3.$$s = self, TMP_3), $a).call($b);
      self.$$proto.$context = self.$$proto.$describe;
      ($a = ($c = self).$context, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, $a, $b, TMP_5, $c, TMP_6;

      ($a = ($b = self).$before, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

        return self.$allow($scope.get('Volt')).$to(self.$receive("config").$and_return($scope.get('FakeConfig').$new()))}, TMP_5.$$s = self, TMP_5), $a).call($b);
        return ($a = ($c = self).$it, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

        return self.$expect(self.$subject()).$to(self.$eq("username"))}, TMP_6.$$s = self, TMP_6), $a).call($c, "returns :username");}, TMP_4.$$s = self, TMP_4), $a).call($c, "when use_username is set to true");
      return ($a = ($d = self).$context, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $a, $b, TMP_8;

      return ($a = ($b = self).$it, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

        return self.$expect(self.$subject()).$to(self.$eq("email"))}, TMP_8.$$s = self, TMP_8), $a).call($b, "returns :email")}, TMP_7.$$s = self, TMP_7), $a).call($d, "when use_username is not set");}, TMP_2.$$s = self, TMP_2), $a).call($b, ".login_field");
    return ($a = ($c = self).$describe, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $a, $b, TMP_10, $c, TMP_11, $d, TMP_12;

    ($a = ($b = self)['$let!'], $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

      return (($scope.get('Volt')).$$scope.get('User')).$new()}, TMP_10.$$s = self, TMP_10), $a).call($b, "user");
      ($a = ($c = self).$subject, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this, $a, $b;

      return (($a = ["test"]), $b = self.$user(), $b['$password='].apply($b, $a), $a[$a.length-1])}, TMP_11.$$s = self, TMP_11), $a).call($c);
      if ((($a = $scope.get('RUBY_PLATFORM')['$==']("opal")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {};
      return ($a = ($d = self).$context, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this, $a, $b, TMP_13, $c, TMP_14;

      ($a = ($b = self).$before, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

        return self.$allow($scope.get('Volt')).$to(self.$receive("server?").$and_return(false))}, TMP_13.$$s = self, TMP_13), $a).call($b);
        return ($a = ($c = self).$it, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

        self.$subject();
          return self.$expect(self.$user().$_password()).$to(self.$eq("test"));}, TMP_14.$$s = self, TMP_14), $a).call($c, "sets _password to passed value");}, TMP_12.$$s = self, TMP_12), $a).call($d, "when it is not a Volt server");}, TMP_9.$$s = self, TMP_9), $a).call($c, "#password=");}, TMP_1.$$s = self, TMP_1), $a).call($b, (($scope.get('Volt')).$$scope.get('User')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["models/validations_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$describe', '$let', '$new', '$test_model_class', '$validate', '$it', '$to', '$expect', '$errors', '$model', '$eq', '$save!', '$keys', '$marked_errors', '$shared_examples_for', '$specify', '$mark_field!', '$from', '$change', '$it_should_behave_like', '$lambda', '$==', '$context', '$before', '$_special_field=', '$regex_message', '$proc_message']);
  self.$require("spec_helper");
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3, $d, TMP_5, $e, TMP_6, $f, TMP_7, $g, TMP_18;

  ($a = ($b = self).$let, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

    return self.$test_model_class().$new()}, TMP_2.$$s = self, TMP_2), $a).call($b, "model");
    ($a = ($c = self).$let, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $a, $b, TMP_4;

    return ($a = ($b = $scope.get('Class')).$new, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

      self.$validate("count", $hash2(["numericality"], {"numericality": $hash2(["min", "max"], {"min": 5, "max": 10})}));
        self.$validate("description", $hash2(["length"], {"length": $hash2(["message", "length"], {"message": "needs to be longer", "length": 50})}));
        self.$validate("email", $hash2(["email"], {"email": true}));
        self.$validate("name", $hash2(["length"], {"length": 4}));
        self.$validate("phone_number", $hash2(["phone_number"], {"phone_number": true}));
        return self.$validate("username", $hash2(["presence"], {"presence": true}));}, TMP_4.$$s = self, TMP_4), $a).call($b, (($scope.get('Volt')).$$scope.get('Model')))}, TMP_3.$$s = self, TMP_3), $a).call($c, "test_model_class");
    ($a = ($d = self).$it, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

    return self.$expect(self.$model().$errors()).$to(self.$eq($hash2(["count", "description", "email", "name", "phone_number", "username"], {"count": ["must be a number"], "description": ["needs to be longer"], "email": ["must be an email address"], "name": ["must be at least 4 characters"], "phone_number": ["must be a phone number with area or country code"], "username": ["must be specified"]})))}, TMP_5.$$s = self, TMP_5), $a).call($d, "should return errors for all failed validations");
    ($a = ($e = self).$it, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

    self.$model()['$save!']();
      return self.$expect(self.$model().$marked_errors().$keys()).$to(self.$eq(["count", "description", "email", "name", "phone_number", "username"]));}, TMP_6.$$s = self, TMP_6), $a).call($e, "should show all fields in marked errors once saved");
    ($a = ($f = self).$describe, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $a, $b, TMP_8, $c, TMP_12, $d, TMP_13, $e, TMP_14, $f, TMP_15, $g, TMP_16, $h, TMP_17;

    ($a = ($b = self).$shared_examples_for, $a.$$p = (TMP_8 = function(field, message){var self = TMP_8.$$s || this, $a, $b, TMP_9;
if (field == null) field = nil;if (message == null) message = nil;
      return ($a = ($b = self).$specify, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $a, $b, TMP_10, $c, TMP_11;

        return ($a = ($b = self).$expect, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

          return self.$model()['$mark_field!'](field)}, TMP_10.$$s = self, TMP_10), $a).call($b).$to(($a = ($c = self).$change, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

          return self.$model().$marked_errors()}, TMP_11.$$s = self, TMP_11), $a).call($c).$from($hash2([], {})).$to($hash(field, [message])))}, TMP_9.$$s = self, TMP_9), $a).call($b)}, TMP_8.$$s = self, TMP_8), $a).call($b, "a built in validation");
      ($a = ($c = self).$describe, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

      message = "must be a number";
        return self.$it_should_behave_like("a built in validation", "count", message);}, TMP_12.$$s = self, TMP_12), $a).call($c, "numericality");
      ($a = ($d = self).$describe, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

      message = "needs to be longer";
        return self.$it_should_behave_like("a built in validation", "description", message);}, TMP_13.$$s = self, TMP_13), $a).call($d, "length");
      ($a = ($e = self).$describe, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

      message = "must be an email address";
        return self.$it_should_behave_like("a built in validation", "email", message);}, TMP_14.$$s = self, TMP_14), $a).call($e, "email");
      ($a = ($f = self).$describe, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

      message = "must be at least 4 characters";
        return self.$it_should_behave_like("a built in validation", "name", message);}, TMP_15.$$s = self, TMP_15), $a).call($f, "name");
      ($a = ($g = self).$describe, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

      message = "must be a phone number with area or country code";
        return self.$it_should_behave_like("a built in validation", "phone_number", message);}, TMP_16.$$s = self, TMP_16), $a).call($g, "phone_number");
      return ($a = ($h = self).$describe, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this;

      message = "must be specified";
        return self.$it_should_behave_like("a built in validation", "username", message);}, TMP_17.$$s = self, TMP_17), $a).call($h, "presence");}, TMP_7.$$s = self, TMP_7), $a).call($f, "builtin validations");
    return ($a = ($g = self).$describe, $a.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this, $a, $b, TMP_19, $c, TMP_20, $d, TMP_21, $e, TMP_24, $f, TMP_27;

    ($a = ($b = self).$let, $a.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this;

      return "regex failed"}, TMP_19.$$s = self, TMP_19), $a).call($b, "regex_message");
      ($a = ($c = self).$let, $a.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this;

      return "proc failed"}, TMP_20.$$s = self, TMP_20), $a).call($c, "proc_message");
      ($a = ($d = self).$let, $a.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this, $a, $b, TMP_22;

      return ($a = ($b = $scope.get('Class')).$new, $a.$$p = (TMP_22 = function(){var self = TMP_22.$$s || this, $a, $b, TMP_23;

        return self.$validate("special_field", $hash2(["format"], {"format": [$hash2(["with", "message"], {"with": /regex/, "message": "regex failed"}), $hash2(["with", "message"], {"with": ($a = ($b = self).$lambda, $a.$$p = (TMP_23 = function(x){var self = TMP_23.$$s || this;
if (x == null) x = nil;
          return x['$=='](false)}, TMP_23.$$s = self, TMP_23), $a).call($b), "message": "proc failed"})]}))}, TMP_22.$$s = self, TMP_22), $a).call($b, (($scope.get('Volt')).$$scope.get('Model')))}, TMP_21.$$s = self, TMP_21), $a).call($d, "test_model_class");
      ($a = ($e = self).$context, $a.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this, $a, $b, TMP_25, $c, TMP_26;

      ($a = ($b = self).$before, $a.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this, $a, $b;

        return (($a = ["nope"]), $b = self.$model(), $b['$_special_field='].apply($b, $a), $a[$a.length-1])}, TMP_25.$$s = self, TMP_25), $a).call($b);
        return ($a = ($c = self).$it, $a.$$p = (TMP_26 = function(){var self = TMP_26.$$s || this;

        return self.$expect(self.$model().$errors()).$to(self.$eq($hash2(["special_field"], {"special_field": [self.$regex_message(), self.$proc_message()]})))}, TMP_26.$$s = self, TMP_26), $a).call($c, "returns an array of errors");}, TMP_24.$$s = self, TMP_24), $a).call($e, "when multiple fail");
      return ($a = ($f = self).$context, $a.$$p = (TMP_27 = function(){var self = TMP_27.$$s || this, $a, $b, TMP_28, $c, TMP_29;

      ($a = ($b = self).$before, $a.$$p = (TMP_28 = function(){var self = TMP_28.$$s || this, $a, $b;

        return (($a = ["regex"]), $b = self.$model(), $b['$_special_field='].apply($b, $a), $a[$a.length-1])}, TMP_28.$$s = self, TMP_28), $a).call($b);
        return ($a = ($c = self).$it, $a.$$p = (TMP_29 = function(){var self = TMP_29.$$s || this;

        return self.$expect(self.$model().$errors()).$to(self.$eq($hash2(["special_field"], {"special_field": [self.$proc_message()]})))}, TMP_29.$$s = self, TMP_29), $a).call($c, "returns an array with a single error");}, TMP_27.$$s = self, TMP_27), $a).call($f, "when one fails");}, TMP_18.$$s = self, TMP_18), $a).call($g, "validators with multiple criteria");}, TMP_1.$$s = self, TMP_1), $a).call($b, (($scope.get('Volt')).$$scope.get('Model')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["models/validators/email_validator_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$describe', '$subject', '$new', '$params', '$let', '$model', '$field_name', '$options', '$email', '$valid_email', '$validate', '$described_class', '$insert', '$dup', '$before', '$to', '$allow', '$and_return', '$receive', '$and_call_original', '$result', '$it', '$expect', '$with', '$have_received', '$errors', '$eq', '$context', '$specify', '$valid?', '$invalid_email', '$custom_message']);
  self.$require("spec_helper");
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, $f, TMP_6, $g, TMP_7, $h, TMP_8, $i, TMP_9, $j, TMP_10, $k, TMP_16, $l, TMP_42;

  ($a = ($b = self).$subject, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a;

    return ($a = (($scope.get('Volt')).$$scope.get('EmailValidator'))).$new.apply($a, [].concat(self.$params()))}, TMP_2.$$s = self, TMP_2), $a).call($b);
    ($a = ($c = self).$let, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

    return [self.$model(), self.$field_name(), self.$options()]}, TMP_3.$$s = self, TMP_3), $a).call($c, "params");
    ($a = ($d = self).$let, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

    return (($scope.get('Volt')).$$scope.get('Model')).$new($hash2(["email"], {"email": self.$email()}))}, TMP_4.$$s = self, TMP_4), $a).call($d, "model");
    ($a = ($e = self).$let, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

    return "email"}, TMP_5.$$s = self, TMP_5), $a).call($e, "field_name");
    ($a = ($f = self).$let, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

    return true}, TMP_6.$$s = self, TMP_6), $a).call($f, "options");
    ($a = ($g = self).$let, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

    return "test@example.com"}, TMP_7.$$s = self, TMP_7), $a).call($g, "valid_email");
    ($a = ($h = self).$let, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

    return "test@example-com"}, TMP_8.$$s = self, TMP_8), $a).call($h, "invalid_email");
    ($a = ($i = self).$let, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

    return self.$valid_email()}, TMP_9.$$s = self, TMP_9), $a).call($i, "email");
    ($a = ($j = self).$describe, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this, $a, $b, TMP_11, $c, TMP_12, $d, TMP_13, $e, TMP_14, $f, TMP_15;

    ($a = ($b = self).$let, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this, $a;

      return ($a = self.$described_class()).$validate.apply($a, [].concat(self.$params().$dup().$insert(1, nil)))}, TMP_11.$$s = self, TMP_11), $a).call($b, "result");
      ($a = ($c = self).$before, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

      self.$allow(self.$described_class()).$to(self.$receive("new").$and_return(self.$subject()));
        self.$allow(self.$subject()).$to(self.$receive("errors").$and_call_original());
        return self.$result();}, TMP_12.$$s = self, TMP_12), $a).call($c);
      ($a = ($d = self).$it, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this, $a;

      return self.$expect(self.$described_class()).$to(($a = self.$have_received("new")).$with.apply($a, [].concat(self.$params())))}, TMP_13.$$s = self, TMP_13), $a).call($d, "initializes an email validator with the provided arguments");
      ($a = ($e = self).$it, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

      return self.$expect(self.$subject()).$to(self.$have_received("errors"))}, TMP_14.$$s = self, TMP_14), $a).call($e, "calls errors on the email validator");
      return ($a = ($f = self).$it, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

      return self.$expect(self.$subject().$errors()).$to(self.$eq(self.$result()))}, TMP_15.$$s = self, TMP_15), $a).call($f, "returns the result of calling errors on the validator");}, TMP_10.$$s = self, TMP_10), $a).call($j, ".validate");
    ($a = ($k = self).$describe, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this, $a, $b, TMP_17, $c, TMP_34;

    ($a = ($b = self).$context, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this, $a, $b, TMP_18, $c, TMP_19, $d, TMP_22, $e, TMP_25, $f, TMP_28, $g, TMP_31;

      ($a = ($b = self).$let, $a.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this;

        return true}, TMP_18.$$s = self, TMP_18), $a).call($b, "options");
        ($a = ($c = self).$context, $a.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this, $a, $b, TMP_20, $c, TMP_21;

        ($a = ($b = self).$let, $a.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this;

          return self.$valid_email()}, TMP_20.$$s = self, TMP_20), $a).call($b, "email");
          return ($a = ($c = self).$specify, $a.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;

          return self.$expect(self.$subject()['$valid?']()).$to(self.$eq(true))}, TMP_21.$$s = self, TMP_21), $a).call($c);}, TMP_19.$$s = self, TMP_19), $a).call($c, "when the email is valid");
        ($a = ($d = self).$context, $a.$$p = (TMP_22 = function(){var self = TMP_22.$$s || this, $a, $b, TMP_23, $c, TMP_24;

        ($a = ($b = self).$let, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;

          return "test@example"}, TMP_23.$$s = self, TMP_23), $a).call($b, "email");
          return ($a = ($c = self).$specify, $a.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this;

          return self.$expect(self.$subject()['$valid?']()).$to(self.$eq(false))}, TMP_24.$$s = self, TMP_24), $a).call($c);}, TMP_22.$$s = self, TMP_22), $a).call($d, "when the email is missing a TLD");
        ($a = ($e = self).$context, $a.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this, $a, $b, TMP_26, $c, TMP_27;

        ($a = ($b = self).$let, $a.$$p = (TMP_26 = function(){var self = TMP_26.$$s || this;

          return "test@example.c"}, TMP_26.$$s = self, TMP_26), $a).call($b, "email");
          return ($a = ($c = self).$specify, $a.$$p = (TMP_27 = function(){var self = TMP_27.$$s || this;

          return self.$expect(self.$subject()['$valid?']()).$to(self.$eq(false))}, TMP_27.$$s = self, TMP_27), $a).call($c);}, TMP_25.$$s = self, TMP_25), $a).call($e, "when the email TLD is only one character");
        ($a = ($f = self).$context, $a.$$p = (TMP_28 = function(){var self = TMP_28.$$s || this, $a, $b, TMP_29, $c, TMP_30;

        ($a = ($b = self).$let, $a.$$p = (TMP_29 = function(){var self = TMP_29.$$s || this;

          return "@example.com"}, TMP_29.$$s = self, TMP_29), $a).call($b, "email");
          return ($a = ($c = self).$specify, $a.$$p = (TMP_30 = function(){var self = TMP_30.$$s || this;

          return self.$expect(self.$subject()['$valid?']()).$to(self.$eq(false))}, TMP_30.$$s = self, TMP_30), $a).call($c);}, TMP_28.$$s = self, TMP_28), $a).call($f, "when the email is missing an username");
        return ($a = ($g = self).$context, $a.$$p = (TMP_31 = function(){var self = TMP_31.$$s || this, $a, $b, TMP_32, $c, TMP_33;

        ($a = ($b = self).$let, $a.$$p = (TMP_32 = function(){var self = TMP_32.$$s || this;

          return "test.example.com"}, TMP_32.$$s = self, TMP_32), $a).call($b, "email");
          return ($a = ($c = self).$specify, $a.$$p = (TMP_33 = function(){var self = TMP_33.$$s || this;

          return self.$expect(self.$subject()['$valid?']()).$to(self.$eq(false))}, TMP_33.$$s = self, TMP_33), $a).call($c);}, TMP_31.$$s = self, TMP_31), $a).call($g, "when the email is missing the @ symbol");}, TMP_17.$$s = self, TMP_17), $a).call($b, "when using the default regex");
      return ($a = ($c = self).$context, $a.$$p = (TMP_34 = function(){var self = TMP_34.$$s || this, $a, $b, TMP_35, $c, TMP_36, $d, TMP_39;

      ($a = ($b = self).$let, $a.$$p = (TMP_35 = function(){var self = TMP_35.$$s || this;

        return $hash2(["with"], {"with": /.+\@.+/})}, TMP_35.$$s = self, TMP_35), $a).call($b, "options");
        ($a = ($c = self).$context, $a.$$p = (TMP_36 = function(){var self = TMP_36.$$s || this, $a, $b, TMP_37, $c, TMP_38;

        ($a = ($b = self).$let, $a.$$p = (TMP_37 = function(){var self = TMP_37.$$s || this;

          return "test@example"}, TMP_37.$$s = self, TMP_37), $a).call($b, "email");
          return ($a = ($c = self).$specify, $a.$$p = (TMP_38 = function(){var self = TMP_38.$$s || this;

          return self.$expect(self.$subject()['$valid?']()).$to(self.$eq(true))}, TMP_38.$$s = self, TMP_38), $a).call($c);}, TMP_36.$$s = self, TMP_36), $a).call($c, "and the email qualifies");
        return ($a = ($d = self).$context, $a.$$p = (TMP_39 = function(){var self = TMP_39.$$s || this, $a, $b, TMP_40, $c, TMP_41;

        ($a = ($b = self).$let, $a.$$p = (TMP_40 = function(){var self = TMP_40.$$s || this;

          return "test$example"}, TMP_40.$$s = self, TMP_40), $a).call($b, "email");
          return ($a = ($c = self).$specify, $a.$$p = (TMP_41 = function(){var self = TMP_41.$$s || this;

          return self.$expect(self.$subject()['$valid?']()).$to(self.$eq(false))}, TMP_41.$$s = self, TMP_41), $a).call($c);}, TMP_39.$$s = self, TMP_39), $a).call($d, "and the email does not qualify");}, TMP_34.$$s = self, TMP_34), $a).call($c, "when using a custom regex");}, TMP_16.$$s = self, TMP_16), $a).call($k, "#valid?");
    return ($a = ($l = self).$describe, $a.$$p = (TMP_42 = function(){var self = TMP_42.$$s || this, $a, $b, TMP_43, $c, TMP_46, $d, TMP_49;

    ($a = ($b = self).$context, $a.$$p = (TMP_43 = function(){var self = TMP_43.$$s || this, $a, $b, TMP_44, $c, TMP_45;

      ($a = ($b = self).$let, $a.$$p = (TMP_44 = function(){var self = TMP_44.$$s || this;

        return self.$valid_email()}, TMP_44.$$s = self, TMP_44), $a).call($b, "email");
        return ($a = ($c = self).$it, $a.$$p = (TMP_45 = function(){var self = TMP_45.$$s || this;

        return self.$expect(self.$subject().$errors()).$to(self.$eq($hash2([], {})))}, TMP_45.$$s = self, TMP_45), $a).call($c, "returns an empty error hash");}, TMP_43.$$s = self, TMP_43), $a).call($b, "when the model has a valid email");
      ($a = ($c = self).$context, $a.$$p = (TMP_46 = function(){var self = TMP_46.$$s || this, $a, $b, TMP_47, $c, TMP_48;

      ($a = ($b = self).$let, $a.$$p = (TMP_47 = function(){var self = TMP_47.$$s || this;

        return self.$invalid_email()}, TMP_47.$$s = self, TMP_47), $a).call($b, "email");
        return ($a = ($c = self).$it, $a.$$p = (TMP_48 = function(){var self = TMP_48.$$s || this;

        return self.$expect(self.$subject().$errors()).$to(self.$eq($hash2(["email"], {"email": ["must be an email address"]})))}, TMP_48.$$s = self, TMP_48), $a).call($c, "returns an array of errors for email");}, TMP_46.$$s = self, TMP_46), $a).call($c, "when the model has an invalid email");
      return ($a = ($d = self).$context, $a.$$p = (TMP_49 = function(){var self = TMP_49.$$s || this, $a, $b, TMP_50, $c, TMP_51, $d, TMP_52;

      ($a = ($b = self).$let, $a.$$p = (TMP_50 = function(){var self = TMP_50.$$s || this;

        return $hash2(["message"], {"message": self.$custom_message()})}, TMP_50.$$s = self, TMP_50), $a).call($b, "options");
        ($a = ($c = self).$let, $a.$$p = (TMP_51 = function(){var self = TMP_51.$$s || this;

        return "this is a custom message"}, TMP_51.$$s = self, TMP_51), $a).call($c, "custom_message");
        return ($a = ($d = self).$context, $a.$$p = (TMP_52 = function(){var self = TMP_52.$$s || this, $a, $b, TMP_53, $c, TMP_54;

        ($a = ($b = self).$let, $a.$$p = (TMP_53 = function(){var self = TMP_53.$$s || this;

          return self.$invalid_email()}, TMP_53.$$s = self, TMP_53), $a).call($b, "email");
          return ($a = ($c = self).$it, $a.$$p = (TMP_54 = function(){var self = TMP_54.$$s || this;

          return self.$expect(self.$subject().$errors()).$to(self.$eq($hash2(["email"], {"email": [self.$custom_message()]})))}, TMP_54.$$s = self, TMP_54), $a).call($c, "returns errors with the custom message");}, TMP_52.$$s = self, TMP_52), $a).call($d, "and the email is invalid");}, TMP_49.$$s = self, TMP_49), $a).call($d, "when provided a custom error message");}, TMP_42.$$s = self, TMP_42), $a).call($l, "#errors");}, TMP_1.$$s = self, TMP_1), $a).call($b, (($scope.get('Volt')).$$scope.get('EmailValidator')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["models/validators/format_validator_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$describe', '$subject', '$new', '$described_class', '$init_params', '$let', '$model', '$field_name', '$options', '$field_content', '$regex_opts', '$lambda', '$match', '$proc_regex', '$test_proc', '$proc_message', '$regex', '$regex_message', '$valid_content', '$validate', '$validate_params', '$before', '$to', '$allow', '$and_return', '$receive', '$context', '$it', '$expect', '$errors', '$eq', '$specify', '$be_valid', '$invalid_content', '$to_not', '$proc_opts', '$[]', '$include']);
  self.$require("spec_helper");
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, $f, TMP_6, $g, TMP_7, $h, TMP_8, $i, TMP_9, $j, TMP_10, $k, TMP_12, $l, TMP_13, $m, TMP_14, $n, TMP_15, $o, TMP_16, $p, TMP_17, $q, TMP_18, $r, TMP_19, $s, TMP_20, $t, TMP_21, $u, TMP_25, $v, TMP_36, $w, TMP_47;

  ($a = ($b = self).$subject, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a;

    return ($a = self.$described_class()).$new.apply($a, [].concat(self.$init_params()))}, TMP_2.$$s = self, TMP_2), $a).call($b);
    ($a = ($c = self).$let, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

    return [self.$model(), self.$field_name()]}, TMP_3.$$s = self, TMP_3), $a).call($c, "init_params");
    ($a = ($d = self).$let, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

    return [self.$model(), nil, self.$field_name(), self.$options()]}, TMP_4.$$s = self, TMP_4), $a).call($d, "validate_params");
    ($a = ($e = self).$let, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

    return (($scope.get('Volt')).$$scope.get('Model')).$new($hash2(["field"], {"field": self.$field_content()}))}, TMP_5.$$s = self, TMP_5), $a).call($e, "model");
    ($a = ($f = self).$let, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

    return "field"}, TMP_6.$$s = self, TMP_6), $a).call($f, "field_name");
    ($a = ($g = self).$let, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

    return self.$regex_opts()}, TMP_7.$$s = self, TMP_7), $a).call($g, "options");
    ($a = ($h = self).$let, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

    return /^valid/}, TMP_8.$$s = self, TMP_8), $a).call($h, "regex");
    ($a = ($i = self).$let, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

    return /^valid/}, TMP_9.$$s = self, TMP_9), $a).call($i, "proc_regex");
    ($a = ($j = self).$let, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this, $a, $b, TMP_11;

    return ($a = ($b = self).$lambda, $a.$$p = (TMP_11 = function(content){var self = TMP_11.$$s || this;
if (content == null) content = nil;
      return self.$proc_regex().$match(content)}, TMP_11.$$s = self, TMP_11), $a).call($b)}, TMP_10.$$s = self, TMP_10), $a).call($j, "test_proc");
    ($a = ($k = self).$let, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

    return $hash2(["with", "message"], {"with": self.$test_proc(), "message": self.$proc_message()})}, TMP_12.$$s = self, TMP_12), $a).call($k, "proc_opts");
    ($a = ($l = self).$let, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

    return $hash2(["with", "message"], {"with": self.$regex(), "message": self.$regex_message()})}, TMP_13.$$s = self, TMP_13), $a).call($l, "regex_opts");
    ($a = ($m = self).$let, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

    return "proc is invalid"}, TMP_14.$$s = self, TMP_14), $a).call($m, "proc_message");
    ($a = ($n = self).$let, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

    return "regex is invalid"}, TMP_15.$$s = self, TMP_15), $a).call($n, "regex_message");
    ($a = ($o = self).$let, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

    return self.$valid_content()}, TMP_16.$$s = self, TMP_16), $a).call($o, "field_content");
    ($a = ($p = self).$let, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this;

    return "invalid_content"}, TMP_17.$$s = self, TMP_17), $a).call($p, "invalid_content");
    ($a = ($q = self).$let, $a.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this;

    return "valid_content"}, TMP_18.$$s = self, TMP_18), $a).call($q, "valid_content");
    ($a = ($r = self).$let, $a.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this, $a;

    return ($a = self.$described_class()).$validate.apply($a, [].concat(self.$validate_params()))}, TMP_19.$$s = self, TMP_19), $a).call($r, "validate");
    ($a = ($s = self).$before, $a.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this;

    return self.$allow(self.$described_class()).$to(self.$receive("new").$and_return(self.$subject()))}, TMP_20.$$s = self, TMP_20), $a).call($s);
    ($a = ($t = self).$context, $a.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this, $a, $b, TMP_22, $c, TMP_23, $d, TMP_24;

    ($a = ($b = self).$before, $a.$$p = (TMP_22 = function(){var self = TMP_22.$$s || this;

      return self.$validate()}, TMP_22.$$s = self, TMP_22), $a).call($b);
      ($a = ($c = self).$it, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;

      return self.$expect(self.$subject().$errors()).$to(self.$eq($hash2([], {})))}, TMP_23.$$s = self, TMP_23), $a).call($c, "should have no errors");
      return ($a = ($d = self).$specify, $a.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this;

      return self.$expect(self.$subject()).$to(self.$be_valid())}, TMP_24.$$s = self, TMP_24), $a).call($d);}, TMP_21.$$s = self, TMP_21), $a).call($t, "when no criteria is provided");
    ($a = ($u = self).$context, $a.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this, $a, $b, TMP_26, $c, TMP_27, $d, TMP_28, $e, TMP_32;

    ($a = ($b = self).$let, $a.$$p = (TMP_26 = function(){var self = TMP_26.$$s || this;

      return self.$regex_opts()}, TMP_26.$$s = self, TMP_26), $a).call($b, "options");
      ($a = ($c = self).$before, $a.$$p = (TMP_27 = function(){var self = TMP_27.$$s || this;

      return self.$validate()}, TMP_27.$$s = self, TMP_27), $a).call($c);
      ($a = ($d = self).$context, $a.$$p = (TMP_28 = function(){var self = TMP_28.$$s || this, $a, $b, TMP_29, $c, TMP_30, $d, TMP_31;

      ($a = ($b = self).$let, $a.$$p = (TMP_29 = function(){var self = TMP_29.$$s || this;

        return self.$valid_content()}, TMP_29.$$s = self, TMP_29), $a).call($b, "field_content");
        ($a = ($c = self).$it, $a.$$p = (TMP_30 = function(){var self = TMP_30.$$s || this;

        return self.$expect(self.$subject().$errors()).$to(self.$eq($hash2([], {})))}, TMP_30.$$s = self, TMP_30), $a).call($c, "should have no errors");
        return ($a = ($d = self).$specify, $a.$$p = (TMP_31 = function(){var self = TMP_31.$$s || this;

        return self.$expect(self.$subject()).$to(self.$be_valid())}, TMP_31.$$s = self, TMP_31), $a).call($d);}, TMP_28.$$s = self, TMP_28), $a).call($d, "and the field matches");
      return ($a = ($e = self).$context, $a.$$p = (TMP_32 = function(){var self = TMP_32.$$s || this, $a, $b, TMP_33, $c, TMP_34, $d, TMP_35;

      ($a = ($b = self).$let, $a.$$p = (TMP_33 = function(){var self = TMP_33.$$s || this;

        return self.$invalid_content()}, TMP_33.$$s = self, TMP_33), $a).call($b, "field_content");
        ($a = ($c = self).$it, $a.$$p = (TMP_34 = function(){var self = TMP_34.$$s || this;

        return self.$expect(self.$subject().$errors()).$to(self.$eq($hash(self.$field_name(), [self.$regex_message()])))}, TMP_34.$$s = self, TMP_34), $a).call($c, "should report the related error message");
        return ($a = ($d = self).$specify, $a.$$p = (TMP_35 = function(){var self = TMP_35.$$s || this;

        return self.$expect(self.$subject()).$to_not(self.$be_valid())}, TMP_35.$$s = self, TMP_35), $a).call($d);}, TMP_32.$$s = self, TMP_32), $a).call($e, "and the field does not match");}, TMP_25.$$s = self, TMP_25), $a).call($u, "when the only criterion is a regex");
    ($a = ($v = self).$context, $a.$$p = (TMP_36 = function(){var self = TMP_36.$$s || this, $a, $b, TMP_37, $c, TMP_38, $d, TMP_39, $e, TMP_43;

    ($a = ($b = self).$let, $a.$$p = (TMP_37 = function(){var self = TMP_37.$$s || this;

      return self.$proc_opts()}, TMP_37.$$s = self, TMP_37), $a).call($b, "options");
      ($a = ($c = self).$before, $a.$$p = (TMP_38 = function(){var self = TMP_38.$$s || this;

      return self.$validate()}, TMP_38.$$s = self, TMP_38), $a).call($c);
      ($a = ($d = self).$context, $a.$$p = (TMP_39 = function(){var self = TMP_39.$$s || this, $a, $b, TMP_40, $c, TMP_41, $d, TMP_42;

      ($a = ($b = self).$let, $a.$$p = (TMP_40 = function(){var self = TMP_40.$$s || this;

        return self.$valid_content()}, TMP_40.$$s = self, TMP_40), $a).call($b, "field_content");
        ($a = ($c = self).$it, $a.$$p = (TMP_41 = function(){var self = TMP_41.$$s || this;

        return self.$expect(self.$subject().$errors()).$to(self.$eq($hash2([], {})))}, TMP_41.$$s = self, TMP_41), $a).call($c, "should have no errors");
        return ($a = ($d = self).$specify, $a.$$p = (TMP_42 = function(){var self = TMP_42.$$s || this;

        return self.$expect(self.$subject()).$to(self.$be_valid())}, TMP_42.$$s = self, TMP_42), $a).call($d);}, TMP_39.$$s = self, TMP_39), $a).call($d, "and the field passes the block");
      return ($a = ($e = self).$context, $a.$$p = (TMP_43 = function(){var self = TMP_43.$$s || this, $a, $b, TMP_44, $c, TMP_45, $d, TMP_46;

      ($a = ($b = self).$let, $a.$$p = (TMP_44 = function(){var self = TMP_44.$$s || this;

        return self.$invalid_content()}, TMP_44.$$s = self, TMP_44), $a).call($b, "field_content");
        ($a = ($c = self).$it, $a.$$p = (TMP_45 = function(){var self = TMP_45.$$s || this;

        return self.$expect(self.$subject().$errors()).$to(self.$eq($hash(self.$field_name(), [self.$proc_message()])))}, TMP_45.$$s = self, TMP_45), $a).call($c, "should report the related error message");
        return ($a = ($d = self).$specify, $a.$$p = (TMP_46 = function(){var self = TMP_46.$$s || this;

        return self.$expect(self.$subject()).$to_not(self.$be_valid())}, TMP_46.$$s = self, TMP_46), $a).call($d);}, TMP_43.$$s = self, TMP_43), $a).call($e, "and the field fails the block");}, TMP_36.$$s = self, TMP_36), $a).call($v, "when the only criterion is a block");
    return ($a = ($w = self).$context, $a.$$p = (TMP_47 = function(){var self = TMP_47.$$s || this, $a, $b, TMP_48, $c, TMP_49, $d, TMP_50, $e, TMP_54, $f, TMP_58, $g, TMP_62;

    ($a = ($b = self).$let, $a.$$p = (TMP_48 = function(){var self = TMP_48.$$s || this;

      return [self.$regex_opts(), self.$proc_opts()]}, TMP_48.$$s = self, TMP_48), $a).call($b, "options");
      ($a = ($c = self).$before, $a.$$p = (TMP_49 = function(){var self = TMP_49.$$s || this;

      return self.$validate()}, TMP_49.$$s = self, TMP_49), $a).call($c);
      ($a = ($d = self).$context, $a.$$p = (TMP_50 = function(){var self = TMP_50.$$s || this, $a, $b, TMP_51, $c, TMP_52, $d, TMP_53;

      ($a = ($b = self).$let, $a.$$p = (TMP_51 = function(){var self = TMP_51.$$s || this;

        return self.$valid_content()}, TMP_51.$$s = self, TMP_51), $a).call($b, "field_content");
        ($a = ($c = self).$it, $a.$$p = (TMP_52 = function(){var self = TMP_52.$$s || this;

        return self.$expect(self.$subject().$errors()).$to(self.$eq($hash2([], {})))}, TMP_52.$$s = self, TMP_52), $a).call($c, "should have no errors");
        return ($a = ($d = self).$specify, $a.$$p = (TMP_53 = function(){var self = TMP_53.$$s || this;

        return self.$expect(self.$subject()).$to(self.$be_valid())}, TMP_53.$$s = self, TMP_53), $a).call($d);}, TMP_50.$$s = self, TMP_50), $a).call($d, "and the field passes all criteria");
      ($a = ($e = self).$context, $a.$$p = (TMP_54 = function(){var self = TMP_54.$$s || this, $a, $b, TMP_55, $c, TMP_56, $d, TMP_57;

      ($a = ($b = self).$let, $a.$$p = (TMP_55 = function(){var self = TMP_55.$$s || this;

        return /^invalid/}, TMP_55.$$s = self, TMP_55), $a).call($b, "regex");
        ($a = ($c = self).$it, $a.$$p = (TMP_56 = function(){var self = TMP_56.$$s || this;

        return self.$expect(self.$subject().$errors()).$to(self.$eq($hash(self.$field_name(), [self.$regex_message()])))}, TMP_56.$$s = self, TMP_56), $a).call($c, "should report the related error message");
        return ($a = ($d = self).$specify, $a.$$p = (TMP_57 = function(){var self = TMP_57.$$s || this;

        return self.$expect(self.$subject()).$to_not(self.$be_valid())}, TMP_57.$$s = self, TMP_57), $a).call($d);}, TMP_54.$$s = self, TMP_54), $a).call($e, "and the field fails the regex");
      ($a = ($f = self).$context, $a.$$p = (TMP_58 = function(){var self = TMP_58.$$s || this, $a, $b, TMP_59, $c, TMP_60, $d, TMP_61;

      ($a = ($b = self).$let, $a.$$p = (TMP_59 = function(){var self = TMP_59.$$s || this;

        return /^invalid/}, TMP_59.$$s = self, TMP_59), $a).call($b, "proc_regex");
        ($a = ($c = self).$it, $a.$$p = (TMP_60 = function(){var self = TMP_60.$$s || this;

        return self.$expect(self.$subject().$errors()).$to(self.$eq($hash(self.$field_name(), [self.$proc_message()])))}, TMP_60.$$s = self, TMP_60), $a).call($c, "should report the related error message");
        return ($a = ($d = self).$specify, $a.$$p = (TMP_61 = function(){var self = TMP_61.$$s || this;

        return self.$expect(self.$subject()).$to_not(self.$be_valid())}, TMP_61.$$s = self, TMP_61), $a).call($d);}, TMP_58.$$s = self, TMP_58), $a).call($f, "and the field fails the block");
      return ($a = ($g = self).$context, $a.$$p = (TMP_62 = function(){var self = TMP_62.$$s || this, $a, $b, TMP_63, $c, TMP_64, $d, TMP_65, $e, TMP_66;

      ($a = ($b = self).$let, $a.$$p = (TMP_63 = function(){var self = TMP_63.$$s || this;

        return self.$invalid_content()}, TMP_63.$$s = self, TMP_63), $a).call($b, "field_content");
        ($a = ($c = self).$it, $a.$$p = (TMP_64 = function(){var self = TMP_64.$$s || this;

        return self.$expect(self.$subject().$errors()['$[]'](self.$field_name())).$to(self.$include(self.$regex_message()))}, TMP_64.$$s = self, TMP_64), $a).call($c, "should report the regex error message");
        ($a = ($d = self).$it, $a.$$p = (TMP_65 = function(){var self = TMP_65.$$s || this;

        return self.$expect(self.$subject().$errors()['$[]'](self.$field_name())).$to(self.$include(self.$proc_message()))}, TMP_65.$$s = self, TMP_65), $a).call($d, "should report the proc error message");
        return ($a = ($e = self).$specify, $a.$$p = (TMP_66 = function(){var self = TMP_66.$$s || this;

        return self.$expect(self.$subject()).$to_not(self.$be_valid())}, TMP_66.$$s = self, TMP_66), $a).call($e);}, TMP_62.$$s = self, TMP_62), $a).call($g, "and the field fails both the regex and the block");}, TMP_47.$$s = self, TMP_47), $a).call($w, "when there is both regex and block criteria");}, TMP_1.$$s = self, TMP_1), $a).call($b, (($scope.get('Volt')).$$scope.get('FormatValidator')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["models/validators/length_validator_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$describe', '$subject', '$validate', '$params', '$let', '$model', '$field_name', '$options', '$new', '$name', '$context', '$it', '$to', '$expect', '$eq', '$==', '$raise_error']);
  self.$require("spec_helper");
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, $f, TMP_6, $g, TMP_7;

  ($a = ($b = self).$subject, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a;

    return ($a = (($scope.get('Volt')).$$scope.get('LengthValidator'))).$validate.apply($a, [].concat(self.$params()))}, TMP_2.$$s = self, TMP_2), $a).call($b);
    ($a = ($c = self).$let, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

    return [self.$model(), nil, self.$field_name(), self.$options()]}, TMP_3.$$s = self, TMP_3), $a).call($c, "params");
    ($a = ($d = self).$let, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

    return (($scope.get('Volt')).$$scope.get('Model')).$new($hash2(["name"], {"name": self.$name()}))}, TMP_4.$$s = self, TMP_4), $a).call($d, "model");
    ($a = ($e = self).$let, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

    return "name"}, TMP_5.$$s = self, TMP_5), $a).call($e, "field_name");
    ($a = ($f = self).$let, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

    return "John Doe"}, TMP_6.$$s = self, TMP_6), $a).call($f, "name");
    return ($a = ($g = self).$describe, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $a, $b, TMP_8, $c, TMP_16, $d, TMP_27;

    ($a = ($b = self).$context, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $a, $b, TMP_9, $c, TMP_10, $d, TMP_13;

      ($a = ($b = self).$let, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

        return 5}, TMP_9.$$s = self, TMP_9), $a).call($b, "options");
        ($a = ($c = self).$context, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this, $a, $b, TMP_11, $c, TMP_12;

        ($a = ($b = self).$let, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

          return "John Doe"}, TMP_11.$$s = self, TMP_11), $a).call($b, "name");
          return ($a = ($c = self).$it, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

          return self.$expect(self.$subject()).$to(self.$eq($hash2([], {})))}, TMP_12.$$s = self, TMP_12), $a).call($c);}, TMP_10.$$s = self, TMP_10), $a).call($c, "when name is \"John Doe\"");
        return ($a = ($d = self).$context, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this, $a, $b, TMP_14, $c, TMP_15;

        ($a = ($b = self).$let, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

          return "John"}, TMP_14.$$s = self, TMP_14), $a).call($b, "name");
          return ($a = ($c = self).$it, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

          return self.$expect(self.$subject()).$to(self.$eq($hash2(["name"], {"name": ["must be at least 5 characters"]})))}, TMP_15.$$s = self, TMP_15), $a).call($c);}, TMP_13.$$s = self, TMP_13), $a).call($d, "when name is \"John\"");}, TMP_8.$$s = self, TMP_8), $a).call($b, "when options is a Fixnum");
      ($a = ($c = self).$context, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this, $a, $b, TMP_17, $c, TMP_18, $d, TMP_21, $e, TMP_24;

      ($a = ($b = self).$let, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this;

        return $hash2(["length", "maximum"], {"length": 5, "maximum": 10})}, TMP_17.$$s = self, TMP_17), $a).call($b, "options");
        ($a = ($c = self).$context, $a.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this, $a, $b, TMP_19, $c, TMP_20;

        ($a = ($b = self).$let, $a.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this;

          return "John Doe"}, TMP_19.$$s = self, TMP_19), $a).call($b, "name");
          return ($a = ($c = self).$it, $a.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this;

          return self.$expect(self.$subject()).$to(self.$eq($hash2([], {})))}, TMP_20.$$s = self, TMP_20), $a).call($c);}, TMP_18.$$s = self, TMP_18), $a).call($c, "when name is \"John Doe\"");
        ($a = ($d = self).$context, $a.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this, $a, $b, TMP_22, $c, TMP_23;

        ($a = ($b = self).$let, $a.$$p = (TMP_22 = function(){var self = TMP_22.$$s || this;

          return "John"}, TMP_22.$$s = self, TMP_22), $a).call($b, "name");
          return ($a = ($c = self).$it, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;

          if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
              return self.$expect(self.$subject()).$to(self.$eq($hash2(["name"], {"name": ["must be at least {\"length\"=>5, \"maximum\"=>10} characters"]})))}}, TMP_23.$$s = self, TMP_23), $a).call($c);}, TMP_21.$$s = self, TMP_21), $a).call($d, "when name is \"John\"");
        return ($a = ($e = self).$context, $a.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this, $a, $b, TMP_25, $c, TMP_26;

        ($a = ($b = self).$let, $a.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this;

          return "Zach Galifianakis"}, TMP_25.$$s = self, TMP_25), $a).call($b, "name");
          return ($a = ($c = self).$it, $a.$$p = (TMP_26 = function(){var self = TMP_26.$$s || this;

          if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
              return self.$expect(self.$subject()).$to(self.$eq($hash2(["name"], {"name": ["must be less than {\"length\"=>5, \"maximum\"=>10} characters"]})))}}, TMP_26.$$s = self, TMP_26), $a).call($c);}, TMP_24.$$s = self, TMP_24), $a).call($e, "when name is \"Zach Galifianakis\"");}, TMP_16.$$s = self, TMP_16), $a).call($c, "when options is a Hash");
      return ($a = ($d = self).$context, $a.$$p = (TMP_27 = function(){var self = TMP_27.$$s || this, $a, $b, TMP_28, $c, TMP_29;

      ($a = ($b = self).$let, $a.$$p = (TMP_28 = function(){var self = TMP_28.$$s || this;

        return "string"}, TMP_28.$$s = self, TMP_28), $a).call($b, "options");
        return ($a = ($c = self).$it, $a.$$p = (TMP_29 = function(){var self = TMP_29.$$s || this, $a, $b, TMP_30;

        return ($a = ($b = self).$expect, $a.$$p = (TMP_30 = function(){var self = TMP_30.$$s || this;

          return self.$subject()}, TMP_30.$$s = self, TMP_30), $a).call($b).$to(self.$raise_error($scope.get('RuntimeError'), "The arguments to length must be a number or a hash"))}, TMP_29.$$s = self, TMP_29), $a).call($c, "raises an exception");}, TMP_27.$$s = self, TMP_27), $a).call($d, "when options not a Fixnum or a Hash");}, TMP_7.$$s = self, TMP_7), $a).call($g, ".validate");}, TMP_1.$$s = self, TMP_1), $a).call($b, (($scope.get('Volt')).$$scope.get('LengthValidator')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["models/validators/phone_number_validator_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$describe', '$subject', '$new', '$params', '$let', '$model', '$field_name', '$options', '$phone_number', '$valid_us_number', '$validate', '$described_class', '$insert', '$dup', '$before', '$to', '$allow', '$and_return', '$receive', '$and_call_original', '$result', '$it', '$expect', '$with', '$have_received', '$errors', '$eq', '$context', '$specify', '$valid?', '$valid_intl_number', '$invalid_number', '$custom_message']);
  self.$require("spec_helper");
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, $f, TMP_6, $g, TMP_7, $h, TMP_8, $i, TMP_9, $j, TMP_10, $k, TMP_11, $l, TMP_17, $m, TMP_55;

  ($a = ($b = self).$subject, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a;

    return ($a = (($scope.get('Volt')).$$scope.get('PhoneNumberValidator'))).$new.apply($a, [].concat(self.$params()))}, TMP_2.$$s = self, TMP_2), $a).call($b);
    ($a = ($c = self).$let, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

    return [self.$model(), self.$field_name(), self.$options()]}, TMP_3.$$s = self, TMP_3), $a).call($c, "params");
    ($a = ($d = self).$let, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

    return (($scope.get('Volt')).$$scope.get('Model')).$new($hash2(["phone_number"], {"phone_number": self.$phone_number()}))}, TMP_4.$$s = self, TMP_4), $a).call($d, "model");
    ($a = ($e = self).$let, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

    return "phone_number"}, TMP_5.$$s = self, TMP_5), $a).call($e, "field_name");
    ($a = ($f = self).$let, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

    return true}, TMP_6.$$s = self, TMP_6), $a).call($f, "options");
    ($a = ($g = self).$let, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

    return "(123)-123-1234"}, TMP_7.$$s = self, TMP_7), $a).call($g, "valid_us_number");
    ($a = ($h = self).$let, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

    return "+12 123 123 1234"}, TMP_8.$$s = self, TMP_8), $a).call($h, "valid_intl_number");
    ($a = ($i = self).$let, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

    return "1234-123-123456"}, TMP_9.$$s = self, TMP_9), $a).call($i, "invalid_number");
    ($a = ($j = self).$let, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

    return self.$valid_us_number()}, TMP_10.$$s = self, TMP_10), $a).call($j, "phone_number");
    ($a = ($k = self).$describe, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this, $a, $b, TMP_12, $c, TMP_13, $d, TMP_14, $e, TMP_15, $f, TMP_16;

    ($a = ($b = self).$let, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this, $a;

      return ($a = self.$described_class()).$validate.apply($a, [].concat(self.$params().$dup().$insert(1, nil)))}, TMP_12.$$s = self, TMP_12), $a).call($b, "result");
      ($a = ($c = self).$before, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

      self.$allow(self.$described_class()).$to(self.$receive("new").$and_return(self.$subject()));
        self.$allow(self.$subject()).$to(self.$receive("errors").$and_call_original());
        return self.$result();}, TMP_13.$$s = self, TMP_13), $a).call($c);
      ($a = ($d = self).$it, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this, $a;

      return self.$expect(self.$described_class()).$to(($a = self.$have_received("new")).$with.apply($a, [].concat(self.$params())))}, TMP_14.$$s = self, TMP_14), $a).call($d, "initializes a phone number validator with the provided arguments");
      ($a = ($e = self).$it, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

      return self.$expect(self.$subject()).$to(self.$have_received("errors"))}, TMP_15.$$s = self, TMP_15), $a).call($e, "calls errors on the phone number validator");
      return ($a = ($f = self).$it, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

      return self.$expect(self.$subject().$errors()).$to(self.$eq(self.$result()))}, TMP_16.$$s = self, TMP_16), $a).call($f, "returns the result of calling errors on the validator");}, TMP_11.$$s = self, TMP_11), $a).call($k, ".validate");
    ($a = ($l = self).$describe, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this, $a, $b, TMP_18, $c, TMP_47;

    ($a = ($b = self).$context, $a.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this, $a, $b, TMP_19, $c, TMP_20, $d, TMP_23, $e, TMP_26, $f, TMP_29, $g, TMP_32, $h, TMP_35, $i, TMP_38, $j, TMP_41, $k, TMP_44;

      ($a = ($b = self).$let, $a.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this;

        return true}, TMP_19.$$s = self, TMP_19), $a).call($b, "options");
        ($a = ($c = self).$context, $a.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this, $a, $b, TMP_21, $c, TMP_22;

        ($a = ($b = self).$let, $a.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;

          return self.$valid_us_number()}, TMP_21.$$s = self, TMP_21), $a).call($b, "phone_number");
          return ($a = ($c = self).$specify, $a.$$p = (TMP_22 = function(){var self = TMP_22.$$s || this;

          return self.$expect(self.$subject()['$valid?']()).$to(self.$eq(true))}, TMP_22.$$s = self, TMP_22), $a).call($c);}, TMP_20.$$s = self, TMP_20), $a).call($c, "when the phone number is a valid US number");
        ($a = ($d = self).$context, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this, $a, $b, TMP_24, $c, TMP_25;

        ($a = ($b = self).$let, $a.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this;

          return self.$valid_intl_number()}, TMP_24.$$s = self, TMP_24), $a).call($b, "phone_number");
          return ($a = ($c = self).$specify, $a.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this;

          return self.$expect(self.$subject()['$valid?']()).$to(self.$eq(true))}, TMP_25.$$s = self, TMP_25), $a).call($c);}, TMP_23.$$s = self, TMP_23), $a).call($d, "when the phone number is a valid international number");
        ($a = ($e = self).$context, $a.$$p = (TMP_26 = function(){var self = TMP_26.$$s || this, $a, $b, TMP_27, $c, TMP_28;

        ($a = ($b = self).$let, $a.$$p = (TMP_27 = function(){var self = TMP_27.$$s || this;

          return "123-123-1234"}, TMP_27.$$s = self, TMP_27), $a).call($b, "phone_number");
          return ($a = ($c = self).$specify, $a.$$p = (TMP_28 = function(){var self = TMP_28.$$s || this;

          return self.$expect(self.$subject()['$valid?']()).$to(self.$eq(true))}, TMP_28.$$s = self, TMP_28), $a).call($c);}, TMP_26.$$s = self, TMP_26), $a).call($e, "when the phone number uses dashes");
        ($a = ($f = self).$context, $a.$$p = (TMP_29 = function(){var self = TMP_29.$$s || this, $a, $b, TMP_30, $c, TMP_31;

        ($a = ($b = self).$let, $a.$$p = (TMP_30 = function(){var self = TMP_30.$$s || this;

          return "123.123.1234"}, TMP_30.$$s = self, TMP_30), $a).call($b, "phone_number");
          return ($a = ($c = self).$specify, $a.$$p = (TMP_31 = function(){var self = TMP_31.$$s || this;

          return self.$expect(self.$subject()['$valid?']()).$to(self.$eq(true))}, TMP_31.$$s = self, TMP_31), $a).call($c);}, TMP_29.$$s = self, TMP_29), $a).call($f, "when the phone number uses periods");
        ($a = ($g = self).$context, $a.$$p = (TMP_32 = function(){var self = TMP_32.$$s || this, $a, $b, TMP_33, $c, TMP_34;

        ($a = ($b = self).$let, $a.$$p = (TMP_33 = function(){var self = TMP_33.$$s || this;

          return "123 123 1234"}, TMP_33.$$s = self, TMP_33), $a).call($b, "phone_number");
          return ($a = ($c = self).$specify, $a.$$p = (TMP_34 = function(){var self = TMP_34.$$s || this;

          return self.$expect(self.$subject()['$valid?']()).$to(self.$eq(true))}, TMP_34.$$s = self, TMP_34), $a).call($c);}, TMP_32.$$s = self, TMP_32), $a).call($g, "when the phone number uses spaces");
        ($a = ($h = self).$context, $a.$$p = (TMP_35 = function(){var self = TMP_35.$$s || this, $a, $b, TMP_36, $c, TMP_37;

        ($a = ($b = self).$let, $a.$$p = (TMP_36 = function(){var self = TMP_36.$$s || this;

          return "(123) 123.1234"}, TMP_36.$$s = self, TMP_36), $a).call($b, "phone_number");
          return ($a = ($c = self).$specify, $a.$$p = (TMP_37 = function(){var self = TMP_37.$$s || this;

          return self.$expect(self.$subject()['$valid?']()).$to(self.$eq(true))}, TMP_37.$$s = self, TMP_37), $a).call($c);}, TMP_35.$$s = self, TMP_35), $a).call($h, "when the phone number uses parentheses and a space");
        ($a = ($i = self).$context, $a.$$p = (TMP_38 = function(){var self = TMP_38.$$s || this, $a, $b, TMP_39, $c, TMP_40;

        ($a = ($b = self).$let, $a.$$p = (TMP_39 = function(){var self = TMP_39.$$s || this;

          return "+12 123 123 1234"}, TMP_39.$$s = self, TMP_39), $a).call($b, "phone_number");
          return ($a = ($c = self).$specify, $a.$$p = (TMP_40 = function(){var self = TMP_40.$$s || this;

          return self.$expect(self.$subject()['$valid?']()).$to(self.$eq(true))}, TMP_40.$$s = self, TMP_40), $a).call($c);}, TMP_38.$$s = self, TMP_38), $a).call($i, "when an international number uses a plus");
        ($a = ($j = self).$context, $a.$$p = (TMP_41 = function(){var self = TMP_41.$$s || this, $a, $b, TMP_42, $c, TMP_43;

        ($a = ($b = self).$let, $a.$$p = (TMP_42 = function(){var self = TMP_42.$$s || this;

          return "12 123 123 1234"}, TMP_42.$$s = self, TMP_42), $a).call($b, "phone_number");
          return ($a = ($c = self).$specify, $a.$$p = (TMP_43 = function(){var self = TMP_43.$$s || this;

          return self.$expect(self.$subject()['$valid?']()).$to(self.$eq(true))}, TMP_43.$$s = self, TMP_43), $a).call($c);}, TMP_41.$$s = self, TMP_41), $a).call($j, "when an international number does not use a plus");
        return ($a = ($k = self).$context, $a.$$p = (TMP_44 = function(){var self = TMP_44.$$s || this, $a, $b, TMP_45, $c, TMP_46;

        ($a = ($b = self).$let, $a.$$p = (TMP_45 = function(){var self = TMP_45.$$s || this;

          return "+12 123 1234 1234"}, TMP_45.$$s = self, TMP_45), $a).call($b, "phone_number");
          return ($a = ($c = self).$specify, $a.$$p = (TMP_46 = function(){var self = TMP_46.$$s || this;

          return self.$expect(self.$subject()['$valid?']()).$to(self.$eq(true))}, TMP_46.$$s = self, TMP_46), $a).call($c);}, TMP_44.$$s = self, TMP_44), $a).call($k, "when an international number is from the UK");}, TMP_18.$$s = self, TMP_18), $a).call($b, "when using the default regex");
      return ($a = ($c = self).$context, $a.$$p = (TMP_47 = function(){var self = TMP_47.$$s || this, $a, $b, TMP_48, $c, TMP_49, $d, TMP_52;

      ($a = ($b = self).$let, $a.$$p = (TMP_48 = function(){var self = TMP_48.$$s || this;

        return $hash2(["with"], {"with": /\d{10}/})}, TMP_48.$$s = self, TMP_48), $a).call($b, "options");
        ($a = ($c = self).$context, $a.$$p = (TMP_49 = function(){var self = TMP_49.$$s || this, $a, $b, TMP_50, $c, TMP_51;

        ($a = ($b = self).$let, $a.$$p = (TMP_50 = function(){var self = TMP_50.$$s || this;

          return "1231231234"}, TMP_50.$$s = self, TMP_50), $a).call($b, "phone_number");
          return ($a = ($c = self).$specify, $a.$$p = (TMP_51 = function(){var self = TMP_51.$$s || this;

          return self.$expect(self.$subject()['$valid?']()).$to(self.$eq(true))}, TMP_51.$$s = self, TMP_51), $a).call($c);}, TMP_49.$$s = self, TMP_49), $a).call($c, "and the phone number qualifies");
        return ($a = ($d = self).$context, $a.$$p = (TMP_52 = function(){var self = TMP_52.$$s || this, $a, $b, TMP_53, $c, TMP_54;

        ($a = ($b = self).$let, $a.$$p = (TMP_53 = function(){var self = TMP_53.$$s || this;

          return "123-123-1234"}, TMP_53.$$s = self, TMP_53), $a).call($b, "phone_number");
          return ($a = ($c = self).$specify, $a.$$p = (TMP_54 = function(){var self = TMP_54.$$s || this;

          return self.$expect(self.$subject()['$valid?']()).$to(self.$eq(false))}, TMP_54.$$s = self, TMP_54), $a).call($c);}, TMP_52.$$s = self, TMP_52), $a).call($d, "and the phone number does not qualify");}, TMP_47.$$s = self, TMP_47), $a).call($c, "when using a custom regex");}, TMP_17.$$s = self, TMP_17), $a).call($l, "#valid?");
    return ($a = ($m = self).$describe, $a.$$p = (TMP_55 = function(){var self = TMP_55.$$s || this, $a, $b, TMP_56, $c, TMP_59, $d, TMP_62;

    ($a = ($b = self).$context, $a.$$p = (TMP_56 = function(){var self = TMP_56.$$s || this, $a, $b, TMP_57, $c, TMP_58;

      ($a = ($b = self).$let, $a.$$p = (TMP_57 = function(){var self = TMP_57.$$s || this;

        return self.$valid_us_number()}, TMP_57.$$s = self, TMP_57), $a).call($b, "phone_number");
        return ($a = ($c = self).$it, $a.$$p = (TMP_58 = function(){var self = TMP_58.$$s || this;

        return self.$expect(self.$subject().$errors()).$to(self.$eq($hash2([], {})))}, TMP_58.$$s = self, TMP_58), $a).call($c, "returns an empty error hash");}, TMP_56.$$s = self, TMP_56), $a).call($b, "when the model has a valid phone number");
      ($a = ($c = self).$context, $a.$$p = (TMP_59 = function(){var self = TMP_59.$$s || this, $a, $b, TMP_60, $c, TMP_61;

      ($a = ($b = self).$let, $a.$$p = (TMP_60 = function(){var self = TMP_60.$$s || this;

        return self.$invalid_number()}, TMP_60.$$s = self, TMP_60), $a).call($b, "phone_number");
        return ($a = ($c = self).$it, $a.$$p = (TMP_61 = function(){var self = TMP_61.$$s || this;

        return self.$expect(self.$subject().$errors()).$to(self.$eq($hash2(["phone_number"], {"phone_number": ["must be a phone number with area or country code"]})))}, TMP_61.$$s = self, TMP_61), $a).call($c, "returns an array of errors for phone number");}, TMP_59.$$s = self, TMP_59), $a).call($c, "when the model has an invalid phone number");
      return ($a = ($d = self).$context, $a.$$p = (TMP_62 = function(){var self = TMP_62.$$s || this, $a, $b, TMP_63, $c, TMP_64, $d, TMP_65;

      ($a = ($b = self).$let, $a.$$p = (TMP_63 = function(){var self = TMP_63.$$s || this;

        return $hash2(["message"], {"message": self.$custom_message()})}, TMP_63.$$s = self, TMP_63), $a).call($b, "options");
        ($a = ($c = self).$let, $a.$$p = (TMP_64 = function(){var self = TMP_64.$$s || this;

        return "this is a custom message"}, TMP_64.$$s = self, TMP_64), $a).call($c, "custom_message");
        return ($a = ($d = self).$context, $a.$$p = (TMP_65 = function(){var self = TMP_65.$$s || this, $a, $b, TMP_66, $c, TMP_67;

        ($a = ($b = self).$let, $a.$$p = (TMP_66 = function(){var self = TMP_66.$$s || this;

          return self.$invalid_number()}, TMP_66.$$s = self, TMP_66), $a).call($b, "phone_number");
          return ($a = ($c = self).$it, $a.$$p = (TMP_67 = function(){var self = TMP_67.$$s || this;

          return self.$expect(self.$subject().$errors()).$to(self.$eq($hash2(["phone_number"], {"phone_number": [self.$custom_message()]})))}, TMP_67.$$s = self, TMP_67), $a).call($c, "returns errors with the custom message");}, TMP_65.$$s = self, TMP_65), $a).call($d, "and the phone number is invalid");}, TMP_62.$$s = self, TMP_62), $a).call($d, "when provided a custom error message");}, TMP_55.$$s = self, TMP_55), $a).call($m, "#errors");}, TMP_1.$$s = self, TMP_1), $a).call($b, (($scope.get('Volt')).$$scope.get('PhoneNumberValidator')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/page/bindings/base_binding"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_accessor', '$dom_section', '$target', '$remove', '$remove_anchors']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $BaseBinding(){};
      var self = $BaseBinding = $klass($base, $super, 'BaseBinding', $BaseBinding);

      var def = self.$$proto, $scope = self.$$scope;

      def.dom_section = def.binding_name = nil;
      self.$attr_accessor("target", "context", "binding_name");

      def.$initialize = function(page, target, context, binding_name) {
        var $a, $b, self = this;

        self.page = page;
        self.target = target;
        self.context = context;
        self.binding_name = binding_name;
        return ((($a = (($b = Opal.cvars['@@binding_number']) == null ? nil : $b)) !== false && $a !== nil) ? $a : (Opal.cvars['@@binding_number'] = 10000));
      };

      def.$dom_section = function() {
        var $a, self = this;

        return ((($a = self.dom_section) !== false && $a !== nil) ? $a : self.dom_section = self.$target().$dom_section(self.binding_name));
      };

      def.$remove = function() {
        var $a, self = this;

        if ((($a = self.dom_section) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.dom_section.$remove()};
        self.target = nil;
        self.context = nil;
        return self.dom_section = nil;
      };

      return (def.$remove_anchors = function() {
        var $a, self = this;

        if ((($a = self.dom_section) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.dom_section.$remove_anchors()
          } else {
          return nil
        };
      }, nil) && 'remove_anchors';
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/page/bindings/content_binding"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$watch!', '$lambda', '$update', '$instance_eval', '$to_proc', '$error', '$logger', '$inspect', '$or', '$to_s', '$text=', '$gsub', '$dom_section', '$stop']);
  self.$require("volt/page/bindings/base_binding");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ContentBinding(){};
      var self = $ContentBinding = $klass($base, $super, 'ContentBinding', $ContentBinding);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3;

      def.computation = nil;
      def.$initialize = TMP_1 = function(page, target, context, binding_name, getter) {
        var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        TMP_1.$$p = null;
        Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [page, target, context, binding_name]);
        return self.computation = ($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $b, e = nil;
          if (self.context == null) self.context = nil;

        try {
          return self.$update(($a = ($b = self.context).$instance_eval, $a.$$p = getter.$to_proc(), $a).call($b))
          } catch ($err) {if (true) {e = $err;
            $scope.get('Volt').$logger().$error("ContentBinding Error: " + (e.$inspect()));
            return self.$update("");
            }else { throw $err; }
          }}, TMP_2.$$s = self, TMP_2), $a).call($b)['$watch!']();
      };

      def.$update = function(value) {
        var $a, $b, self = this;

        value = value.$or("");
        value = value.$to_s();
        return (($a = [value.$gsub("\n", "<br />\n")]), $b = self.$dom_section(), $b['$text='].apply($b, $a), $a[$a.length-1]);
      };

      return (def.$remove = TMP_3 = function() {var $zuper = $slice.call(arguments, 0);
        var $a, self = this, $iter = TMP_3.$$p, $yield = $iter || nil;

        TMP_3.$$p = null;
        if ((($a = self.computation) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.computation.$stop()};
        self.computation = nil;
        return Opal.find_super_dispatcher(self, 'remove', TMP_3, $iter).apply(self, $zuper);
      }, nil) && 'remove';
    })(self, $scope.get('BaseBinding'))
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/page/targets/helpers/comment_searchers"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$==', '$find_by_comment_without_xml']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'CommentSearchers');

      var def = self.$$proto, $scope = self.$$scope;

      if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
        Opal.cdecl($scope, 'NO_XPATH', !!window._phantom || !document.evaluate)};

      Opal.defn(self, '$find_by_comment', function(text, in_node) {
        var $a, self = this, node = nil;

        if (in_node == null) {
          in_node = document
        }
        if ((($a = $scope.get('NO_XPATH')) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$find_by_comment_without_xml(text, in_node)
          } else {
          node = nil;
          
          node = document.evaluate("//comment()[. = ' " + text + " ']", in_node, null, XPathResult.UNORDERED_NODE_ITERATOR_TYPE, null).iterateNext();
        
          return node;
        };
      });

      Opal.defn(self, '$find_by_comment_without_xml', function(text, in_node) {
        var self = this, match_text = nil;

        match_text = " " + (text) + " ";
        
        function walk(node) {
          if (node.nodeType === 8 && node.nodeValue === match_text) {
            return node;
          }

          var children = node.childNodes;
          if (children) {
            for (var i=0;i < children.length;i++) {
              var matched = walk(children[i]);
              if (matched) {
                return matched;
              }
            }
          }

          return null;
        }


        return walk(in_node);

      
      });

      Opal.defn(self, '$build_from_html', function(html) {
        var self = this, temp_div = nil;

        temp_div = nil;
        
        temp_div = document.createElement('div');
        var doc = jQuery.parseHTML(html);

        if (doc) {
          for (var i=0;i < doc.length;i++) {
            temp_div.appendChild(doc[i]);
          }
        }
      
        return temp_div;
      });
    })(self)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/page/targets/dom_template"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$include', '$[]', '$templates', '$html_inspect', '$inspect', '$build_from_html', '$track_binding_anchors', '$update_binding_anchors!', '$each_pair', '$is_a?', '$[]=', '$find_by_comment', '$+', '$==']);
  self.$require("volt/page/targets/helpers/comment_searchers");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $DomTemplate(){};
      var self = $DomTemplate = $klass($base, $super, 'DomTemplate', $DomTemplate);

      var def = self.$$proto, $scope = self.$$scope;

      def.bindings = def.binding_anchors = nil;
      self.$include($scope.get('CommentSearchers'));

      def.$initialize = function(page, template_name) {
        var self = this, template = nil, html = nil;

        template = page.$templates()['$[]'](template_name);
        if (template !== false && template !== nil) {
          html = template['$[]']("html");
          self.bindings = template['$[]']("bindings");
          } else {
          html = "<div>-- &lt; missing template " + (template_name.$inspect().$html_inspect()) + ", make sure it's component is included in dependencies.rb &gt; --</div>";
          self.bindings = $hash2([], {});
        };
        self.nodes = self.$build_from_html(html);
        return self.$track_binding_anchors();
      };

      def.$make_new = function() {
        var self = this, bindings = nil, new_nodes = nil;

        bindings = self['$update_binding_anchors!'](self.nodes);
        new_nodes = self.nodes.cloneNode(true);
        return [new_nodes, bindings];
      };

      def.$track_binding_anchors = function() {
        var $a, $b, TMP_1, self = this;

        self.binding_anchors = $hash2([], {});
        return ($a = ($b = self.bindings).$each_pair, $a.$$p = (TMP_1 = function(name, binding){var self = TMP_1.$$s || this, $a, node = nil, start_comment = nil, end_comment = nil;
          if (self.binding_anchors == null) self.binding_anchors = nil;
          if (self.nodes == null) self.nodes = nil;
if (name == null) name = nil;if (binding == null) binding = nil;
        if ((($a = name['$is_a?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            node = nil;
            
            node = self.nodes.querySelector('#' + name);
          
            return self.binding_anchors['$[]='](name, node);
            } else {
            start_comment = self.$find_by_comment("$" + (name), self.nodes);
            end_comment = self.$find_by_comment("$/" + (name), self.nodes);
            return self.binding_anchors['$[]='](name, [start_comment, end_comment]);
          }}, TMP_1.$$s = self, TMP_1), $a).call($b);
      };

      return (def['$update_binding_anchors!'] = function(nodes) {
        var $a, $b, TMP_2, self = this, new_bindings = nil;

        new_bindings = $hash2([], {});
        ($a = ($b = self.binding_anchors).$each_pair, $a.$$p = (TMP_2 = function(name, anchors){var self = TMP_2.$$s || this, $a, new_name = nil, start_comment = nil, end_comment = nil;
          if (self.bindings == null) self.bindings = nil;
if (name == null) name = nil;if (anchors == null) anchors = nil;
        new_name = (($a = Opal.cvars['@@binding_number']) == null ? nil : $a);
          (Opal.cvars['@@binding_number'] = (($a = Opal.cvars['@@binding_number']) == null ? nil : $a)['$+'](1));
          if ((($a = name['$is_a?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            if (name['$[]']($range(0, 1, false))['$==']("id")) {
              anchors.setAttribute('id', 'id' + new_name);
              return new_bindings['$[]=']("id" + (new_name), self.bindings['$[]'](name));
              } else {
              return new_bindings['$[]='](name, self.bindings['$[]'](name))
            }
            } else {
            $a = Opal.to_ary(anchors), start_comment = ($a[0] == null ? nil : $a[0]), end_comment = ($a[1] == null ? nil : $a[1]);
            
            if (start_comment.textContent) {
              // direct update
              start_comment.textContent = " $" + new_name + " ";
              end_comment.textContent = " $/" + new_name + " ";
            } else if (start_comment.innerText) {
              start_comment.innerText = " $" + new_name + " ";
              end_comment.innerText = " $/" + new_name + " ";
            } else {
              // phantomjs doesn't work with textContent, so we replace the nodes
              // and update the references
              start_comment.nodeValue = " $" + new_name + " ";
              end_comment.nodeValue = " $/" + new_name + " ";
            }
          
            return new_bindings['$[]='](new_name, self.bindings['$[]'](name));
          };}, TMP_2.$$s = self, TMP_2), $a).call($b);
        return new_bindings;
      }, nil) && 'update_binding_anchors!';
    })(self, null)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/page/targets/base_section"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$fail', '$is_a?', '$[]', '$[]=', '$new', '$set_template', '$templates', '$html_inspect', '$inspect', '$set_content_and_rezero_bindings']);
  self.$require("volt/page/targets/dom_template");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $BaseSection(){};
      var self = $BaseSection = $klass($base, $super, 'BaseSection', $BaseSection);

      var def = self.$$proto, $scope = self.$$scope;

      (Opal.cvars['@@template_cache'] = $hash2([], {}));

      def.$remove = function() {
        var self = this;

        return self.$fail("not implemented");
      };

      def.$remove_anchors = function() {
        var self = this;

        return self.$fail("not implemented");
      };

      def.$insert_anchor_before_end = function() {
        var self = this;

        return self.$fail("not implemented");
      };

      return (def.$set_content_to_template = function(page, template_name) {
        var $a, $b, $c, self = this, dom_template = nil, template = nil, html = nil, bindings = nil;

        if ((($a = self['$is_a?']($scope.get('DomSection'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          dom_template = (($a = template_name, $b = (($c = Opal.cvars['@@template_cache']) == null ? nil : $c), ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, $scope.get('DomTemplate').$new(page, template_name)))));
          return self.$set_template(dom_template);
          } else {
          template = page.$templates()['$[]'](template_name);
          if (template !== false && template !== nil) {
            html = template['$[]']("html");
            bindings = template['$[]']("bindings");
            } else {
            html = "<div>-- &lt; missing template " + (template_name.$inspect().$html_inspect()) + ", make sure it's component is included in dependencies.rb &gt; --</div>";
            bindings = $hash2([], {});
          };
          return self.$set_content_and_rezero_bindings(html, bindings);
        };
      }, nil) && 'set_content_to_template';
    })(self, null)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/page/targets/attribute_section"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$set_content_and_rezero_bindings', '$==', '$html=', '$find_by_binding_id', '$remove']);
  self.$require("volt/page/targets/base_section");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $AttributeSection(){};
      var self = $AttributeSection = $klass($base, $super, 'AttributeSection', $AttributeSection);

      var def = self.$$proto, $scope = self.$$scope;

      def.binding_name = def.target = nil;
      def.$initialize = function(target, binding_name) {
        var self = this;

        self.target = target;
        return self.binding_name = binding_name;
      };

      def['$text='] = function(text) {
        var self = this;

        return self.$set_content_and_rezero_bindings(text, $hash2([], {}));
      };

      def['$html='] = function(value) {
        var self = this;

        return self.$set_content_and_rezero_bindings(value, $hash2([], {}));
      };

      def.$set_content_and_rezero_bindings = function(html, bindings) {
        var $a, $b, self = this;

        if (self.binding_name['$==']("main")) {
          (($a = [html]), $b = self.target, $b['$html='].apply($b, $a), $a[$a.length-1])
          } else {
          (($a = [html]), $b = self.target.$find_by_binding_id(self.binding_name), $b['$html='].apply($b, $a), $a[$a.length-1])
        };
        return bindings;
      };

      return (def.$remove = function() {
        var self = this, node = nil;

        node = self.target.$find_by_binding_id(self.binding_name);
        if (node !== false && node !== nil) {
          return node.$remove()
          } else {
          return nil
        };
      }, nil) && 'remove';
    })(self, $scope.get('BaseSection'))
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/page/targets/binding_document/base_node"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $BaseNode(){};
      var self = $BaseNode = $klass($base, $super, 'BaseNode', $BaseNode);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/page/targets/binding_document/html_node"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$inspect']);
  self.$require("volt/page/targets/binding_document/base_node");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $HtmlNode(){};
      var self = $HtmlNode = $klass($base, $super, 'HtmlNode', $HtmlNode);

      var def = self.$$proto, $scope = self.$$scope;

      def.html = nil;
      def.$initialize = function(html) {
        var self = this;

        return self.html = html;
      };

      def.$to_html = function() {
        var self = this;

        return self.html;
      };

      return (def.$inspect = function() {
        var self = this;

        return "<HtmlNode " + (self.html.$inspect()) + ">";
      }, nil) && 'inspect';
    })(self, $scope.get('BaseNode'))
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/page/targets/binding_document/component_node"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$attr_accessor', '$changed!', '$trigger!', '$html=', '$reject', '$==', '$split', '$each', '$===', '$to_i', '$[]', '$match', '$new', '$<<', '$parent', '$to_html', '$join', '$is_a?', '$find_by_binding_id', '$fail', '$delete', '$nodes', '$inspect']);
  self.$require("volt/page/targets/binding_document/html_node");
  self.$require("volt/reactive/eventable");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ComponentNode(){};
      var self = $ComponentNode = $klass($base, $super, 'ComponentNode', $ComponentNode);

      var def = self.$$proto, $scope = self.$$scope;

      def.root = def.nodes = def.binding_id = def.parent = nil;
      self.$include($scope.get('Eventable'));

      self.$attr_accessor("parent", "binding_id", "nodes");

      def.$initialize = function(binding_id, parent, root) {
        var self = this;

        if (binding_id == null) {
          binding_id = nil
        }
        if (parent == null) {
          parent = nil
        }
        if (root == null) {
          root = nil
        }
        self.nodes = [];
        self.binding_id = binding_id;
        self.parent = parent;
        return self.root = root;
      };

      def['$changed!'] = function() {
        var $a, self = this;

        if ((($a = self.root) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.root['$changed!']()
          } else {
          return self['$trigger!']("changed")
        };
      };

      def['$text='] = function(text) {
        var $a, $b, self = this;

        return (($a = [text]), $b = self, $b['$html='].apply($b, $a), $a[$a.length-1]);
      };

      def['$html='] = function(html) {
        var $a, $b, TMP_1, $c, TMP_2, self = this, parts = nil, current_node = nil;

        parts = ($a = ($b = html.$split(/(\<\!\-\- \$\/?[0-9]+ \-\-\>)/)).$reject, $a.$$p = (TMP_1 = function(v){var self = TMP_1.$$s || this;
if (v == null) v = nil;
        return v['$==']("")}, TMP_1.$$s = self, TMP_1), $a).call($b);
        self.nodes = [];
        current_node = self;
        ($a = ($c = parts).$each, $a.$$p = (TMP_2 = function(part){var self = TMP_2.$$s || this, $a, $case = nil, binding_id = nil, sub_node = nil;
          if (self.root == null) self.root = nil;
if (part == null) part = nil;
        return (function() {$case = part;if (/\<\!\-\- \$[0-9]+ \-\-\>/['$===']($case)) {binding_id = part.$match(/\<\!\-\- \$([0-9]+) \-\-\>/)['$[]'](1).$to_i();
          sub_node = $scope.get('ComponentNode').$new(binding_id, current_node, ((($a = self.root) !== false && $a !== nil) ? $a : self));
          current_node['$<<'](sub_node);
          return current_node = sub_node;}else if (/\<\!\-\- \$\/[0-9]+ \-\-\>/['$===']($case)) {return current_node = current_node.$parent()}else {return current_node['$<<']($scope.get('HtmlNode').$new(part))}})()}, TMP_2.$$s = self, TMP_2), $a).call($c);
        return self['$changed!']();
      };

      def['$<<'] = function(node) {
        var self = this;

        return self.nodes['$<<'](node);
      };

      def.$to_html = function() {
        var $a, $b, TMP_3, self = this, str = nil;

        str = [];
        ($a = ($b = self.nodes).$each, $a.$$p = (TMP_3 = function(node){var self = TMP_3.$$s || this;
if (node == null) node = nil;
        return str['$<<'](node.$to_html())}, TMP_3.$$s = self, TMP_3), $a).call($b);
        return str.$join("");
      };

      def.$find_by_binding_id = function(binding_id) {try {

        var $a, $b, TMP_4, self = this;

        if (self.binding_id['$=='](binding_id)) {
          return self};
        ($a = ($b = self.nodes).$each, $a.$$p = (TMP_4 = function(node){var self = TMP_4.$$s || this, $a, val = nil;
if (node == null) node = nil;
        if ((($a = node['$is_a?']($scope.get('ComponentNode'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            val = node.$find_by_binding_id(binding_id);
            if (val !== false && val !== nil) {
              Opal.ret(val)
              } else {
              return nil
            };
            } else {
            return nil
          }}, TMP_4.$$s = self, TMP_4), $a).call($b);
        return nil;
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      };

      def.$remove = function() {
        var self = this;

        self.nodes = [];
        return self['$changed!']();
      };

      def.$remove_anchors = function() {
        var self = this;

        self.$fail("not implemented");
        self.parent.$nodes().$delete(self);
        self['$changed!']();
        self.parent = nil;
        return self.binding_id = nil;
      };

      return (def.$inspect = function() {
        var self = this;

        return "<ComponentNode:" + (self.binding_id) + " " + (self.nodes.$inspect()) + ">";
      }, nil) && 'inspect';
    })(self, $scope.get('BaseNode'))
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/page/targets/attribute_target"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$new']);
  self.$require("volt/page/targets/base_section");
  self.$require("volt/page/targets/attribute_section");
  self.$require("volt/page/targets/binding_document/component_node");
  self.$require("volt/page/targets/binding_document/html_node");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $AttributeTarget(){};
      var self = $AttributeTarget = $klass($base, $super, 'AttributeTarget', $AttributeTarget);

      var def = self.$$proto, $scope = self.$$scope;

      return (def.$dom_section = function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        return ($a = $scope.get('AttributeSection')).$new.apply($a, [self].concat(args));
      }, nil) && 'dom_section'
    })(self, $scope.get('ComponentNode'))
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/page/targets/dom_section"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$find_by_comment', '$build_from_html', '$nodes=', '$range', '$before', '$find', '$make_new', '$class']);
  self.$require("volt/page/targets/base_section");
  self.$require("volt/page/targets/helpers/comment_searchers");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $DomSection(){};
      var self = $DomSection = $klass($base, $super, 'DomSection', $DomSection);

      var def = self.$$proto, $scope = self.$$scope;

      def.end_node = def.range = nil;
      self.$include($scope.get('CommentSearchers'));

      def.$initialize = function(binding_name) {
        var self = this;

        self.start_node = self.$find_by_comment("$" + (binding_name));
        return self.end_node = self.$find_by_comment("$/" + (binding_name));
      };

      def['$text='] = function(value) {
        var self = this;

        
        this.$range().deleteContents();
        this.$range().insertNode(document.createTextNode(value));
      
      };

      def['$html='] = function(value) {
        var $a, $b, self = this, new_nodes = nil;

        new_nodes = self.$build_from_html(value);
        return (($a = [new_nodes.childNodes]), $b = self, $b['$nodes='].apply($b, $a), $a[$a.length-1]);
      };

      def.$remove = function() {
        var self = this, range = nil;

        range = self.$range();
        
        range.deleteContents();
      
      };

      def.$remove_anchors = function() {
        var self = this;

        
        this.start_node.parentNode.removeChild(this.start_node);
        this.end_node.parentNode.removeChild(this.end_node);
      
        self.start_node = nil;
        return self.end_node = nil;
      };

      def.$insert_anchor_before_end = function(binding_name) {
        var self = this;

        return $scope.get('Element').$find(self.end_node).$before("<!-- $" + (binding_name) + " --><!-- $/" + (binding_name) + " -->");
      };

      def.$insert_anchor_before = function(binding_name, insert_after_binding) {
        var self = this, node = nil;

        node = self.$find_by_comment("$" + (insert_after_binding));
        return $scope.get('Element').$find(node).$before("<!-- $" + (binding_name) + " --><!-- $/" + (binding_name) + " -->");
      };

      def['$nodes='] = function(nodes) {
        var self = this, range = nil;

        range = self.$range();
        
        range.deleteContents();

        for (var i=nodes.length-1; i >= 0; i--) {
          var node = nodes[i];

          node.parentNode.removeChild(node);
          range.insertNode(node);
        }
      
      };

      def.$container_node = function() {
        var self = this, range = nil;

        range = self.$range();
        return range.commonAncestorContainer;
      };

      def.$set_template = function(dom_template) {
        var $a, $b, self = this, dom_nodes = nil, bindings = nil, children = nil;

        $a = Opal.to_ary(dom_template.$make_new()), dom_nodes = ($a[0] == null ? nil : $a[0]), bindings = ($a[1] == null ? nil : $a[1]);
        children = nil;
        
      children = dom_nodes.childNodes;
        
        (($a = [children]), $b = self, $b['$nodes='].apply($b, $a), $a[$a.length-1]);
        
      dom_nodes = null;
        
        return bindings;
      };

      def.$range = function() {
        var $a, self = this, range = nil;

        if ((($a = self.range) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.range};
        range = nil;
        
        range = document.createRange();
        range.setStartAfter(this.start_node);
        range.setEndBefore(this.end_node);
      
        self.range = range;
        return range;
      };

      return (def.$inspect = function() {
        var self = this;

        return "<" + (self.$class()) + ">";
      }, nil) && 'inspect';
    })(self, $scope.get('BaseSection'))
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/page/template_renderer"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$attr_reader', '$set_content_to_template', '$dom_section', '$each_pair', '$each', '$<<', '$call', '$to_proc']);
  self.$require("volt/page/bindings/base_binding");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $TemplateRenderer(){};
      var self = $TemplateRenderer = $klass($base, $super, 'TemplateRenderer', $TemplateRenderer);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4;

      def.sub_bindings = nil;
      self.$attr_reader("context");

      def.$initialize = TMP_1 = function(page, target, context, binding_name, template_name) {
        var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, bindings = nil;

        TMP_1.$$p = null;
        Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [page, target, context, binding_name]);
        self.sub_bindings = [];
        bindings = self.$dom_section().$set_content_to_template(page, template_name);
        return ($a = ($b = bindings).$each_pair, $a.$$p = (TMP_2 = function(id, bindings_for_id){var self = TMP_2.$$s || this, $a, $b, TMP_3;
if (id == null) id = nil;if (bindings_for_id == null) bindings_for_id = nil;
        return ($a = ($b = bindings_for_id).$each, $a.$$p = (TMP_3 = function(binding){var self = TMP_3.$$s || this;
            if (self.sub_bindings == null) self.sub_bindings = nil;
if (binding == null) binding = nil;
          return self.sub_bindings['$<<'](binding.$call(page, target, context, id))}, TMP_3.$$s = self, TMP_3), $a).call($b)}, TMP_2.$$s = self, TMP_2), $a).call($b);
      };

      return (def.$remove = TMP_4 = function() {var $zuper = $slice.call(arguments, 0);
        var $a, $b, self = this, $iter = TMP_4.$$p, $yield = $iter || nil;

        TMP_4.$$p = null;
        ($a = ($b = self.sub_bindings).$each, $a.$$p = "remove".$to_proc(), $a).call($b);
        self.sub_bindings = [];
        return Opal.find_super_dispatcher(self, 'remove', TMP_4, $iter).apply(self, $zuper);
      }, nil) && 'remove';
    })(self, $scope.get('BaseBinding'))
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["page/bindings/content_binding_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$describe', '$it', '$new', '$proc', '$[]', '$to', '$expect', '$to_html', '$eq', '$lambda', '$double', '$and_return', '$receive']);
  self.$require("spec_helper");
  self.$require("volt/page/bindings/content_binding");
  self.$require("volt/page/targets/attribute_target");
  self.$require("volt/page/targets/dom_section");
  self.$require("volt/page/template_renderer");
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_4;

  ($a = ($b = self).$it, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $b, TMP_3, dom = nil, context = nil, binding = nil;

    dom = (($scope.get('Volt')).$$scope.get('AttributeTarget')).$new(0);
      context = $hash2(["name"], {"name": "jimmy"});
      binding = (($scope.get('Volt')).$$scope.get('ContentBinding')).$new(nil, dom, context, 0, ($a = ($b = self).$proc, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

      return self['$[]']("name")}, TMP_3.$$s = self, TMP_3), $a).call($b));
      return self.$expect(dom.$to_html()).$to(self.$eq("jimmy"));}, TMP_2.$$s = self, TMP_2), $a).call($b, "should render the content in a content binding");
    return ($a = ($c = self).$it, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, $a, $b, TMP_5, context = nil, binding = nil, templates = nil, dom = nil;

    context = $hash2(["name"], {"name": "jimmy"});
      binding = ($a = ($b = self).$lambda, $a.$$p = (TMP_5 = function(page, target, context, id){var self = TMP_5.$$s || this, $a, $b, TMP_6;
if (page == null) page = nil;if (target == null) target = nil;if (context == null) context = nil;if (id == null) id = nil;
      return (($scope.get('Volt')).$$scope.get('ContentBinding')).$new(page, target, context, id, ($a = ($b = self).$proc, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

        return self['$[]']("name")}, TMP_6.$$s = self, TMP_6), $a).call($b))}, TMP_5.$$s = self, TMP_5), $a).call($b);
      templates = $hash2(["main/main"], {"main/main": $hash2(["html", "bindings"], {"html": "hello <!-- $1 --><!-- $/1 -->", "bindings": $hash(1, [binding])})});
      page = self.$double("volt/page");
      self.$expect(page).$to(self.$receive("templates").$and_return(templates));
      dom = (($scope.get('Volt')).$$scope.get('AttributeTarget')).$new(0);
      (($scope.get('Volt')).$$scope.get('TemplateRenderer')).$new(page, dom, context, "main", "main/main");
      return self.$expect(dom.$to_html()).$to(self.$eq("hello jimmy"));}, TMP_4.$$s = self, TMP_4), $a).call($c, "should render with a template");}, TMP_1.$$s = self, TMP_1), $a).call($b, (($scope.get('Volt')).$$scope.get('ContentBinding')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/page/bindings/template_binding/grouped_controllers"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$controller', '$[]', '$[]=', '$+', '$-', '$==', '$delete', '$private']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $GroupedControllers(){};
      var self = $GroupedControllers = $klass($base, $super, 'GroupedControllers', $GroupedControllers);

      var def = self.$$proto, $scope = self.$$scope;

      def.name = nil;
      (Opal.cvars['@@controllers'] = $hash2([], {}));

      def.$initialize = function(name) {
        var self = this;

        return self.name = name;
      };

      def.$get = function() {
        var $a, self = this, controller = nil;

        return ($a = (controller = self.$controller()), $a !== false && $a !== nil ?controller['$[]'](0) : $a);
      };

      def.$set = function(controller) {
        var $a, self = this;

        return (($a = Opal.cvars['@@controllers']) == null ? nil : $a)['$[]='](self.name, [controller, 1]);
      };

      def.$inc = function() {
        var $a, $b, self = this;

        return ($a = 1, $b = self.$controller(), $b['$[]=']($a, $b['$[]']($a)['$+'](1)));
      };

      def.$clear = function() {
        var $a, $b, self = this, controller = nil;

        controller = self.$controller();
        ($a = 1, $b = controller, $b['$[]=']($a, $b['$[]']($a)['$-'](1)));
        if (controller['$[]'](1)['$=='](0)) {
          return (($a = Opal.cvars['@@controllers']) == null ? nil : $a).$delete(self.name)
          } else {
          return nil
        };
      };

      self.$private();

      return (def.$controller = function() {
        var $a, self = this;

        return (($a = Opal.cvars['@@controllers']) == null ? nil : $a)['$[]'](self.name);
      }, nil) && 'controller';
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/page/bindings/template_binding/view_lookup_for_path"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$split', '$[]', '$templates', '$size', '$[]=', '$times', '$==', '$-', '$>=', '$join', '$check_for_template?', '$+']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ViewLookupForPath(){};
      var self = $ViewLookupForPath = $klass($base, $super, 'ViewLookupForPath', $ViewLookupForPath);

      var def = self.$$proto, $scope = self.$$scope;

      def.page = nil;
      def.$initialize = function(page, binding_in_path) {
        var self = this, path_parts = nil;

        self.page = page;
        path_parts = binding_in_path.$split("/");
        self.collection_name = path_parts['$[]'](0);
        self.controller_name = path_parts['$[]'](1);
        return self.page_name = path_parts['$[]'](2);
      };

      def['$check_for_template?'] = function(path) {
        var self = this;

        return self.page.$templates()['$[]'](path);
      };

      return (def.$path_for_template = function(lookup_path, force_section) {try {

        var $a, $b, TMP_1, self = this, parts = nil, parts_size = nil, default_parts = nil;

        if (force_section == null) {
          force_section = nil
        }
        parts = lookup_path.$split("/");
        parts_size = parts.$size();
        default_parts = ["main", "main", "index", "body"];
        if (force_section !== false && force_section !== nil) {
          default_parts['$[]='](-1, force_section)};
        ($a = ($b = ((5)['$-'](parts_size))).$times, $a.$$p = (TMP_1 = function(path_position){var self = TMP_1.$$s || this, $a, $b, TMP_2, full_path = nil, start_at = nil, path = nil, controller = nil, init_method = nil;
          if (self.collection_name == null) self.collection_name = nil;
          if (self.controller_name == null) self.controller_name = nil;
          if (self.page_name == null) self.page_name = nil;
if (path_position == null) path_position = nil;
        if ((($a = (($b = force_section !== false && force_section !== nil) ? path_position['$=='](0) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil;};
          full_path = [self.collection_name, self.controller_name, self.page_name, nil];
          start_at = full_path.$size()['$-'](parts_size)['$-'](path_position);
          ($a = ($b = full_path.$size()).$times, $a.$$p = (TMP_2 = function(index){var self = TMP_2.$$s || this, $a, part = nil;
if (index == null) index = nil;
          if (index['$>='](start_at)) {
              if ((($a = (part = parts['$[]'](index['$-'](start_at)))) !== nil && (!$a.$$is_boolean || $a == true))) {
                return full_path['$[]='](index, part)
                } else {
                return full_path['$[]='](index, default_parts['$[]'](index))
              }
              } else {
              return nil
            }}, TMP_2.$$s = self, TMP_2), $a).call($b);
          path = full_path.$join("/");
          if ((($a = self['$check_for_template?'](path)) !== nil && (!$a.$$is_boolean || $a == true))) {
            controller = nil;
            if (path_position['$>='](1)) {
              init_method = full_path['$[]'](2)
              } else {
              init_method = full_path['$[]'](3)
            };
            controller = [full_path['$[]'](0), full_path['$[]'](1)['$+']("_controller"), init_method];
            Opal.ret([path, controller]);
            } else {
            return nil
          };}, TMP_1.$$s = self, TMP_1), $a).call($b);
        return [nil, nil];
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, nil) && 'path_for_template';
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/page/bindings/template_binding"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$new', '$watch!', '$lambda', '$update', '$instance_eval', '$to_proc', '$run_without_tracking', '$controller_send', '$to_s', '$remove', '$blank?', '$is_a?', '$[]', '$clear_grouped_controller', '$path_for_template', '$render_template', '$queue_clear_grouped_controller', '$in_browser?', '$clear', '$get', '$inc', '$get_controller', '$set', '$call_ready', '$respond_to?', '$section=', '$dom_section', '$private', '$send', '$>', '$size', '$map', '$camelize', '$tr', '$==', '$first', '$shift', '$each', '$const_defined?', '$const_get']);
  self.$require("volt/page/bindings/base_binding");
  self.$require("volt/page/template_renderer");
  self.$require("volt/page/bindings/template_binding/grouped_controllers");
  self.$require("volt/page/bindings/template_binding/view_lookup_for_path");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $TemplateBinding(){};
      var self = $TemplateBinding = $klass($base, $super, 'TemplateBinding', $TemplateBinding);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4;

      def.grouped_controller = def["arguments"] = def.controller = def.action = def.page = def.target = def.binding_name = def.current_template = nil;
      def.$initialize = TMP_1 = function(page, target, context, binding_name, binding_in_path, getter) {
        var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        TMP_1.$$p = null;
        Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [page, target, context, binding_name]);
        self.view_lookup = (($scope.get('Volt')).$$scope.get('ViewLookupForPath')).$new(page, binding_in_path);
        self.current_template = nil;
        return self.computation = ($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $b, $c;
          if (self.context == null) self.context = nil;

        if ((($a = self.context) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($a = self).$update.apply($a, [].concat(($b = ($c = self.context).$instance_eval, $b.$$p = getter.$to_proc(), $b).call($c)))
            } else {
            return nil
          }}, TMP_2.$$s = self, TMP_2), $a).call($b)['$watch!']();
      };

      def.$update = function(path, section_or_arguments, options) {
        var $a, $b, TMP_3, self = this;

        if (section_or_arguments == null) {
          section_or_arguments = nil
        }
        if (options == null) {
          options = $hash2([], {})
        }
        return ($a = ($b = $scope.get('Computation')).$run_without_tracking, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $a, $b, section = nil, controller_group = nil, full_path = nil, controller_path = nil;
          if (self.action == null) self.action = nil;
          if (self.controller == null) self.controller = nil;
          if (self.current_template == null) self.current_template = nil;
          if (self.options == null) self.options = nil;
          if (self.view_lookup == null) self.view_lookup = nil;

        if ((($a = ($b = self.action, $b !== false && $b !== nil ?self.controller : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$controller_send(("" + self.action.$to_s() + "_removed"))};
          if ((($a = self.current_template) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.current_template.$remove();
            self.current_template = nil;};
          self.options = options;
          path = (function() {if ((($a = path['$blank?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "---missing---"
            } else {
            return path
          }; return nil; })();
          section = nil;
          self["arguments"] = nil;
          if ((($a = section_or_arguments['$is_a?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            section = section_or_arguments
            } else {
            self["arguments"] = section_or_arguments
          };
          if ((($a = ($b = self.options, $b !== false && $b !== nil ?(controller_group = self.options['$[]']("controller_group")) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.grouped_controller = $scope.get('GroupedControllers').$new(controller_group)
            } else {
            self.$clear_grouped_controller()
          };
          $a = Opal.to_ary(self.view_lookup.$path_for_template(path, section)), full_path = ($a[0] == null ? nil : $a[0]), controller_path = ($a[1] == null ? nil : $a[1]);
          self.$render_template(full_path, controller_path);
          return self.$queue_clear_grouped_controller();}, TMP_3.$$s = self, TMP_3), $a).call($b);
      };

      def.$queue_clear_grouped_controller = function() {
        var $a, self = this;

        if ((($a = $scope.get('Volt')['$in_browser?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          setImmediate(function() {;
          self.$clear_grouped_controller();
          });
          } else {
          return self.$clear_grouped_controller()
        };
      };

      def.$clear_grouped_controller = function() {
        var $a, self = this;

        if ((($a = self.grouped_controller) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.grouped_controller.$clear();
          return self.grouped_controller = nil;
          } else {
          return nil
        };
      };

      def.$render_template = function(full_path, controller_path) {
        var $a, $b, $c, self = this, args = nil, controller_class = nil;

        args = [$scope.get('SubContext').$new(self["arguments"], nil, true)];
        self.controller = nil;
        if ((($a = self.grouped_controller) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.controller = self.grouped_controller.$get()};
        self.action = nil;
        if ((($a = self.controller) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self.grouped_controller) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.grouped_controller.$inc()}
          } else {
          $a = Opal.to_ary(self.$get_controller(controller_path)), controller_class = ($a[0] == null ? nil : $a[0]), self.action = ($a[1] == null ? nil : $a[1]);
          if (controller_class !== false && controller_class !== nil) {
            self.controller = ($a = controller_class).$new.apply($a, [].concat(args))
            } else {
            self.controller = ($b = $scope.get('ModelController')).$new.apply($b, [].concat(args))
          };
          if ((($c = self.action) !== nil && (!$c.$$is_boolean || $c == true))) {
            self.$controller_send(self.action)};
          if ((($c = self.grouped_controller) !== nil && (!$c.$$is_boolean || $c == true))) {
            self.grouped_controller.$set(self.controller)};
        };
        self.current_template = $scope.get('TemplateRenderer').$new(self.page, self.target, self.controller, self.binding_name, full_path);
        return self.$call_ready();
      };

      def.$call_ready = function() {
        var $a, $b, self = this;

        if ((($a = self.controller) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ($b = self.action, $b !== false && $b !== nil ?self.controller['$respond_to?']("section=") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            (($a = [self.current_template.$dom_section()]), $b = self.controller, $b['$section='].apply($b, $a), $a[$a.length-1])};
          if ((($a = self.action) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$controller_send(("" + self.action.$to_s() + "_ready"))
            } else {
            return nil
          };
          } else {
          return nil
        };
      };

      def.$remove = TMP_4 = function() {var $zuper = $slice.call(arguments, 0);
        var $a, $b, self = this, $iter = TMP_4.$$p, $yield = $iter || nil;

        TMP_4.$$p = null;
        if ((($a = ($b = self.controller, $b !== false && $b !== nil ?self.action : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$controller_send(("before_" + self.action.$to_s() + "_remove"))};
        self.$clear_grouped_controller();
        if ((($a = self.current_template) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.current_template.$remove()};
        Opal.find_super_dispatcher(self, 'remove', TMP_4, $iter).apply(self, $zuper);
        if ((($a = self.controller) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self.action) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$controller_send(("after_" + self.action.$to_s() + "_remove"))};
          return self.controller = nil;
          } else {
          return nil
        };
      };

      self.$private();

      def.$controller_send = function(action_name) {
        var $a, self = this;

        if ((($a = self.controller['$respond_to?'](action_name)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.controller.$send(action_name)
          } else {
          return nil
        };
      };

      return (def.$get_controller = function(controller_path) {try {

        var $a, $b, TMP_5, $c, TMP_6, self = this, action = nil, parts = nil, obj = nil;

        if ((($a = (($b = controller_path !== false && controller_path !== nil) ? controller_path.$size()['$>'](0) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          return [nil, nil]
        };
        action = controller_path['$[]'](-1);
        parts = ($a = ($b = controller_path['$[]']($range(0, -2, false))).$map, $a.$$p = (TMP_5 = function(v){var self = TMP_5.$$s || this;
if (v == null) v = nil;
        return v.$tr("-", "_").$camelize()}, TMP_5.$$s = self, TMP_5), $a).call($b);
        if (parts.$first()['$==']("Main")) {
          parts.$shift()};
        obj = $scope.get('Object');
        ($a = ($c = parts).$each, $a.$$p = (TMP_6 = function(part){var self = TMP_6.$$s || this, $a;
if (part == null) part = nil;
        if ((($a = obj['$const_defined?'](part)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return obj = obj.$const_get(part)
            } else {
            Opal.ret(nil)
          }}, TMP_6.$$s = self, TMP_6), $a).call($c);
        return [obj, action];
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, nil) && 'get_controller';
    })(self, $scope.get('BaseBinding'))
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["page/bindings/template_binding/view_lookup_for_path_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$attr_accessor', '$describe', '$before', '$double', '$to', '$expect', '$times', '$at_least', '$receive', '$new', '$instance_variable_set', '$it', '$last', '$path_for_template', '$eq', '$first']);
  self.$require("spec_helper");
  self.$require("volt/page/bindings/template_binding");
  (function($base, $super) {
    function $Page(){};
    var self = $Page = $klass($base, $super, 'Page', $Page);

    var def = self.$$proto, $scope = self.$$scope;

    return self.$attr_accessor("templates")
  })($scope.get('Volt'), null);
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_4, $d, TMP_5, $e, TMP_6, $f, TMP_7, $g, TMP_8, $h, TMP_9, $i, TMP_10, $j, TMP_11, $k, TMP_12, $l, TMP_13, $m, TMP_14, $n, TMP_15, $o, TMP_16, $p, TMP_17;

  ($a = ($b = self).$before, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $b, TMP_3;
      if (self.page == null) self.page = nil;

    self.page = self.$double("volt/page");
      self.$expect(self.page).$to(($a = ($b = self.$receive("templates").$at_least(1)).$times, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;
        if (self.templates == null) self.templates = nil;

      return self.templates}, TMP_3.$$s = self, TMP_3), $a).call($b));
      return self.view_lookup = (($scope.get('Volt')).$$scope.get('ViewLookupForPath')).$new(self.page, "main/main/main");}, TMP_2.$$s = self, TMP_2), $a).call($b);
    Opal.defn(self, '$set_template', function(templates) {
      var self = this;
      if (self.page == null) self.page = nil;

      return self.page.$instance_variable_set("@templates", templates);
    });
    ($a = ($c = self).$it, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, result = nil;
      if (self.view_lookup == null) self.view_lookup = nil;

    self.templates = $hash2(["main/main/blog/nav", "main/comments/new/body"], {"main/main/blog/nav": "", "main/comments/new/body": ""});
      result = self.view_lookup.$path_for_template("comments/new").$last();
      return self.$expect(result).$to(self.$eq(["main", "comments_controller", "new"]));}, TMP_4.$$s = self, TMP_4), $a).call($c, "should lookup nested controller action");
    ($a = ($d = self).$it, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $a, path = nil, result = nil;
      if (self.view_lookup == null) self.view_lookup = nil;

    self.templates = $hash2(["main/comments/new/body"], {"main/comments/new/body": ""});
      $a = Opal.to_ary(self.view_lookup.$path_for_template("comments/new")), path = ($a[0] == null ? nil : $a[0]), result = ($a[1] == null ? nil : $a[1]);
      self.$expect(path).$to(self.$eq("main/comments/new/body"));
      return self.$expect(result).$to(self.$eq(["main", "comments_controller", "new"]));}, TMP_5.$$s = self, TMP_5), $a).call($d, "it should not look in the local component/controller for a specified controller/action");
    ($a = ($e = self).$it, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $a, path = nil, result = nil;
      if (self.view_lookup == null) self.view_lookup = nil;

    self.templates = $hash2(["main/comments/new/errors", "comments/new/errors/body"], {"main/comments/new/errors": "", "comments/new/errors/body": ""});
      $a = Opal.to_ary(self.view_lookup.$path_for_template("comments/new/errors")), path = ($a[0] == null ? nil : $a[0]), result = ($a[1] == null ? nil : $a[1]);
      self.$expect(path).$to(self.$eq("main/comments/new/errors"));
      return self.$expect(result).$to(self.$eq(["main", "comments_controller", "errors"]));}, TMP_6.$$s = self, TMP_6), $a).call($e, "should handle a tripple lookup");
    ($a = ($f = self).$it, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $a, path = nil, result = nil;
      if (self.view_lookup == null) self.view_lookup = nil;

    self.templates = $hash2(["comments/new/errors/body"], {"comments/new/errors/body": ""});
      $a = Opal.to_ary(self.view_lookup.$path_for_template("comments/new/errors")), path = ($a[0] == null ? nil : $a[0]), result = ($a[1] == null ? nil : $a[1]);
      self.$expect(path).$to(self.$eq("comments/new/errors/body"));
      return self.$expect(result).$to(self.$eq(["comments", "new_controller", "errors"]));}, TMP_7.$$s = self, TMP_7), $a).call($f, "should handle a tripple lookup to controllers");
    ($a = ($g = self).$it, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $a, path = nil, result = nil;
      if (self.view_lookup == null) self.view_lookup = nil;

    self.templates = $hash2(["comments/new/index/body"], {"comments/new/index/body": ""});
      $a = Opal.to_ary(self.view_lookup.$path_for_template("comments/new")), path = ($a[0] == null ? nil : $a[0]), result = ($a[1] == null ? nil : $a[1]);
      self.$expect(path).$to(self.$eq("comments/new/index/body"));
      return self.$expect(result).$to(self.$eq(["comments", "new_controller", "index"]));}, TMP_8.$$s = self, TMP_8), $a).call($g, "should find a matching component");
    ($a = ($h = self).$it, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;
      if (self.view_lookup == null) self.view_lookup = nil;

    self.templates = $hash2(["main/main/blog/nav", "main/main/main/nav"], {"main/main/blog/nav": "", "main/main/main/nav": ""});
      return self.$expect(self.view_lookup.$path_for_template("nav").$first()).$to(self.$eq("main/main/main/nav"));}, TMP_9.$$s = self, TMP_9), $a).call($h, "should lookup sub-templates within its own file");
    ($a = ($i = self).$it, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;
      if (self.view_lookup == null) self.view_lookup = nil;

    self.templates = $hash2(["main/main/blog/nav", "main/main/main/nav"], {"main/main/blog/nav": "", "main/main/main/nav": ""});
      return self.$expect(self.view_lookup.$path_for_template("blog/nav").$first()).$to(self.$eq("main/main/blog/nav"));}, TMP_10.$$s = self, TMP_10), $a).call($i, "should lookup sub-templates within another local view");
    ($a = ($j = self).$it, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;
      if (self.view_lookup == null) self.view_lookup = nil;

    self.templates = $hash2(["main/main/nav/body"], {"main/main/nav/body": ""});
      return self.$expect(self.view_lookup.$path_for_template("nav").$first()).$to(self.$eq("main/main/nav/body"));}, TMP_11.$$s = self, TMP_11), $a).call($j, "should lookup in another view");
    ($a = ($k = self).$it, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;
      if (self.view_lookup == null) self.view_lookup = nil;

    self.templates = $hash2(["main/nav/index/body"], {"main/nav/index/body": ""});
      return self.$expect(self.view_lookup.$path_for_template("nav").$first()).$to(self.$eq("main/nav/index/body"));}, TMP_12.$$s = self, TMP_12), $a).call($k, "should lookup in a controller");
    ($a = ($l = self).$it, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;
      if (self.view_lookup == null) self.view_lookup = nil;

    self.templates = $hash2(["main/blog/nav/body"], {"main/blog/nav/body": ""});
      return self.$expect(self.view_lookup.$path_for_template("blog/nav").$first()).$to(self.$eq("main/blog/nav/body"));}, TMP_13.$$s = self, TMP_13), $a).call($l, "should lookup in a controller/view");
    ($a = ($m = self).$it, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;
      if (self.view_lookup == null) self.view_lookup = nil;

    self.templates = $hash2(["main/nav/index/body"], {"main/nav/index/body": ""});
      return self.$expect(self.view_lookup.$path_for_template("nav").$first()).$to(self.$eq("main/nav/index/body"));}, TMP_14.$$s = self, TMP_14), $a).call($m, "should lookup in a controller");
    ($a = ($n = self).$it, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;
      if (self.view_lookup == null) self.view_lookup = nil;

    self.templates = $hash2(["nav/main/index/body"], {"nav/main/index/body": ""});
      return self.$expect(self.view_lookup.$path_for_template("nav").$first()).$to(self.$eq("nav/main/index/body"));}, TMP_15.$$s = self, TMP_15), $a).call($n, "should lookup in a component");
    ($a = ($o = self).$it, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;
      if (self.view_lookup == null) self.view_lookup = nil;

    self.templates = $hash2(["nav/main/main/body", "auth/login/new/body"], {"nav/main/main/body": "", "auth/login/new/body": ""});
      return self.$expect(self.view_lookup.$path_for_template("auth/login/new").$first()).$to(self.$eq("auth/login/new/body"));}, TMP_16.$$s = self, TMP_16), $a).call($o, "should lookup in a component/controller/view");
    return ($a = ($p = self).$it, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this;
      if (self.view_lookup == null) self.view_lookup = nil;

    self.templates = $hash2(["nav/main/index/title", "auth/login/new/title"], {"nav/main/index/title": "", "auth/login/new/title": ""});
      return self.$expect(self.view_lookup.$path_for_template("nav", "title").$first()).$to(self.$eq("nav/main/index/title"));}, TMP_17.$$s = self, TMP_17), $a).call($p, "should let you force a sub template");}, TMP_1.$$s = self, TMP_1), $a).call($b, (($scope.get('Volt')).$$scope.get('TemplateBinding')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["page/bindings/template_binding_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  return nil
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/page/sub_context"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$stringify_keys', '$!', '$[]', '$to_s', '$respond_to?', '$inspect', '$key?', '$is_a?', '$call', '$==', '$send', '$to_proc', '$fail', '$new', '$class']);
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $SubContext(){};
      var self = $SubContext = $klass($base, $super, 'SubContext', $SubContext);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      def.locals = def.context = def.return_nils = nil;
      self.$attr_reader("locals");

      def.$initialize = function(locals, context, return_nils) {
        var self = this;

        if (locals == null) {
          locals = nil
        }
        if (context == null) {
          context = nil
        }
        if (return_nils == null) {
          return_nils = false
        }
        if (locals !== false && locals !== nil) {
          self.locals = locals.$stringify_keys()};
        self.context = context;
        return self.return_nils = return_nils;
      };

      def['$respond_to?'] = function(method_name) {
        var $a, $b, self = this;

        return (((($a = (($b = self.locals, $b !== false && $b !== nil ?self.locals['$[]'](method_name.$to_s()) : $b))) !== false && $a !== nil) ? $a : (($b = self.context, $b !== false && $b !== nil ?self.context['$respond_to?'](method_name) : $b))))['$!']()['$!']();
      };

      def.$inspect = function() {
        var self = this;

        return "#<SubContext " + (self.locals.$inspect()) + " context:" + (self.context.$inspect()) + ">";
      };

      return (def.$method_missing = TMP_1 = function(method_name, args) {
        var $a, $b, $c, self = this, $iter = TMP_1.$$p, block = $iter || nil, obj = nil;

        args = $slice.call(arguments, 1);
        TMP_1.$$p = null;
        method_name = method_name.$to_s();
        if ((($a = ($b = self.locals, $b !== false && $b !== nil ?self.locals['$key?'](method_name) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          obj = self.locals['$[]'](method_name);
          if ((($a = obj['$is_a?']($scope.get('Proc'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            obj = ($a = obj).$call.apply($a, [].concat(args))};
          return obj;
        } else if ((($b = ($c = self.return_nils, $c !== false && $c !== nil ?method_name['$[]'](-1)['$==']("=")['$!']() : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
          return nil
        } else if ((($b = self.context) !== nil && (!$b.$$is_boolean || $b == true))) {
          return ($b = ($c = self.context).$send, $b.$$p = block.$to_proc(), $b).apply($c, [method_name].concat(args))};
        return self.$fail($scope.get('NoMethodError').$new("undefined method `" + (method_name) + "' for \"" + (self.$inspect()) + "\":" + (self.$class())));
      }, nil) && 'method_missing';
    })(self, null)
  })(self)
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["page/sub_context_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$describe', '$it', '$new', '$to', '$expect', '$respond_to?', '$eq']);
  self.$require("volt/page/sub_context");
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2;

  return ($a = ($b = self).$it, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, sub_context = nil;

    sub_context = (($scope.get('Volt')).$$scope.get('SubContext')).$new($hash2(["name"], {"name": "Name"}));
      self.$expect(sub_context['$respond_to?']("name")).$to(self.$eq(true));
      return self.$expect(sub_context['$respond_to?']("missing")).$to(self.$eq(false));}, TMP_2.$$s = self, TMP_2), $a).call($b, "should respond_to correctly on locals")}, TMP_1.$$s = self, TMP_1), $a).call($b, (($scope.get('Volt')).$$scope.get('SubContext')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["reactive/computation_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$describe', '$it', '$new', '$watch!', '$lambda', '$<<', '$[]', '$to', '$expect', '$eq', '$[]=', '$flush!', '$stop', '$==']);
  self.$require("spec_helper");
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_4, $d, TMP_6;

  ($a = ($b = self).$it, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $b, TMP_3, a = nil, values = nil;

    a = (($scope.get('Volt')).$$scope.get('ReactiveHash')).$new();
      values = [];
      ($a = ($b = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

      return values['$<<'](a['$[]'](0))}, TMP_3.$$s = self, TMP_3), $a).call($b)['$watch!']();
      self.$expect(values).$to(self.$eq([nil]));
      a['$[]='](0, "one");
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      self.$expect(values).$to(self.$eq([nil, "one"]));
      a['$[]='](0, "two");
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      return self.$expect(values).$to(self.$eq([nil, "one", "two"]));}, TMP_2.$$s = self, TMP_2), $a).call($b, "should trigger again when a dependent changes");
    ($a = ($c = self).$it, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, $a, $b, TMP_5, a = nil, values = nil, computation = nil;

    a = (($scope.get('Volt')).$$scope.get('ReactiveHash')).$new();
      values = [];
      computation = ($a = ($b = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

      return values['$<<'](a['$[]'](0))}, TMP_5.$$s = self, TMP_5), $a).call($b)['$watch!']();
      self.$expect(values).$to(self.$eq([nil]));
      a['$[]='](0, "one");
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      self.$expect(values).$to(self.$eq([nil, "one"]));
      computation.$stop();
      a['$[]='](0, "two");
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      return self.$expect(values).$to(self.$eq([nil, "one"]));}, TMP_4.$$s = self, TMP_4), $a).call($c, "should not trigger after the computation is stopped");
    ($a = ($d = self).$it, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $a, $b, TMP_7, a = nil, values = nil;

    a = (($scope.get('Volt')).$$scope.get('ReactiveHash')).$new();
      values = [];
      ($a = ($b = self).$lambda, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $a, $b, TMP_8;

      values['$<<'](a['$[]'](0));
        return ($a = ($b = self).$lambda, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

        return values['$<<'](a['$[]'](1))}, TMP_8.$$s = self, TMP_8), $a).call($b)['$watch!']();}, TMP_7.$$s = self, TMP_7), $a).call($b)['$watch!']();
      self.$expect(values).$to(self.$eq([nil, nil]));
      a['$[]='](1, "inner");
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      self.$expect(values).$to(self.$eq([nil, nil, "inner"]));
      a['$[]='](0, "outer");
      (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
      return self.$expect(values).$to(self.$eq([nil, nil, "inner", "outer", "inner"]));}, TMP_6.$$s = self, TMP_6), $a).call($d, "should support nested watches");
    if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
      return nil};}, TMP_1.$$s = self, TMP_1), $a).call($b, (($scope.get('Volt')).$$scope.get('Computation')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["reactive/dependency_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$describe']);
  self.$require("spec_helper");
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

  return nil}, TMP_1.$$s = self, TMP_1), $a).call($b, (($scope.get('Volt')).$$scope.get('Dependency')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["reactive/eventable_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$trigger!', '$describe', '$it', '$new', '$on', '$+', '$to', '$expect', '$eq', '$trigger_works_event!', '$class', '$remove']);
  self.$require("spec_helper");
  self.$require("volt/reactive/eventable");
  (function($base, $super) {
    function $TestEventable(){};
    var self = $TestEventable = $klass($base, $super, 'TestEventable', $TestEventable);

    var def = self.$$proto, $scope = self.$$scope;

    self.$include((($scope.get('Volt')).$$scope.get('Eventable')));

    return (def['$trigger_works_event!'] = function() {
      var self = this;

      return self['$trigger!']("works", 20);
    }, nil) && 'trigger_works_event!';
  })(self, null);
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_4;

  ($a = ($b = self).$it, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $b, TMP_3, test_eventable = nil, count = nil;

    test_eventable = $scope.get('TestEventable').$new();
      count = 0;
      ($a = ($b = test_eventable).$on, $a.$$p = (TMP_3 = function(val){var self = TMP_3.$$s || this;
if (val == null) val = nil;
      count = count['$+'](1);
        return self.$expect(val).$to(self.$eq(20));}, TMP_3.$$s = self, TMP_3), $a).call($b, "works");
      self.$expect(count).$to(self.$eq(0));
      test_eventable['$trigger_works_event!']();
      return self.$expect(count).$to(self.$eq(1));}, TMP_2.$$s = self, TMP_2), $a).call($b, "should allow events to be bound with on");
    return ($a = ($c = self).$it, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, $a, $b, TMP_5, test_eventable = nil, count = nil, listener = nil;

    test_eventable = $scope.get('TestEventable').$new();
      count = 0;
      listener = ($a = ($b = test_eventable).$on, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

      return count = count['$+'](1)}, TMP_5.$$s = self, TMP_5), $a).call($b, "works");
      self.$expect(listener.$class()).$to(self.$eq((($scope.get('Volt')).$$scope.get('Listener'))));
      self.$expect(count).$to(self.$eq(0));
      test_eventable['$trigger_works_event!']();
      self.$expect(count).$to(self.$eq(1));
      test_eventable['$trigger_works_event!']();
      self.$expect(count).$to(self.$eq(2));
      listener.$remove();
      test_eventable['$trigger_works_event!']();
      return self.$expect(count).$to(self.$eq(2));}, TMP_4.$$s = self, TMP_4), $a).call($c, "should allow events to be removed with .remove");}, TMP_1.$$s = self, TMP_1), $a).call($b, (($scope.get('Volt')).$$scope.get('Eventable')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["reactive/reactive_array_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$describe', '$it', '$new', '$watch!', '$lambda', '$<<', '$[]', '$+', '$[]=', '$flush!', '$to', '$expect', '$eq', '$insert', '$size', '$delete_at']);
  self.$require("spec_helper");
  self.$require("volt/reactive/reactive_array");
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_11;

  ($a = ($b = self).$describe, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $b, TMP_3, $c, TMP_5, $d, TMP_7;

    ($a = ($b = self).$it, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $a, $b, TMP_4, a = nil, count = nil, values = nil;

      a = (($scope.get('Volt')).$$scope.get('ReactiveArray')).$new();
        count = 0;
        values = [];
        ($a = ($b = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

        values['$<<'](a['$[]'](0));
          return count = count['$+'](1);}, TMP_4.$$s = self, TMP_4), $a).call($b)['$watch!']();
        a['$[]='](0, 5);
        (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
        a['$[]='](0, 10);
        self.$expect(count).$to(self.$eq(2));
        self.$expect(values).$to(self.$eq([nil, 5]));
        (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
        self.$expect(count).$to(self.$eq(3));
        return self.$expect(values).$to(self.$eq([nil, 5, 10]));}, TMP_3.$$s = self, TMP_3), $a).call($b, "should track dependencies for cells");
      ($a = ($c = self).$it, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $a, $b, TMP_6, a = nil, values = nil;

      a = (($scope.get('Volt')).$$scope.get('ReactiveArray')).$new([1, 2, 3]);
        values = [];
        ($a = ($b = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

        return values['$<<'](a['$[]'](3))}, TMP_6.$$s = self, TMP_6), $a).call($b)['$watch!']();
        self.$expect(values).$to(self.$eq([nil]));
        a['$<<'](4);
        self.$expect(values).$to(self.$eq([nil]));
        (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
        return self.$expect(values).$to(self.$eq([nil, 4]));}, TMP_5.$$s = self, TMP_5), $a).call($c, "should trigger changed on the last cell when appending");
      return ($a = ($d = self).$it, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $a, $b, TMP_8, $c, TMP_9, $d, TMP_10, a = nil, values_at_2 = nil, values_at_3 = nil, values_at_4 = nil;

      a = (($scope.get('Volt')).$$scope.get('ReactiveArray')).$new([1, 2, 3]);
        values_at_2 = [];
        values_at_3 = [];
        values_at_4 = [];
        ($a = ($b = self).$lambda, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

        return values_at_2['$<<'](a['$[]'](2))}, TMP_8.$$s = self, TMP_8), $a).call($b)['$watch!']();
        ($a = ($c = self).$lambda, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

        return values_at_3['$<<'](a['$[]'](3))}, TMP_9.$$s = self, TMP_9), $a).call($c)['$watch!']();
        ($a = ($d = self).$lambda, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

        return values_at_4['$<<'](a['$[]'](4))}, TMP_10.$$s = self, TMP_10), $a).call($d)['$watch!']();
        self.$expect(values_at_2).$to(self.$eq([3]));
        self.$expect(values_at_3).$to(self.$eq([nil]));
        self.$expect(values_at_4).$to(self.$eq([nil]));
        a.$insert(2, 1.3, 1.7);
        (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
        self.$expect(values_at_2).$to(self.$eq([3, 1.3]));
        self.$expect(values_at_3).$to(self.$eq([nil, 1.7]));
        return self.$expect(values_at_4).$to(self.$eq([nil, 3]));}, TMP_7.$$s = self, TMP_7), $a).call($d, "should trigger changes for each cell after index after insert");}, TMP_2.$$s = self, TMP_2), $a).call($b, "cells");
    return ($a = ($c = self).$describe, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this, $a, $b, TMP_12, $c, TMP_14;

    ($a = ($b = self).$it, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this, $a, $b, TMP_13, array = nil, count = nil, size_values = nil;

      array = (($scope.get('Volt')).$$scope.get('ReactiveArray')).$new();
        count = 0;
        size_values = [];
        ($a = ($b = self).$lambda, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

        return size_values['$<<'](array.$size())}, TMP_13.$$s = self, TMP_13), $a).call($b)['$watch!']();
        self.$expect(size_values).$to(self.$eq([0]));
        array['$<<'](5);
        (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
        return self.$expect(size_values).$to(self.$eq([0, 1]));}, TMP_12.$$s = self, TMP_12), $a).call($b, "pushing should trigger changed for size");
      return ($a = ($c = self).$it, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this, $a, $b, TMP_15, array = nil, size_values = nil;

      array = (($scope.get('Volt')).$$scope.get('ReactiveArray')).$new([1, 2, 3]);
        size_values = [];
        ($a = ($b = self).$lambda, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

        return size_values['$<<'](array.$size())}, TMP_15.$$s = self, TMP_15), $a).call($b)['$watch!']();
        self.$expect(size_values).$to(self.$eq([3]));
        array.$delete_at(2);
        self.$expect(size_values).$to(self.$eq([3]));
        (($scope.get('Volt')).$$scope.get('Computation'))['$flush!']();
        return self.$expect(size_values).$to(self.$eq([3, 2]));}, TMP_14.$$s = self, TMP_14), $a).call($c, "should trigger a size change when deleting");}, TMP_11.$$s = self, TMP_11), $a).call($c, "size dependencies");}, TMP_1.$$s = self, TMP_1), $a).call($b, (($scope.get('Volt')).$$scope.get('ReactiveArray')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["volt/router/routes"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$instance_eval', '$to_proc', '$symbolize_keys', '$has_binding?', '$add_indirect_path', '$[]=', '$add_param_matcher', '$each_with_object', '$to_s', '$each', '$check_params_match', '$dup', '$[]', '$call', '$url_parts', '$match_path', '$private', '$nil?', '$setup_bindings_in_params', '$each_pair', '$is_a?', '$each_with_index', '$to_sym', '$strip', '$create_path_transformer', '$<<', '$lambda', '$join', '$map', '$delete', '$+', '$==', '$key?', '$reject', '$split', '$index']);
  self.$require("volt");
  return (function($base) {
    var self = $module($base, 'Volt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Routes(){};
      var self = $Routes = $klass($base, $super, 'Routes', $Routes);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      def.direct_routes = def.param_matches = def.indirect_routes = nil;
      def.$initialize = function() {
        var self = this;

        self.direct_routes = $hash2([], {});
        self.indirect_routes = $hash2([], {});
        return self.param_matches = [];
      };

      def.$define = TMP_1 = function() {
        var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

        TMP_1.$$p = null;
        ($a = ($b = self).$instance_eval, $a.$$p = block.$to_proc(), $a).call($b);
        return self;
      };

      def.$get = function(path, params) {
        var $a, self = this;

        if (params == null) {
          params = $hash2([], {})
        }
        params = params.$symbolize_keys();
        if ((($a = self['$has_binding?'](path)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$add_indirect_path(path, params)
          } else {
          self.direct_routes['$[]='](path, params)
        };
        return self.$add_param_matcher(path, params);
      };

      def.$params_to_url = function(test_params) {try {

        var $a, $b, TMP_2, $d, TMP_3, self = this;

        test_params = ($a = ($b = test_params).$each_with_object, $a.$$p = (TMP_2 = function($c, obj){var self = TMP_2.$$s || this;
k = $c[0];v = $c[1];if (obj == null) obj = nil;
        return obj['$[]='](("_" + k.$to_s()), v)}, TMP_2.$$s = self, TMP_2), $a).call($b, $hash2([], {}));
        ($a = ($d = self.param_matches).$each, $a.$$p = (TMP_3 = function(param_matcher){var self = TMP_3.$$s || this, $a, result = nil, new_params = nil;
if (param_matcher == null) param_matcher = nil;
        $a = Opal.to_ary(self.$check_params_match(test_params.$dup(), param_matcher['$[]'](0))), result = ($a[0] == null ? nil : $a[0]), new_params = ($a[1] == null ? nil : $a[1]);
          if (result !== false && result !== nil) {
            Opal.ret(param_matcher['$[]'](1).$call(new_params))
            } else {
            return nil
          };}, TMP_3.$$s = self, TMP_3), $a).call($d);
        return [nil, nil];
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      };

      def.$url_to_params = function(path) {
        var self = this, result = nil, parts = nil;

        result = self.direct_routes['$[]'](path);
        if (result !== false && result !== nil) {
          return result};
        parts = self.$url_parts(path);
        return self.$match_path(parts, parts, self.indirect_routes);
      };

      self.$private();

      def.$match_path = function(original_parts, remaining_parts, node) {
        var $a, self = this, part = nil, parts = nil, new_node = nil;

        $a = Opal.to_ary(remaining_parts), part = ($a[0] == null ? nil : $a[0]), parts = $slice.call($a, 1);
        if ((($a = part['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = node['$[]'](part)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$setup_bindings_in_params(original_parts, node['$[]'](part))
            } else {
            return false
          }
        } else if ((($a = (new_node = node['$[]'](part))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$match_path(original_parts, parts, new_node)
        } else if ((($a = (new_node = node['$[]']("*"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$match_path(original_parts, parts, new_node)
          } else {
          return nil
        };
      };

      def.$setup_bindings_in_params = function(original_parts, params) {
        var $a, $b, TMP_4, self = this;

        params = params.$dup();
        ($a = ($b = params).$each_pair, $a.$$p = (TMP_4 = function(key, value){var self = TMP_4.$$s || this, $a;
if (key == null) key = nil;if (value == null) value = nil;
        if ((($a = value['$is_a?']($scope.get('Fixnum'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return params['$[]='](key, original_parts['$[]'](value))
            } else {
            return nil
          }}, TMP_4.$$s = self, TMP_4), $a).call($b);
        return params;
      };

      def.$add_indirect_path = function(path, params) {
        var $a, $b, TMP_5, self = this, node = nil, parts = nil;

        node = self.indirect_routes;
        parts = self.$url_parts(path);
        ($a = ($b = parts).$each_with_index, $a.$$p = (TMP_5 = function(part, index){var self = TMP_5.$$s || this, $a, $b, $c;
if (part == null) part = nil;if (index == null) index = nil;
        if ((($a = self['$has_binding?'](part)) !== nil && (!$a.$$is_boolean || $a == true))) {
            params['$[]='](part['$[]']($range(2, -2, true)).$strip().$to_sym(), index);
            part = "*";};
          return node = (($a = part, $b = node, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, $hash2([], {})))));}, TMP_5.$$s = self, TMP_5), $a).call($b);
        return node['$[]='](nil, params);
      };

      def.$add_param_matcher = function(path, params) {
        var $a, $b, TMP_6, self = this, parts = nil, path_transformer = nil;

        params = params.$dup();
        parts = self.$url_parts(path);
        ($a = ($b = parts).$each_with_index, $a.$$p = (TMP_6 = function(part, index){var self = TMP_6.$$s || this, $a;
if (part == null) part = nil;if (index == null) index = nil;
        if ((($a = self['$has_binding?'](part)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return params['$[]='](part['$[]']($range(2, -2, true)).$strip().$to_sym(), nil)
            } else {
            return nil
          }}, TMP_6.$$s = self, TMP_6), $a).call($b);
        path_transformer = self.$create_path_transformer(parts);
        return self.param_matches['$<<']([params, path_transformer]);
      };

      def.$create_path_transformer = function(parts) {try {

        var $a, $b, TMP_7, self = this;

        return ($a = ($b = self).$lambda, $a.$$p = (TMP_7 = function(input_params){var self = TMP_7.$$s || this, $a, $b, TMP_8, url = nil;
if (input_params == null) input_params = nil;
        input_params = input_params.$dup();
          url = ($a = ($b = parts).$map, $a.$$p = (TMP_8 = function(part){var self = TMP_8.$$s || this, $a, val = nil, binding = nil;
if (part == null) part = nil;
          val = (function() {if ((($a = self['$has_binding?'](part)) !== nil && (!$a.$$is_boolean || $a == true))) {
              binding = part['$[]']($range(2, -2, true)).$strip().$to_sym();
              return input_params.$delete(binding);
              } else {
              return part
            }; return nil; })();
            return val;}, TMP_8.$$s = self, TMP_8), $a).call($b).$join("/");
          Opal.ret(["/"['$+'](url), input_params]);}, TMP_7.$$s = self, TMP_7), $a).call($b);
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      };

      def.$check_params_match = function(test_params, param_matcher) {try {

        var $a, $b, TMP_9, self = this;

        ($a = ($b = param_matcher).$each_pair, $a.$$p = (TMP_9 = function(key, value){var self = TMP_9.$$s || this, $a, result = nil;
if (key == null) key = nil;if (value == null) value = nil;
        if ((($a = value['$is_a?']($scope.get('Hash'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            if ((($a = test_params['$[]'](key)) !== nil && (!$a.$$is_boolean || $a == true))) {
              result = self.$check_params_match(test_params['$[]'](key), value);
              if (result['$=='](false)) {
                Opal.ret(false)
                } else {
                return test_params.$delete(key)
              };
              } else {
              Opal.ret(false)
            }
          } else if ((($a = value['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            if ((($a = test_params['$key?'](key)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              Opal.ret(false)
            }
          } else if (test_params['$[]'](key)['$=='](value)) {
            return test_params.$delete(key)
            } else {
            Opal.ret(false)
          }}, TMP_9.$$s = self, TMP_9), $a).call($b);
        return [true, test_params];
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      };

      def.$url_parts = function(path) {
        var $a, $b, self = this;

        return ($a = ($b = path.$split("/")).$reject, $a.$$p = "blank?".$to_proc(), $a).call($b);
      };

      return (def['$has_binding?'] = function(string) {
        var $a, self = this;

        return ($a = string.$index("{{"), $a !== false && $a !== nil ?string.$index("}}") : $a);
      }, nil) && 'has_binding?';
    })(self, null)
  })(self);
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["router/routes_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var TMP_1, $a, $b, TMP_2, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$new', '$define', '$to_proc', '$describe', '$it', '$routes', '$get', '$instance_variable_get', '$to', '$expect', '$eq', '$url_to_params', '$map', '$[]', '$params_to_url', '$send', '$_controller=', '$_index=', '$to_h']);
  self.$require("volt/router/routes");
  self.$require("volt/models");
  Opal.Object.$$proto.$routes = TMP_1 = function() {
    var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;
    if (self.routes == null) self.routes = nil;

    TMP_1.$$p = null;
    self.routes = (($scope.get('Volt')).$$scope.get('Routes')).$new();
    return ($a = ($b = self.routes).$define, $a.$$p = block.$to_proc(), $a).call($b);
  };
  return ($a = ($b = self).$describe, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $b, TMP_3, $c, TMP_5, $d, TMP_7, $e, TMP_9, $f, TMP_12, $g, TMP_14, $h, TMP_15, $i, TMP_17;

  ($a = ($b = self).$it, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $a, $b, TMP_4, direct_routes = nil;
      if (self.routes == null) self.routes = nil;

    ($a = ($b = self).$routes, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

      self.$get("/", $hash2(["_view"], {"_view": "index"}));
        return self.$get("/page1", $hash2(["_view"], {"_view": "first_page"}));}, TMP_4.$$s = self, TMP_4), $a).call($b);
      direct_routes = self.routes.$instance_variable_get("@direct_routes");
      return self.$expect(direct_routes).$to(self.$eq($hash2(["/", "/page1"], {"/": $hash2(["_view"], {"_view": "index"}), "/page1": $hash2(["_view"], {"_view": "first_page"})})));}, TMP_3.$$s = self, TMP_3), $a).call($b, "should setup direct routes");
    ($a = ($c = self).$it, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $a, $b, TMP_6, indirect_routes = nil;
      if (self.routes == null) self.routes = nil;

    ($a = ($b = self).$routes, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

      self.$get("/blog/{{ _id }}/edit", $hash2(["_view"], {"_view": "blog/edit"}));
        return self.$get("/blog/{{ _id }}", $hash2(["_view"], {"_view": "blog/show"}));}, TMP_6.$$s = self, TMP_6), $a).call($b);
      indirect_routes = self.routes.$instance_variable_get("@indirect_routes");
      return self.$expect(indirect_routes).$to(self.$eq($hash2(["blog"], {"blog": $hash2(["*"], {"*": $hash("edit", $hash(nil, $hash2(["_view", "_id"], {"_view": "blog/edit", "_id": 1})), nil, $hash2(["_view", "_id"], {"_view": "blog/show", "_id": 1}))})})));}, TMP_5.$$s = self, TMP_5), $a).call($c, "should setup indirect routes");
    ($a = ($d = self).$it, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $a, $b, TMP_8, params = nil;
      if (self.routes == null) self.routes = nil;

    ($a = ($b = self).$routes, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

      self.$get("/blog", $hash2(["_view"], {"_view": "blog"}));
        self.$get("/blog/{{ _id }}", $hash2(["_view"], {"_view": "blog/show"}));
        self.$get("/blog/{{ _id }}/draft", $hash2(["_view", "_action"], {"_view": "blog/draft", "_action": "draft"}));
        self.$get("/blog/{{ _id }}/edit", $hash2(["_view"], {"_view": "blog/edit"}));
        self.$get("/blog/tags/{{ _tag }}", $hash2(["_view"], {"_view": "blog/tag"}));
        return self.$get("/login/{{ _name }}/user/{{ _id }}", $hash2(["_view", "_action"], {"_view": "login", "_action": "user"}));}, TMP_8.$$s = self, TMP_8), $a).call($b);
      params = self.routes.$url_to_params("/blog");
      self.$expect(params).$to(self.$eq($hash2(["_view"], {"_view": "blog"})));
      params = self.routes.$url_to_params("/blog/55/edit");
      self.$expect(params).$to(self.$eq($hash2(["_view", "_id"], {"_view": "blog/edit", "_id": "55"})));
      params = self.routes.$url_to_params("/blog/55");
      self.$expect(params).$to(self.$eq($hash2(["_view", "_id"], {"_view": "blog/show", "_id": "55"})));
      params = self.routes.$url_to_params("/blog/tags/good");
      self.$expect(params).$to(self.$eq($hash2(["_view", "_tag"], {"_view": "blog/tag", "_tag": "good"})));
      params = self.routes.$url_to_params("/blog/55/draft");
      self.$expect(params).$to(self.$eq($hash2(["_view", "_id", "_action"], {"_view": "blog/draft", "_id": "55", "_action": "draft"})));
      params = self.routes.$url_to_params("/login/jim/user/10");
      self.$expect(params).$to(self.$eq($hash2(["_view", "_action", "_name", "_id"], {"_view": "login", "_action": "user", "_name": "jim", "_id": "10"})));
      params = self.routes.$url_to_params("/login/cool");
      return self.$expect(params).$to(self.$eq(false));}, TMP_7.$$s = self, TMP_7), $a).call($d, "should match routes");
    ($a = ($e = self).$it, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $a, $b, TMP_10, $c, TMP_11, param_matches = nil;
      if (self.routes == null) self.routes = nil;

    ($a = ($b = self).$routes, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

      self.$get("/blog", $hash2(["_view"], {"_view": "blog"}));
        self.$get("/blog/{{ _id }}", $hash2(["_view"], {"_view": "blog/show"}));
        self.$get("/blog/{{ _id }}/edit", $hash2(["_view"], {"_view": "blog/edit"}));
        self.$get("/blog/tags/{{ _tag }}", $hash2(["_view"], {"_view": "blog/tag"}));
        return self.$get("/login/{{ _name }}/user/{{ _id }}", $hash2(["_view", "_action"], {"_view": "login", "_action": "user"}));}, TMP_10.$$s = self, TMP_10), $a).call($b);
      param_matches = self.routes.$instance_variable_get("@param_matches");
      return self.$expect(($a = ($c = param_matches).$map, $a.$$p = (TMP_11 = function(v){var self = TMP_11.$$s || this;
if (v == null) v = nil;
      return v['$[]'](0)}, TMP_11.$$s = self, TMP_11), $a).call($c)).$to(self.$eq([$hash2(["_view"], {"_view": "blog"}), $hash2(["_view", "_id"], {"_view": "blog/show", "_id": nil}), $hash2(["_view", "_id"], {"_view": "blog/edit", "_id": nil}), $hash2(["_view", "_tag"], {"_view": "blog/tag", "_tag": nil}), $hash2(["_view", "_action", "_name", "_id"], {"_view": "login", "_action": "user", "_name": nil, "_id": nil})]));}, TMP_9.$$s = self, TMP_9), $a).call($e, "should setup param matchers");
    ($a = ($f = self).$it, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this, $a, $b, TMP_13, url = nil, params = nil;
      if (self.routes == null) self.routes = nil;

    ($a = ($b = self).$routes, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

      self.$get("/blog", $hash2(["_view"], {"_view": "blog"}));
        self.$get("/blog/{{ _id }}", $hash2(["_view"], {"_view": "blog/show"}));
        self.$get("/blog/{{ _id }}/edit", $hash2(["_view"], {"_view": "blog/edit"}));
        self.$get("/blog/tags/{{ _tag }}", $hash2(["_view"], {"_view": "blog/tag"}));
        return self.$get("/login/{{ _name }}/user/{{ _id }}", $hash2(["_view", "_action"], {"_view": "login", "_action": "user"}));}, TMP_13.$$s = self, TMP_13), $a).call($b);
      $a = Opal.to_ary(self.routes.$params_to_url($hash2(["view", "id"], {"view": "blog/show", "id": "55"}))), url = ($a[0] == null ? nil : $a[0]), params = ($a[1] == null ? nil : $a[1]);
      self.$expect(url).$to(self.$eq("/blog/55"));
      self.$expect(params).$to(self.$eq($hash2([], {})));
      $a = Opal.to_ary(self.routes.$params_to_url($hash2(["view", "id"], {"view": "blog/edit", "id": "100"}))), url = ($a[0] == null ? nil : $a[0]), params = ($a[1] == null ? nil : $a[1]);
      self.$expect(url).$to(self.$eq("/blog/100/edit"));
      self.$expect(params).$to(self.$eq($hash2([], {})));
      $a = Opal.to_ary(self.routes.$params_to_url($hash2(["view", "id", "other"], {"view": "blog/edit", "id": "100", "other": "should_pass"}))), url = ($a[0] == null ? nil : $a[0]), params = ($a[1] == null ? nil : $a[1]);
      self.$expect(url).$to(self.$eq("/blog/100/edit"));
      return self.$expect(params).$to(self.$eq($hash2(["_other"], {"_other": "should_pass"})));}, TMP_12.$$s = self, TMP_12), $a).call($f, "should go from params to url");
    ($a = ($g = self).$it, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this, $a, routes = nil, match = nil, params = nil;

    routes = (($scope.get('Volt')).$$scope.get('Routes')).$new();
      $a = Opal.to_ary(routes.$send("check_params_match", $hash2(["_view", "_id"], {"_view": "blog", "_id": "55"}), $hash2(["_view", "_id"], {"_view": "blog", "_id": nil}))), match = ($a[0] == null ? nil : $a[0]), params = ($a[1] == null ? nil : $a[1]);
      self.$expect(match).$to(self.$eq(true));
      self.$expect(params).$to(self.$eq($hash2(["_id"], {"_id": "55"})));
      $a = Opal.to_ary(routes.$send("check_params_match", $hash2(["_view", "_id"], {"_view": "blog", "_id": "55"}), $hash2(["_view", "_id"], {"_view": "blog", "_id": "20"}))), match = ($a[0] == null ? nil : $a[0]), params = ($a[1] == null ? nil : $a[1]);
      self.$expect(match).$to(self.$eq(false));
      $a = Opal.to_ary(routes.$send("check_params_match", $hash2(["_view", "_name", "_id"], {"_view": "blog", "_name": $hash2(["_title", "_name"], {"_title": "Mr", "_name": "Bob"}), "_id": "55"}), $hash2(["_view", "_id", "_name"], {"_view": "blog", "_id": nil, "_name": $hash2(["_title", "_name"], {"_title": "Mr", "_name": nil})}))), match = ($a[0] == null ? nil : $a[0]), params = ($a[1] == null ? nil : $a[1]);
      self.$expect(match).$to(self.$eq(true));
      self.$expect(params).$to(self.$eq($hash2(["_id"], {"_id": "55"})));
      $a = Opal.to_ary(routes.$send("check_params_match", $hash2(["_view", "_name", "_id"], {"_view": "blog", "_name": $hash2(["_title", "_name"], {"_title": "Mr", "_name": "Bob"}), "_id": "55"}), $hash2(["_view", "_id", "_name"], {"_view": "blog", "_id": nil, "_name": $hash2(["_title"], {"_title": "Mr"})}))), match = ($a[0] == null ? nil : $a[0]), params = ($a[1] == null ? nil : $a[1]);
      self.$expect(match).$to(self.$eq(true));
      self.$expect(params).$to(self.$eq($hash2(["_id"], {"_id": "55"})));
      $a = Opal.to_ary(routes.$send("check_params_match", $hash2(["_view", "_name", "_id"], {"_view": "blog", "_name": $hash2(["_title", "_name"], {"_title": "Mr", "_name": "Bob"}), "_id": "55"}), $hash2(["_view", "_id", "_name"], {"_view": "blog", "_id": nil, "_name": $hash2(["_title"], {"_title": "Phd"})}))), match = ($a[0] == null ? nil : $a[0]), params = ($a[1] == null ? nil : $a[1]);
      self.$expect(match).$to(self.$eq(false));
      $a = Opal.to_ary(routes.$send("check_params_match", $hash2(["_view", "_id", "_extra"], {"_view": "blog", "_id": "55", "_extra": "some value"}), $hash2(["_view", "_id"], {"_view": "blog", "_id": "55"}))), match = ($a[0] == null ? nil : $a[0]), params = ($a[1] == null ? nil : $a[1]);
      self.$expect(match).$to(self.$eq(true));
      return self.$expect(params).$to(self.$eq($hash2(["_extra"], {"_extra": "some value"})));}, TMP_14.$$s = self, TMP_14), $a).call($g, "should test that params match a param matcher");
    ($a = ($h = self).$it, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this, $a, $b, TMP_16, params = nil, path = nil, cleaned_params = nil;
      if (self.routes == null) self.routes = nil;

    params = (($scope.get('Volt')).$$scope.get('Model')).$new($hash2([], {}), $hash2(["persistor"], {"persistor": (((($scope.get('Volt')).$$scope.get('Persistors'))).$$scope.get('Params'))}));
      (($a = ["blog"]), $b = params, $b['$_controller='].apply($b, $a), $a[$a.length-1]);
      (($a = ["5"]), $b = params, $b['$_index='].apply($b, $a), $a[$a.length-1]);
      ($a = ($b = self).$routes, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

      self.$get("/", $hash2(["_controller"], {"_controller": "index"}));
        return self.$get("/blog", $hash2(["_controller"], {"_controller": "blog"}));}, TMP_16.$$s = self, TMP_16), $a).call($b);
      $a = Opal.to_ary(self.routes.$params_to_url(params.$to_h())), path = ($a[0] == null ? nil : $a[0]), cleaned_params = ($a[1] == null ? nil : $a[1]);
      self.$expect(path).$to(self.$eq("/blog"));
      return self.$expect(cleaned_params).$to(self.$eq($hash2(["_index"], {"_index": "5"})));}, TMP_15.$$s = self, TMP_15), $a).call($h, "should match routes");
    return ($a = ($i = self).$it, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this, $a, $b, TMP_18, params = nil;
      if (self.routes == null) self.routes = nil;

    params = (($scope.get('Volt')).$$scope.get('Model')).$new($hash2([], {}), $hash2(["persistor"], {"persistor": (((($scope.get('Volt')).$$scope.get('Persistors'))).$$scope.get('Params'))}));
      ($a = ($b = self).$routes, $a.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this;

      self.$get("/", $hash2(["_controller"], {"_controller": "index"}));
        return self.$get("/blog/{{ _id }}", $hash2(["_controller"], {"_controller": "blog"}));}, TMP_18.$$s = self, TMP_18), $a).call($b);
      return params = self.routes.$url_to_params("/blog/20");}, TMP_17.$$s = self, TMP_17), $a).call($i, "should handle routes with bindings in them");}, TMP_2.$$s = self, TMP_2), $a).call($b, (($scope.get('Volt')).$$scope.get('Routes')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["server/html_parser/sandlebars_parser_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==']);
  if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
    return nil}
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["server/html_parser/view_parser_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==']);
  if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
    return nil}
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["server/rack/asset_files_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$!', '$==']);
  if ((($a = $scope.get('RUBY_PLATFORM')['$==']("opal")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
    } else {
    return nil
  }
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["server/rack/component_paths_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$!', '$==']);
  if ((($a = $scope.get('RUBY_PLATFORM')['$==']("opal")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
    } else {
    return nil
  }
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["server/rack/quite_common_logger_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==']);
  if ($scope.get('RUBY_PLATFORM')['$==']("opal")) {
    return nil}
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["server/rack/rack_requests_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2;

  Opal.add_stubs(['$[]', '$==', '$describe', '$it', '$visit', '$to', '$expect', '$response_headers', '$page', '$include']);
  if ((($a = ($b = $scope.get('ENV')['$[]']("BROWSER"), $b !== false && $b !== nil ?$scope.get('ENV')['$[]']("BROWSER")['$==']("phantom") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
    return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2;

    return ($a = ($b = self).$it, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

      self.$visit("/components/main.js");
        return self.$expect(self.$page().$response_headers()['$[]']("Content-Type")).$to(self.$include("application/javascript"));}, TMP_2.$$s = self, TMP_2), $a).call($b, "should send JS file with JS mimetype")}, TMP_1.$$s = self, TMP_1), $a).call($b, "Rack Requests", $hash2(["type"], {"type": "feature"}))
    } else {
    return nil
  }
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["store/mongo_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  return nil
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["tasks/dispatcher_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$!', '$==']);
  if ((($a = $scope.get('RUBY_PLATFORM')['$==']("opal")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
    } else {
    return nil
  }
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["tasks/live_query_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$!', '$==']);
  if ((($a = $scope.get('RUBY_PLATFORM')['$==']("opal")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
    } else {
    return nil
  }
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["tasks/query_tracker_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$!', '$==']);
  if ((($a = $scope.get('RUBY_PLATFORM')['$==']("opal")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
    } else {
    return nil
  }
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["templates/targets/binding_document/component_node_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$describe', '$before', '$new', '$html=', '$it', '$to', '$expect', '$to_html', '$find_by_binding_id', '$eq']);
  self.$require("volt/page/targets/binding_document/component_node");
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3;

  ($a = ($b = self).$before, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $b, html = nil;
      if (self.component == null) self.component = nil;

    html = "    <!-- $0 -->Before  <!-- $1 -->Inside<!-- $/1 -->  After<!-- $/0 -->\n";
      self.component = (($scope.get('Volt')).$$scope.get('ComponentNode')).$new();
      return (($a = [html]), $b = self.component, $b['$html='].apply($b, $a), $a[$a.length-1]);}, TMP_2.$$s = self, TMP_2), $a).call($b);
    return ($a = ($c = self).$it, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;
      if (self.component == null) self.component = nil;

    self.$expect(self.component.$find_by_binding_id(1).$to_html()).$to(self.$eq("Inside"));
      return self.$expect(self.component.$find_by_binding_id(0).$to_html()).$to(self.$eq("Before  Inside  After"));}, TMP_3.$$s = self, TMP_3), $a).call($c, "should find a component from a binding id");}, TMP_1.$$s = self, TMP_1), $a).call($b, (($scope.get('Volt')).$$scope.get('ComponentNode')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["utils/generic_counting_pool_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$new', '$describe', '$before', '$it', '$find', '$to', '$expect', '$eq', '$to_not', '$instance_variable_get', '$remove']);
  self.$require("volt/utils/generic_counting_pool");
  (function($base, $super) {
    function $CountingPoolTest(){};
    var self = $CountingPoolTest = $klass($base, $super, 'CountingPoolTest', $CountingPoolTest);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$create = function(id, name) {
      var self = this;

      if (name == null) {
        name = nil
      }
      return $scope.get('Object').$new();
    }, nil) && 'create'
  })(self, (($scope.get('Volt')).$$scope.get('GenericCountingPool')));
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3, $d, TMP_4;

  ($a = ($b = self).$before, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

    return self.count_pool = $scope.get('CountingPoolTest').$new()}, TMP_2.$$s = self, TMP_2), $a).call($b);
    ($a = ($c = self).$it, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, item1 = nil, item2 = nil, item3 = nil;
      if (self.count_pool == null) self.count_pool = nil;

    item1 = self.count_pool.$find("one");
      item2 = self.count_pool.$find("one");
      item3 = self.count_pool.$find("two");
      self.$expect(item1).$to(self.$eq(item2));
      return self.$expect(item2).$to_not(self.$eq(item3));}, TMP_3.$$s = self, TMP_3), $a).call($c, "should lookup and retrieve");
    return ($a = ($d = self).$it, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, item1 = nil, item2 = nil;
      if (self.count_pool == null) self.count_pool = nil;

    item1 = self.count_pool.$find("_items", "one");
      item2 = self.count_pool.$find("_items", "one");
      self.$expect(self.count_pool.$instance_variable_get("@pool")).$to_not(self.$eq($hash2([], {})));
      self.count_pool.$remove("_items", "one");
      self.$expect(self.count_pool.$instance_variable_get("@pool")).$to_not(self.$eq($hash2([], {})));
      self.count_pool.$remove("_items", "one");
      return self.$expect(self.count_pool.$instance_variable_get("@pool")).$to(self.$eq($hash2([], {})));}, TMP_4.$$s = self, TMP_4), $a).call($d, "should only remove items when the same number have been removed as have been added");}, TMP_1.$$s = self, TMP_1), $a).call($b, (($scope.get('Volt')).$$scope.get('GenericCountingPool')));
};

/* Generated by Opal 0.7.0.beta4 */
Opal.modules["utils/generic_pool_spec"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$new', '$describe', '$before', '$it', '$lookup', '$to', '$expect', '$instance_variable_get', '$eq', '$object_id', '$remove', '$to_not', '$instance_variable_set', '$lookup_all']);
  self.$require("volt/utils/generic_pool");
  (function($base, $super) {
    function $PoolTest(){};
    var self = $PoolTest = $klass($base, $super, 'PoolTest', $PoolTest);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$create = function(collection, query, other) {
      var self = this;

      if (other == null) {
        other = nil
      }
      return $scope.get('Object').$new();
    }, nil) && 'create'
  })(self, (($scope.get('Volt')).$$scope.get('GenericPool')));
  return ($a = ($b = self).$describe, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, $f, TMP_6, $g, TMP_7;

  ($a = ($b = self).$before, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

    return self.pool_test = $scope.get('PoolTest').$new()}, TMP_2.$$s = self, TMP_2), $a).call($b);
    ($a = ($c = self).$it, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, item1 = nil;
      if (self.pool_test == null) self.pool_test = nil;

    item1 = self.pool_test.$lookup("_items", "one");
      return self.$expect(self.pool_test.$instance_variable_get("@pool")).$to(self.$eq($hash2(["_items"], {"_items": $hash2(["one"], {"one": item1})})));}, TMP_3.$$s = self, TMP_3), $a).call($c, "should insert nested for fast lookup at a path");
    ($a = ($d = self).$it, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, item1 = nil, item2 = nil;
      if (self.pool_test == null) self.pool_test = nil;

    item1 = self.pool_test.$lookup("_items", $hash2([], {}));
      item2 = self.pool_test.$lookup("_items", $hash2([], {}));
      return self.$expect(item1.$object_id()).$to(self.$eq(item2.$object_id()));}, TMP_4.$$s = self, TMP_4), $a).call($d, "should retrieve the same item both times");
    ($a = ($e = self).$it, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, item1 = nil, item2 = nil, item3 = nil;
      if (self.pool_test == null) self.pool_test = nil;

    item1 = self.pool_test.$lookup("_items", $hash2([], {}));
      item2 = self.pool_test.$lookup("_items", $hash2([], {}));
      self.$expect(item1.$object_id()).$to(self.$eq(item2.$object_id()));
      self.pool_test.$remove("_items", $hash2([], {}));
      item3 = self.pool_test.$lookup("_items", $hash2([], {}));
      return self.$expect(item3.$object_id()).$to_not(self.$eq(item2.$object_id()));}, TMP_5.$$s = self, TMP_5), $a).call($e, "should recreate after being removed");
    ($a = ($f = self).$it, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;
      if (self.pool_test == null) self.pool_test = nil;

    self.pool_test.$instance_variable_set("@pool", $hash2(["name", "yep"], {"name": $hash2(["ok"], {"ok": true}), "yep": true}));
      self.pool_test.$remove("name", "ok");
      return self.$expect(self.pool_test.$instance_variable_get("@pool")).$to(self.$eq($hash2(["yep"], {"yep": true})));}, TMP_6.$$s = self, TMP_6), $a).call($f, "should remove all of the way down");
    return ($a = ($g = self).$it, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, item1 = nil, item2 = nil;
      if (self.pool_test == null) self.pool_test = nil;

    item1 = self.pool_test.$lookup("_items", "_some", $hash2(["name"], {"name": "bob"}));
      item2 = self.pool_test.$lookup("_items", "_some", $hash2(["name"], {"name": "jim"}));
      return self.$expect(self.pool_test.$lookup_all("_items", "_some")).$to(self.$eq([item1, item2]));}, TMP_7.$$s = self, TMP_7), $a).call($g, "should lookup all items at a path");}, TMP_1.$$s = self, TMP_1), $a).call($b, (($scope.get('Volt')).$$scope.get('GenericPool')));
};

/* Generated by Opal 0.7.0.beta4 */
(function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$autorun']);
  self.$require("opal");
  self.$require("opal-rspec");
  self.$require("controllers/reactive_accessors_spec");
  self.$require("extra_core/array_spec");
  self.$require("extra_core/blank_spec");
  self.$require("extra_core/class_spec");
  self.$require("extra_core/inflector_spec");
  self.$require("extra_core/logger_spec");
  self.$require("extra_core/object_spec");
  self.$require("extra_core/string_transformations_spec");
  self.$require("extra_core/symbol_spec");
  self.$require("integration/bindings_spec");
  self.$require("integration/cookies_spec");
  self.$require("integration/flash_spec");
  self.$require("integration/list_spec");
  self.$require("integration/templates_spec");
  self.$require("integration/url_spec");
  self.$require("integration/user_spec");
  self.$require("models/field_helpers_spec");
  self.$require("models/model_spec");
  self.$require("models/persistors/params_spec");
  self.$require("models/persistors/store_spec");
  self.$require("models/user_spec");
  self.$require("models/validations_spec");
  self.$require("models/validators/email_validator_spec");
  self.$require("models/validators/format_validator_spec");
  self.$require("models/validators/length_validator_spec");
  self.$require("models/validators/phone_number_validator_spec");
  self.$require("page/bindings/content_binding_spec");
  self.$require("page/bindings/template_binding/view_lookup_for_path_spec");
  self.$require("page/bindings/template_binding_spec");
  self.$require("page/sub_context_spec");
  self.$require("reactive/computation_spec");
  self.$require("reactive/dependency_spec");
  self.$require("reactive/eventable_spec");
  self.$require("reactive/reactive_array_spec");
  self.$require("router/routes_spec");
  self.$require("server/html_parser/sandlebars_parser_spec");
  self.$require("server/html_parser/view_parser_spec");
  self.$require("server/rack/asset_files_spec");
  self.$require("server/rack/component_paths_spec");
  self.$require("server/rack/quite_common_logger_spec");
  self.$require("server/rack/rack_requests_spec");
  self.$require("store/mongo_spec");
  self.$require("tasks/dispatcher_spec");
  self.$require("tasks/live_query_spec");
  self.$require("tasks/query_tracker_spec");
  self.$require("templates/targets/binding_document/component_node_spec");
  self.$require("utils/generic_counting_pool_spec");
  self.$require("utils/generic_pool_spec");
  return (((($scope.get('Opal')).$$scope.get('RSpec'))).$$scope.get('Runner')).$autorun();
})(Opal);

//# sourceMappingURL=sprockets_runner.map
;
